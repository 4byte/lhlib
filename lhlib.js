/**
 * Created by Alex on 23.10.2016.
 */
er_license_manager = {
    public_generate_licence_key : function(public_key_str, days, type) {
        var public_obj = this._xk_decode_nude_str(public_key_str);
        return this._xk_generate_licence_key(public_obj, days, type);
    },

    _xk_encode_object : function(obj) {
        var obj_str = JSON.stringify(obj);

        var base64 = btoa(obj_str);

        var func_revers = function(str) {
            var revers = '';
            for(var i=str.length-1; i>=0; i--) {
                revers += str[i];
            }

            return revers;
        }

        base64 = btoa(func_revers(base64));

        base64 = base64.substring(0, 10) + 'X' + base64.substring(10);

        return base64;
    },

    _xk_decode_nude_str : function(nude_str) {
        base64 = nude_str.substring(0, 10) + nude_str.substring(11);

        base64 = atob(base64);

        var func_revers = function(str) {
            var revers = '';
            for(var i=str.length-1; i>=0; i--) {
                revers += str[i];
            }

            return revers;
        };

        base64 = func_revers(base64);
        obj_str = atob(base64);
        obj = JSON.parse(obj_str);

        return obj;
    },

    _xk_generate_licence_key : function(user_obj, days, type) {
        var gdc = (new Date).getTime();
        //var udc = gdc + days*24*60*60*1000;
        var udc = gdc + days*86400000;

        var obj = {
            dc : user_obj.dc,
            rv : user_obj.rv,
            gdc : (new Date).getTime(),
            grv : er_utils.getRandomInt(0, Number.MAX_SAFE_INTEGER),
            t : type,
            udc : udc
        }

        return this._xk_encode_object(obj);
    },
};
/**
 * Created by erinsasha on 12/04/17.
 */
/**
 *
 * @param options
 * @param options.html_class
 * @param options.tag
 * @param options.is_danger
 * @param options.color
 * @param options.jq_parent
 * @param options.attrs
 * @param options.on_click
 * @constructor
 */
function ERLH_W_Button(options) {
    options.text = options.text ? options.text : '';
    options.html_class = options.html_class ? options.html_class : '';
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.tag = options.tag ? options.tag : 'button';

    this._init_attrs(options.attrs);

    this._build();
}

ERLH_W_Button.prototype = {
    _init_attrs : function(attrs) {
        this.attrs = {
            type : 'text'
        };
        if(attrs) {
            var keys = Object.keys(attrs);
            for(var i= 0, key; i<keys.length; i++) {
                key = keys[i];
                this.attrs[key] = attrs[key];
            }
        }
        if(this.options.disabled) {
            this.attrs['disabled'] = 'disabled';
        } else {
            delete this.attrs['disabled'];
        }
    },
    _build_attrs_string : function() {
        var keys = Object.keys(this.attrs);
        var str = '';

        for(var i= 0, key; i<keys.length; i++) {
            key = keys[i];
            str += ' ' + key + '="'+this.attrs[key]+'"'
        }

        return str;
    },
    
    _build_HTML : function() {
        var html_danger_class = this.options.is_danger ? 'erlh_danger' : '';
        var html_color_class = this.options.color ? 'erlh_color_' + this.options.color : '';
        return '<'+this.tag+' class="ERLH_W_Button '
            +this.options.html_class+' '+html_danger_class+' '+html_color_class+'" '
            +this._build_attrs_string()+'>'
            +this.options.text
            +'</'+this.tag+'>';
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },
    _add_handlers : function() {
        this.jq_main.click(this._on_click.bind(this));
    },

    get_attr : function(name) {
        return this.attrs[name];
    },
    set_attr : function(name, value) {
        this.attrs[name] = value;
        this.jq_main.attr(name, value);
    },

    set_disabled : function(value) {
        if(value)
            this.attrs['disabled'] = 'disabled';
        else
            delete this.attrs['disabled'];

        this.jq_main.prop('disabled', value);
    },
    is_disabled : function() {
        return this.jq_main.is(':disabled');
    },

    show : function() {
        this.jq_main.removeClass('hidden');
    },
    hide : function() {
        this.jq_main.addClass('hidden');
    },

    _on_click : function() {
        if(this.is_disabled())
            return;

        if(this.options.on_click)
            this.options.on_click(this);
    }

};
/**
 * Created by erinsasha on 05/05/17.
 */

/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.fast_values
 * @param options.on_change
 * @constructor
 */
function ERLH_W_Days_Chooser(options) {
    options.text = options.text ? options.text : '';
    options.html_class = options.html_class ? options.html_class : '';
    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Days_Chooser.prototype = {
    _build_HTML : function() {
        var html = '<span class="ERLH_W_Days_Chooser '+this.options.html_class+' ">';

        html += '<span class="input_cont"></span>';
        html += '<span class="buttons_cont"></span>';
        html += '</span>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.jq_buttons_cont = this.jq_main.children('.buttons_cont');

        this.w_input_days = new ERLH_W_Input({
            jq_parent : this.jq_main.children('.input_cont'),
            input_attrs : {
                placeholder : 'Days',
                type : 'number',
                value : this.options.value ? this.options.value : 31,
            },
            on_change : this._on_change.bind(this),
            on_enter : this._on_enter.bind(this),
        });

        this._build_fast_buttons();

        this._add_handlers();
    },
    _build_fast_buttons : function() {
        var fast_values = this.options.fast_values ? this.options.fast_values : [];

        for (var i=0; i<fast_values.length; i++) {
            this._build_fast_button(fast_values[i]);
        }
    },
    _build_fast_button : function(value) {
        return new ERLH_W_Button({
            html_class : 'erlh_fast_btn',
            jq_parent : this.jq_buttons_cont,
            text : value,
            attrs : {'data-val' : value},
            on_click : this._on_fast_button_click.bind(this)
        });
    },

    _add_handlers : function() {

    },

    set : function(val) {
        return this.w_input_days.set(val);
    },
    get : function() {
        return this.w_input_days.get();
    },

    show : function() {
        this.jq_main.removeClass('hidden');
    },
    hide : function() {
        this.jq_main.addClass('hidden');
    },

    _on_change : function() {
        if(this.options.on_change)
            this.options.on_change(this.w_input_days.get());
    },
    _on_enter : function() {
        if(this.options.on_enter)
            this.options.on_enter();
    },
    _on_fast_button_click : function(w_button) {
        var val = w_button.get_attr('data-val');
        this.w_input_days.set(val);
        if(this.options.on_change)
            this.options.on_change(val);
    }

};
/**
 * Created by erinsasha on 21/04/17.
 */
/**
 *
 * @param options
 * @param options.message
 * @param options.on_yes
 * @param options.on_no
 * @param options.on_close
 * @param options.do_not_destroy_on_click
 * @constructor
 */
function ERLH_W_Dialog_Yes_No(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.message = options.message ? options.message : '';

    this._build();
}

ERLH_W_Dialog_Yes_No.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Dialog_Yes_No">';
        html += '</div>';

        return html;
    },

    _build_content : function() {
        var html = '<div class="ERLH_W_Dialog_Yes_No_content">';

        html += '<p class="erlh_dialog_message">'+this.message+'</p>';


        html += '<div class="erlh_buttons_cont">';

        html += '<span class="btn_yes_cont"></span>';
        html += '<span class="btn_no_cont"></span>';

        html += '</div>';


        html += '</div>';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_popup = new ERLH_W_Popup({
            jq_parent : this.jq_main,
            not_closable : true
        });

        var html_Yes_No_content = this._build_content();

        var jq_ERLH_W_Dialog_Yes_No_content = $(html_Yes_No_content).appendTo(this.w_popup.get_user_cont());

        this.jq_message = jq_ERLH_W_Dialog_Yes_No_content.find('.erlh_dialog_message');
        this.jq_btn_yes_cont = jq_ERLH_W_Dialog_Yes_No_content.find('.btn_yes_cont');
        this.jq_btn_no_cont = jq_ERLH_W_Dialog_Yes_No_content.find('.btn_no_cont');

        this._add_handlers();
    },

    _add_handlers : function() {
        this.w_btn_yes = new ERLH_W_Button({
            html_class : 'btn_yes',
            jq_parent : this.jq_btn_yes_cont,
            text : 'Yes',
            on_click : this._on_click_btn_yes.bind(this)
        });

        this.w_btn_no = new ERLH_W_Button({
            html_class : 'btn_no',
            jq_parent : this.jq_btn_no_cont,
            text : 'No',
            on_click : this._on_click_btn_no.bind(this)
        });
    },

    setMessage : function(message) {
        this.message = message;
        this.jq_message.val(message);
    },

    show : function() {
        this.jq_main.removeClass('hidden');
    },
    hide : function() {
        this.jq_main.addClass('hidden');
    },


    remove : function() {
        this.jq_main.remove();
    },

    _on_click_btn_yes : function() {
        this._on_close();
        if(this.options.on_yes) {
            this.options.on_yes();
        }
    },
    _on_click_btn_no : function() {
        this._on_close();
        if(this.options.on_no) {
            this.options.on_no();
        }
    },
    _on_close : function() {
        if(this.options.do_not_destroy_on_click) {
            this.hide();
        } else {
            this.remove()
        }
        if(this.options.on_close) {
            this.options.on_close();
        }
    },
};
/**
 * Created by erinsasha on 12/04/17.
 */

/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.is_required
 * @param options.input_attrs
 * @param options.on_change
 * @param options.on_enter
 * @constructor
 */
function ERLH_W_Input_Email(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;

    var input_attrs = {
        placeholder : 'email',
        type : 'email'
    };
    if(options.input_attrs) {
        var attrs = Object.keys(options.input_attrs);
        for(var i= 0, attr; i<attrs.length; i++) {
            attr = attrs[i];
            input_attrs[attr] = options.input_attrs[attr];
        }
    }

    this.w_input = new ERLH_W_Input({
        html_class : options.html_class,
        jq_parent : this.jq_parent,
        input_attrs : input_attrs,
        on_change : this.on_change.bind(this),
        on_enter : this.on_enter.bind(this)
    });
}

ERLH_W_Input_Email.prototype = {

    set : function(val) {
        this.w_input.set(val);
    },
    get : function() {
        return this.w_input.get();
    },

    is_ok : function() {
        var val = this.get();
        if (!this.options.is_required && val == '') {
            return true;
        } if (erlh_utils.checkMail(val)) {
            return true;
        } else {
            if (val == '' && this.options.is_required) {
                return 'Empty email';
            } else {
                return 'Wrong email';
            }
        }
    },

    on_change : function() {
        var email = this.w_input.get();
        if(!erlh_utils.checkMail(email)) {
            this.w_input.setError('Wrong email format');
        } else {
            if(this.options.on_change) {
                this.options.on_change(email);
            }
        }
    },

    on_enter : function(email) {
        if(erlh_utils.checkMail(email) && this.options.on_enter)
            this.options.on_enter(email);
    },
};
/**
 * Created by erinsasha on 12/04/17.
 */

/**
 *
 * @param options
 * @param options.html_class
 * @param options.is_minified
 * @param options.jq_parent
 * @param options.input_attrs
 * @param options.inline_block
 * @param options.on_change
 * @param options.on_keypress
 * @param options.on_keyup
 * @param options.on_enter
 * @constructor
 */
function ERLH_W_Input(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;

    this._init_input_attrs(options.input_attrs);

    this._build();
}

ERLH_W_Input.prototype = {
    _init_input_attrs : function(input_attrs) {
        this.input_attrs = {
            type : 'text'
        };
        if(input_attrs) {
            var keys = Object.keys(input_attrs);
            for(var i= 0, key; i<keys.length; i++) {
                key = keys[i];
                this.input_attrs[key] = input_attrs[key];
            }
        }
        if(input_attrs.value == null && input_attrs.value !== 0)
            delete this.input_attrs.value;
    },

    _build_HTML : function() {
        var html_class = this.options.html_class ? this.options.html_class : '';

        var html_class_style_minified = this.options.is_minified ? 'erlh_minified' : '';

        var html_class_inline_block = this.options.inline_block  ? 'erlh_inline_block' : '';

        var disabled = this.input_attrs.disabled == 'disabled' ? 'disabled' : '';
        var html = '<span class="ERLH_W_Input '+html_class+' '+disabled+' '+html_class_inline_block+' '+html_class_style_minified+'">';

        //html += '<span class="label"></span>';

        var placeholder = this.input_attrs ? this.input_attrs.placeholder : '';
        html += '<div class="erlh_placeholder">'+placeholder+'</div>';

        html += this._build_HTML_input();

        html += '</span>';

        return html;
    },
    _build_HTML_input : function() {
        return '<input class="ERLH_W_Input_input" '+this._build_input_attrs_string()+'>';
    },
    _build_input_attrs_string : function() {
        var keys = Object.keys(this.input_attrs);
        var str = '';

        for(var i= 0, key; i<keys.length; i++) {
            key = keys[i];
            str += ' ' + key + '="'+this.input_attrs[key]+'"'
        }

        return str;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.jq_input = this.jq_main.find('input');

        this._add_handlers();
    },
    _add_handlers : function() {
        this.jq_main.click(this.on_click.bind(this));

        this.jq_input.change(this.on_change.bind(this));
        this.jq_input.focus(this.on_focus.bind(this));
        this.jq_input.focusout(this.on_focusout.bind(this));
        this.jq_input.keyup(this.on_keyup.bind(this));
        this.jq_input.keypress(this.on_keypress.bind(this));
    },

    set : function(val) {
        if(val === null || "undefined" === typeof val)
            this.jq_input.val('');
        else
            this.jq_input.val(val);
    },
    get : function() {
        var val = this.jq_input.val();
        if(val) {
            if(this.input_attrs.type == 'number') {
                if(val == '')
                    val = null;
                else
                    val = Number(val);
            }
        }
        return val;
    },
    setError : function(message) {
        this.jq_main.addClass('haserror');
        var jq_error = this.jq_main.find('.error_message');
        if(jq_error.length == 0) {
            var html = '<span class="error_message">'+message+'</span>';
            this.jq_main.prepend(html);
        } else {
            jq_error.text(message);
        }
    },
    removeError : function() {
        this.jq_main.removeClass('haserror');
        this.jq_main.find('.error_message').remove();
    },


    show : function() {
        this.jq_main.removeClass('hidden');
    },
    hide : function() {
        this.jq_main.addClass('hidden');
    },

    on_click : function() {
        this.jq_input.focus();
    },
    on_change : function() {
        this.removeError();

        var val = this.jq_input.val();
        if(this.input_attrs.minvalue && val < this.input_attrs.minvalue) {
            val = this.input_attrs.minvalue;
            this.jq_input.val(val);
        } else if (this.input_attrs.maxvalue && val > this.input_attrs.maxvalue) {
            val = this.input_attrs.maxvalue;
            this.jq_input.val(val);
        }

        if(this.options.on_change) {
            this.options.on_change(val)
        }
    },
    on_focus : function() {
        this.jq_main.addClass('focus');
    },
    on_focusout : function() {
        this.jq_main.removeClass('focus');
    },
    on_keyup : function(event) {
        this.removeError();

        if(this.options.on_keyup)
            this.options.on_keyup(this.jq_input.val());
    },
    on_keypress : function(event) {
        if(event.which == 13) {
            //Preesed Enter
            if(this.options.on_enter)
                this.options.on_enter(this.jq_input.val());
        }

        if(this.options.on_keypress)
            this.options.on_keypress(this.jq_input.val());
    },

};
/**
 * Created by erinsasha on 13/04/17.
 */

/**
 *
 * @param options
 * @param options.message
 * @param options.close_in
 * @constructor
 */
function ERLH_W_Message(options) {
    this.options = options;

    this.jq_main = $('#ERLH_W_Message');
    if(this.jq_main.length == 1) {
        var vthis = jQuery.data( this.jq_main[0], 'ERLH_W_Message');
        vthis.show(options.message);
        return vthis;
    }

    this._build();
    jQuery.data( this.jq_main[0], 'ERLH_W_Message', this );

    if(options.close_in > 0) {
        var that = this;
        setTimeout(function() {
            that.jq_main.remove();
        }, options.close_in);
    }
}

ERLH_W_Message.prototype = {
    _build_HTML : function() {
        var html = '<div id="ERLH_W_Message" class="ERLH_W_Message">';

        html += '<div class="ERLH_W_Message_background"></div>';
        html += this._build_HTML_content();

        html += '</div>';
        return html;
    },
    _build_HTML_content : function() {
        var html = '<div class="ERLH_W_Message_content">';
        html += '<p class="ERLH_W_Message_message">'+this.options.message+'</p>';
        html += '<div class="ERLH_W_Message_buttons_cont"></div>';
        html += '</div>';

        return html;
    },

    _build : function() {
        this.jq_main = $(this._build_HTML());
        this.jq_main.appendTo($('body'));

        this._add_handlers();
    },
    _add_handlers : function() {
        var closure_on_close = this.on_close.bind(this);
        this.jq_main.children('.ERLH_W_Message_background').click(closure_on_close);

        this.w_btn_close = new ERLH_W_Button({
            html_class : 'btn_close',
            text : 'Close',
            jq_parent : this.jq_main.find('.ERLH_W_Message_buttons_cont'),
            on_click : closure_on_close
        });

        this.jq_message = this.jq_main.find('.ERLH_W_Message_message');
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function(message) {
        this.jq_message.text(message);
        this.jq_main.removeClass('hidden');
    },

    on_close : function() {
        this.hide();
    },
};
/**
 * Created by erinsasha on 12/04/17.
 */
/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.placeholder
 * @param options.on_change
 * @constructor
 */
function ERLH_W_Input_Password_Double(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;
    options.html_class = options.html_class ? options.html_class : '';
    options.placeholder = options.placeholder ? options.placeholder : 'password';

    this._build();
}

ERLH_W_Input_Password_Double.prototype = {

    _build_HTML : function() {
        return '<div class="ERLH_W_Input_Password_Double '+this.options.html_class+'"></div>';
    },

    _build : function() {
        this.jq_main = $(this._build_HTML());
        this.jq_main.appendTo(this.jq_parent);

        this.w_pass_main = new ERLH_W_Input_Password({
            jq_parent : this.jq_main,
            html_class : 'w_pass_main',
            placeholder : this.options.placeholder,
            on_change : this._on_w_pass_main_change.bind(this),
        });

        this.w_pass_second = new ERLH_W_Input_Password({
            jq_parent : this.jq_main,
            html_class : 'w_pass_second',
            placeholder : 'repeat password',
            on_change : this._on_w_pass_second_change.bind(this),
        });
    },

    get : function() {
        var val_first = this.w_pass_main.get();
        var val_second = this.w_pass_second.get();

        if(val_first == val_second) {
            return val_first;
        } else {
            return '';
        }
    },

    is_ok : function() {
        var val_first = this.w_pass_main.get();
        var val_second = this.w_pass_second.get();

        if(val_first == '') {
            return 'Empty password';
        }

        if(val_second == '') {
            return 'Please, repeat password';
        }

        if(val_first != val_second) {
            return 'Passwords don\'t match';
        }

        return true;
    },

    _on_w_pass_main_change : function(val_first) {
        var val_second = this.w_pass_second.get();
        if(val_second != '' && val_second != val_first) {
            this.w_pass_second.setError('Do not match');
        } else {
            if(val_second == val_first) {
                this.on_change(val_first);
            }
        }
    },
    _on_w_pass_second_change : function(val_second) {
        var val_first = this.w_pass_main.get();
        if(val_second != '' && val_second != val_first) {
            this.w_pass_second.setError('Do not match');
        } else {
            if(val_second == val_first) {
                this.on_change(val_first);
            }
        }
    },

    on_change : function(password) {
        if(this.options.on_change) {
            this.options.on_change(password);
        }
    }
};
/**
 * Created by erinsasha on 12/04/17.
 */

/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.jq_parent
 * @param options.placeholder
 * @param options.on_enter
 * @constructor
 */
function ERLH_W_Input_Password(options) {
    this.options = options;
    options.placeholder = options.placeholder ? options.placeholder : 'password';
    this.jq_parent = options.jq_parent;

    this.w_input = new ERLH_W_Input({
        html_class : options.html_class,
        jq_parent : this.jq_parent,
        input_attrs : {
            placeholder : options.placeholder,
            type : 'password'
        },
        on_change : this.on_change.bind(this),
        on_enter : this.on_enter.bind(this),
    });
}

ERLH_W_Input_Password.prototype = {

    set : function(val) {
        this.w_input.set(val);
    },
    get : function() {
        return this.w_input.get();
    },

    is_ok : function() {
        var val = this.get();

        if(val == '') {
            return 'Empty password';
        }

        return true;
    },

    setError : function(message) {
        this.w_input.setError(message);
    },

    on_change : function() {
        var password = this.w_input.get();
        if(password.length < 1) {
            this.w_input.setError('Set password');
        } else {
            if(this.options.on_change) {
                this.options.on_change(password);
            }
        }
    },
    on_enter : function(password) {
        if(password.length > 0 && this.options.on_enter) {
            this.options.on_enter(password);
        }
    },
};
/**
 * Created by erinsasha on 17/04/17.
 */

/**
 *
 * @param options
 * @param options.jq_parent (default body)
 * @param options.header_text
 * @param options.not_closable
 * @param options.dont_add_close_button
 * @param options.on_close
 *
 * @constructor
 */
function ERLH_W_Popup(options) {
    this.options = options;
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Popup.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Popup">';

        html += '<div class="ERLH_W_Popup_background"></div>';
        html += this._build_HTML_content();

        html += '</div>';
        return html;
    },
    _build_HTML_content : function() {
        var html = '<div class="ERLH_W_Popup_content">';

        if(this.options.header_text && this.options.header_text.length > 0) {
            html += '<p class="ERLH_W_Popup_header">'+this.options.header_text+'</p>';
        }

        html += '<div class="ERLH_W_Popup_user_cont"></div>';

        if(!this.options.dont_add_close_button) {
            html += '<div class="ERLH_W_Popup_buttons_cont"></div>';
        }

        html += '</div>';

        return html;
    },

    _build : function() {
        this.jq_main = $(this._build_HTML());
        this.jq_main.appendTo(this.jq_parent);

        this.jq_user_cont = this.jq_main.find('.ERLH_W_Popup_user_cont');

        this._add_handlers();
    },
    _add_handlers : function() {
        var closure_on_close = this.on_close.bind(this);
        this.jq_main.children('.ERLH_W_Popup_background').click(closure_on_close);

        if(!this.options.dont_add_close_button && !this.options.not_closable) {
            this.w_btn_close = new ERLH_W_Button({
                html_class : 'btn_close',
                text : 'Close',
                jq_parent : this.jq_main.find('.ERLH_W_Popup_buttons_cont'),
                on_click : closure_on_close
            });
        }


        this.jq_message = this.jq_main.find('.ERLH_W_Popup_message');
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function(message) {
        this.jq_message.text(message);
        this.jq_main.removeClass('hidden');
    },
    remove : function() {
        this.jq_main.remove();
    },

    get_user_cont : function() {
        return this.jq_user_cont;
    },

    on_close : function() {
        if(this.options.not_closable)
            return;
        this.hide();

        if(this.options.on_close)
            this.options.on_close();
    },
};
/**
 * Created by erinsasha on 02/09/17.
 */
// ERLH_W_Preloader
/**
 *
 * @param options
 * @param options.jq_parent (default body)
 * @param options.is_closable
 * @param options.is_embedded
 *
 * @constructor
 */
function ERLH_W_Preloader(options) {
    this.options = options;
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.is_closable = options.is_closable;

    this.jq_main = this.jq_parent.children('.ERLH_W_Preloader');
    if(this.jq_main.length > 0) {
        var vthis = jQuery.data( this.jq_main[0], 'ERLH_W_Preloader');
        vthis.is_closable = options.is_closable;
        if(options.is_embedded) {
            vthis.set_as_embedded();
        } else {
            vthis.set_as_fullscreen();
        }
        vthis.show();
        return vthis;
    } else {
        this._process();
    }
}

ERLH_W_Preloader.prototype = {
    _process : function() {
        this._build();
    },
    _build_HTML : function() {
        var html_class_embedded = this.options.is_embedded ? 'erlh_embedded' : '';

        return '<div class="ERLH_W_Preloader show '+html_class_embedded+'"><span class="img"></span></div>';
    },

    _build : function() {
        this.jq_main = $(this._build_HTML());
        this.jq_main.appendTo(this.jq_parent);
        
        this._add_handlers();

        jQuery.data( this.jq_main[0], 'ERLH_W_Preloader', this);
    },
    _add_handlers : function() {
        this.jq_main.click(this._on_click.bind(this));
    },

    hide : function() {
        this.jq_main.removeClass('show');
    },
    show : function() {
        this.jq_main.addClass('show');
    },
    set_as_embedded : function() {
        this.jq_main.addClass('erlh_embedded');
    },
    set_as_fullscreen : function() {
        this.jq_main.removeClass('erlh_embedded');
    },
    remove : function() {
        this.jq_main.remove();
    },
    _on_click : function() {
        if(this.is_closable)
            this.hide();
    },
};
/**
 * Created by erinsasha on 29/04/17.
 */
/**
 * Created by erinsasha on 12/04/17.
 */

/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.label
 * @param options.select_attrs
 * @param options.ids_to_options // id : {id, name, on_selected, on_deselected}
 * @param options.selected_id
 * @param options.need_add_button
 * @param options.on_change
 * @param options.on_click_btn_add
 * @constructor
 */
function ERLH_W_Select(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;

    this._pre_process_ids_to_options(options.ids_to_options);

    this._init_selected_id();
    this._init_select_attrs(options.select_attrs);

    this._build();
}

ERLH_W_Select.prototype = {
    _pre_process_ids_to_options : function(ids_to_options) {
        this.ids_to_options = ids_to_options;
        if(!this.ids_to_options)
            this.ids_to_options = {};

        var keys = Object.keys(this.ids_to_options);
        for(var i= 0, id, option; i<keys.length; i++) {
            id = keys[i];
            option = this.ids_to_options[id];
            if("string" == typeof option || "number" == typeof option) {
                option = {id : id, name : option};
                this.ids_to_options[id] = option;
            } else if("undefined" == typeof option.id || option.id === null) {
                option.id = id;
            }
        }
    },
    _init_selected_id : function() {
        if(this.options.selected_id || this.options.selected_id === 0)
            this.selected_id = this.options.selected_id;
        else {
            var keys = Object.keys(this.ids_to_options);
            if (keys.length > 0)
                this.selected_id = keys[0];
        }
    },
    _init_select_attrs : function(select_attrs) {
        this.select_attrs = {};

        if(select_attrs) {
            var keys = Object.keys(select_attrs);
            for(var i= 0, key; i<keys.length; i++) {
                key = keys[i];
                this.select_attrs[key] = select_attrs[key];
            }
        }
    },

    _build_HTML : function() {
        var html_class = this.options.html_class ? this.options.html_class : '';

        var disabled = this.select_attrs.disabled == 'disabled' ? 'disabled' : '';
        
        var html_need_add_button = this.options.need_add_button ? 'erlh_with_add_btn' : '';
        
        var html = '<span class="ERLH_W_Select '+html_class+' '+disabled+' '+html_need_add_button+'">';

        var label = this.options.label ? this.options.label : '';
        html += '<div class="erlh_label">'+label+'</div>';

        html += this._build_HTML_select();
        html += this._build_HTML_add_button();

        html += '</span>';

        return html;
    },
    _build_HTML_select : function() {
        var html = '<select class="ERLH_W_Select_select" '+this._build_select_attrs_string()+'>';

        var keys = Object.keys(this.ids_to_options);
        for(var i=0; i < keys.length; i++) {
            html += this._build_HTML_option(this.ids_to_options[keys[i]]);
        }

        html += '</select>';
        return html;
    },
    _build_HTML_option : function(option) {
        var selected = option.id == this.selected_id ? 'selected' : '';
        var id = option.id;
        if(typeof id === 'string')
            id = id.replace(/"/g,'&quot;');

        var name = option.name;
        if(typeof name === 'string')
            name = name.replace(/"/g,'&quot;');

        return '<option value="'+id+'" '+selected+'>'+name+'</option>';
    },
    _build_HTML_add_button : function() {
        if(!this.options.need_add_button)
            return '';
        return '<span class="erlh_btn_add">Add</span>';
    },
    _build_select_attrs_string : function() {
        var keys = Object.keys(this.select_attrs);
        var str = '';

        for(var i= 0, key; i<keys.length; i++) {
            key = keys[i];
            str += ' ' + key + '="'+this.select_attrs[key]+'"'
        }

        return str;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.jq_select = this.jq_main.find('select');

        this._add_handlers();
    },
    _add_handlers : function() {
        this.jq_main.click(this.on_click.bind(this));

        this.jq_select.change(this.on_change.bind(this));
        this.jq_select.focus(this.on_focus.bind(this));
        this.jq_select.focusout(this.on_focusout.bind(this));
        
        if(this.options.need_add_button)
            this.jq_main.find('.erlh_btn_add').click(this.on_click_btn_add.bind(this));
    },

    set : function(id) {
        this.jq_select.val(id);
        this.selected_id = id;
    },
    get : function() {
        var jq_option = this.jq_select.find('option:selected');
        var id = jq_option.attr('value');
        id = this.ids_to_options[id].id;
        return id;
    },
    get_option : function() {
        return this.ids_to_options[this.selected_id];
    },
    delete_option : function(id) {
        this._get_jq_select_option(id).remove();
        delete this.ids_to_options[id];

        if (this.selected_id == id)
            this.selected_id = null;
    },
    delete_all_options : function() {
        this.jq_select.find('option').remove();
        this.ids_to_options = {};
        this.selected_id = null;
    },
    add_option : function(option) {
        if(!this.selected_id)
            this.selected_id = option.id;

        this.ids_to_options[option.id] = option;

        var html = this._build_HTML_option(option);
        var jq_option = $(html).appendTo(this.jq_select);
    },
    add_options : function(options) {
        for(var i=0; i<options.length; i++) {
            this.add_option(options[i]);
        }
    },
    add_options_from_asoc_arr : function(options) {
        var keys = Object.keys(options);

        for(var i= 0, key; i<options.length; i++) {
            key = keys[i];
            this.add_option(options[key]);
        }
    },

    setError : function(message) {
        this.jq_main.addClass('haserror');
        var jq_error = this.jq_main.find('.error_message');
        if(jq_error.length == 0) {
            var html = '<span class="error_message">'+message+'</span>';
            this.jq_main.prepend(html);
        } else {
            jq_error.text(message);
        }
    },
    removeError : function() {
        this.jq_main.removeClass('haserror');
        this.jq_main.find('.error_message').remove();
    },

    show : function() {
        this.jq_main.removeClass('hidden');
    },
    hide : function() {
        this.jq_main.addClass('hidden');
    },

    _get_jq_select_option : function(id) {
        return this.jq_select.find('option[value="'+id+'"]');
    },
    _get_jq_selected_option : function() {
        return this.jq_select.find('option:selected');
    },


    on_click : function() {
        this.jq_select.focus();
    },
    on_click_btn_add : function(event) {
        event.stopPropagation();
        if(this.options.on_click_btn_add)
            this.options.on_click_btn_add();
    },
    on_change : function() {
        this.removeError();

        var jq_new_option = this._get_jq_selected_option();
        var new_id = jq_new_option.attr('value');
        var new_option = this.ids_to_options[new_id];

        var old_option = this.ids_to_options[this.selected_id];

        this.selected_id = new_option.id;

        if(old_option.on_deselected)
            old_option.on_deselected(old_option, new_option);
        if(new_option.on_selected)
            new_option.on_selected(new_option, old_option);


        if(this.options.on_change) {
            this.options.on_change(new_option.id, new_option);
        }
    },
    on_focus : function() {
        this.jq_main.addClass('focus');
    },
    on_focusout : function() {
        this.jq_main.removeClass('focus');
    },
};
/**
 * Created by erinsasha on 19/04/17.
 */
/**
 *
 * @param options
 * @param options.jq_parent
 * @param options.html_class
 * @param options.header - array of {id, name, type}
 * @param options.rows
 * @param options.add_filters
 * @param options.add_checkboxes
 * @param options.add_row_numbers
 * @param options.add_handlers_for_rows
 * @param options.select_on_click
 * @param options.multiple_selection
 * @param options.on_row_selected
 * @param options.on_row_deselected
 * @param options.callback_custom_row_class_builder
 *
 * @constructor
 */
function ERLH_W_Table(options) {
    this.options = options;

    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    options.html_class = options.html_class ? options.html_class : '';


    this.header = options.header ? options.header : [];

    this.rows = [];
    this.row_id_to_row = {};

    this.rows_count = 0;
    this.rows_selected = 0;

    this.filter = options.filter ? options.filter : {};

    this._create_header_id_to_column();

    this._build();
}

ERLH_W_Table.prototype = {
    _build_HTML : function() {
        var html = '<table class="ERLH_W_Table '+this.options.html_class+'">';

        html += this._build_HTML_header();
        html += this._build_HTML_body();

        html += '</table>';
        return html;
    },

    _build_HTML_header : function() {
        var html = '<thead>';

        html += this._build_HTML_header_first_row();
        html += this._build_HTML_filters_panel();

        html += '</thead>';

        return html;
    },
    _build_HTML_header_first_row : function() {
        var html = '<tr class="ERLH_W_first">';

        if(this.options.add_checkboxes)
            html += '<th></th>';

        if(this.options.add_row_numbers)
            html += '<th>#</th>';

        for(var i= 0, column; i<this.header.length; i++) {
            column = this.header[i];
            html += '<th data-id="'+column.id+'">'+column.name+'</th>';
        }

        html += '</tr>';

        return html;
    },

    _build_HTML_filters_panel : function() {
        if(!this.options.add_filters)
            return '';

        var html = '<tr class="ERLH_W_table_filters">';

        if(this.options.add_checkboxes)
            html += '<th></th>';

        if(this.options.add_row_numbers)
            html += '<th></th>';

        for(var i= 0, column; i<this.header.length; i++) {
            column = this.header[i];
            html += this._build_HTML_filter_cell(column);
        }

        html += '</tr>';

        return html;
    },
    _build_HTML_filter_cell : function(column) {
        var html = '<th data-id="'+column.id+'">';

        if(!column.type)
            column.type = ERLH_W_Table.types.text;

        switch (column.type) {
            case ERLH_W_Table.types.text :
                html += '<input type="text" data-id="'+column.id+'" placeholder="filter">';
                break;
            case ERLH_W_Table.types.button :
                break;
            case ERLH_W_Table.types.input_text :
                html += '<input type="text" data-id="'+column.id+'" placeholder="filter">';
                break;
            case ERLH_W_Table.types.id_to_name :
                html += this._build_HTML_filter_cell_select(column);
                break;
        }

        html += '</th>';
        return html;
    },
    _build_HTML_filter_cell_select : function(column) {
        var html = '<select data-id="'+column.id+'">';

        html += this._build_HTML_filter_cell_select_option(ERLH_W_Table.static.select_filter_all.id, ERLH_W_Table.static.select_filter_all.name, true);

        var keys = Object.keys(column.map);
        for(var i= 0, value_id; i < keys.length; i++) {
            value_id = keys[i];

            html += this._build_HTML_filter_cell_select_option(value_id, column.map[value_id]);
        }

        html += '</select>';
        return html;
    },
    _build_HTML_filter_cell_select_option : function(id, name, is_selected) {
        var selected = is_selected ? 'selected' : '';
        return '<option value="'+id+'" '+selected+'>'+name+'</option>';
    },

    _build_HTML_body : function() {
        var html = '<tbody>';

        html += this._build_HTML_rows(this.rows);

        html += '</tbody>';

        return html;
    },
    _build_HTML_rows : function(rows, number_from) {
        var html = '';

        for(var i=0; i<rows.length; i++) {
            html += this._build_HTML_row(rows[i], number_from+i);
        }

        return html;
    },
    _build_HTML_row : function(row, row_number) {
        var custom_classes_str;
        if(this.options.callback_custom_row_class_builder)
            custom_classes_str = this.options.callback_custom_row_class_builder(row, row_number);
        else
            custom_classes_str = '';

        var html = '<tr class="ERLH_W_Table_row '+custom_classes_str+'" data-id="'+row.id+'" data-num="'+row_number+'">';

        if(this.options.add_checkboxes)
            html += '<td><input class="ERLH_W_Table_checkbox" type="checkbox"></td>';


        if(this.options.add_row_numbers)
            html += '<td>'+(row_number+1)+'</td>';

        for(var i= 0; i<this.header.length; i++) {
            html += this._build_HTML_cell(row, this.header[i]);
        }

        html += '</tr>';

        return html;
    },

    _build_HTML_cell : function(row, column) {
        var val = row[column.id];

        val = this._build_HTML_cell_value(val, column, row);

        return '<td data-prop="'+column.id+'">'+val+'</td>';
    },
    _build_HTML_cell_value : function(val, column, row) {
        if(
            (
                column.type != ERLH_W_Table.types.input_text
             && column.type != ERLH_W_Table.types.button
             && column.type != ERLH_W_Table.types.callback
            )
            &&   ((!val || val == '') && val !== 0)
        )
            return '';
        switch (column.type) {
            case ERLH_W_Table.types.js_milliseconds :
                val = erlh_utils.datetimeJSToUser(new Date(val), {}); break;
            case ERLH_W_Table.types.server_datetime :
                val = erlh_utils.datetimeServerToUser(val, column.args); break;
            case ERLH_W_Table.types.input_text :
                val = '<input type="text" value="'+ erlh_utils.prepare_string_for_input(val) +'">'; break;
            case ERLH_W_Table.types.textarea_disabled :
                val = '<textarea disabled>'+erlh_utils.prepare_string_for_input(val)+'</textarea>'; break;
            case ERLH_W_Table.types.button :
                val = '<button class="erlh_w_table_button" data-id="'+column.id+'">'+column.cell_text+'</button>'; break;
            case ERLH_W_Table.types.id_to_name :
                val = column.map[val]; break;
            case ERLH_W_Table.types.callback :
                val = column.callback(val, column, row); break;
        }

        /*if(column.type == ERLH_W_Table.types.callback)
            val = column.callback(val, column, row);*/

        return val;
    },

    _build : function() {
        this.jq_main = $(this._build_HTML());
        this.jq_main.appendTo(this.jq_parent);

        this.jq_thead = this.jq_main.children('thead');
        this.jq_filters = this.jq_thead.children('.ERLH_W_table_filters');
        this.jq_tbody = this.jq_main.children('tbody');

        this._add_handlers();
    },
    _add_handlers : function() {
        this.closure_on_checkbox_change = this._on_checkbox_change.bind(this);
        this.closure_on_click_table_button = this._on_click_table_button.bind(this);

        this.jq_filters.find('input').change(this._on_filter_input_change.bind(this));
        this.jq_filters.find('select').change(this._on_filter_select_change.bind(this));

        this._add_handlers_for_rows(this.jq_tbody.children('tr'));
    },
    _add_handlers_for_rows : function(jq_rows) {
        jq_rows.click(this._on_click_row.bind(this));

        if(this.options.add_checkboxes)
            jq_rows.find('.ERLH_W_Table_checkbox').change(this.closure_on_checkbox_change);

        jq_rows.find('.erlh_w_table_button').click(this.closure_on_click_table_button);

        if(this.options.add_handlers_for_rows) {
            this.options.add_handlers_for_rows(jq_rows);
        }
    },

    _create_header_id_to_column : function() {
        this.header_id_to_column = {};

        for(var i= 0, column; i<this.header.length; i++) {
            column = this.header[i];
            this.header_id_to_column[column.id] = column;
        }
    },

    add_rows : function(rows) {
        var html = this._build_HTML_rows(rows, this.rows_count);
        var jq_rows = $(html).appendTo(this.jq_tbody);

        for(var i= 0, row; i<rows.length; i++) {
            row = rows[i];
            this.rows.push(row);
            this.row_id_to_row[row.id] = row;
        }

        this._add_handlers_for_rows(jq_rows);

        this.rows_count += rows.length;
    },
    add_row : function(row) {
        if(this.row_id_to_row[row.id])
            return;

        this.rows.push(row);
        this.row_id_to_row[row.id] = row;

        var html = this._build_HTML_row(row, this.rows_count);
        var jq_row = $(html).appendTo(this.jq_tbody);

        ++this.rows_count;

        this._add_handlers_for_rows(jq_row);
    },

    update_object : function(row_object) {
        this.row_id_to_row[row_object.id] = row_object;
        this.rows[this._find_position_in_rows_array(row_object.id)] = row_object;

        var jq_old_row = this._get_jq_row_by_id(row_object.id);
        var row_number = Number(jq_old_row.attr('data-num'));

        var html_new_row = this._build_HTML_row(row_object, row_number);
        var jq_new_row = $(html_new_row);
        jq_new_row.insertAfter(jq_old_row);

        jq_new_row.attr('class', jq_old_row.attr('class'));

        jq_old_row.remove();
        this._add_handlers_for_rows(jq_new_row);
    },
    _find_position_in_rows_array : function(row_id) {
        for(var i= 0; i<this.rows.length; i++) {
            if(this.rows[i].id == row_id)
                return i;
        }
    },

    delete_all_rows : function() {
        this.jq_tbody.children('tr').remove();

        this.rows = [];
        this.row_id_to_row = {};

        this.rows_count = 0;
        this.rows_selected = 0;
    },
    delete_rows_with_ids : function(ids) {
        var jq_rows = this.jq_tbody.children('tr');
        for(var i= 0, jq_row, index_of, id; i<jq_rows.length; i++) {
            jq_row = $(jq_rows[i]);
            id = jq_row.attr('data-id');

            if(this.row_id_to_row[id]) {
                id = this.row_id_to_row[id].id;
                index_of = ids.indexOf(id);
                if(index_of >=0) {
                    if(jq_row.hasClass('checked')) {
                        --this.rows_selected;
                    }
                    --this.rows_count;
                    this.rows.splice(index_of, 1);
                    delete this.row_id_to_row[id];
                    jq_row.remove();
                }
            }
        }
    },
    delete_row_with_id : function(id) {
        this.delete_rows_with_ids([id]);
    },

    _get_ids_from_jq_rows : function(jq_rows) {
        var ids = [];

        for(var i= 0, jq_row; i<jq_rows.length; i++) {
            jq_row = $(jq_rows[i]);
            ids.push(jq_row.attr('data-id'));
        }

        return ids;
    },

    get_selected_rows_ids : function() {
        var jq_rows = this.jq_tbody.children('tr.checked');
        return this._get_ids_from_jq_rows(jq_rows);
    },
    get_deselected_rows_ids : function() {
        var jq_rows = this.jq_tbody.children('tr:not(.checked)');
        return this._get_ids_from_jq_rows(jq_rows);
    },
    get_selected : function() {
        var jq_row = this.jq_tbody.children('tr.checked');
        if(jq_row.length == 0)
            return null;
        jq_row = jq_row.first();
        var id = jq_row.attr('data-id');
        return this.get_object_by_id(id);
    },

    get_object_by_id : function(id) {
        return this.row_id_to_row[id];
    },
    get_object_by_property : function(property_name, value) {
        var ids = Object.keys(this.row_id_to_row);
        for(var i= 0, obj, id; i<ids.length; i++) {
            id = ids[i];
            obj = this.row_id_to_row[id];
            if(obj[property_name] == value)
                return obj;
        }
    },
    _get_jq_row_by_id : function(id) {
        return this.jq_tbody.children('[data-id='+id+']');
    },

    remove : function() {
        this.jq_main.remove();
    },

    get_count : function() {
        return this.rows_count;
    },
    get_count_selected : function() {
        return this.rows_selected;
    },
    get_count_deselected : function() {
        return this.rows_count - this.rows_selected;
    },

    _filter_rows : function() {
        var jq_rows = this.jq_tbody.children('tr');

        for(var i=0; i<jq_rows.length; i++) {
            this._filter_row($(jq_rows[i]));
        }
    },
    _filter_row : function(jq_row) {
        if(this._is_jq_row_match_filter(jq_row)) {
            jq_row.removeClass('hidden');
        } else {
            jq_row.addClass('hidden');
        }
    },
    _is_jq_row_match_filter : function(jq_row) {
        var object = this.row_id_to_row[jq_row.attr('data-id')];

        for(var i= 0, column; i<this.header.length; i++) {
            column = this.header[i];
            if(!this._is_match_cell_filter(object, column))
                return false;
        }
        return true;
    },
    _is_match_cell_filter : function(object, column) {
        var filter_val = this.filter[column.id];
        if(!filter_val || filter_val == '')
            return true;
        var object_val = object[column.id];

        if(object_val && !isNaN(Number(object_val)))
            object_val = object_val.toString();

        if(column.type == ERLH_W_Table.types.id_to_name)
            return object_val == filter_val;

        if(!object_val
            ||  object_val.toLowerCase().indexOf(filter_val) < 0)
            return false;
        else
            return true;
    },

    _set_jq_row_as_checked : function(jq_row) {
        jq_row.addClass('checked');
        jq_row.children('.ERLH_W_Table_checkbox').prop( "checked", true );
    },
    _set_jq_row_as_unchecked : function(jq_row) {
        jq_row.removeClass('checked');
        jq_row.children('.ERLH_W_Table_checkbox').prop( "checked", false );
    },

    uncheck_all_checked : function() {
        var jq_rows = this.jq_tbody.children('tr.checked');

        this.rows_selected -= jq_rows.length;

        jq_rows.removeClass('checked');
        jq_rows.find('.ERLH_W_Table_checkbox').prop( "checked", false );

        if(this.options.on_row_deselected) {
            for(var i= 0, jq_row, id; i<jq_rows.length; i++) {
                jq_row = $(jq_rows[i]);
                id = jq_row.attr('data-id');

                this.options.on_row_deselected(id, this.row_id_to_row[id]);
            }
        }
    },

    get_header_column_by_id : function(id) {
        for(var i= 0, column; i<this.header.length; i++) {
            column = this.header[i];
            if(column.id == id)
                return column;
        }
        return null;
    },
    _get_jq_row_from_jq_child : function(jq_child) {
        return jq_child.closest('.ERLH_W_Table_row');
    },

    _on_click_row : function(event) {
        jq_row = $(event.currentTarget);

        id = jq_row.attr('data-id');
        if(jq_row.hasClass('checked')) {

            this._set_jq_row_as_unchecked(jq_row);
            if(this.options.on_row_deselected) {
                this.options.on_row_deselected(id, this.row_id_to_row[id]);
            }
        } else {
            if(!this.options.multiple_selection) {
                this.uncheck_all_checked();
            }

            this._set_jq_row_as_checked(jq_row);
            if(this.options.on_row_selected) {
                this.options.on_row_selected(id, this.row_id_to_row[id]);
            }
        }
    },
    _on_click_table_button : function(event) {
        var jq_btn = $(event.currentTarget);
        var column_id = jq_btn.attr('data-id');
        var column = this.get_header_column_by_id(column_id);
        var jq_row = this._get_jq_row_from_jq_child(jq_btn);

        var object_id = jq_row.attr('data-id');
        var object = this.get_object_by_id(object_id);

        if (column.onclick) {
            column.onclick(object);
        }

        event.stopPropagation();
    },
    _on_checkbox_change : function(event) {
        var jq_checkbox = $(event.currentTarget);
        var jq_row = this._get_jq_row_from_jq_child(jq_checkbox);
        if(jq_checkbox.is(':checked')) {
            jq_row.addClass('checked');
            ++this.rows_selected;
        } else {
            jq_row.removeClass('checked');
            --this.rows_selected;
        }

        event.stopPropagation();
    },
    _on_filter_input_change : function(event) {
        var jq_input = $(event.currentTarget);
        var id = jq_input.attr('data-id');
        this.filter[id] = jq_input.val().toLowerCase();

        this._filter_rows();
    },
    _on_filter_select_change : function(event) {
        var jq_select = $(event.currentTarget);
        var column_id = jq_select.attr('data-id');
        var value_id = jq_select.children('option:selected').attr('value');
        if(ERLH_W_Table.static.select_filter_all.id == value_id)
            delete this.filter[column_id];
        else
            this.filter[column_id] = value_id;

        this._filter_rows();
    },
};

ERLH_W_Table.types = {};
ERLH_W_Table.types.text = 'text';
ERLH_W_Table.types.button = 'button';
ERLH_W_Table.types.textarea_disabled = 'textarea_disabled';
ERLH_W_Table.types.id_to_name = 'id_to_name';
ERLH_W_Table.types.input_text = 'input_text';
ERLH_W_Table.types.js_milliseconds = 'js_milliseconds';
ERLH_W_Table.types.server_datetime = 'server_datetime';
ERLH_W_Table.types.callback = 'callback';

ERLH_W_Table.static = {};
ERLH_W_Table.static.select_filter_all = { id : '___ALL___', name : 'ALL'};
/**
 * Created by erinsasha on 16/04/17.
 */

/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.tabs
 * @param options.active_tab_id
 * @param options.on_before_change_tab_by_user  // return false to prevent
 * @param options.on_change_tab_by_user
 * @constructor
 */
function ERLH_W_Tabs(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.tabs = options.tabs;
    if(!this.tabs)
        this.tabs = [];

    this.active_tab_id = options.active_tab_id;
    if(!options.active_tab_id && this.tabs.length > 0) {
        this.active_tab_id = this.tabs[0].id;
    }

    this.tabs_obj = {};

    this.closure_on_tab_click = this.on_tab_click.bind(this);

    this._build();
}

ERLH_W_Tabs.prototype = {
    _build_HTML : function() {
        var html_class = this.options.html_class ? this.options.html_class : '';

        var html = '<span class="ERLH_W_Tabs '+html_class+'">';

        html += this._build_HTML_tabs();

        html += '</span>';

        return html;
    },
    _build_HTML_tabs : function() {
        var html = '';

        for(var i=0; i<this.tabs.length; i++) {
            html += this._build_HTML_tab(this.tabs[i]);
        }

        return html;
    },
    _build_HTML_tab : function(tab) {
        var html_class_active;
        if(this.active_tab_id == tab.id)
            html_class_active = 'set';
        else
            html_class_active = '';

        return '<span class="ERLH_W_tab '+html_class_active+'" data-tab="'+tab.id+'">'+tab.name+'</span>';
    },


    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.add_tabs(this.tabs);

        this._add_handlers();
    },
    _add_handlers : function() {

    },

    add_tabs : function(tabs) {
        for(var i=0; i<tabs.length; i++) {
            this.add_tab(this.tabs[i]);
        }
    },
    add_tab : function(tab) {
        var html = this._build_HTML_tab(tab);
        var jq_tab = $(html).appendTo(this.jq_main);
        jq_tab.click(this.closure_on_tab_click);

        this.tabs_obj[tab.id] = { tab : tab, jq_tab : jq_tab};
    },

    set_active : function(tab_id) {
        if(this.active_tab_id == tab_id)
            return;

        if(this.active_tab_id) {
            var old_tab = this.tabs_obj[this.active_tab_id];
            old_tab.jq_tab.removeClass('set');

            if(old_tab.on_state_changed) {
                old_tab.on_state_changed(false, old_tab);
            }
        }

        var new_tab = this.tabs_obj[tab_id];

        new_tab.jq_tab.addClass('set');
        this.active_tab_id = tab_id;

        if(new_tab.on_state_changed) {
            new_tab.on_state_changed(true, new_tab);
        }
    },
    get_active_tab_id : function() {
        return this.active_tab_id
    },
    get_active_tab : function() {
        if(this.active_tab_id)
            return this.tabs_obj[this.active_tab_id].tab;
        else
            return null;
    },

    add_on_tab_state_changed : function(tab_id, callback) {
        this.tabs_obj[tab_id].on_state_changed = callback;
    },

    on_tab_click : function(event) {
        var jq_tab = $(event.currentTarget);
        if(jq_tab.hasClass('set'))
            return;

        var tab_id = jq_tab.attr('data-tab');

        if(this.options.on_before_change_tab_by_user)
            if(!this.options.on_before_change_tab_by_user(tab_id))
                return;

        this.set_active(tab_id);

        if(this.options.on_change_tab_by_user)
            this.options.on_change_tab_by_user(tab_id);
    },
};
/**
 * Created by erinsasha on 17/04/17.
 */


/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.active_tab_id
 * @param options.tabs
 * @param options.on_before_change_tab_by_user
 * @param options.on_change_tab_by_user
 * @constructor
 */
function ERLH_W_Tabs_And_Conts(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.tabs = options.tabs;
    if(!this.tabs)
        this.tabs = [];

    this.active_tab_id = options.active_tab_id;
    if(!options.active_tab_id && this.tabs.length > 0) {
        this.active_tab_id = this.tabs[0].id;
    }

    this.tabs_id_to_jq_subconts = {};

    this._build();
}

ERLH_W_Tabs_And_Conts.prototype = {
    _build_HTML : function() {
        var html_class = this.options.html_class ? this.options.html_class : '';

        var html = '<div class="ERLH_W_Tabs_And_Conts '+html_class+'">';

        html += '<div class="ERLH_W_Tabs_pannel"></div>';
        html += '<div class="ERLH_W_Tabs_conts"></div>';

        html += '</div>';

        return html;
    },
    _build_HTML_tab_subcont : function(tab) {
        var html_class_active;
        if(this.active_tab_id == tab.id)
            html_class_active = 'set';
        else
            html_class_active = '';

        return '<div class="ERLH_W_tab_subcont '+html_class_active+'" data-tab="'+tab.id+'"></div>';
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);
        
        this.jq_tabs_conts = this.jq_main.children('.ERLH_W_Tabs_conts');

        this.w_tabs = new ERLH_W_Tabs({
            jq_parent : this.jq_main.children('.ERLH_W_Tabs_pannel'),
            active_tab_id : this.active_tab_id,
            on_before_change_tab_by_user : this.options.on_before_change_tab_by_user,
            on_change_tab_by_user : this.on_change_tab_by_user.bind(this)
        });

        this.add_tabs(this.tabs);
    },

    add_tabs : function(tabs) {
        for(var i=0; i<tabs.length; i++) {
            this.add_tab(this.tabs[i]);
        }
    },
    add_tab : function(tab) {
        this.w_tabs.add_tab(tab);
        var html = this._build_HTML_tab_subcont(tab);
        this.tabs_id_to_jq_subconts[tab.id] = $(html).appendTo(this.jq_tabs_conts);
    },

    set_active : function(tab_id) {
        if(this.active_tab_id == tab_id)
            return;

        if(this.active_tab_id)
            this.tabs_id_to_jq_subconts[this.active_tab_id].removeClass('set');
        this.tabs_id_to_jq_subconts[tab_id].addClass('set');
        this.active_tab_id = tab_id;

        this.w_tabs.set_active(tab_id);
    },
    get_active_tab_id : function() {
        return this.active_tab_id
    },
    get_active_tab : function() {
        return this.w_tabs.get_active_tab();
    },

    get_jq_subcont : function(tab_id) {
        return this.tabs_id_to_jq_subconts[tab_id];
    },

    add_on_tab_state_changed : function(tab_id, callback) {
        this.w_tabs.add_on_tab_state_changed(tab_id, callback);
    },

    on_change_tab_by_user : function(tab_id) {
        this.set_active(tab_id);

        if(this.options.on_change_tab_by_user)
            this.options.on_change_tab_by_user(tab_id);
    },

};
/**
 * Created by erinsasha on 23/04/17.
 */


/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_Two_Column(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Two_Column.prototype = {
    _build_HTML : function() {
        var html_class = this.options.html_class ? this.options.html_class : '';

        /*var html = '<div class="ERLH_W_Two_Column '+html_class+'">' +
            '<div class="erlh_column erlh_first"></div>' +
            '<div class="erlh_column_delimiter"></div>' +
            '<div class="erlh_column erlh_second"></div>' +
            '</div>';*/

        var html = '<div class="ERLH_W_Two_Column '+html_class+'">' +
                '<table><tbody><tr>'+

            '<td class="erlh_td_column erlh_td_first"><div class="erlh_column erlh_first"></div></td>' +
            '<td class="erlh_td_column_delimiter"><div class="erlh_column_delimiter"></div></td>' +
            '<td class="erlh_td_column erlh_td_second"><div class="erlh_column erlh_second"></div></td>' +

            '</tr></tbody></table>'+
            '</div>';

        return html;
    },
    

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        /*this.jq_first_column = this.jq_main.children('.erlh_column.erlh_first');
        this.jq_second_column = this.jq_main.children('.erlh_column.erlh_second');*/

        this.jq_first_column = this.jq_main.find('.erlh_column.erlh_first');
        this.jq_second_column = this.jq_main.find('.erlh_column.erlh_second');

        this.jq_td_first_column = this.jq_main.find('.erlh_td_column.erlh_td_first');
        this.jq_td_second_column = this.jq_main.find('.erlh_td_column.erlh_td_second');
        this.jq_delimiter = this.jq_main.find('.erlh_td_column_delimiter');


        this._add_handlers();
    },
    _add_handlers : function() {
        this.jq_delimiter
            .mousedown(this._on_delimiter_mousedown.bind(this));

        this.jq_main
            .mousemove(this._on_delimiter_mousemove.bind(this))
            .mouseup(this._on_delimiter_mouseup.bind(this));
    },

    get_first_column : function() {
        return this.jq_first_column;
    },
    get_second_column : function() {
        return this.jq_second_column;
    },

    _on_delimiter_mousedown : function(event) {
        /*console.log('_on_delimiter_mousedown');
        console.log(event);
        console.log(event.pageX);*/

        this.resize_mode = true;
        this.startX = event.pageX;
        this.jq_main.addClass('resizemode');
    },
    _on_delimiter_mousemove : function(event) {
        if(!this.resize_mode)
            return;

        /*console.log('_on_delimiter_mousemove');
        console.log(event);
        console.log(event.pageX);*/

        var deltaX = this.startX - event.pageX;

        var first_column_stratX = this.jq_td_first_column.position().left;
        var new_width_first = event.pageX- first_column_stratX;

        var second_column_stratX = this.jq_main.position().left + this.jq_main.width();
        var new_width_second = this.jq_main.width() - new_width_first - this.jq_delimiter.width();

        this.jq_td_first_column.css('max-width', new_width_first+'px');
        this.jq_td_first_column.css('width', new_width_first+'px');

        this.jq_td_second_column.css('max-width', new_width_second+'px');
        this.jq_td_second_column.css('width', new_width_second+'px');
    },
    _on_delimiter_mouseup : function(event) {
        /*console.log('_on_delimiter_mouseup');
        console.log(event);
        console.log(event.pageX);*/

        this.resize_mode = false;
        this.jq_main.removeClass('resizemode');
    },
};
/**
 * Created by erinsasha on 01/06/17.
 */

/**
 *
 * @param options
 * @param options.jq_parent
 * @param options.mode_for_organisation
 * @param options.org_id
 * @param options.org
 * @constructor
 */
function ERLH_C_Buy_New_License(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.mode_for_organisation = options.mode_for_organisation;

    this.org_id = options.org_id;
    this.org = options.org;
    if(this.org)
        this.org_id = this.org.id;

    this.process();
}

ERLH_C_Buy_New_License.prototype = {
    process : function() {
        if(this.mode_for_organisation && !this.org_id) {
            this._show_choose_company_popup();
        } else {
            this._show_buy_popup();
        }
    },
    _show_choose_company_popup : function() {
        var w_Organisation_Choose_Popup = new ERLH_W_Organisation_Choose_Popup({
            jq_parent : this.jq_parent,
            user_id : erlh_curr_user.user.id,
            on_chosen : this._callback_on_organisation_chosen.bind(this)
        });
    },
    _show_buy_popup : function() {
        var w_Buy_New_License_Popup = new ERLH_W_Buy_New_License_Popup({
            jq_parent : this.jq_parent,
            org : this.org,
            org_id : this.org_id
        });
    },
    _callback_on_organisation_chosen : function(organisation) {
        this.org_id = organisation.id;
        this.org = organisation;
        this._show_buy_popup();
    }
};
/**
 * Created by erinsasha on 23/05/17.
 */

/**
 *
 * @param options
 * @param options.org_id
 * @param options.org
 * @param options.dont_use_popup
 * @param options.dont_add_header
 * @param options.header
 * @param options.on_close
 * @param options.on_cancel
 * @param options.on_bought
 * @constructor
 */
function ERLH_W_Buy_New_License_Popup(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.org_id = options.org_id;
    this.org = options.org;
    if(this.org)
        this.org_id = this.org.id;

    this._build();
}

ERLH_W_Buy_New_License_Popup.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Buy_New_License_Popup">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        if(!this.options.dont_add_header) {
            var header_text;
            if(this.options.header)
                header_text = this.options.header;
            else {
                header_text = 'Buy new license';
                if(this.org) {
                    header_text += ' for '+this.org.name + ' (ID='+this.org_id+')';
                }
            }

            html += '<p class="erlh_header">'+header_text+'</p>';
        }

        html += this._build_HTML_fields_cont();
        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_fields_cont : function() {
        var html = '<div class="erlh_fields_cont">';

        html += '<div class="select_months_cont"></div>';
        html += '<div class="quantity_cont"></div>';
        html += '<div class="select_method_cont"></div>';
        html += '<p class="total">You will pay : <span class="count"></span> USD</p>';
        html += '<p class="discount hidden">Your discount : <span class="count"></span>%</p>';
        html += '<textarea class="user_message" placeholder="Optional message" maxlength="5000"></textarea>';
        html += '<p class="erlh_warning">Note: You can\'t use single license on multiple computers or installations simultaneously. But single license allows you to manage multiple accounts</p>';

        html += '</div>';
        return html;
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_continue_cont"></span>';

        html += '</div>';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_fields();
        this._build_buttons();

        this._add_handlers();
    },
    _build_fields : function() {
        var jq_fields_cont = this.jq_main_content.children('.erlh_fields_cont');
        this._build_select_months(jq_fields_cont.children('.select_months_cont'));
        this._build_select_method(jq_fields_cont.children('.select_method_cont'));
        this._build_quantity_input(jq_fields_cont.children('.quantity_cont'));

        this.jq_price_total_count = jq_fields_cont.find('.total .count');
        this.jq_discount = jq_fields_cont.find('.discount');
    },
    _build_select_months : function(jq_parent) {
        var ids_to_options = {
            1 : { id : 1, name : '$15 per month (1 month payment $15)'},
            3 : { id : 3, name : '$13.33 per month (3 months payment $40)'},
            6 : { id : 6, name : '$10 per month (6 months payment $60)'},
            12 : { id : 12, name : '$8.25 per month (12 months payment $99)'}
        };

        var select_attrs = {};

        this.w_months_select = new ERLH_W_Select({
            html_class : 'months_select',
            jq_parent : jq_parent,
            label : 'Pricing plan',
            select_attrs : select_attrs,
            ids_to_options : ids_to_options,
            selected_id : 12,
            on_change : this._on_change.bind(this)
        });
    },
    _build_select_method : function(jq_parent) {
        var ids_to_names = ERLH_Order.static.get_method_ids_to_names({
            without_credit_debit_card_via_platron : false,
            without_credit_debit_card_via_paypal : true,
            without_payoneer : true,
            without_webmoney : true,
            without_yandex : true,
        });
        var ids = Object.keys(ids_to_names);

        var ids_to_options = {};
        for(var i= 0, id, option; i<ids.length; i++) {
            id = ids[i];
            option = {
                id : id,
                name : ids_to_names[id]
            };

            ids_to_options[id] = option;
        }

        var select_attrs = {};

        this.w_method_select = new ERLH_W_Select({
            html_class : 'method_select',
            jq_parent : jq_parent,
            label : 'Pay with',
            select_attrs : select_attrs,
            ids_to_options : ids_to_options,
            selected_id : 9,
            on_change : this._on_change.bind(this)
        });
    },
    _build_quantity_input : function(jq_parent) {
        this.w_quantity_input = new ERLH_W_Input({
            html_class : 'months_select',
            jq_parent : jq_parent,
            input_attrs : {
                placeholder : 'Quantity',
                value : 1,
                minvalue : 1,
                type : 'number',
                step : 1,
            },
            on_change : this._on_change.bind(this),
            on_keyup : this._on_change.bind(this)
        })
    },

    _build_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_continue = new ERLH_W_Button({
            html_class : 'btn_continue',
            jq_parent : jq_btns_cont.children('.btn_continue_cont'),
            text : 'Continue',
            disabled : false,
            on_click : this._on_click_btn_continue.bind(this)
        });
    },

    _add_handlers : function() {
        this.jq_user_message = this.jq_main_content.find('.user_message');

        this.calculate_total_and_discount();
    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    calculate_total_and_discount : function() {
        var quantity = this.w_quantity_input.get();
        var discount = ERLH_Order.static.get_discount_for_quantity(quantity);

        var months = this.w_months_select.get();
        var price = ERLH_Order.static.pricing_id_to_amount[months];

        var total_price = price*quantity;
        if(discount > 0) {
            total_price = total_price*(100 - discount) / 100;
            this.jq_discount.removeClass('hidden');
            this.jq_discount.find('.count').text(discount);
        } else {
            this.jq_discount.addClass('hidden');
        }

        this.jq_price_total_count.text(total_price);
    },

    gather_request : function() {
        var order = {
            quantity : this.w_quantity_input.get(),
            months : this.w_months_select.get(),
            method : this.w_method_select.get(),
            message : this.jq_user_message.val(),
        };

        if(this.org_id) {
            order.org_id = this.org_id;
        }

        return {order : order};
    },

    _create_order_and_show_message : function(request) {
        var that = this;


        erlh_server.send(erlh_server.url.order.create, request, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                new ERLH_W_Message({message :
                'You order is #'+response.order.id+'. We will send you PayPal invoice in 8 hours or early. Thank you!'
                });
                that.close();
            }
        });
    },
    _create_platron_card_order_and_show_redirect_popup : function(request) {
        erlh_server.send(erlh_server.url.platron.getorderlink, request, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                new ERLH_W_Platron_Redirect_Popup({
                    url : response.order.invoice_url
                });
            }
        });
    },

    _on_change : function() {
        this.calculate_total_and_discount();
    },

    _on_click_btn_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },

    _on_click_btn_continue : function() {
        var request = this.gather_request();
        if(request.order.method == ERLH_Order.static.method.platron_bank_card) {
            this._create_platron_card_order_and_show_redirect_popup(request);
        } else {
            this._create_order_and_show_message(request);
        }
    },

};
/**
 * Created by erinsasha on 22/05/17.
 */

/**
 *
 * @param options
 * @param options.org_id
 * @param options.dont_use_popup
 * @param options.dont_add_header
 * @param options.header
 * @param options.on_close
 * @param options.on_cancel
 * @param options.on_chosen
 * @constructor
 */
function ERLH_W_Employee_Choose_Popup(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.org_id = options.org_id;

    this._build();
}

ERLH_W_Employee_Choose_Popup.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Employee_Choose_Popup">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        if(!this.options.dont_add_header) {
            var header_text = this.options.header ? this.options.header : 'Choose employee';
            html += '<p class="erlh_header">'+header_text+'</p>';
        }

        html += '<div class="employees_cont"></div>';

        html += '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_ok_cont"></span>';

        html += '</div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this.w_employees_list = new ERLH_W_Employees_List({
            jq_parent : this.jq_main_content.children('.employees_cont'),
            add_secret_key : true,
            on_employee_selected : this._callback_on_employee_selected.bind(this),
            on_employee_deselected : this._callback_on_employee_deselected.bind(this),
        });
        this.w_employees_list.set_org_id(this.org_id);

        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_ok = new ERLH_W_Button({
            html_class : 'btn_ok',
            jq_parent : jq_btns_cont.children('.btn_ok_cont'),
            text : 'Ok',
            disabled : true,
            on_click : this._on_click_btn_ok.bind(this)
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },

    _on_click_btn_ok : function() {
        var employee = this.w_employees_list.get_selected();
        if(this.options.on_chosen)
            this.options.on_chosen(employee);
        this.close();
    },

    _callback_on_employee_selected : function() {
        this.w_btn_ok.set_disabled(false);
    },
    _callback_on_employee_deselected : function() {
        this.w_btn_ok.set_disabled(true);
    },
};
/**
 * Created by erinsasha on 11/06/17.
 */

/**
 *
 * @param options
 * @param options.install
 * @param options.install_id
 * @param options.install_name
 * @param options.user_id
 * @param options.is_current_installation
 * @param options.on_cancel
 * @param options.on_attached
 * @constructor
 */
function ERLH_W_Install_Attach_License(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.install = options.install;
    if(this.install) {
        this.install_id = this.install.id;
        this.install_name = this.install.name;
    } else {
        this.install_id = options.install_id;
        this.install_name = options.install_name;
    }

    this.user_id = options.user_id;
    if (!this.user_id)
        this.user_id = this.install.user_id;
    if (!this.user_id)
        this.user_id = erlh_curr_user.user.id;

    this._build();
}

ERLH_W_Install_Attach_License.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Install_Attach_License">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();

        html += '<div class="licenses_cont"></div>';

        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        if(this.options.dont_add_header)
            return '';

        var header_default = 'Choose license to attach to ';
        if(this.options.is_current_installation)
            header_default += 'current ';
        header_default += 'installation ID='+this.install_id;
        if(this.install_name && this.install_name.length > 0)
            header_default += ' "'+this.install_name+'"';

        var header_text = this.options.header ? this.options.header : header_default;
        return '<p class="erlh_header">'+header_text+'</p>';
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_ok_cont"></span>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_licenses_list();
        this._build_buttons_cont();
    },
    _build_licenses_list : function() {
        this.filter = {
            status_good : true,
            not_expired : true,
            all_available_for_user_id : this.user_id
        };

        this.w_licenses_list = new ERLH_W_Licenses_List({
            jq_parent : this.jq_main_content.children('.licenses_cont'),
            is_personal_header_set : true,
            add_header_filter : true,
            filter : this.filter,
            on_license_selected : this._on_license_selected.bind(this),
            on_license_deselected : this._on_license_deselected.bind(this),
        });

        this.w_licenses_list.set_filter(this.filter);
    },
    _build_buttons_cont : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_ok = new ERLH_W_Button({
            html_class : 'btn_ok',
            jq_parent : jq_btns_cont.children('.btn_ok_cont'),
            text : 'Ok',
            disabled : true,
            on_click : this._on_click_btn_ok.bind(this)
        });
    },

    _server_attach_install : function(license) {
        var that = this;

        ERLH_License.server.attachinstall(
            {
                install_id : this.install_id,
                license_id : license.id
            },
            function(err, server_response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    that._on_server_attached_license(server_response);
                }
            }
        )
    },

    _show_dialog_re_attach_license : function(license) {
        var message = 'The selected license is used on your another computer / installation with ID='+license.install_id;
        if(license.install_name && license.install_name != '')
            message += ' "'+license.install_name+'"';
        message += '.\nRe-attach anyway?';

        var that = this;

        var dialog = new ERLH_W_Dialog_Yes_No({
            message : message,
            on_yes : function() {
                that._server_attach_install(license);
            },
            on_no : null,
        })
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_license_selected : function() {
        this.w_btn_ok.set_disabled(false);
    },
    _on_license_deselected : function() {
        this.w_btn_ok.set_disabled(true);
    },
    _on_click_btn_ok : function() {
        var license = this.w_licenses_list.get_selected();
        if(!license)
            return;

        if(license.install_id) {
            this._show_dialog_re_attach_license(license);
        } else {
            this._server_attach_install(license);
        }
    },
    _on_server_attached_license : function(result) {
        this.remove();
        if(this.options.on_attached) {
            this.options.on_attached(result);
        }
    },
    _on_click_btn_cancel : function() {
        this.remove();
        if(this.options.on_cancel) {
            this.options.on_cancel();
        }
    },
};
/**
 * Created by erinsasha on 16/05/17.
 */

/**
 *
 * @param options
 * @param options.user_id
 * @param options.dont_use_popup
 * @param options.dont_add_header
 * @param options.header
 * @param options.on_close
 * @param options.on_cancel
 * @param options.on_chosen
 * @constructor
 */
function ERLH_W_Install_Choose_Popup(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.user_id = options.user_id ? options.user_id : erlh_curr_user.user.id;

    this._build();
}

ERLH_W_Install_Choose_Popup.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Install_Choose_Popup">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        if(!this.options.dont_add_header) {
            var header_text = this.options.header ? this.options.header : 'Choose installation';
            html += '<p class="erlh_header">'+header_text+'</p>';
        }

        html += '<div class="installs_cont"></div>';

        html += '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_ok_cont"></span>';

        html += '</div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this.w_installs_list = new ERLH_W_Installs_List({
            jq_parent : this.jq_main_content.children('.installs_cont'),
            add_secret_key : true,
            on_install_selected : this._callback_on_install_selected.bind(this),
            on_install_deselected : this._callback_on_install_deselected.bind(this),
        });
        this.w_installs_list.set_user_id(this.user_id);

        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_ok = new ERLH_W_Button({
            html_class : 'btn_ok',
            jq_parent : jq_btns_cont.children('.btn_ok_cont'),
            text : 'Ok',
            disabled : true,
            on_click : this._on_click_btn_ok.bind(this)
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    set_user_id : function(user_id) {

    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },

    _on_click_btn_ok : function() {
        var install = this.w_installs_list.get_selected();
        if(this.options.on_chosen)
            this.options.on_chosen(install);
        this.close();
    },

    _callback_on_install_selected : function() {
        this.w_btn_ok.set_disabled(false);
    },
    _callback_on_install_deselected : function() {
        this.w_btn_ok.set_disabled(true);
    },
};
/**
 * Created by erinsasha on 18/05/17.
 */

/**
 *
 * @param options
 * @param options.user_id
 * @param options.dont_use_popup
 * @param options.dont_add_header
 * @param options.dont_remove
 * @param options.on_close
 * @param options.on_registered
 * @param options.on_cancel
 * @constructor
 */
function ERLH_W_Install_Register(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_Install_Register.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Install_Register">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        if(!this.options.dont_add_header) {
            html += '<p class="erlh_header">Register installation</p>';
        }

        html += '<div class="user_id_cont"></div>';

        html += '<textarea class="secret_key"></textarea>';

        html += '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_register_cont"></span>';

        html += '</div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);
        this.jq_secret_key = this.jq_main_content.find('.secret_key');

        this._build_user_id_input();

        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_register = new ERLH_W_Button({
            html_class : 'btn_register',
            jq_parent : jq_btns_cont.children('.btn_register_cont'),
            text : 'Register',
            on_click : this._on_click_btn_register.bind(this)
        });

        this._add_handlers();
    },

    _build_user_id_input : function() {
        this.w_user_id = new ERLH_W_Input({
            html_class : 'user_id_field',
            jq_parent : this.jq_main_content.children('.user_id_cont'),
            input_attrs : {
                placeholder : 'User ID',
                disabled : 'disabled',
                value : this.user_id
            },
        });
    },

    _add_handlers : function() {

    },

    set_user_id : function(user_id) {
        this.user_id = user_id;
        this.w_user_id.set(user_id);
    },

    remove : function() {
        this.jq_main.remove();
    },

    _check_before_sending : function() {
        var secret_key = this.jq_secret_key.val();
        if(secret_key == '') {
            return 'Secret key is empty';
        }

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        var object = {
            secret_key : erlh_utils.getLongestWord(this.jq_secret_key.val()),
            options : {user_id : this.user_id}
        };

        return object;
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {
        this.close();
    },

    _on_click_btn_register : function() {
        if(!this._check_before_sending_and_show_message())
            return;

        var that = this;

        var request = this._gather_fields();

        erlh_server.send(erlh_server.url.install.register, request, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_registered)
                    that.options.on_registered(response);
                that.close();
                new ERLH_W_Message({ message : "Registered!" });
            }
        });
    },

};
/**
 * Created by erinsasha on 29/04/17.
 */

/**
 *
 * @param options
 * @param options.org_id
 * @param options.employee
 * @param options.edit_mode
 * @param options.dont_use_popup
 * @param options.dont_add_header
 * @param options.dont_remove
 * @param options.on_close
 * @param options.on_created
 * @param options.on_changed
 * @param options.on_deleted
 * @param options.on_left
 * @constructor
 */
function ERLH_W_Employee_Create_Edit(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.employee = options.employee;
    if(options.user)
        this.user = new ERLH_User(options.user);

    this.org_id = options.org_id;

    this.edit_mode = options.edit_mode;

    this._build();
}

ERLH_W_Employee_Create_Edit.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Employee_Create_Edit">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        if(!this.options.dont_add_header) {
            var header_text;
            if(this.employee || this.edit_mode) {
                header_text = 'Edit employee';
            } else {
                header_text = 'Add new employee';
            }
            html += '<p class="erlh_header">'+header_text+'</p>';
        }

        if(this.employee || this.edit_mode) {
            html += '<p class="fullname_cont"></p>';
        }

        html += '<div class="email_cont"></div>';

        html += '<div class="role_cont"></div>';

        if(erlh_curr_user.is_lh_admin())
            html += '<div class="status_cont"></div>';

        html += '<div class="erlh_buttons_cont">';

        if(this.employee || this.edit_mode)
            html += '<span class="btn_delete_cont"></span>';

        html += '<span class="btn_cancel_cont"></span>';

        if(this.employee || this.edit_mode)
            html += '<span class="btn_change_cont"></span>';
        else
            html += '<span class="btn_create_cont"></span>';

        html += '</div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this.jq_fullname_cont = this.jq_main_content.find('.fullname_cont');
        this.set_fullname_field();

        this._build_email_input();
        this._build_role_select();
        this._build_status_select();

        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        if(this.employee || this.edit_mode) {
            this.w_btn_delete = new ERLH_W_Button({
                html_class : 'btn_delete',
                jq_parent : jq_btns_cont.children('.btn_delete_cont'),
                text : 'Delete',
                is_danger : true,
                on_click : this._on_click_btn_delete.bind(this)
            });

            this.w_btn_leave = new ERLH_W_Button({
                html_class : 'btn_leave',
                jq_parent : jq_btns_cont.children('.btn_delete_cont'),
                text : 'Leave organisation',
                is_danger : true,
                on_click : this._on_click_btn_leave.bind(this)
            });

            if(this.employee && this.employee.user_id == erlh_curr_user.user.id) {
                this.w_btn_leave.show();
                this.w_btn_delete.hide();
            } else {
                this.w_btn_delete.show();
                this.w_btn_leave.hide();
            }

            this.w_btn_change = new ERLH_W_Button({
                html_class : 'btn_change',
                jq_parent : jq_btns_cont.children('.btn_change_cont'),
                text : 'Save',
                on_click : this._on_click_btn_change.bind(this)
            });
        } else {
            this.w_btn_create = new ERLH_W_Button({
                html_class : 'btn_create',
                jq_parent : jq_btns_cont.children('.btn_create_cont'),
                text : 'Add',
                on_click : this._on_click_btn_create.bind(this)
            });
        }

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this._add_handlers();
    },

    _build_email_input : function() {
        var input_attrs = {
            placeholder : 'Employee email',
        };

        if(this.employee) {
            if(this.employee.email) {
                input_attrs.value = this.employee.email;
            } else if(this.user) {
                input_attrs.value = this.user.email;
            }

            input_attrs.disabled = 'disabled';
        } else {
            input_attrs.value = '';
        }

        this.w_email = new ERLH_W_Input_Email({
            html_class : 'email_field',
            jq_parent : this.jq_main_content.children('.email_cont'),
            input_attrs : input_attrs,
        });
    },

    _build_role_select : function() {
        var ids_to_options = {};
        var roles = ERLH_Employee.static.roles;
        var keys = Object.keys(roles);

        for (var i= 0, role_name, role_id; i<keys.length; i++) {
            role_name = keys[i];
            role_id = roles[role_name];
            ids_to_options[role_id] = {id : role_id, name : role_name};
        }

        var select_attrs = {};

        this.w_roles_select = new ERLH_W_Select({
            html_class : 'roles_select',
            jq_parent : this.jq_main_content.children('.role_cont'),
            label : 'Role',
            select_attrs : select_attrs,
            ids_to_options : ids_to_options,
            selected_id : this.employee ? this.employee.role : ERLH_Employee.static.roles.member,
            on_change : null
        });
    },

    _build_status_select : function() {
        if(!erlh_curr_user.is_lh_admin() && !this.options.edit_mode && !this.employee)
            return;

        var ids_to_options = {};
        var statuses = ERLH_Employee.static.status;
        var keys = Object.keys(statuses);

        for (var i= 0, status_name, status_id; i<keys.length; i++) {
            status_name = keys[i];
            status_id = statuses[status_name];
            ids_to_options[status_id] = {id : status_id, name : status_name};
        }

        var select_attrs = {};
        if(!erlh_curr_user.is_lh_admin())
            select_attrs.disabled = 'disabled';

        this.w_status_select = new ERLH_W_Select({
            html_class : 'status_select',
            jq_parent : this.jq_main_content.children('.status_cont'),
            label : 'Status',
            select_attrs : select_attrs,
            ids_to_options : ids_to_options,
            selected_id : this.employee ? this.employee.status : ERLH_Employee.static.status.accepted,
            on_change : null
        });
    },

    _add_handlers : function() {

    },

    set_employee : function(employee, user) {
        this.employee = employee;

        this.w_email.set(employee.email);

        if(this.w_status) {
            this.w_status.set(employee.status);
        }

        this.set_fullname_field();

        if(this.employee && this.employee.user_id == erlh_curr_user.user.id) {
            this.w_btn_leave.show();
            this.w_btn_delete.hide();
        } else {
            this.w_btn_delete.show();
            this.w_btn_leave.hide();
        }
    },

    set_fullname_field : function() {
        if(this.employee) {
            this.jq_fullname_cont.removeClass('erlh_hidden');
            var name;

            if(this.user) {
                name = this.user.get_fullname();
            }else if(this.employee.firstname || this.employee.lastname) {
                if(this.employee.firstname) {
                    name = this.employee.firstname;
                    if (this.employee.lastname)
                        name += ' ' + this.employee.lastname;
                } else {
                    name = this.employee.lastname;
                }
            }

            if(name && name != '') {
                this.jq_fullname_cont.val(name);
            } else {
                this.jq_fullname_cont.addClass('erlh_hidden');
            }
        } else {
            this.jq_fullname_cont.addClass('erlh_hidden');
        }
    },

    remove : function() {
        this.jq_main.remove();
    },

    _check_before_sending : function() {
        var email = this.w_email.get();
        if(!this.employee) {
            if(!email || email.length == 0) {
                return 'Empty email';
            }
            var email_check = this.w_email.is_ok();
            if(email_check !== true)
                return email_check;
        }

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        var object = {};

        if(this.employee) {
            var keys = Object.keys(this.employee);
            for(var i= 0, key; i<keys.length; i++) {
                key = keys[i];
                object[key] = this.employee[key];
            }
        }

        if(this.org_id)
            object.org_id = this.org_id;

        object.role = this.w_roles_select.get();
        if(this.w_status_select) {
            object.status = this.w_status_select.get();
        }

        object.email = this.w_email.get();

        return object;
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {
        if(this.employee) {
            this.set_employee(this.employee);
        }
        this.close();
    },
    _on_click_btn_delete : function() {
        new ERLH_W_Dialog_Yes_No({
            message : 'Do you want to delete this employee?',
            jq_parent : this.jq_main,
            on_yes : this._on_click_btn_delete_yes.bind(this)
        })
    },
    _on_click_btn_delete_yes : function() {
        var that = this;

        erlh_server.send(
            erlh_server.url.employee.delete,
            {
                id : this.employee.id,
                user_id : this.employee.user_id,
                org_id : this.employee.org_id,
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    if(that.options.on_deleted)
                        that.options.on_deleted(response.employee);
                    that.set_employee(response.employee);
                    that.close();
                }
        });
    },
    _on_click_btn_create : function() {
        if(!this._check_before_sending_and_show_message())
            return;

        var employee = this._gather_fields();

        var that = this;

        var request = {employee : employee};

        erlh_server.send(erlh_server.url.employee.add, request, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_created)
                    that.options.on_created(response.employee, response.user);
                that.close();
            }
        });
    },
    _on_click_btn_leave : function() {
        new ERLH_W_Dialog_Yes_No({
            message : 'Do you want to leave this organisation?',
            jq_parent : this.jq_main,
            on_yes : this._on_click_btn_leave_yes.bind(this)
        })
    },
    _on_click_btn_leave_yes : function() {
        var that = this;

        erlh_server.send(
            erlh_server.url.employee.acceptdecline,
            {
                org_id : this.employee.org_id,
                status : ERLH_Employee.static.status.declined
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    that.employee.status = ERLH_Employee.static.status.declined;
                    if(that.options.on_left)
                        that.options.on_left(that.employee);
                    that.set_employee(that.employee);
                    that.close();
                }
        });
    },
    _on_click_btn_change : function() {
        if(!this._check_before_sending_and_show_message())
            return;

        var employee = this._gather_fields();

        var that = this;

        erlh_server.send(erlh_server.url.employee.update, {employee : employee}, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_changed)
                    that.options.on_changed(response.employee);
                that.close();
            }
        });
    },
};

/**
 * Created by erinsasha on 22/04/17.
 */
/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.add_secret_key
 * @param options.lh_admin_header_set
 * @param options.on_install_selected
 * @param options.on_install_deselected
 * @constructor
 */
function ERLH_W_Installs_List(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this._build();
}

ERLH_W_Installs_List.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Installs_List">';

        html += '<div class="installs_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var header = [
            {id : 'id', name : 'ID'},
            {id : 'name', name : 'Name', type : ERLH_W_Table.types.input_text},
            {id : 'dc', name : 'Installed', type : ERLH_W_Table.types.js_milliseconds},
        ];

        if(this.options.lh_admin_header_set) {
            header.push({id : 'rv', name : 'rv'});
            header.push({id : 'user_id', name : 'user_id'});
            header.push({id : 'secret_key', name : 'Secret key', type : ERLH_W_Table.types.textarea_disabled});
            header.push({id : 'created', name : 'Created'});
        } else if (this.options.add_secret_key) {
            header.push({id : 'secret_key', name : 'Secret key', type : ERLH_W_Table.types.textarea_disabled});
        }

        this.w_installs_table = new ERLH_W_Table({
            jq_parent : this.jq_main.children('.installs_cont'),
            html_class : 'installs_table',
            header : header,
            rows : [],
            add_filters : true,
            add_handlers_for_rows : this._callback_add_handlers_for_rows.bind(this),
            on_row_selected : this._callback_on_row_selected.bind(this),
            on_row_deselected : this._callback_on_row_deselected.bind(this),
            callback_custom_row_class_builder : this._callback_custom_row_class_builder.bind(this)
        });

        this._add_handlers();
    },

    _request_installs_from_server : function() {
        var that = this;

        erlh_server.send(erlh_server.url.install.list, { user_id : this.user_id }, function(err, response) {
            if(err) {
                ERLH_W_LH_Connector_Server_Error.show_error(err);
            } else {
                that._on_get_installs_from_server(response);
            }
        });
    },

    _add_handlers : function() {
        this._request_current_install_id();

        window.addEventListener(
            'EVENT_PUBLIC_KEY_REGISTERED',
            this._on_EVENT_PUBLIC_KEY_REGISTERED.bind(this),
            false);
    },


    get : function(install_id) {
        return this.w_installs_table.get_object_by_id(install_id);
    },
    get_selected : function() {
        return this.w_installs_table.get_selected();
    },

    update_object : function(install) {
        return this.w_installs_table.update_object(install);
    },

    add_install : function(install) {
        this.w_installs_table.add_row(install);
    },

    refresh : function() {
        this._request_current_install_id();
        this.w_installs_table.delete_all_rows();
        this._request_installs_from_server();
    },

    set_user_id : function(user_id) {
        this.user_id = user_id;
        this._request_installs_from_server();
    },

    _update_install : function(install) {
        var that = this;

        erlh_server.send(erlh_server.url.install.update, { install : install }, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {

            }
        });
    },

    _request_current_install_id : function() {
        var evtL = document.createEvent("CustomEvent");
        evtL.initCustomEvent('ER_EVENT_GET_INSTALL_ID', true, true,
            this._callback_on_get_current_install_id.bind(this));
        window.dispatchEvent(evtL);
    },

    _on_get_installs_from_server : function(response) {
        this.w_installs_table.delete_all_rows();
        this.w_installs_table.add_rows(response.installs);
    },


    _on_install_name_change : function(event) {
        var jq_name_inputs = $(event.currentTarget);
        var val = jq_name_inputs.val();
        var jq_row = jq_name_inputs.closest('tr');
        var install_id = Number(jq_row.attr('data-id'));

        var install = this.get(install_id);
        install.name = val;
        this._update_install(install);
    },
    _on_EVENT_PUBLIC_KEY_REGISTERED : function() {
        this._request_current_install_id();
    },

    _callback_add_handlers_for_rows : function(jq_rows) {
        var jq_name_inputs = jq_rows.find('td[data-prop=name] input');
        jq_name_inputs.change(this._on_install_name_change.bind(this));
    },
    _callback_custom_row_class_builder : function(row, row_number) {
        if(this.current_install_id && this.current_install_id == row.id)
            return 'erlh_current_install';
        else
            return '';
    },

    _callback_on_row_selected : function(id, install) {
        if(this.options.on_install_selected)
            this.options.on_install_selected(id, install);
    },
    _callback_on_row_deselected : function(id, install) {
        if(this.options.on_install_deselected)
            this.options.on_install_deselected(id, install);
    },

    _callback_on_get_current_install_id : function(id) {
        this.current_install_id = id;
        this.w_installs_table._get_jq_row_by_id(id).addClass('erlh_current_install');
    },
};
/**
 * Created by erinsasha on 26/04/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.is_owner_header_set
 * @param options.is_admin_header_set
 * @param options.add_header_filter
 * @param options.on_employee_selected
 * @param options.on_employee_deselected
 * @constructor
 */
function ERLH_W_Employees_List(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this.employees = {};
    this.users = {};

    this._build();
}

ERLH_W_Employees_List.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Employees_List">';

        html += '<div class="employees_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var header = [
            {id : 'id', name : 'ID'}
        ];

        if (this.options.is_admin_header_set) {
            header.push({id : 'user_id', name : 'User ID'});
        }

        header.push({id : 'email', name : 'Email'});
        header.push({id : 'firstname', name : 'First name'});
        header.push({id : 'lastname', name : 'Last name'});
        header.push({id : 'role', name : 'Role', type : ERLH_W_Table.types.id_to_name,
            map : ERLH_Employee.static.get_roles_ids_to_names()
        });

        if (this.options.is_admin_header_set) {
            header.push({id : 'status', name : 'Status', type : ERLH_W_Table.types.id_to_name,
                map : ERLH_Employee.static.get_status_ids_to_names()});
            header.push({id : 'created_by', name : 'Created By'});
            header.push({id : 'created', name : 'Created'});
            header.push({id : 'updated', name : 'Updated'});
            header.push({id : 'btn_edit', name : 'Edit',
                type : ERLH_W_Table.types.button, cell_text : 'Edit',
                onclick : this._callback_on_click_edit_employee.bind(this)
            });
        } else if (this.options.is_owner_header_set) {
            header.push({id : 'btn_edit', name : 'Edit',
                type : ERLH_W_Table.types.button, cell_text : 'Edit',
                onclick : this._callback_on_click_edit_employee.bind(this)
            });
        }

        this.w_employees_table = new ERLH_W_Table({
            jq_parent : this.jq_main.children('.employees_cont'),
            html_class : 'employees_table',
            header : header,
            rows : [],
            add_filters : this.options.add_header_filter,
            add_handlers_for_rows : this._callback_add_handlers_for_rows.bind(this),
            on_row_selected : this._callback_on_row_selected.bind(this),
            on_row_deselected : this._callback_on_row_deselected.bind(this),
        });

        this._add_handlers();
    },

    _request_employees_from_server : function() {
        var that = this;

        erlh_server.send(erlh_server.url.employee.list,
            {
                filter : {
                    user_id : this.user_id,
                    org_id : this.org_id
                },
                options : {
                    is_need_users : true
                }
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    that._on_get_employees_from_server(response);
                }
            });
    },

    _merge_employees_and_users : function(employees, users) {
        var id_to_user = {};
        for(var i= 0, user; i<users.length; i++) {
            user = users[i];
            id_to_user[user.id] = user;
        }

        var eus = [];

        for(var i= 0, employee, eu; i<employees.length; i++) {
            employee = employees[i];
            eus.push(this._merge_employee_and_user(employee, id_to_user[employee.user_id]));
        }

        return eus;
    },
    _merge_employee_and_user : function(employee, user) {
        var eu = {};

        var keys = Object.keys(employee);

        for(var i= 0, key; i<keys.length; i++) {
            key = keys[i];
            eu[key] = employee[key];
        }

        keys = Object.keys(user);
        for(var j=0; j<keys.length; j++) {
            key = keys[j];
            if("undefined" === typeof eu[key])
                eu[key] = user[key];
        }

        return eu;
    },

    _add_handlers : function() {

    },


    get : function(employee_id) {
        return this.w_employees_table.get_object_by_id(employee_id);
    },
    get_employee : function(employee_id) {
        return this.employees[employee_id];
    },
    get_selected : function() {
        return this.w_employees_table.get_selected();
    },
    get_user_by_user_id : function(user_id) {
        return this.users[user_id];
    },
    get_user_by_employee_id : function(employee_id) {
        var employee = this.employees[employee_id];
        if(employee)
            return this.users[employee.user_id];
        else
            return null;
    },

    add_object : function(employee, user) {
        if(this.employees[employee.id]) {
            this.update_object(employee, user)
        } else {
            this.employees[employee.id] = employee;
            this.users[user.id] = user;
            var eu = this._merge_employee_and_user(employee, user);

            this.w_employees_table.add_row(eu);
        }
    },
    update_object : function(employee, user) {
        this.employees[employee.id] = employee;
        this.users[user.id] = user;
        var eu = this._merge_employee_and_user(employee, user);
        return this.w_employees_table.update_object(eu);
    },
    delete_row : function(id) {
        this.w_employees_table.delete_row_with_id(id);
        delete this.employees[id];
    },

    refresh : function() {
        this.w_employees_table.delete_all_rows();
        this._request_employees_from_server();
    },

    set_user_org_id : function(user_id, org_id) {
        this.user_id = user_id;
        this.org_id = org_id;
        this._request_employees_from_server();
    },

    set_user_id : function(user_id) {
        this.user_id = user_id;
        this._request_employees_from_server();
    },
    set_org_id : function(org_id) {
        this.org_id = org_id;
        this._request_employees_from_server();
    },
    get_org_id : function(org_id) {
        return this.org_id;
    },

    _on_get_employees_from_server : function(response) {
        this.w_employees_table.delete_all_rows();

        this.employees = {};
        if(response.employees) {
            for(var i= 0, employee; i<response.employees.length; i++) {
                employee = response.employees[i];
                this.employees[employee.id] = employee;
            }
        }

        this.users = {};
        if(response.users) {
            i = 0;
            for(var user; i<response.users.length; i++) {
                user = response.users[i];
                this.users[user.id] = user;
            }
        }

        var employees_users = this._merge_employees_and_users(response.employees, response.users);

        this.w_employees_table.add_rows(employees_users);
    },

    _callback_add_handlers_for_rows : function(jq_rows) {

    },

    _callback_on_row_selected : function(id, employee) {
        if(this.options.on_employee_selected)
            this.options.on_employee_selected(id, employee);
    },
    _callback_on_row_deselected : function(id, employee) {
        if(this.options.on_employee_deselected)
            this.options.on_employee_deselected(id, employee);
    },

    _callback_on_click_edit_employee : function(employee) {
        var w_employee_create_edit = new ERLH_W_Employee_Create_Edit({
            jq_parent : this.jq_main,
            employee : this.employees[employee.id],
            user : this.users[employee.user_id],
            on_changed : this._callback_on_employee_changed.bind(this),
            on_deleted : this._callback_on_employee_deleted.bind(this),
            on_left : this._callback_on_employee_deleted.bind(this),
        });
    },
    _callback_on_employee_changed : function(employee) {
        this.update_object(employee, this.users[employee.user_id]);
    },
    _callback_on_employee_deleted : function(employee) {
        if(this.options.is_admin_header_set)
            this.update_object(employee, this.users[employee.user_id]);
        else
            this.delete_row(employee.id);
    },
};
/**
 * Created by erinsasha on 27/04/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.is_owner_header_set
 * @param options.is_admin_header_set
 * @param options.add_header_filter
 * @param options.on_employee_selected
 * @param options.on_employee_deselected
 * @constructor
 */
function ERLH_W_Employees_List_With_Control(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this._build();
}

ERLH_W_Employees_List_With_Control.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Employees_List_With_Control">';

        html += '<div class="erlh_buttons_cont erlh_buttons_top_panel">';

        html += '<span class="btn_add_cont"></span>';

        html += '</div>';

        html += '<div class="employee_list_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var jq_btns_cont = this.jq_main.children('.erlh_buttons_cont');

        this.w_btn_add = new ERLH_W_Button({
            html_class : 'btn_add',
            jq_parent : jq_btns_cont.children('.btn_add_cont'),
            text : 'Create',
            on_click : this._on_click_btn_add.bind(this)
        });

        this.w_employees_list = new ERLH_W_Employees_List({
            jq_parent : this.jq_main.children('.employee_list_cont'),
            is_admin_header_set : this.options.is_admin_header_set,
            is_owner_header_set : this.options.is_owner_header_set,
            add_header_filter : this.options.add_header_filter,
            on_employee_selected : this.options.on_employee_selected,
            on_employee_deselected : this.options.on_employee_deselected,
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },


    get : function(employee_id) {
        this.w_employees_list.get(employee_id);
    },


    add_object : function(employee, user) {
        this.w_employees_list.add_object(employee, user);
    },
    update_object : function(employee, user) {
        this.w_employees_list.update_object(employee, user);
    },
    delete_row : function(id) {
        this.w_employees_list.delete_row(id);
    },


    refresh : function() {
        this.w_employees_list.refresh();
    },

    set_user_org_id : function(user_id, org_id) {
        this.w_employees_list.set_user_org_id(user_id, org_id);
    },
    set_user_id : function(user_id) {
        this.w_employees_list.set_user_id(user_id);
    },
    set_org_id : function(org_id) {
        this.w_employees_list.set_org_id(org_id);
    },

    _on_click_btn_add : function() {
        new ERLH_W_Employee_Create_Edit({
            org_id : this.w_employees_list.get_org_id(),
            edit_mode : false,
            on_created : this._callback_on_employee_created.bind(this)
        });
    },

    _callback_on_employee_created : function(employee, user) {
        this.add_object(employee, user);
    },
};
/**
 * Created by erinsasha on 18/05/17.
 */

/**
 *
 * @param options
 * @param options.license
 * @param options.user_id // владелец инсталлов
 * @param options.on_cancel
 * @param options.on_attached
 * @constructor
 */
function ERLH_W_License_Attach_Install(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.license = options.license;

    this.user_id = options.user_id;
    if (!this.user_id)
        this.user_id = this.license.owner_user_id;

    this._process();
}

ERLH_W_License_Attach_Install.prototype = {
    _process : function() {
        var check_result = ERLH_License.static.check_license(this.license);
        if(!check_result.is_valid) {
            new ERLH_W_Message({ message : check_result.message });
            if(this.options.on_cancel)
                this.options.on_cancel();

            return;
        }

        if(this.license.install_id) {
            this._show_dialog_license_already_attached_reattach();
        } else {
            this._show_dialog();
        }
    },
    _show_dialog_license_already_attached_reattach : function() {
        var message = 'This license is already attached to installation with ID = '+this.license.install_id;
        if(this.license.install_name && this.license.install_name != '') {
            message += ' "'+this.license.install_name+'"';
        }
        message += '! Do you want to reattach license to another installation?';

        var w_Dialog_Yes_No = new ERLH_W_Dialog_Yes_No({
            jq_parent : this.jq_parent,
            message : message,
            on_yes : this._show_dialog.bind(this),
            on_no : this._on_cancel.bind(this)
        })
    },

    _show_dialog : function() {
        if(this.user_id) {
            this._show_choose_install();
        } else {
            this._show_choose_employee();
        }
    },

    _show_choose_install : function() {
        var days_left = ERLH_License.static.get_days_left(this.license);
        var header = 'Choose installation for license ID='+this.license.id+' days left '+days_left;

        var w_install_choose_popup = new ERLH_W_Install_Choose_Popup({
            jq_parent : this.jq_parent,
            header : header,
            user_id : this.user_id,
            on_chosen : this._callback_on_install_chosen.bind(this),
            on_cancel : this._on_cancel.bind(this)
        });
    },
    _show_choose_employee : function() {
        var days_left = ERLH_License.static.get_days_left(this.license);
        var header = 'Choose employee for license ID='+this.license.id+' days left '+days_left;

        var w_employee_choose_popup = new ERLH_W_Employee_Choose_Popup({
            jq_parent : this.jq_parent,
            header : header,
            org_id : this.org_id,
            on_chosen : this._callback_on_employee_chosen.bind(this),
            on_cancel : this._on_cancel.bind(this)
        });
    },

    _on_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
    },
    _callback_on_install_chosen : function(install) {
        if(this.license.install_id == install.id) {
            if(this.options.on_cancel)
                this.options.on_cancel();
            return;
        }

        var that = this;

        ERLH_License.server.attachinstall(
            {
                license_id : this.license.id,
                install_id : install.id
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    if(that.options.on_attached)
                        that.options.on_attached(response);
                }
            }
        );
    },
    _callback_on_employee_chosen : function(employee) {
        this.user_id = employee.user_id;
        this._show_choose_install();
    }
};
/**
 * Created by erinsasha on 03/05/17.
 */

/**
 *
 * @param options
 * @param options.owner_org
 * @param options.owner_org_id
 * @param options.owner_user
 * @param options.owner_user_id
 * @param options.edit_mode
 * @param options.dont_use_popup
 * @param options.dont_add_header
 * @param options.dont_remove
 * @param options.on_close
 * @param options.on_created
 * @param options.on_changed
 * @param options.on_deleted
 * @constructor
 */
function ERLH_W_License_Create_Edit(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.license = options.license;

    if(options.owner_user) {
        if(options.owner_user instanceof ERLH_User)
            this.owner_user = options.owner_user;
        else
            this.owner_user = new ERLH_User(options.owner_user);

        this.owner_user_id = this.owner_user.id;
    } else {
        this.owner_user_id = options.owner_user_id;
    }

    if(options.owner_org) {
        this.owner_org = options.owner_org;
        this.owner_org_id = this.owner_org.id;
    } else {
        this.owner_org_id = options.owner_org_id;
    }

    this.edit_mode = options.edit_mode;
    if (!this.edit_mode && this.license)
        this.edit_mode = true;

    this._build();
}

ERLH_W_License_Create_Edit.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_License_Create_Edit">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        if(!this.options.dont_add_header) {
            var header_text;
            if(this.license || this.edit_mode) {
                header_text = 'Edit license';
            } else {
                header_text = 'Add new license';
            }
            html += '<p class="erlh_header">'+header_text+'</p>';
        }

        html += this._build_HTML_fields();
        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_fields : function() {
        var html = '<div class="fields_cont">';

        if(this.edit_mode)
            html += '<div class="id_cont"></div>';

        html += '<div class="owner_user_id_cont"></div>';
        html += '<div class="owner_user_name_cont"></div>';
        html += '<div class="owner_user_email_cont"></div>';

        html += '<div class="owner_org_id_cont"></div>';
        html += '<div class="owner_org_name_cont"></div>';

        html += '<div class="days_cont"></div>';
        html += '<div class="type_cont"></div>';

        if(this.edit_mode) {
            html += '<div class="user_id_cont"></div>';
            html += '<div class="user_name_cont"></div>';
            html += '<div class="user_email_cont"></div>';

            html += '<div class="is_activated_cont"></div>';
            html += '<div class="created_cont"></div>';
            html += '<div class="activated_cont"></div>';
            html += '<div class="status_cont"></div>';
            html += '<div class="source_cont"></div>';
            html += '<div class="payment_id_cont"></div>';

            html += '<div class="install_id_cont"></div>';
            html += '<div class="install_name_cont"></div>';
            html += '<div class="license_key_id"></div>';
        }

        html += '</div>';
        return html;
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        if(this.license || this.edit_mode)
            html += '<span class="btn_delete_cont"></span>';

        html += '<span class="btn_cancel_cont"></span>';

        if(this.license || this.edit_mode)
            html += '<span class="btn_change_cont"></span>';
        else
            html += '<span class="btn_create_cont"></span>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_input_fields();

        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        if(this.license || this.edit_mode) {
            this.w_btn_delete = new ERLH_W_Button({
                html_class : 'btn_delete',
                jq_parent : jq_btns_cont.children('.btn_delete_cont'),
                text : 'Delete',
                is_danger : true,
                on_click : this._on_click_btn_delete.bind(this)
            });

            this.w_btn_change = new ERLH_W_Button({
                html_class : 'btn_change',
                jq_parent : jq_btns_cont.children('.btn_change_cont'),
                text : 'Save',
                on_click : this._on_click_btn_change.bind(this)
            });
        } else {
            this.w_btn_create = new ERLH_W_Button({
                html_class : 'btn_create',
                jq_parent : jq_btns_cont.children('.btn_create_cont'),
                text : 'Add',
                on_click : this._on_click_btn_create.bind(this)
            });
        }

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this._add_handlers();
    },
    _build_input_fields : function() {
        this.jq_fields_cont = this.jq_main_content.children('.fields_cont');

        this._build_id_input(this.jq_fields_cont);

        if(this.edit_mode || !this.owner_org_id) {
            this._build_owner_user_id_input(this.jq_fields_cont);
            this._build_owner_user_email_input(this.jq_fields_cont);
            this._build_owner_user_name_input(this.jq_fields_cont);
        }

        if(this.edit_mode || !this.owner_user_id) {
            this._build_owner_org_id_input(this.jq_fields_cont);
            this._build_owner_org_name_input(this.jq_fields_cont);
        }

        this._build_days_input(this.jq_fields_cont);
        this._build_type_select(this.jq_fields_cont);

        this._build_user_id_input(this.jq_fields_cont);
        this._build_user_email_input(this.jq_fields_cont);
        this._build_user_name_input(this.jq_fields_cont);

        this._build_is_activated_select(this.jq_fields_cont);
        this._build_status_select(this.jq_fields_cont);
        this._build_source_select(this.jq_fields_cont);
        this._build_payment_id_input(this.jq_fields_cont);

        this._build_install_id_input(this.jq_fields_cont);
        this._build_install_name_input(this.jq_fields_cont);
        this._build_license_key_id_input(this.jq_fields_cont);

    },

    _build_id_input : function(jq_parent) {
        if(!this.edit_mode)
            return;

        this.w_id_input = new ERLH_W_Input({
            html_class : 'id_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : this.license ? this.license.id : '',
                type : 'number',
                disabled : 'disabled',
                placeholder : 'License ID',
            }
        });
    },

    _build_owner_user_id_input : function(jq_parent) {
        var value;

        if(this.license && this.license.owner_user_id)
            value = this.license.owner_user_id;
        else if(this.owner_user_id)
            value = this.owner_user_id;

        this.w_owner_user_id_input = new ERLH_W_Input({
            html_class : 'owner_user_id_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : value,
                type : 'number',
                placeholder : 'Owner User ID',
            }
        });
    },
    _build_owner_user_email_input : function(jq_parent) {
        var value;

        if(this.license && this.license.owner_user_email)
            value = this.license.owner_user_email;
        else if(this.owner_user)
            value = this.owner_user.email;

        this.w_owner_user_email_input = new ERLH_W_Input_Email({
            html_class : 'owner_user_email_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : value,
                disabled : 'disabled',
                placeholder : 'Owner Email',
            }
        });
    },
    _build_owner_user_name_input : function(jq_parent) {
        var value;

        if(this.license && this.license.owner_user_name)
            value = this.license.owner_user_name;
        else if(this.owner_user)
            value = this.owner_user.get_fullname();

        this.w_owner_user_name_input = new ERLH_W_Input({
            html_class : 'owner_user_name_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : value,
                type : 'text',
                disabled : 'disabled',
                placeholder : 'Owner Name',
            }
        });
    },

    _build_owner_org_id_input : function(jq_parent) {
        var value;

        if(this.license && this.license.owner_org_id)
            value = this.license.owner_org_id;
        else if(this.owner_org_id)
            value = this.owner_org_id;

        this.w_owner_org_id_input = new ERLH_W_Input({
            html_class : 'owner_org_id_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : value,
                type : 'number',
                placeholder : 'Organisation ID',
            }
        });
    },
    _build_owner_org_name_input : function(jq_parent) {
        var value;

        if(this.license && this.license.owner_org_name)
            value = this.license.owner_org_name;
        else if(this.owner_org)
            value = this.owner_org.name;

        this.w_owner_org_name_input = new ERLH_W_Input({
            html_class : 'owner_org_name_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : value,
                type : 'text',
                disabled : 'disabled',
                placeholder : 'Organisation',
            }
        });
    },

    _build_days_input : function(jq_parent) {
        this.w_days_input = new ERLH_W_Days_Chooser({
            jq_parent : jq_parent,
            value : this.license ? this.license.days : 31,
            fast_values : [7, 31, 93, 183, 366]
        });
    },
    _build_type_select : function(jq_parent) {
        var select_attrs = {};

        this.w_type_select = new ERLH_W_Select({
            html_class : 'type_select',
            jq_parent : jq_parent,
            label : 'Type',
            select_attrs : select_attrs,
            ids_to_options : ERLH_License.static.get_type_ids_to_names(),
            selected_id : this.license ? this.license.type : null,
            on_change : null
        });
    },

    _build_user_id_input : function(jq_parent) {
        if(!this.edit_mode)
            return;

        this.w_user_id_input = new ERLH_W_Input({
            html_class : 'user_id_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : this.license ? this.license.user_id : '',
                type : 'number',
                placeholder : 'User ID',
            }
        });
    },
    _build_user_email_input : function(jq_parent) {
        if(!this.edit_mode)
            return;

        this.w_user_email_input = new ERLH_W_Input_Email({
            html_class : 'user_email_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : this.license ? this.license.user_email : '',
                disabled : 'disabled',
                placeholder : 'User Email',
            }
        });
    },
    _build_user_name_input : function(jq_parent) {
        if(!this.edit_mode)
            return;

        this.w_user_name_input = new ERLH_W_Input({
            html_class : 'user_name_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : this.license ? this.license.user_name : '',
                type : 'text',
                disabled : 'disabled',
                placeholder : 'User Name',
            }
        });
    },

    _build_is_activated_select : function(jq_parent) {
        if(!this.edit_mode)
            return;

        var select_attrs = {};

        this.w_is_activated_select = new ERLH_W_Select({
            html_class : 'is_activated_select',
            jq_parent : jq_parent,
            label : 'Is Activated',
            select_attrs : select_attrs,
            ids_to_options : ERLH_License.static.get_is_activated_ids_to_names(),
            selected_id : this.license ? this.license.is_activated : null,
            on_change : null
        });
    },
    _build_status_select : function(jq_parent) {
        if(!this.edit_mode)
            return;

        var select_attrs = {};

        this.w_status_select = new ERLH_W_Select({
            html_class : 'status_select',
            jq_parent : jq_parent,
            label : 'Status',
            select_attrs : select_attrs,
            ids_to_options : ERLH_License.static.get_status_ids_to_names(),
            selected_id : this.license ? this.license.status : null,
            on_change : null
        });
    },
    _build_source_select : function(jq_parent) {
        if(!this.edit_mode)
            return;

        var select_attrs = {};

        this.w_source_select = new ERLH_W_Select({
            html_class : 'source_select',
            jq_parent : jq_parent,
            label : 'Source',
            select_attrs : select_attrs,
            ids_to_options : ERLH_License.static.get_source_ids_to_names(),
            selected_id : this.license ? this.license.source : null,
            on_change : null
        });
    },
    _build_payment_id_input : function(jq_parent) {
        this.w_payment_id_input = new ERLH_W_Input({
            html_class : 'payment_id_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : this.license ? this.license.payment_id : '',
                type : 'number',
                placeholder : 'Payment ID',
            }
        });
    },

    _build_install_id_input : function(jq_parent) {
        if(!this.edit_mode)
            return;

        this.w_install_id_input = new ERLH_W_Input({
            html_class : 'install_id_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : this.license ? this.license.install_id : '',
                type : 'number',
                placeholder : 'Install ID',
            }
        });
    },
    _build_install_name_input : function(jq_parent) {
        if(!this.edit_mode)
            return;

        this.w_install_name_input = new ERLH_W_Input({
            html_class : 'install_name_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : this.license ? this.license.install_name : '',
                type : 'text',
                disabled : 'disabled',
                placeholder : 'Install Name',
            }
        });
    },
    _build_license_key_id_input : function(jq_parent) {
        if(!this.edit_mode)
            return;

        this.w_license_key_id_input = new ERLH_W_Input({
            html_class : 'license_key_id_field',
            jq_parent : jq_parent,
            input_attrs : {
                value : this.license ? this.license.license_key_id : '',
                type : 'number',
                placeholder : 'License Key ID',
            }
        });
    },


    _add_handlers : function() {

    },

    set_license_merged : function(license) {
        this.license = license;

        this.w_id_input.set(license.id);

        this.w_owner_user_id_input.set(license.owner_user_id);
        this.w_owner_user_email_input.set(license.owner_user_email);
        this.w_owner_user_name_input.set(license.owner_user_name);

        this.w_owner_org_id_input.set(license.owner_org_id);
        this.w_owner_org_name_input.set(license.owner_org_name);

        this.w_days_input.set(license.days);

        this.w_user_id_input.set(license.user_id);
        this.w_user_email_input.set(license.user_email);
        this.w_user_name_input.set(license.user_name);

        this.w_is_activated_select.set(license.is_activated);
        this.w_status_select.set(license.status);
        this.w_source_select.set(license.source);

        this.w_payment_id_input.set(license.payment_id);

        this.w_install_id_input.set(license.install_id);
        this.w_install_name_input.set(license.install_name);
        this.w_license_key_id_input.set(license.license_key_id);
    },

    remove : function() {
        this.jq_main.remove();
    },

    _check_before_sending : function() {


        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        var object = {};

        if(this.license) {
            var keys = Object.keys(this.license);
            for(var i= 0, key; i<keys.length; i++) {
                key = keys[i];
                object[key] = this.license[key];
            }
        }

        if(this.w_owner_user_id_input) {
            object.owner_user_id = this.w_owner_user_id_input.get();
        }

        if(this.w_owner_org_id_input) {
            object.owner_org_id = this.w_owner_org_id_input.get();
        }


        object.days = this.w_days_input.get();
        object.type = this.w_type_select.get();

        if(this.w_user_id_input)
            object.user_id = this.w_user_id_input.get();

        if(this.w_is_activated_select)
            object.is_activated = this.w_is_activated_select.get();

        if(this.w_is_activated_select)
            object.is_activated = this.w_is_activated_select.get();

        if(this.w_status_select)
            object.status = this.w_status_select.get();

        if(this.w_source_select)
            object.source = this.w_source_select.get();

        if(this.w_payment_id_input)
            object.payment_id = this.w_payment_id_input.get();

        if(this.w_install_id_input)
            object.install_id = this.w_install_id_input.get();

        if(this.w_license_key_id_input)
            object.license_key_id = this.w_license_key_id_input.get();

        return object;
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {

        this.close();
    },
    _on_click_btn_delete : function() {
        new ERLH_W_Dialog_Yes_No({
            message : 'Do you want to delete this license?',
            jq_parent : this.jq_main,
            on_yes : this._on_click_btn_delete_yes.bind(this)
        })
    },
    _on_click_btn_delete_yes : function() {
        var that = this;

        erlh_server.send(
            erlh_server.url.license.delete,
            {
                license_id : this.license.id
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    that.license.status = ERLH_License.static.status.deleted;
                    if(that.options.on_deleted)
                        that.options.on_deleted(that.license);
                    that.close();
                }
            });
    },
    _on_click_btn_create : function() {
        if(!this._check_before_sending_and_show_message())
            return;

        var license = this._gather_fields();

        var that = this;

        var request = {license : license};

        erlh_server.send(erlh_server.url.license.create, request, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_created)
                    that.options.on_created(response.license, response.user);
                that.close();
            }
        });
    },

    _on_click_btn_change : function() {
        if(!this._check_before_sending_and_show_message())
            return;

        var license = this._gather_fields();

        var that = this;

        erlh_server.send(erlh_server.url.license.update, {license : license}, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_changed)
                    that.options.on_changed(response.license);
                that.close();
            }
        });
    },
};

/**
 * Created by erinsasha on 13/08/17.
 */

/**
 *
 * @param options
 * @param options.order_id
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_LH_Connector_Server_Error(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.options = options;
    this.order_id = options.order_id;
    this.jq_parent = options.jq_parent;

    this._process();
}

ERLH_W_LH_Connector_Server_Error.prototype = {
    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html = '<div class="ERLH_W_LH_Connector_Server_Error">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();

        html += this._build_HTML_instruction_cont();
        html += '<div class="er_order_details_cont"></div>';

        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        if(this.options.dont_add_header)
            return '';
        return '<p class="erlh_header">Server Communication Error - need LH Connector</p>';
    },
    _build_HTML_instruction_cont : function() {
        var html = '<div class="erlh_instruction_cont">';

        html += '<p class="er_main_message">Please, install <b><a href="https://chrome.google.com/webstore/detail/lh-connector/ooicjhkkfdijjlnfopfakboefcmifdlh">LH Connector</a></b> extension to fix this problem and then open LinkedIn from a new Chrome tab</p>';
        html += '<p class="er_lh_link"><a href="https://chrome.google.com/webstore/detail/lh-connector/ooicjhkkfdijjlnfopfakboefcmifdlh">https://chrome.google.com/webstore/detail/lh-connector/ooicjhkkfdijjlnfopfakboefcmifdlh</a></p>';
        html += '<p class="er_note_message"><b><a href="https://chrome.google.com/webstore/detail/lh-connector/ooicjhkkfdijjlnfopfakboefcmifdlh">LH Connector</a></b> is our free add-on for Linked Helper</p>';

        html += '</div>';

        return html;
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_close_cont"></span>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_buttons_cont();
    },
    _build_buttons_cont : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_close = new ERLH_W_Button({
            html_class : 'btn_close',
            jq_parent : jq_btns_cont.children('.btn_close_cont'),
            text : 'Close',
            on_click : this._on_click_btn_close.bind(this)
        });
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_click_btn_close : function() {
        this.remove();
        if(this.options.on_cancel) {
            this.options.on_cancel();
        }
    },
    _on_get_order_detail_from_server : function(response) {
        if(response.orders.length == 0) {
            new ERLH_W_Message({ message : 'Order with ID='+this.order_id+' not found!' });
            return;
        }

        this.order = response.orders[0];
        this.organisation = response.organisations.length > 0 ? response.organisations[0] : null;

        this.users = {};
        for(i=0; i<response.users.length; i++) {
            user = new ERLH_User(response.users[i]);
            this.users[user.id] = user;
        }

        this._build();
    }
};

ERLH_W_LH_Connector_Server_Error.is_lh_connector_case = function(err) {
    if(window.location.href.indexOf('linkedin.com') < 0)
        return false;
    if(!err)
        return false;

    return err.response_status === 0;
};

ERLH_W_LH_Connector_Server_Error.show_error = function(err) {
    if(ERLH_W_LH_Connector_Server_Error.is_lh_connector_case(err)) {
        new ERLH_W_LH_Connector_Server_Error({});
    } else {
        new ERLH_W_Message({ message : err.message });
    }
};
/**
 * Created by erinsasha on 19/05/17.
 */

/**
 *
 * @param options
 * @param options.license
 * @param options.on_cancel
 * @param options.on_detached
 * @constructor
 */
function ERLH_W_License_Detach_Install(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.license = options.license;

    this._process();
}

ERLH_W_License_Detach_Install.prototype = {
    _process : function() {
        if(!this.license.install_id) {
            new ERLH_W_Message({ message : 'License is not attached to any installations' });
            if(this.options.on_cancel)
                this.options.on_cancel();

            return;
        }

        var message = 'Do you want to detach license from the installation with ID='+this.license.install_id;
        if(this.license.install_name) {
            message += ' name="'+this.license.install_name+'"';
        }
        message += ' ?';

        var w_Dialog_Yes_No = new ERLH_W_Dialog_Yes_No({
            jq_parent : this.jq_parent,
            message : message,
            on_yes : this._detach_install.bind(this),
            on_no : this._on_cancel.bind(this)
        })
    },
    _detach_install : function() {
        var that = this;

        erlh_server.send(erlh_server.url.license.detachinstall, {license_id : this.license.id}, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_detached)
                    that.options.on_detached(response.license);
            }
        });
    },

    _on_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
    },

};
/**
 * Created by erinsasha on 30/04/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.is_owner_header_set
 * @param options.is_admin_header_set
 * @param options.add_header_filter
 * @param options.on_license_key_selected
 * @param options.on_license_key_deselected
 * @constructor
 */
function ERLH_W_License_Keys_List(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this.license_keys = {};
    this.users = {};

    this._build();
}

ERLH_W_License_Keys_List.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_License_Keys_List">';

        html += '<div class="license_keys_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var header = [
            {id : 'id', name : 'ID'}
        ];

        if (this.options.is_admin_header_set) {
            header.push({id : 'status', name : 'Status', type : ERLH_W_Table.types.id_to_name,
                map : ERLH_License_Key.static.get_status_ids_to_names()});
            header.push({id : 'source', name : 'Source', type : ERLH_W_Table.types.id_to_name,
                map : ERLH_License_Key.static.get_source_ids_to_names()});
            header.push({id : 'install_id', name : 'Install'});
            header.push({id : 'dc', name : 'dc'});
            header.push({id : 'dc_sql', name : 'dc_sql'});
            header.push({id : 'rv', name : 'rv'});
            header.push({id : 'gdc', name : 'gdc'});
            header.push({id : 'gdc_sql', name : 'gdc_sql'});
            header.push({id : 'udc', name : 'udc'});
            header.push({id : 'udc', name : 'udc', type : ERLH_W_Table.types.js_milliseconds});
            header.push({id : 't', name : 'Type'});

            header.push({id : 'created_by', name : 'Created By'});
            header.push({id : 'created', name : 'Created'});
            header.push({id : 'updated', name : 'Updated'});
            header.push({id : 'btn_edit', name : 'Edit',
                type : ERLH_W_Table.types.button, cell_text : 'Edit',
                onclick : this._callback_on_click_edit_license_key.bind(this)
            });
            header.push({id : 'key', name : 'Key'});
        } else if (this.options.is_owner_header_set) {

        }

        this.w_license_keys_table = new ERLH_W_Table({
            jq_parent : this.jq_main.children('.license_keys_cont'),
            html_class : 'license_keys_table',
            header : header,
            rows : [],
            add_filters : this.options.add_header_filter,
            add_handlers_for_rows : this._callback_add_handlers_for_rows.bind(this),
            on_row_selected : this._callback_on_row_selected.bind(this),
            on_row_deselected : this._callback_on_row_deselected.bind(this),
        });

        this._add_handlers();
    },

    _request_license_keys_from_server : function() {
        var that = this;

        erlh_server.send(erlh_server.url.license_key.list,
            {
                filter : {
                    user_id : this.user_id,
                },
                options : {}
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    that._on_get_license_keys_from_server(response);
                }
            });
    },

    _add_handlers : function() {

    },


    get : function(license_key_id) {
        return this.w_license_keys_table.get_object_by_id(license_key_id);
    },

    add_object : function(license_key) {
        this.w_license_keys_table.add_row(license_key);
    },
    update_object : function(license_key) {
        return this.w_license_keys_table.update_object(license_key);
    },
    delete_row : function(id) {
        this.w_license_keys_table.delete_row_with_id(id);
    },

    refresh : function() {
        this.w_license_keys_table.delete_all_rows();
        this._request_license_keys_from_server();
    },

    set_user_id : function(user_id) {
        this.user_id = user_id;
        this._request_license_keys_from_server();
    },

    _on_get_license_keys_from_server : function(response) {
        this.w_license_keys_table.delete_all_rows();
        this.w_license_keys_table.add_rows(response.keys);
    },

    _callback_add_handlers_for_rows : function(jq_rows) {

    },

    _callback_on_row_selected : function(id, license_key) {
        if(this.options.on_license_key_selected)
            this.options.on_license_key_selected(id, license_key);
    },
    _callback_on_row_deselected : function(id, license_key) {
        if(this.options.on_license_key_deselected)
            this.options.on_license_key_deselected(id, license_key);
    },

    _callback_on_click_edit_license_key : function(license_key) {

    },
    _callback_on_license_key_changed : function(license_key) {
        this.update_object(license_key);
    },
    _callback_on_license_key_deleted : function(license_key) {
        if(this.options.is_admin_header_set)
            this.update_object(license_key);
        else
            this.delete_row(license_key.id);
    },
};
/**
 * Created by erinsasha on 01/05/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.is_owner_header_set
 * @param options.is_personal_header_set
 * @param options.is_organisation_header_set
 * @param options.is_admin_header_set
 * @param options.add_header_filter
 * @param options.on_license_selected
 * @param options.on_license_deselected
 * @constructor
 */
function ERLH_W_Licenses_List(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this.licenses = {};
    this.users = {};
    this.organisations = {};
    this.installs = {};
    this.license_keys = {};

    this._build();
}

ERLH_W_Licenses_List.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Licenses_List">';

        html += '<div class="licenses_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var header = [
            {id : 'id', name : 'ID'}
        ];
        if (this.options.is_admin_header_set)
            header.push({id : 'owner_user_id', name : 'Owner User ID'});

        if (!this.options.is_personal_header_set && !this.options.is_organisation_header_set)
            header.push({id : 'owner_user_name', name : 'Owner User'});

        if (this.options.is_admin_header_set)
            header.push({id : 'owner_org_id', name : 'Org ID'});

        if (!this.options.is_personal_header_set)
            header.push({id : 'owner_org_name', name : 'Organisation'});

        if (this.options.is_admin_header_set)
            header.push({id : 'user_id', name : 'Used by ID'});

        if (!this.options.is_personal_header_set) {
            header.push({id : 'user_name', name : 'Used by'});
            header.push({id : 'user_email', name : 'Used by Email'});
        }

        header.push({id : 'days', name : 'Days'});
        if (this.options.is_admin_header_set)
            header.push({id : 'days_left', name : 'Days Left', type : ERLH_W_Table.types.callback, callback : function(val, column, row) {
                if(row.udc)
                    return erlh_utils.number_help.round10((row.udc-(new Date()).getTime())/86400000, -1);
                else
                    return row.days;
            }});
        header.push({id : 'udc', name : 'Valid Until', type : ERLH_W_Table.types.js_milliseconds});
        header.push({id : 'type', name : 'Type', type : ERLH_W_Table.types.id_to_name,
            map : ERLH_License.static.get_type_ids_to_names()
        });
        if (this.options.is_admin_header_set)
            header.push({id : 'is_activated', name : 'Activation', type : ERLH_W_Table.types.id_to_name,
                map : ERLH_License.static.get_is_activated_ids_to_names()
            });

        header.push({id : 'created', name : 'Created', type : ERLH_W_Table.types.server_datetime, args : { needSeconds : false }});
        header.push({id : 'activated', name : 'Activated', type : ERLH_W_Table.types.js_milliseconds});

        if (this.options.is_admin_header_set)
            header.push({id : 'status', name : 'Status', type : ERLH_W_Table.types.id_to_name,
                map : ERLH_License.static.get_status_ids_to_names()
            });

        if (this.options.is_admin_header_set)
            header.push({id : 'source', name : 'Source', type : ERLH_W_Table.types.id_to_name,
                map : ERLH_License.static.get_source_ids_to_names()
            });

        if (this.options.is_admin_header_set)
            header.push({id : 'payment_id', name : 'Payment ID', type : ERLH_W_Table.types.id_to_name,
                map : ERLH_License.static.get_source_ids_to_names()
            });

        header.push({id : 'install_id', name : 'Installation ID'});
        header.push({id : 'install_name', name : 'Installation'});

        if (this.options.is_admin_header_set)
            header.push({id : 'license_key_id', name : 'license_key_id'});

        if (this.options.is_admin_header_set) {
            header.push({id : 'created_by', name : 'Created by ID'});
            header.push({id : 'created_by_name', name : 'Created by'});
            header.push({id : 'created_by_email', name : 'Created by Email'});
        }


        this.w_licenses_table = new ERLH_W_Table({
            jq_parent : this.jq_main.children('.licenses_cont'),
            html_class : 'licenses_table',
            header : header,
            rows : [],
            add_filters : this.options.add_header_filter,
            add_handlers_for_rows : this._callback_add_handlers_for_rows.bind(this),
            on_row_selected : this._callback_on_row_selected.bind(this),
            on_row_deselected : this._callback_on_row_deselected.bind(this),
        });

        this._add_handlers();
    },

    _request_licenses_from_server : function() {
        var that = this;

        erlh_server.send(erlh_server.url.license.list,
            {
                filter : this.filter,
                options : {
                    add_users : true,
                    add_organisations : true,
                    add_installs : true,
                    add_license_keys : true,
                }
            },
            function(err, response) {
                if(err) {
                    ERLH_W_LH_Connector_Server_Error.show_error(err);
                } else {
                    that._on_get_licenses_from_server(response);
                }
            });
    },

    _add_handlers : function() {

    },

    _merge_licenses_and_and_other_data : function(licenses) {
        var merged_data = [];

        for(var i= 0; i<licenses.length; i++) {
            merged_data.push(this._merge_license_and_and_other_data(licenses[i]));
        }

        return merged_data;
    },
    _merge_license_and_and_other_data : function(license) {
        var obj = {};

        var keys, key, i;

        keys = Object.keys(license);

        for(i=0; i<keys.length; i++) {
            key = keys[i];
            obj[key] = license[key];
        }

        var owner_user = this.users[license.owner_user_id];
        if(owner_user) {
            obj.owner_user_name = owner_user.get_fullname();
            obj.owner_user_email = owner_user.email;
        }


        var user = this.users[license.user_id];
        if(user) {
            obj.user_name = user.get_fullname();
            obj.user_email = user.email;
        }

        var created_by_user = this.users[license.created_by];
        if(created_by_user) {
            obj.created_by_name = created_by_user.get_fullname();
            obj.created_by_email = created_by_user.email;
        }


        var organisation = this.organisations[license.owner_org_id];
        if(organisation)
            obj.owner_org_name = organisation.name;

        var install = this.installs[license.install_id];
        if(install)
            obj.install_name = install.name;

        return obj;
    },

    add_install : function(install) {
        this.installs[install.id] = install;
    },

    get : function(license_id) {
        return this.w_licenses_table.get_object_by_id(license_id);
    },
    get_selected : function() {
        return this.w_licenses_table.get_selected();
    },

    add_object : function(license) {
        this.w_licenses_table.add_row(license);
    },
    update_object : function(license) {
        return this.w_licenses_table.update_object(license);
    },
    merge_and_update_license : function(license) {
        this.licenses[license.id] = license;
        var obj = this._merge_license_and_and_other_data(license);
        this.update_object(obj);
    },
    delete_row : function(id) {
        this.w_licenses_table.delete_row_with_id(id);
    },

    refresh : function() {
        this.w_licenses_table.delete_all_rows();
        this._request_licenses_from_server();
    },

    set_filter : function(filter) {
        this.filter = filter;
        this._request_licenses_from_server();
    },

    _on_get_licenses_from_server : function(response) {
        this.w_licenses_table.delete_all_rows();

        var i, license, user, organisation, install;

        this.licenses = {};
        for(i=0; i<response.licenses.length; i++) {
            license = response.licenses[i];
            this.licenses[license.id] = license;
        }

        this.users = {};
        for(i=0; i<response.users.length; i++) {
            user = new ERLH_User(response.users[i]);
            this.users[user.id] = user;
        }

        this.organisations = {};
        for(i=0; i<response.organisations.length; i++) {
            organisation = response.organisations[i];
            this.organisations[organisation.id] = organisation;
        }

        this.installs = {};
        for(i=0; i<response.installs.length; i++) {
            install = response.installs[i];
            this.installs[install.id] = install;
        }

        this.license_keys = {};
        for(i=0; i<response.license_keys.length; i++) {
            license_key = response.license_keys[i];
            this.license_keys[license_key.id] = license_key;
        }

        var merged_objects = this._merge_licenses_and_and_other_data(response.licenses);

        this.w_licenses_table.add_rows(merged_objects);
    },

    _callback_add_handlers_for_rows : function(jq_rows) {

    },

    _callback_on_row_selected : function(id, license) {
        if(this.options.on_license_selected)
            this.options.on_license_selected(id, license);
    },
    _callback_on_row_deselected : function(id, license) {
        if(this.options.on_license_deselected)
            this.options.on_license_deselected(id, license);
    },

    _callback_on_click_edit_license : function(license) {

    },
    _callback_on_license_changed : function(license) {
        this.update_object(license);
    },
    _callback_on_license_deleted : function(license) {
        if(this.options.is_admin_header_set)
            this.update_object(license);
        else
            this.delete_row(license.id);
    },
};
/**
 * Created by erinsasha on 02/05/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.owner_org
 * @param options.owner_org_id
 * @param options.owner_user
 * @param options.owner_user_id
 * @param options.jq_parent
 * @param options.is_owner_header_set
 * @param options.is_personal_header_set
 * @param options.is_organisation_header_set
 * @param options.is_admin_header_set
 * @param options.add_header_filter
 * @param options.on_license_selected
 * @param options.on_license_deselected
 * @constructor
 */
function ERLH_W_Licenses_List_With_Control(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this._build();
}

ERLH_W_Licenses_List_With_Control.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Licenses_List_With_Control">';

        html += '<div class="erlh_buttons_cont">';

        if(erlh_curr_user.is_lh_admin()) {
            html += '<span class="btn_add_cont"></span>';
            html += '<span class="btn_edit_cont"></span>';
        }

        html += '<span class="btn_attach_install_cont"></span>';
        html += '<span class="btn_detach_install_cont"></span>';
        html += '<span class="btn_buy_cont"></span>';

        html += '</div>';

        html += '<div class="license_list_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var jq_btns_cont = this.jq_main.children('.erlh_buttons_cont');

        if(erlh_curr_user.is_lh_admin()) {
            this.w_btn_add = new ERLH_W_Button({
                html_class : 'btn_add',
                jq_parent : jq_btns_cont.children('.btn_add_cont'),
                text : 'Create',
                on_click : this._on_click_btn_add.bind(this)
            });
            this.w_btn_edit = new ERLH_W_Button({
                html_class : 'btn_edit',
                jq_parent : jq_btns_cont.children('.btn_edit_cont'),
                text : 'Edit',
                on_click : this._on_click_btn_edit.bind(this)
            });
        }

        this.w_btn_attach_install = new ERLH_W_Button({
            html_class : 'btn_attach_install',
            jq_parent : jq_btns_cont.children('.btn_attach_install_cont'),
            text : 'Attach to installation',
            on_click : this._on_click_btn_attach_install.bind(this)
        });
        this.w_btn_detach_install = new ERLH_W_Button({
            html_class : 'btn_detach_install',
            jq_parent : jq_btns_cont.children('.btn_detach_install_cont'),
            text : 'Detach from installation',
            on_click : this._on_click_btn_detach_install.bind(this)
        });

        this.w_btn_buy = new ERLH_W_Button({
            html_class : 'btn_buy',
            jq_parent : jq_btns_cont.children('.btn_buy_cont'),
            text : 'Buy new',
            color : 'green',
            on_click : this._on_click_btn_buy.bind(this)
        });

        this.w_licenses_list = new ERLH_W_Licenses_List({
            jq_parent : this.jq_main.children('.license_list_cont'),
            is_admin_header_set : this.options.is_admin_header_set,
            is_personal_header_set : this.options.is_personal_header_set,
            is_organisation_header_set : this.options.is_organisation_header_set,
            is_owner_header_set : this.options.is_owner_header_set,
            add_header_filter : this.options.add_header_filter,
            filter : this.filter,
            on_license_selected : this.options.on_license_selected,
            on_license_deselected : this.options.on_license_deselected,
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },


    get : function(license_id) {
        return this.w_licenses_list.get.apply(this.w_licenses_list, arguments);
    },


    add_object : function(license) {
        this.w_licenses_list.add_object.apply(this.w_licenses_list, arguments);
    },
    update_object : function(license) {
        this.w_licenses_list.update_object.apply(this.w_licenses_list, arguments);
    },
    delete_row : function(id) {
        this.w_licenses_list.delete_row.apply(this.w_licenses_list, arguments);
    },


    refresh : function() {
        this.w_licenses_list.refresh.apply(this.w_licenses_list, arguments);
    },

    set_filter : function(filter) {
        this.w_licenses_list.set_filter.apply(this.w_licenses_list, arguments);
    },
    set_owner_user : function(owner_user) {
        this.owner_user = owner_user;
        this.owner_user_id = owner_user.id;
    },
    set_owner_user_id : function(owner_user_id) {
        if(this.owner_user && this.owner_user.id != owner_user_id)
            this.owner_user = null;

        this.owner_user_id = owner_user_id;
    },
    set_owner_org : function(owner_org) {
        this.owner_org = owner_org;
        this.owner_org_id = owner_org.id;
    },
    set_owner_org_id : function(owner_org_id) {
        if(this.owner_org && this.owner_user.id != owner_org_id)
            this.owner_org = null;

        this.owner_org_id = owner_org_id;
    },

    _on_click_btn_add : function() {
        var w_license_create_edit = new ERLH_W_License_Create_Edit({
            owner_org : this.owner_org,
            owner_org_id : this.owner_org_id,
            owner_user : this.owner_user,
            owner_user_id : this.owner_user_id,
            edit_mode : false,
            on_created : this._callback_on_license_created.bind(this)
        });
    },
    _on_click_btn_edit : function() {
       var license = this.w_licenses_list.get_selected();
       if(!license) {
           new ERLH_W_Message({ message : 'Select license first' });
           return;
       }

       var w_license_create_edit = new ERLH_W_License_Create_Edit({
           license : license,
           edit_mode : true,
           on_changed : this._callback_on_license_changed.bind(this),
           on_deleted : this._callback_on_license_deleted.bind(this)
       });
    },
    _on_click_btn_attach_install : function() {
        var license = this.w_licenses_list.get_selected();
        if(!license) {
            new ERLH_W_Message({ message : 'Select license first' });
            return;
        }

        var w_License_Attach_Install = new ERLH_W_License_Attach_Install({
            jq_parent : this.jq_main,
            license : license,
            on_attached : this._callback_on_license_attached_install.bind(this)
        })
    },
    _on_click_btn_detach_install : function() {
        var license = this.w_licenses_list.get_selected();
        if(!license) {
            new ERLH_W_Message({ message : 'Select license first' });
            return;
        }

        var w_License_Detach_Install = new ERLH_W_License_Detach_Install({
            jq_parent : this.jq_main,
            license : license,
            on_detached : this._callback_on_license_detached_install.bind(this)
        })
    },

    _on_click_btn_buy : function() {
        /*var w_Buy_New_License_Popup = new ERLH_W_Buy_New_License_Popup({
            jq_parent : this.jq_parent,
            org : this.owner_org,
            org_id : this.owner_org_id
        });*/

        var c_Buy_New_License = new ERLH_C_Buy_New_License({
            //jq_parent : this.jq_parent,
            org : this.owner_org,
            org_id : this.owner_org_id,
            mode_for_organisation : this.options.is_organisation_header_set
        });
    },

    _callback_on_license_created : function(license) {
        this.add_object(license);
    },
    _callback_on_license_changed : function(license) {
        this.update_object(license)
    },
    _callback_on_license_deleted : function(license) {
        this.update_object(license)
    },
    _callback_on_license_detached_install : function(license) {
        this.w_licenses_list.merge_and_update_license(license);
    },
    _callback_on_license_attached_install : function(response) {
        this.w_licenses_list.add_install(response.install);
        this.w_licenses_list.merge_and_update_license(response.license);
    },
};
/**
 * Created by erinsasha on 19/04/17.
 */
function ERLH_W_Main(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.linkedin_mode = options.linkedin_mode;

    this.options = options;

    this.jq_main = $('#ERLH_W_Main');
    if(this.jq_main.length == 1) {
        var vthis = jQuery.data( this.jq_main[0], 'ERLH_W_Main');
        return vthis;
    }

    this.init();

    jQuery.data( this.jq_main[0], 'ERLH_W_Main', this );
}

ERLH_W_Main.prototype = {
    init : function() {
        this.init_common();
        this.init_user_logged_in();
    },
    init_common : function() {
        if(this.inited_common) {
            return;
        }

        this._build();
        this.inited_common = true;
    },
    init_user_logged_in : function() {
        if(!erlh_curr_user.is_logged_in() || this.inited_user_logged_in) {
            return;
        }

        this._build_my_licenses();
        this._build_my_installs();
        this._build_my_account();
        this._build_my_organisations();

        if(erlh_curr_user.is_lh_admin()) {
            this._build_users_management();
            this._build_organisations_management();
            this._build_orders_management();
        }

        if(this.linkedin_mode) {
            this._build_close_tab();
        }

        this.inited_user_logged_in = true;
    },

    _build_HTML : function() {
        var hidden = this.linkedin_mode ? 'hidden' : '';

        var html = '<div id="ERLH_W_Main" class="ERLH_W_Main '+hidden+'">';
        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.linkedin_mode) {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });

            this.jq_main_content = this.w_popup.get_user_cont();
        } else {
            this.jq_main_content = this.jq_main;
        }

        this.w_tabs_and_conts = new ERLH_W_Tabs_And_Conts({
            jq_parent : this.jq_main_content,
            html_class : 'erlh_main_tabs_panel',
            tabs : [],
            active_tab_id : 'my_licenses',
            on_before_change_tab_by_user : this.callback_on_before_change_tab_by_user.bind(this)
        });

        this._add_handlers();


    },
    _build_my_licenses : function() {
        var tab = {id : 'my_licenses', name : 'My Licenses'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_my_licenses = new ERLH_W_My_Licenses({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_my_licenses.on_show();
            else
                that.w_my_licenses.on_hide();
        });
    },
    _build_my_installs : function() {
        var tab = {id : 'my_installs', name : 'My Installations'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_my_installs = new ERLH_W_My_Installations({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            user_id : erlh_curr_user.user.id
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_my_installs.on_show();
            else
                that.w_my_installs.on_hide();
        });
    },
    _build_my_account : function() {
        var tab = {id : 'my_account', name : 'My Account'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_my_account = new ERLH_W_My_Account({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            user_id : erlh_curr_user.user.id
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_my_account.on_show();
            else
                that.w_my_account.on_hide();
        });
    },
    _build_my_organisations : function() {
        var tab = {id : 'my_organisations', name : 'My Organisations'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_my_organisations = new ERLH_W_My_Organisations({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_my_organisations.on_show();
            else
                that.w_my_organisations.on_hide();
        });
    },
    _build_users_management : function() {
        var tab = {id : 'users_management', name : 'Users Management'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_users_management = new ERLH_W_Users_Management({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_users_management.on_show();
            else
                that.w_users_management.on_hide();
        });
    },
    _build_organisations_management : function() {
        var tab = {id : 'organisations_management', name : 'Organisations Management'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_organisations_management = new ERLH_W_Organisations_Management({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_organisations_management.on_show();
            else
                that.w_organisations_management.on_hide();
        });
    },
    _build_orders_management : function() {
        var tab = {id : 'orders_management', name : 'Orders Management'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_orders_management = new ERLH_W_Orders_Management({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_orders_management.on_show();
            else
                that.w_orders_management.on_hide();
        });
    },
    _build_close_tab : function() {
        var tab = {id : 'close', name : 'Close'};
        this.w_tabs_and_conts.add_tab(tab);
    },

    _add_handlers : function() {
        window.addEventListener(
            erlh_curr_user.EVENT_USER_READY,
            this._on_EVENT_USER_READY.bind(this),
            false);
    },

    remove : function() {
        this.jq_main.remove();
    },
    show : function() {
        this.jq_main.removeClass('hidden')
    },
    hide : function() {
        this.jq_main.addClass('hidden')
    },

    _on_EVENT_USER_READY : function(event) {
        this.on_user_ready();
    },
    on_user_ready : function() {
        this.show();

        this.init_user_logged_in();

        this.w_my_licenses.on_show();
    },
    callback_on_before_change_tab_by_user : function(tab_id) {
        if(tab_id == 'close') {
            this.hide();
            return false;
        }

        return true;
    }
};
/**
 * Created by erinsasha on 20/04/17.
 */
/**
 *
 * @param options
 * @param options.dont_add_header
 * @constructor
 */
function ERLH_W_My_Account(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_My_Account.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_My_Account">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">My Account</p>';

        html += '<div class="general_info_cont"></div>';

        html += '<div class="ERLH_block_delimiter"></div>';

        html += '<div class="set_new_pass_cont"></div>';

        html += '<div class="ERLH_block_delimiter"></div>';

        html += '<div class="btn_logoff_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },

    _add_handlers : function() {

        this.w_my_general_info = new ERLH_W_My_General_Info({
            jq_parent : this.jq_main.children('.general_info_cont'),
        });

        this.w_my_password_chnage = new ERLH_W_My_Password_Change({
            jq_parent : this.jq_main.children('.set_new_pass_cont'),
        });

        this.w_btn_logoff = new ERLH_W_Button({
            html_class : 'btn_logoff',
            jq_parent : this.jq_main.children('.btn_logoff_cont'),
            text : 'Log off',
            on_click : this._on_click_btn_logoff.bind(this)
        });
    },

    on_show : function() {

    },
    on_hide : function() {

    },

    _on_click_btn_logoff : function() {
        var dialog = new ERLH_W_Dialog_Yes_No({
            message : 'Log off from account?',
            on_yes : this._on_dialog_logoff_yes.bind(this)
        })
    },
    _on_dialog_logoff_yes : function() {
        erlh_curr_user.logoff();
    },
};
/**
 * Created by erinsasha on 21/04/17.
 */
/**
 * Created by erinsasha on 21/04/17.
 */
/**
 *
 * @param options
 * @param options.dont_add_header
 * @constructor
 */
function ERLH_W_My_General_Info(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_My_General_Info.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_My_General_Info">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header_h2">General information</p>';

        html += '<div class="email_cont"></div>';
        html += '<div class="firstname_cont"></div>';
        html += '<div class="lastname_cont"></div>';
        html += '<div class="btn_save_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },

    _add_handlers : function() {
        var closure_on_click_update = this._on_click_update.bind(this);

        this.w_email = new ERLH_W_Input_Email({
            html_class : 'email_field',
            is_required : true,
            jq_parent : this.jq_main.children('.email_cont'),
            input_attrs : {
                disabled : 'disabled',
                value : erlh_curr_user.is_logged_in() ? erlh_curr_user.user.email : ''
            }
        });
        
        this.w_firstname = new ERLH_W_Input({
            html_class : 'firstname_field',
            jq_parent : this.jq_main.children('.firstname_cont'),
            input_attrs : {
                placeholder : 'First name',
                type : 'text',
                value : erlh_curr_user.is_logged_in() ? erlh_curr_user.user.firstname : ''
            },
        });

        this.w_lastname = new ERLH_W_Input({
            html_class : 'lastname_field',
            jq_parent : this.jq_main.children('.lastname_cont'),
            input_attrs : {
                placeholder : 'Last name',
                type : 'text',
                value : erlh_curr_user.is_logged_in() ? erlh_curr_user.user.lastname : ''
            },
        });

        this.w_btn_save = new ERLH_W_Button({
            html_class : 'btn_save',
            jq_parent : this.jq_main.children('.btn_save_cont'),
            text : 'Save changes',
            on_click : this._on_click_update.bind(this)
        });

    },

    _check_before_sending : function() {

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        var user = Object.assign({}, erlh_curr_user.user);
        user.firstname = this.w_firstname.get();
        user.lastname = this.w_lastname.get();

        return user;
    },

    _on_click_update : function() {
        if(this._check_before_sending_and_show_message()) {
            var user = this._gather_fields();
            erlh_server.send(erlh_server.url.user.update, { user : user }, function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    var password = erlh_curr_user.user.password;
                    var user = response.user;
                    user.password = password;
                    erlh_curr_user.user = user;

                    erlh_curr_user.save_to_storage();
                    new ERLH_W_Message({ message : 'Your profile has been updated' });
                }
            });
        }
    },
};
/**
 * Created by erinsasha on 21/04/17.
 */
/**
 *
 * @param options
 * @param options.dont_add_header
 * @constructor
 */
function ERLH_W_My_Password_Change(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_My_Password_Change.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_My_Password_Change">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header_h2">Change password</p>';

        html += '<div class="old_password_cont"></div>';
        html += '<div class="new_passwords_cont"></div>';
        html += '<div class="btn_update_password_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },

    _add_handlers : function() {
        var closure_on_click_update = this._on_click_update.bind(this);

        this.w_password = new ERLH_W_Input_Password({
            jq_parent : this.jq_main.children('.old_password_cont'),
            html_class : 'w_password',
        });

        this.w_passwords_double = new ERLH_W_Input_Password_Double({
            html_class : 'password_double',
            placeholder : 'new password',
            jq_parent : this.jq_main.children('.new_passwords_cont')
        });

        this.w_btn_update = new ERLH_W_Button({
            html_class : 'btn_save',
            jq_parent : this.jq_main.children('.btn_update_password_cont'),
            text : 'Send',
            on_click : closure_on_click_update
        });

    },

    _check_before_sending : function() {
        var check = this.w_password.is_ok();
        if(check !== true) {
            return check;
        }

        if(this.w_password.get() != erlh_curr_user.user.password) {
            check = 'Wrong password';
            this.w_password.setError(check);
            return check
        }

        check = this.w_passwords_double.is_ok();

        if(check !== true) {
            return check;
        }

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        return {
            email : erlh_curr_user.user.email,
            password : this.w_password.get(),
            new_password : this.w_passwords_double.get(),
        }
    },

    _on_click_update : function() {
        if(this._check_before_sending_and_show_message()) {
            var request = this._gather_fields();
            erlh_server.send(erlh_server.url.user.setnewpass, request, function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    erlh_curr_user.user.password = request.new_password;
                    erlh_curr_user.save_to_storage(response.user);
                    new ERLH_W_Message({ message : 'Your password has been updated' });
                }
            });
        }
    },
};
/**
 * Created by erinsasha on 23/05/17.
 */

/**
 *
 * @param options
 * @param options.user_id
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_My_Licenses(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_My_Licenses.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_My_Licenses">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Licenses</p>';

        html += '<div class="licenses_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_tabs_and_conts = new ERLH_W_Tabs_And_Conts({
            //jq_parent : this.w_popup.get_user_cont(),
            jq_parent : this.jq_main.children('.licenses_cont'),
            tabs : [],
            active_tab_id : 'personal'
        });

        this._build_personal_licenses();
        this._build_orgs_licenses();

        this._add_handlers();
    },
    _build_personal_licenses : function() {
        var tab = {id : 'personal', name : 'Personal'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_licenses_personal_list = new ERLH_W_Licenses_List_With_Control({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            add_header_filter : true,
            is_personal_header_set : true,
            filter : {
                status_good : true,
                owner_type : ERLH_License.static.owner_type.user,
                owner_user_id : erlh_curr_user.user.id,
            }
        });

        this.w_licenses_personal_list.set_owner_user_id(erlh_curr_user.user.id);
    },
    _build_orgs_licenses : function() {
        var tab = {id : 'orgs_licnenses', name : 'Available from my organisations'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_licenses_orgs_list = new ERLH_W_Licenses_List_With_Control({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            add_header_filter : true,
            is_organisation_header_set : true,
            filter : {
                only_organisations : true,
                status_good : true,
                all_available_for_user_id : erlh_curr_user.user.id,
            }
        });

        this.w_licenses_orgs_list.set_owner_user_id(erlh_curr_user.user.id);
    },

    _add_handlers : function() {

    },

    on_show : function() {
        this.w_licenses_personal_list.set_filter({
            status_good : true,
            owner_type : ERLH_License.static.owner_type.user,
            owner_user_id : erlh_curr_user.user.id,
        });
        this.w_licenses_orgs_list.set_filter({
            only_organisations : true,
            status_good : true,
            all_available_for_user_id : erlh_curr_user.user.id,
        });
    },
    on_hide : function() {

    },
};
/**
 * Created by erinsasha on 16/05/17.
 */
/**
 *
 * @param options
 * @param options.user_id
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_My_Installations(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_My_Installations.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_My_Installations">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Installations</p>';

        html += '<div class="installs_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_installs_list = new ERLH_W_Installs_List({
            jq_parent : this.jq_main.children('.installs_cont'),
            add_secret_key : true
        });

        //this.w_installs_list.set_user_id(this.user_id);

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    on_show : function() {
        this.w_installs_list.set_user_id(this.user_id);
    },
    on_hide : function() {

    },
};
/**
 * Created by erinsasha on 30/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_My_Organisations(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_My_Organisations.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_My_Organisations">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">My Organisations</p>';

        html += '<div class="two_columns_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.jq_two_column = new ERLH_W_Two_Column({
            jq_parent : this.jq_main.children('.two_columns_cont')
        });

        this.w_organisations_list_with_control = new ERLH_W_Organisations_List_With_Control({
            jq_parent : this.jq_two_column.get_first_column(),
            filter : {},
            user_id : erlh_curr_user.user.id,
            is_owner_header_set : true,
            add_header_filter : true,
            on_organisation_selected : this._callback_on_organisation_list_organisation_selected.bind(this),
            on_organisation_deselected : this._callback_on_organisation_list_organisation_deselected.bind(this),
        });

        this.w_organisation_management = new ERLH_W_Organisation_Management({
            jq_parent : this.jq_two_column.get_second_column(),
            dont_add_header : true,
            on_organisation_updated : this._callback_on_organisation_updated.bind(this),
            on_organisation_deleted : this._callback_on_organisation_deleted.bind(this)
        });
        this.w_organisation_management.hide();

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    on_show : function() {
        this.w_organisations_list_with_control.refresh();
    },
    on_hide : function() {

    },

    _on_click_btn_create : function() {

    },

    _callback_on_organisation_list_organisation_selected : function(id, organisation) {
        this.w_organisation_management.set_organisation(organisation);
        this.w_organisation_management.show();
    },
    _callback_on_organisation_list_organisation_deselected : function(id, organisation) {
        this.w_organisation_management.hide();
    },
    _callback_on_organisation_updated : function(organisation) {
        this.w_organisations_list_with_control.update_object(organisation);
    },
    _callback_on_organisation_deleted : function(organisation) {
        this.w_organisations_list_with_control.update_object(organisation);
    },
};
/**
 * Created by erinsasha on 03/06/17.
 */


/**
 * Created by erinsasha on 01/06/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.is_admin_header_set
 * @param options.on_order_selected
 * @param options.on_order_deselected
 * @constructor
 */
function ERLH_W_Orders_List(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this.orders = {};
    this.users = {};
    this.organisations = {};

    this._build();
}

ERLH_W_Orders_List.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Orders_List">';

        html += '<div class="orders_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);


        var header = [
            {id : 'id', name : 'ID'}
        ];
        header.push({id : 'user_id', name : 'User ID'});
        header.push({id : 'user_name', name : 'User'});
        header.push({id : 'user_email', name : 'User Email'});

        header.push({id : 'org_id', name : 'Org ID'});
        header.push({id : 'org_name', name : 'Organisation'});

        header.push({id : 'status', name : 'Status', type : ERLH_W_Table.types.id_to_name,
            map : ERLH_Order.static.get_status_ids_to_names()
        });

        header.push({id : 'type', name : 'Type', type : ERLH_W_Table.types.id_to_name,
            map : ERLH_License.static.get_type_ids_to_names()});
        header.push({id : 'months', name : 'Months'});
        header.push({id : 'quantity', name : 'Quantity'});
        header.push({id : 'discount', name : 'Discount'});
        header.push({id : 'total_cost', name : 'Total cost'});
        header.push({id : 'method', name : 'Method', type : ERLH_W_Table.types.id_to_name,
            map : ERLH_Order.static.get_method_ids_to_names()});
        header.push({id : 'invoice_url', name : 'Invoice'});

        header.push({id : 'created', name : 'Created', type : ERLH_W_Table.types.server_datetime, args : { needSeconds : false }});
        header.push({id : 'updated', name : 'Updates', type : ERLH_W_Table.types.server_datetime, args : { needSeconds : false }});


        this.w_orders_table = new ERLH_W_Table({
            jq_parent : this.jq_main.children('.orders_cont'),
            html_class : 'orders_table',
            header : header,
            rows : [],
            add_filters : true,
            add_handlers_for_rows : this._callback_add_handlers_for_rows.bind(this),
            on_row_selected : this._callback_on_row_selected.bind(this),
            on_row_deselected : this._callback_on_row_deselected.bind(this),
        });

        this._add_handlers();
    },

    _request_orders_from_server : function() {
        var that = this;

        erlh_server.send(erlh_server.url.order.list,
            {
                filter : this.filter,
                add_users : true,
                add_organisations : true,
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    that._on_get_orders_from_server(response);
                }
            });
    },

    _add_handlers : function() {

    },

    _merge_orders_and_and_other_data : function(orders) {
        var merged_data = [];

        for(var i= 0; i<orders.length; i++) {
            merged_data.push(this._merge_order_and_and_other_data(orders[i]));
        }

        return merged_data;
    },
    _merge_order_and_and_other_data : function(order) {
        var obj = {};

        var keys, key, i;

        keys = Object.keys(order);

        for(i=0; i<keys.length; i++) {
            key = keys[i];
            obj[key] = order[key];
        }

        var user = this.users[order.user_id];
        if(user) {
            obj.user_name = user.get_fullname();
            obj.user_email = user.email;
        }

        var organisation = this.organisations[order.org_id];
        if(organisation)
            obj.org_name = organisation.name;

        return obj;
    },

    get : function(order_id) {
        return this.w_orders_table.get_object_by_id(order_id);
    },
    get_selected : function() {
        return this.w_orders_table.get_selected();
    },

    add_object : function(order) {
        this.w_orders_table.add_row(order);
    },
    update_object : function(order) {
        return this.w_orders_table.update_object(order);
    },
    merge_and_update_order : function(order) {
        this.orders[order.id] = order;
        var obj = this._merge_order_and_and_other_data(order);
        this.update_object(obj);
    },
    delete_row : function(id) {
        this.w_orders_table.delete_row_with_id(id);
    },

    refresh : function() {
        this.w_orders_table.delete_all_rows();
        this._request_orders_from_server();
    },

    set_filter : function(filter) {
        this.filter = filter;
        this._request_orders_from_server();
    },

    _on_get_orders_from_server : function(response) {
        this.w_orders_table.delete_all_rows();

        var i, order, user, organisation;

        this.orders = {};
        for(i=0; i<response.orders.length; i++) {
            order = response.orders[i];
            this.orders[order.id] = order;
        }

        this.users = {};
        for(i=0; i<response.users.length; i++) {
            user = new ERLH_User(response.users[i]);
            this.users[user.id] = user;
        }

        this.organisations = {};
        for(i=0; i<response.organisations.length; i++) {
            organisation = response.organisations[i];
            this.organisations[organisation.id] = organisation;
        }

        var merged_objects = this._merge_orders_and_and_other_data(response.orders);

        this.w_orders_table.add_rows(merged_objects);
    },

    _callback_add_handlers_for_rows : function(jq_rows) {

    },

    _callback_on_row_selected : function(id, order) {
        if(this.options.on_order_selected)
            this.options.on_order_selected(id, order);
    },
    _callback_on_row_deselected : function(id, order) {
        if(this.options.on_order_deselected)
            this.options.on_order_deselected(id, order);
    },

    _callback_on_click_edit_order : function(order) {

    },
    _callback_on_order_changed : function(order) {
        this.update_object(order);
    },
    _callback_on_order_deleted : function(order) {
        if(this.options.is_admin_header_set)
            this.update_object(order);
        else
            this.delete_row(order.id);
    },
};
/**
 * Created by erinsasha on 01/06/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.owner_org
 * @param options.owner_org_id
 * @param options.owner_user
 * @param options.owner_user_id
 * @param options.jq_parent
 * @param options.is_admin_header_set
 * @param options.add_header_filter
 * @param options.on_order_selected
 * @param options.on_order_deselected
 * @constructor
 */
function ERLH_W_Orders_List_With_Control(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this._build();
}

ERLH_W_Orders_List_With_Control.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Orders_List_With_Control">';

        html += '<div class="erlh_buttons_cont erlh_buttons_top_panel">';
        
        html += '<span class="btn_generate_licenses_cont"></span>';
        html += '<span class="btn_mark_as_deleted_cont"></span>';
        html += '<span class="btn_mark_as_registered_cont"></span>';
        html += '<span class="btn_mark_as_completed_cont"></span>';
        html += '<span class="btn_send_invoice_cont"></span>';
        html += '<span class="btn_send_receipt_cont"></span>';

        html += '</div>';

        html += '<div class="order_list_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var jq_btns_cont = this.jq_main.children('.erlh_buttons_cont');

        this.w_btn_generate_licenses = new ERLH_W_Button({
            html_class : 'btn_generate_licenses',
            jq_parent : jq_btns_cont.children('.btn_generate_licenses_cont'),
            text : 'Generate licenses',
            on_click : this._on_click_btn_generate_licenses.bind(this)
        });
        this.w_btn_mark_as_deleted = new ERLH_W_Button({
            html_class : 'btn_mark_as_deleted',
            jq_parent : jq_btns_cont.children('.btn_mark_as_deleted_cont'),
            text : 'Mark as Deleted',
            on_click : this._on_click_btn_mark_as_deleted.bind(this)
        });
        this.w_btn_mark_as_registered = new ERLH_W_Button({
            html_class : 'btn_mark_as_registered',
            jq_parent : jq_btns_cont.children('.btn_mark_as_registered_cont'),
            text : 'Mark as Registered',
            on_click : this._on_click_btn_mark_as_registered.bind(this)
        });
        this.w_btn_mark_as_completed = new ERLH_W_Button({
            html_class : 'btn_mark_as_completed',
            jq_parent : jq_btns_cont.children('.btn_mark_as_completed_cont'),
            text : 'Mark as Completed',
            on_click : this._on_click_btn_mark_as_completed.bind(this)
        });
        this.w_btn_send_invoice = new ERLH_W_Button({
            html_class : 'btn_send_invoice',
            jq_parent : jq_btns_cont.children('.btn_send_invoice_cont'),
            text : 'Send invoice',
            on_click : this._on_click_btn_btn_send_invoice.bind(this)
        });
        this.w_btn_send_receipt = new ERLH_W_Button({
            html_class : 'btn_send_receipt',
            jq_parent : jq_btns_cont.children('.btn_send_receipt_cont'),
            text : 'Send receipt',
            on_click : this._on_click_btn_btn_send_receipt.bind(this)
        });

        this.w_orders_list = new ERLH_W_Orders_List({
            jq_parent : this.jq_main.children('.order_list_cont'),
            is_admin_header_set : this.options.is_admin_header_set,
            filter : this.filter,
            on_order_selected : this.options.on_order_selected,
            on_order_deselected : this.options.on_order_deselected,
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },


    get : function(order_id) {
        return this.w_orders_list.get.apply(this.w_orders_list, arguments);
    },


    add_object : function(order) {
        this.w_orders_list.add_object.apply(this.w_orders_list, arguments);
    },
    update_object : function(order) {
        this.w_orders_list.update_object.apply(this.w_orders_list, arguments);
    },
    delete_row : function(id) {
        this.w_orders_list.delete_row.apply(this.w_orders_list, arguments);
    },

    refresh : function() {
        this.w_orders_list.refresh.apply(this.w_orders_list, arguments);
    },

    set_filter : function(filter) {
        this.w_orders_list.set_filter.apply(this.w_orders_list, arguments);
    },

    _server_update_status : function(new_status) {
        var order = this.w_orders_list.get_selected();
        if(!order) {
            new ERLH_W_Message({ message : 'Select order first' });
            return;
        }

        var that = this;

        ERLH_Order.server.updatestatus(order.id, new_status, function(err) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                that._on_server_status_updated(order, new_status);
            }
        });
    },
    _on_server_status_updated : function(order, new_status) {
        order.status = new_status;
        this.update_object(order);
    },

    _server_generate_licenses : function() {
        var order = this.w_orders_list.get_selected();
        if(!order) {
            new ERLH_W_Message({ message : 'Select order first' });
            return;
        }

        var that = this;

        ERLH_Order.server.executeorder(order.id, {}, function(err, result) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                that._on_server_status_updated(order, ERLH_Order.static.status.completed);
            }
        });
    },

    _on_click_btn_generate_licenses : function() {
        this._server_generate_licenses();
    },
    _on_click_btn_mark_as_deleted : function() {
        this._server_update_status(ERLH_Order.static.status.deleted);
    },
    _on_click_btn_mark_as_registered : function() {
        this._server_update_status(ERLH_Order.static.status.registered);
    },
    _on_click_btn_mark_as_completed : function() {
        this._server_update_status(ERLH_Order.static.status.completed);
    },
    _on_click_btn_btn_send_invoice : function() {
        var order = this.w_orders_list.get_selected();
        if(!order) {
            new ERLH_W_Message({ message : 'Select order first' });
            return;
        }
        if(order.status == ERLH_Order.static.status.deleted) {
            new ERLH_W_Message({ message : 'Order marked as deleted' });
            return;
        }
        if(order.status == ERLH_Order.static.status.completed) {
            new ERLH_W_Message({ message : 'Order marked as completed' });
            return;
        }
        var w_order_send_invoice = new ERLH_W_Order_Send_Manual_Invoice({
            jq_parent : this.jq_main,
            order : order,
            on_sent : this._callback_on_order_invoice_sent.bind(this)
        })

    },
    _on_click_btn_btn_send_receipt : function() {
        var order = this.w_orders_list.get_selected();
        new ERLH_W_Platron_Send_Receipt({
            jq_parent : this.jq_main,
            order : order,
            on_sent : this._callback_on_order_receipt_sent.bind(this)
        })
    },

    _callback_on_order_changed : function(order) {
        this.update_object(order)
    },
    _callback_on_order_deleted : function(order) {
        this.update_object(order)
    },
    _callback_on_order_invoice_sent : function(order) {
        this.update_object(order)
    },
    _callback_on_order_receipt_sent : function(order) {
        order.receipt_status = ERLH_Order.static.receipt_status.ok;
        this.update_object(order)
    },
};
/**
 * Created by erinsasha on 02/06/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_Orders_Management(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Orders_Management.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Orders_Management">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Orders Management</p>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);


        this.w_orders_list_with_control = new ERLH_W_Orders_List_With_Control({
            jq_parent : this.jq_main,
            filter : {},
            is_admin_header_set : true,
            add_header_filter : true,
            on_order_selected : this._callback_on_order_list_order_selected.bind(this),
            on_order_deselected : this._callback_on_order_list_order_deselected.bind(this),
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    on_show : function() {
        this.w_orders_list_with_control.refresh();
    },
    on_hide : function() {

    },

    _on_click_btn_create : function() {

    },

    _callback_on_order_list_order_selected : function(id, order) {

    },
    _callback_on_order_list_order_deselected : function(id, order) {

    },
};
/**
 * Created by erinsasha on 20/06/17.
 */

/**
 *
 * @param options
 * @param options.order
 * @param options.jq_parent
 * @param options.on_sent
 * @param options.on_cancel
 * @constructor
 */
function ERLH_W_Order_Send_Manual_Invoice(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.options = options;
    this.order = options.order;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Order_Send_Manual_Invoice.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Order_Send_Manual_Invoice">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();

        html += '<div class="invoice_url_cont"></div>';

        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        if(this.options.dont_add_header)
            return '';

        var header_default = 'Send invoice to '
            + this.order.user_email
            +' for order #'+this.order.id
            +' months : '+this.order.months
            +' quantity : '+this.order.quantity
            +' Total cost : '+this.order.total_cost;

        return '<p class="erlh_header">'+header_default+'</p>';
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_ok_cont"></span>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this.w_invoice_url = new ERLH_W_Input({
            html_class : 'invoice_url_field',
            jq_parent : this.jq_main_content.children('.invoice_url_cont'),
            input_attrs : {
                placeholder : 'Invoice URL',
                type : 'text'
            },
        });

        this._build_buttons_cont();
    },
    _build_buttons_cont : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_ok = new ERLH_W_Button({
            html_class : 'btn_ok',
            jq_parent : jq_btns_cont.children('.btn_ok_cont'),
            text : 'Ok',
            on_click : this._on_click_btn_ok.bind(this)
        });
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_click_btn_ok : function() {
        var invoice_url = this.w_invoice_url.get();
        if(!invoice_url || invoice_url == '')
            return;

        invoice_url.trim();
        ERLH_Order.server.sendinvoice(this.order.id, invoice_url, {}, this._on_server_callback.bind(this));
    },
    _on_server_callback : function(err, response) {
        if (err) {
            new ERLH_W_Message({ message : err.message });
            return;
        }

        new ERLH_W_Message({ message : 'Invoice sent' });

        this.remove();
        this.order.invoice_url = this.w_invoice_url.get().trim();
        if(this.options.on_sent) {
            this.options.on_sent(this.order);
        }
    },
    _on_click_btn_cancel : function() {
        this.remove();
        if(this.options.on_cancel) {
            this.options.on_cancel();
        }
    },
};
/**
 * Created by erinsasha on 20/06/17.
 */

/**
 *
 * @param options
 * @param options.order
 * @param options.jq_parent
 * @param options.on_sent
 * @param options.on_cancel
 * @constructor
 */
function ERLH_W_Order_Send_Manual_Invoice(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.options = options;
    this.order = options.order;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Order_Send_Manual_Invoice.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Order_Send_Manual_Invoice">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();

        html += '<div class="invoice_url_cont"></div>';

        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        if(this.options.dont_add_header)
            return '';

        var header_default = 'Send invoice to '
            + this.order.user_email
            +' for order #'+this.order.id
            +' months : '+this.order.months
            +' quantity : '+this.order.quantity
            +' Total cost : '+this.order.total_cost;

        return '<p class="erlh_header">'+header_default+'</p>';
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_ok_cont"></span>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this.w_invoice_url = new ERLH_W_Input({
            html_class : 'invoice_url_field',
            jq_parent : this.jq_main_content.children('.invoice_url_cont'),
            input_attrs : {
                placeholder : 'Invoice URL',
                type : 'text'
            },
        });

        this._build_buttons_cont();
    },
    _build_buttons_cont : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_ok = new ERLH_W_Button({
            html_class : 'btn_ok',
            jq_parent : jq_btns_cont.children('.btn_ok_cont'),
            text : 'Ok',
            on_click : this._on_click_btn_ok.bind(this)
        });
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_click_btn_ok : function() {
        var invoice_url = this.w_invoice_url.get();
        if(!invoice_url || invoice_url == '')
            return;

        invoice_url.trim();
        ERLH_Order.server.sendinvoice(this.order.id, invoice_url, {}, this._on_server_callback.bind(this));
    },
    _on_server_callback : function(err, response) {
        if (err) {
            new ERLH_W_Message({ message : err.message });
            return;
        }

        new ERLH_W_Message({ message : 'Invoice sent' });

        this.remove();
        this.order.invoice_url = this.w_invoice_url.get().trim();
        if(this.options.on_sent) {
            this.options.on_sent(this.order);
        }
    },
    _on_click_btn_cancel : function() {
        this.remove();
        if(this.options.on_cancel) {
            this.options.on_cancel();
        }
    },
};
/**
 * Created by erinsasha on 26/07/17.
 */

/**
 *
 * @param options
 * @param options.order
 * @param options.organisation
 * @param options.jq_parent
 * @param options.header
 * @param options.dont_add_header
 * @constructor
 */
function ERLH_W_Order_Details(options) {
    options = options ? options : {};
    this.options = options;
    this.order = options.order;
    this.organisation = options.organisation;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Order_Details.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Order_Details">';
        html += this._build_HTML_header();
        html += this._build_order_table();
        html += '</div>';

        return html;
    },

    _build_HTML_header : function() {
        if(this.options.dont_add_header)
            return '';

        var header = this.options.header ? this.options.header : 'Order details:';

        return '<p class="erlh_header">'+header+'</p>';
    },

    _build_order_table : function(order, options, customer_data) {
        var html = '<table class="erlh_order_details_table"><tbody>';

        var order = this.order;

        if(order.org_id)
            html += this._build_order_table_raw('Organisation', customer_data.organisation.name);

        html += this._build_order_table_raw('Months', order.months);
        html += this._build_order_table_raw('Quantity', order.quantity);

        if(order.discount && order.discount > 0)
            html += this._build_order_table_raw('Discount', order.discount);

        html += this._build_order_table_raw('Total cost', order.total_cost + ' USD');
        html += this._build_order_table_raw('Pay with', ERLH_Order.static.method_id_to_name[order.method]);

        html += '</tbody></table>';

        return html;
    },

    _build_order_table_raw : function(label, value) {
        return '<tr><td class="erlh_t_label">'+label+'</td><td class="erlh_t_value">'+value+'</td></tr>';
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);
    },
    remove : function() {
        this.jq_main.remove();
    },
};
/**
 * Created by erinsasha on 26/07/17.
 */

/**
 *
 * @param options
 * @param options.order_id
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_Order_Completed_Popup(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.options = options;
    this.order_id = options.order_id;
    this.jq_parent = options.jq_parent;

    this._process();
}

ERLH_W_Order_Completed_Popup.prototype = {
    _process : function() {
        this._request_order_details();
    },
    _request_order_details : function() {
        var that = this;

        erlh_server.send(erlh_server.url.order.list,
            {
                filter : {
                    id : this.order_id
                },
                add_users : true,
                add_organisations : true,
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    that._on_get_order_detail_from_server(response);
                }
            });
    },

    _build_HTML : function() {
        var html = '<div class="ERLH_W_Order_Completed_Popup">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();

        html += this._build_instruction_cont();
        html += '<div class="er_order_details_cont"></div>';

        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        if(this.options.dont_add_header)
            return '';

        var header_default = 'You\'ve got new license!';
        /*
            + this.order.user_email
            +' for order #'+this.order.id
            +' months : '+this.order.months
            +' quantity : '+this.order.quantity
            +' Total cost : '+this.order.total_cost;*/

        return '<p class="erlh_header">'+header_default+'</p>';
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_close_cont"></span>';

        html += '</div>';

        return html;
    },
    _build_instruction_cont : function() {
        var html = '<div class="erlh_instruction_cont">';

        html += '<p><b><a target="_blank" href="https://www.youtube.com/watch?v=X_rwdD0kcj8&feature=youtu.be&hd=1">To activate your license, please:</a></b></p>';

        html += '<ul style="list-style-type: none; padding-left: 1em;">';
        html += '<li>1) Install <a href="https://chrome.google.com/webstore/detail/linked-helper-automate-wo/ggmfnfhhfapdhpbhpfhllhdlimdghmaa">Linked Helper</a> in your Chrome</li>';
        html += '<li>2) Install <a href="https://chrome.google.com/webstore/detail/lh-connector/ooicjhkkfdijjlnfopfakboefcmifdlh">LH Connector</a> - our free add-on for Linked Helper</li>';
        html += '<li>3) Open <a href="https://linkedin.com">https://LinkedIn.com</a></li>';
        html += '<li>4) Go to "My Account" in Linked Helper widget at the right bottom of LinkedIn page</li>';
        html += '<li>5) Login with '+erlh_curr_user.user.email+'</li>';
        html += '<li><i>Just reload LinkedIn page, if you already did this before</i></li>';

        html += '</ul>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        new ERLH_W_Order_Details({
            order : this.order,
            organisation : this.organisation,
            jq_parent : this.jq_main_content.children('.er_order_details_cont')
        });

        this._build_buttons_cont();
    },
    _build_buttons_cont : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_close = new ERLH_W_Button({
            html_class : 'btn_close',
            jq_parent : jq_btns_cont.children('.btn_close_cont'),
            text : 'Close',
            on_click : this._on_click_btn_close.bind(this)
        });
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_click_btn_close : function() {
        this.remove();
        if(this.options.on_cancel) {
            this.options.on_cancel();
        }
    },
    _on_get_order_detail_from_server : function(response) {
        if(response.orders.length == 0) {
            new ERLH_W_Message({ message : 'Order with ID='+this.order_id+' not found!' });
            return;
        }

        this.order = response.orders[0];
        this.organisation = response.organisations.length > 0 ? response.organisations[0] : null;

        this.users = {};
        for(i=0; i<response.users.length; i++) {
            user = new ERLH_User(response.users[i]);
            this.users[user.id] = user;
        }

        this._build();
    }
};
/**
 * Created by erinsasha on 31/05/17.
 */

/**
 *
 * @param options
 * @param options.user_id
 * @param options.dont_use_popup
 * @param options.dont_add_header
 * @param options.header
 * @param options.on_close
 * @param options.on_cancel
 * @param options.on_chosen
 * @constructor
 */
function ERLH_W_Organisation_Choose_Popup(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_Organisation_Choose_Popup.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisation_Choose_Popup">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        if(!this.options.dont_add_header) {
            var header_text = this.options.header ? this.options.header : 'Choose organisation';
            html += '<p class="erlh_header">'+header_text+'</p>';
        }

        html += '<div class="organisations_cont"></div>';

        html += '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_ok_cont"></span>';

        html += '</div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this.w_organisations_list = new ERLH_W_Organisations_List({
            jq_parent : this.jq_main_content.children('.organisations_cont'),
            filter : {},
            user_id : this.user_id,
            is_owner_header_set : false,
            add_header_filter : true,
            on_organisation_selected : this._callback_on_organisation_selected.bind(this),
            on_organisation_deselected : this._callback_on_organisation_deselected.bind(this),
        });

        if(this.user_id)
            this.w_organisations_list.set_user_id(this.user_id);

        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_ok = new ERLH_W_Button({
            html_class : 'btn_ok',
            jq_parent : jq_btns_cont.children('.btn_ok_cont'),
            text : 'Ok',
            disabled : true,
            on_click : this._on_click_btn_ok.bind(this)
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },

    _on_click_btn_ok : function() {
        var organisation = this.w_organisations_list.get_selected();
        if(this.options.on_chosen)
            this.options.on_chosen(organisation);
        this.close();
    },

    _callback_on_organisation_selected : function() {
        this.w_btn_ok.set_disabled(false);
    },
    _callback_on_organisation_deselected : function() {
        this.w_btn_ok.set_disabled(true);
    },
};
/**
 * Created by erinsasha on 25/04/17.
 */

/**
 *
 * @param options
 * @param options.organisation
 * @param options.edit_mode
 * @param options.dont_use_popup
 * @param options.dont_add_header
 * @param options.dont_remove
 * @param options.on_close
 * @param options.on_created
 * @param options.on_changed
 * @param options.on_deleted
 * @constructor
 */
function ERLH_W_Organisation_Create_Edit(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.organisation = options.organisation;
    this.edit_mode = options.edit_mode;

    this._build();
}

ERLH_W_Organisation_Create_Edit.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisation_Create_Edit">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        if(!this.options.dont_add_header) {
            var header_text;
            if(this.organisation || this.edit_mode) {
                header_text = 'Edit organisation';
            } else {
                header_text = 'Create new organisation';
            }
            html += '<p class="erlh_header">'+header_text+'</p>';
        }

        html += '<div class="name_cont"></div>';
        if(erlh_curr_user.is_lh_admin())
            html += '<div class="status_cont"></div>';

        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_buttons_cont : function() {
        var html_class_type;
        if(this.options.dont_use_popup)
            html_class_type = 'erlh_buttons_bottom_panel';
        else
            html_class_type = '';

        var html = '<div class="erlh_buttons_cont '+html_class_type+'">';

        if(this.organisation || this.edit_mode)
            html += '<span class="btn_delete_cont"></span>';

        if(!this.options.dont_use_popup)
            html += '<span class="btn_cancel_cont"></span>';

        if(this.organisation || this.edit_mode)
            html += '<span class="btn_change_cont"></span>';
        else
            html += '<span class="btn_create_cont"></span>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this.w_name = new ERLH_W_Input({
            html_class : 'name_field',
            jq_parent : this.jq_main_content.children('.name_cont'),
            input_attrs : {
                placeholder : 'Organisation name',
                type : 'text',
                value : this.organisation ? this.organisation.name : ''
            },
        });

        if(erlh_curr_user.is_lh_admin() && (this.organisation || this.edit_mode)) {
            this.w_status = new ERLH_W_Input({
                html_class: 'status_field',
                jq_parent: this.jq_main_content.children('.status_cont'),
                input_attrs: {
                    placeholder: 'Status',
                    type: 'number',
                    value: this.organisation ? this.organisation.status : ''
                },
            });
        }

        this._build_buttons_cont();

        this._add_handlers();
    },
    _build_buttons_cont : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        if(this.organisation || this.edit_mode) {
            this.w_btn_delete = new ERLH_W_Button({
                html_class : 'btn_delete',
                jq_parent : jq_btns_cont.children('.btn_delete_cont'),
                text : 'Delete',
                is_danger : true,
                on_click : this._on_click_btn_delete.bind(this)
            });

            this.w_btn_change = new ERLH_W_Button({
                html_class : 'btn_change',
                jq_parent : jq_btns_cont.children('.btn_change_cont'),
                text : 'Save',
                on_click : this._on_click_btn_change.bind(this)
            });
        } else {
            this.w_btn_create = new ERLH_W_Button({
                html_class : 'btn_create',
                jq_parent : jq_btns_cont.children('.btn_create_cont'),
                text : 'Create',
                on_click : this._on_click_btn_create.bind(this)
            });
        }

        if(!this.options.dont_use_popup)
            this.w_btn_cancel = new ERLH_W_Button({
                html_class : 'btn_cancel',
                jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
                text : 'Cancel',
                on_click : this._on_click_btn_cancel.bind(this)
            });
    },

    _add_handlers : function() {

    },

    set_organisation : function(organisation) {
        this.organisation = organisation;

        this.w_name.set(organisation.name);

        if(this.w_status) {
            this.w_status.set(organisation.status);
        }
    },

    remove : function() {
        this.jq_main.remove();
    },

    _check_before_sending : function() {
        var name = this.w_name.get();
        if(!name || name.length == 0) {
            return 'Empty name';
        }

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        var object = {};

        if(this.organisation) {
            var keys = Object.keys(this.organisation);
            for(var i= 0, key; i<keys.length; i++) {
                key = keys[i];
                object[key] = this.organisation[key];
            }
        }

        if(this.w_status) {
            object.status = this.w_status.get();
        }

        object.name = this.w_name.get();

        return object;
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {
        if(this.organisation) {
            this.set_organisation(this.organisation);
        }
        this.close();
    },
    _on_click_btn_delete : function() {
        new ERLH_W_Dialog_Yes_No({
            message : 'Do you want to delete this organisation?',
            jq_parent : this.jq_main,
            on_yes : this._on_click_btn_delete_yes.bind(this)
        })
    },
    _on_click_btn_delete_yes : function() {
        var that = this;

        erlh_server.send(erlh_server.url.organisation.delete, {id : this.organisation.id}, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_deleted)
                    that.options.on_deleted(response.organisation);
                that.set_organisation(response.organisation);
                that.close();
            }
        });
    },
    _on_click_btn_create : function() {
        if(!this._check_before_sending_and_show_message())
            return;

        var organisation = this._gather_fields();

        var that = this;

        var request = {organisation : organisation, options : {}};
        if(this.options.add_as_owner)
            request.options.dont_add_as_employee = false;
        else
            request.options.dont_add_as_employee = true;

        erlh_server.send(erlh_server.url.organisation.create, request, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_created)
                    that.options.on_created(response.organisation, response.employee);
                that.close();
            }
        });
    },
    _on_click_btn_change : function() {
        if(!this._check_before_sending_and_show_message())
            return;

        var organisation = this._gather_fields();

        var that = this;

        erlh_server.send(erlh_server.url.organisation.update, {organisation : organisation}, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                if(that.options.on_changed)
                    that.options.on_changed(response.organisation);
                that.close();
            }
        });
    },
};

/**
 * Created by erinsasha on 28/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @param options.on_changed
 * @param options.on_deleted
 * @constructor
 */
function ERLH_W_Organisation_Manage_Employees(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_Organisation_Manage_Employees.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisation_Manage_Employees">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Employees</p>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_employees_list = new ERLH_W_Employees_List_With_Control({
            jq_parent : this.jq_main,
            is_admin_header_set : erlh_curr_user.is_lh_admin(),
            is_owner_header_set : !erlh_curr_user.is_lh_admin(),
            add_header_filter : true,

        });

        this._add_handlers();
    },


    _add_handlers : function() {

    },

    set_organisation : function(organisation) {
        this.w_employees_list.set_org_id(organisation.id);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },
};
/**
 * Created by erinsasha on 27/04/17.
 */
/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @param options.on_changed
 * @param options.on_deleted
 * @constructor
 */
function ERLH_W_Organisation_Manage_General(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_Organisation_Manage_General.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisation_Manage_General">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">General information</p>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_org_create_edit = new ERLH_W_Organisation_Create_Edit({
            jq_parent : this.jq_main,
            organisation : this.organisation,
            edit_mode : true,
            dont_use_popup : true,
            dont_remove : true,
            dont_add_header : true,
            on_changed : this._callback_on_organisation_changed.bind(this),
            on_deleted : this._callback_on_organisation_deleted.bind(this),
        });

        this._add_handlers();
    },


    _add_handlers : function() {

    },

    set_organisation : function(organisation) {
        this.w_org_create_edit.set_organisation(organisation);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },

    _callback_on_organisation_changed : function(organisation) {
        if(this.options.on_changed)
            this.options.on_changed(organisation);
    },
    _callback_on_organisation_deleted : function(organisation) {
        if(this.options.on_deleted)
            this.options.on_deleted(organisation);
    },

};
/**
 * Created by erinsasha on 22/05/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_Organisation_Manage_Licenses(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.organisation = options.organisation;
    if(options.organisation) {
        this.organisation = options.organisation;
        this.organisation_id = options.organisation.id;
    } else
        this.organisation_id = options.organisation_id;

    this._build();
}

ERLH_W_Organisation_Manage_Licenses.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisation_Manage_Licenses">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Licenses</p>';

        html += '<div class="licenses_list_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_license_list = new ERLH_W_Licenses_List_With_Control({
            jq_parent : this.jq_main.children('.licenses_list_cont'),
            is_admin_header_set : erlh_curr_user.is_lh_admin(),
            is_organisation_header_set : !erlh_curr_user.is_lh_admin(),
            add_header_filter : true,
            on_license_selected : null,
            on_license_deselected : null
        });

        this._add_handlers();
    },


    _add_handlers : function() {

    },


    set_organisation : function(organisation) {
        this.organisation = organisation;
        this.organisation_id = organisation.id;
        this.w_license_list.set_filter({
            owner_org_id : organisation.id,
            status_good : !erlh_curr_user.is_lh_admin()
        });
        this.w_license_list.set_owner_org(organisation);
    },
    set_organisation_id : function(organisation_id) {
        if(this.organisation && this.organisation.id != organisation_id)
            this.organisation = null;

        this.organisation_id = organisation_id;
        this.w_license_list.set_filter({
            owner_org_id : organisation_id,
            status_good : !erlh_curr_user.is_lh_admin()
        });
        this.w_license_list.set_owner_org_id(organisation_id);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },

};
/**
 * Created by erinsasha on 27/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @param options.on_organisation_updated
 * @param options.on_organisation_deleted
 * @constructor
 */
function ERLH_W_Organisation_Management(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Organisation_Management.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisation_Management">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Organisation Management</p>';

        html += '<div class="tabs_conts_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_tabs_and_conts = new ERLH_W_Tabs_And_Conts({
            //jq_parent : this.w_popup.get_organisation_cont(),
            jq_parent : this.jq_main.children('.tabs_conts_cont'),
            tabs : [],
            active_tab_id : 'general'
        });

        this._build_general();
        this._build_employee();
        this._build_licenses();

        this._add_handlers();
    },
    _build_general : function() {
        var tab = {id : 'general', name : 'General'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_general = new ERLH_W_Organisation_Manage_General({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            dont_add_header : true,
            //organisation_id : this.organisation,
            on_changed : this._on_organisation_updated.bind(this),
            on_deleted : this._on_organisation_deleted.bind(this)
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_general.on_show();
            else
                that.w_general.on_hide();
        });
    },
    _build_employee : function() {
        var tab = {id : 'employees', name : 'Employees'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_employees = new ERLH_W_Organisation_Manage_Employees({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            dont_add_header : true,
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_employees.on_show();
            else
                that.w_employees.on_hide();
        });
    },
    _build_licenses : function() {
        var tab = {id : 'licenses', name : 'Licenses'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_licenses = new ERLH_W_Organisation_Manage_Licenses({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            dont_add_header : true,
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_licenses.on_show();
            else
                that.w_licenses.on_hide();
        });
    },

    _add_handlers : function() {

    },

    set_organisation : function(organisation) {
        this.organisation = organisation;

        this.w_general.set_organisation(organisation);
        this.w_employees.set_organisation(organisation);
        this.w_licenses.set_organisation(organisation);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },

    _on_organisation_updated : function(organisation) {
        this.organisation = organisation;

        if(this.options.on_organisation_updated)
            this.options.on_organisation_updated(organisation)
    },
    _on_organisation_deleted : function(organisation) {
        this.organisation = organisation;

        if(this.options.on_organisation_deleted)
            this.options.on_organisation_deleted(organisation)
    },
};
/**
 * Created by erinsasha on 25/04/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.user_id
 * @param options.is_owner_header_set
 * @param options.is_admin_header_set
 * @param options.add_header_filter
 * @param options.on_organisation_selected
 * @param options.on_organisation_deselected
 * @constructor
 */
function ERLH_W_Organisations_List(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};
    this.user_id = options.user_id;

    this._build();
}

ERLH_W_Organisations_List.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisations_List">';

        html += '<div class="organisations_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var header = [
            {id : 'id', name : 'ID'},
            {id : 'name', name : 'Name'},
        ];

        if (this.options.is_admin_header_set) {
            header.push({id : 'status', name : 'Status'});
            header.push({id : 'created_by', name : 'Created By'});
            header.push({id : 'created', name : 'Created'});
            header.push({id : 'updated', name : 'Updated'});
            header.push({id : 'btn_edit', name : 'Edit', 
                type : ERLH_W_Table.types.button, cell_text : 'Edit',
                onclick : this._callback_on_click_edit_organisation.bind(this)
            });
        } else if (this.options.is_owner_header_set) {
            header.push({id : 'btn_edit', name : 'Edit',
                type : ERLH_W_Table.types.button, cell_text : 'Edit',
                onclick : this._callback_on_click_edit_organisation.bind(this)
            });
        }

        this.w_organisations_table = new ERLH_W_Table({
            jq_parent : this.jq_main.children('.organisations_cont'),
            html_class : 'organisations_table',
            header : header,
            rows : [],
            add_filters : this.options.add_header_filter,
            add_handlers_for_rows : this._callback_add_handlers_for_rows.bind(this),
            on_row_selected : this._callback_on_row_selected.bind(this),
            on_row_deselected : this._callback_on_row_deselected.bind(this),
        });

        this._add_handlers();
    },

    _request_organisations_from_server : function() {
        var that = this;

        erlh_server.send(erlh_server.url.organisation.list,
            {
                filter : {
                    user_id : this.user_id
                },
            },
            function(err, response) {
            if(err) {
                ERLH_W_LH_Connector_Server_Error.show_error(err);
            } else {
                that._on_get_organisations_from_server(response);
            }
        });
    },

    _add_handlers : function() {

    },


    get : function(organisation_id) {
        return this.w_organisations_table.get_object_by_id(organisation_id);
    },
    get_selected : function() {
        return this.w_organisations_table.get_selected();
    },

    add_object : function(organisation) {
        return this.w_organisations_table.add_row(organisation);
    },
    update_object : function(organisation) {
        return this.w_organisations_table.update_object(organisation);
    },
    delete_row : function(id) {
        this.w_organisations_table.delete_row_with_id(id);
    },

    refresh : function() {
        this.w_organisations_table.delete_all_rows();
        this._request_organisations_from_server();
    },

    set_user_id : function(user_id) {
        this.user_id = user_id;
        this._request_organisations_from_server();
    },

    _on_get_organisations_from_server : function(response) {
        this.w_organisations_table.delete_all_rows();
        this.w_organisations_table.add_rows(response.organisations);
    },

    _callback_add_handlers_for_rows : function(jq_rows) {

    },

    _callback_on_row_selected : function(id, organisation) {
        if(this.options.on_organisation_selected)
            this.options.on_organisation_selected(id, organisation);
    },
    _callback_on_row_deselected : function(id, organisation) {
        if(this.options.on_organisation_deselected)
            this.options.on_organisation_deselected(id, organisation);
    },

    _callback_on_click_edit_organisation : function(organisation) {
        var w_org_create_edit = new ERLH_W_Organisation_Create_Edit({
            jq_parent : this.jq_main,
            organisation : organisation,
            on_changed : this._callback_on_organisation_changed.bind(this),
            on_deleted : this._callback_on_organisation_deleted.bind(this),
        });
    },
    _callback_on_organisation_changed : function(organisation) {
        this.update_object(organisation);
    },
    _callback_on_organisation_deleted : function(organisation) {
        if(this.options.is_admin_header_set)
            this.update_object(organisation);
        else
            this.delete_row(organisation.id);
    },
};
/**
 * Created by erinsasha on 26/04/17.
 */

/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.user_id
 * @param options.is_owner_header_set
 * @param options.is_admin_header_set
 * @param options.add_header_filter
 * @param options.on_organisation_selected
 * @param options.on_organisation_deselected
 * @constructor
 */
function ERLH_W_Organisations_List_With_Control(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this._build();
}

ERLH_W_Organisations_List_With_Control.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisations_List_With_Control">';

        html += '<div class="erlh_buttons_cont erlh_buttons_top_panel">';

        html += '<span class="btn_create_cont"></span>';

        html += '</div>';

        html += '<div class="organisation_list_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        var jq_btns_cont = this.jq_main.children('.erlh_buttons_cont');

        this.w_btn_create = new ERLH_W_Button({
            html_class : 'btn_create',
            jq_parent : jq_btns_cont.children('.btn_create_cont'),
            text : 'Create',
            on_click : this._on_click_btn_create.bind(this)
        });

        this.w_organisations_list = new ERLH_W_Organisations_List({
            jq_parent : this.jq_main.children('.organisation_list_cont'),
            user_id : this.options.user_id,
            is_admin_header_set : this.options.is_admin_header_set,
            is_owner_header_set : this.options.is_owner_header_set,
            add_header_filter : this.options.add_header_filter,
            on_organisation_selected : this.options.on_organisation_selected,
            on_organisation_deselected : this.options.on_organisation_deselected,
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },


    get : function(organisation_id) {
        this.w_organisations_list.get(organisation_id);
    },


    add_object : function(organisation) {
        this.w_organisations_list.add_object(organisation);
    },
    update_object : function(organisation) {
        this.w_organisations_list.update_object(organisation);
    },
    delete_row : function(id) {
        this.w_organisations_list.delete_row(id);
    },


    refresh : function() {
        this.w_organisations_list.refresh();
    },

    set_user_id : function(user_id) {
        this.w_organisations_list.set_user_id(user_id);
    },

    _on_click_btn_create : function() {
        var w_org_create_edit = new ERLH_W_Organisation_Create_Edit({
            jq_parent : this.jq_main,
            add_as_owner : this.options.is_owner_header_set,
            on_created : this._callback_on_organisation_created.bind(this),
        });
    },

    _callback_on_organisation_created : function(organisation) {
        this.add_object(organisation);
    },
};
/**
 * Created by erinsasha on 26/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_Organisations_Management(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Organisations_Management.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Organisations_Management">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Organisations Management</p>';

        html += '<div class="two_columns_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.jq_two_column = new ERLH_W_Two_Column({
            jq_parent : this.jq_main.children('.two_columns_cont')
        });

        this.w_organisations_list_with_control = new ERLH_W_Organisations_List_With_Control({
            jq_parent : this.jq_two_column.get_first_column(),
            filter : {},
            is_admin_header_set : true,
            add_header_filter : true,
            on_organisation_selected : this._callback_on_organisation_list_organisation_selected.bind(this),
            on_organisation_deselected : this._callback_on_organisation_list_organisation_deselected.bind(this),
        });

        this.w_organisation_management = new ERLH_W_Organisation_Management({
            jq_parent : this.jq_two_column.get_second_column(),
            dont_add_header : true,
            on_organisation_updated : this._callback_on_organisation_updated.bind(this),
            on_organisation_deleted : this._callback_on_organisation_deleted.bind(this)
        });
        this.w_organisation_management.hide();

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    on_show : function() {
        this.w_organisations_list_with_control.refresh();
    },
    on_hide : function() {

    },

    _on_click_btn_create : function() {

    },

    _callback_on_organisation_list_organisation_selected : function(id, organisation) {
        this.w_organisation_management.set_organisation(organisation);
        this.w_organisation_management.show();
    },
    _callback_on_organisation_list_organisation_deselected : function(id, organisation) {
        this.w_organisation_management.hide();
    },
    _callback_on_organisation_updated : function(organisation) {
        this.w_organisations_list_with_control.update_object(organisation);
    },
    _callback_on_organisation_deleted : function(organisation) {
        this.w_organisations_list_with_control.update_object(organisation);
    },
};
/**
 * Created by erinsasha on 23/07/17.
 */

/**
 *
 * @param options
 * @param options.url
 * @param options.jq_parent
 * @param options.on_cancel
 * @constructor
 */
function ERLH_W_Platron_Redirect_Popup(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.url = options.url;
    this.seconds = options.seconds && options.seconds > 0 ? options.seconds : 10;

    this._build();
}

ERLH_W_Platron_Redirect_Popup.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Platron_Redirect_Popup">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += '<p class="erlh_header">You will be redirected to Platron website (Secure Payments Provider)</p>';

        // https://front.platron.ru/wp-content/themes/platron/assets/images/logo.svg
        html += '<div class="platron_logo_cont"><img class="platron_logo" src="https://front.platron.ru/wp-content/themes/platron/assets/images/logo.svg"></div>';
        html += '<p class="erlh_in_seconds">in <span class="erlh_counter">'+this.seconds+'</span> seconds</p>';
        
        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },

    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_go_cont"></span>';

        html += '</div>';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_popup = new ERLH_W_Popup({
            jq_parent : this.jq_main,
            not_closable : true
        });
        this.jq_main_content = this.w_popup.get_user_cont();

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_buttons();

        this._add_handlers();
    },

    _build_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_go = new ERLH_W_Button({
            html_class : 'btn_go',
            jq_parent : jq_btns_cont.children('.btn_go_cont'),
            text : 'Go now',
            color : 'green',
            disabled : false,
            on_click : this._on_click_btn_go.bind(this)
        });
    },

    _add_handlers : function() {
        this.jq_seconds = this.jq_main_content.find('.erlh_in_seconds .erlh_counter');

        this.closure_on_second_left = this._on_second_left.bind(this);
        setTimeout(this.closure_on_second_left, 1000);
    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    go_to_platron : function() {
        window.location.href = this.url;
    },

    _on_click_btn_cancel : function() {
        this.cancelled = true;
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },

    _on_click_btn_go : function() {
        this.go_to_platron();
    },

    _on_second_left : function() {
        if(this.cancelled)
            return;

        --this.seconds;
        this.jq_seconds.text(this.seconds);
        if(this.seconds >0) {
            setTimeout(this.closure_on_second_left, 1000);
        } else {
            this.go_to_platron();
        }
    },

};
/**
 * Created by erinsasha on 01/08/17.
 */


/**
 *
 * @param options
 * @param options.order
 * @param options.jq_parent
 * @param options.on_cancel
 * @param options.on_receipt_sent
 * @constructor
 */
function ERLH_W_Platron_Send_Receipt(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this.order = options.order;

    this._process();
}

ERLH_W_Platron_Send_Receipt.prototype = {
    _process : function() {
        if(this.order.status != ERLH_Order.static.status.completed) {
            new ERLH_W_Message({ message : 'Order must be marked as completed' });
            this._on_cancel();
        } else {
            this._show_dialog();
        }
    },
    _show_dialog : function() {
        var message = 'Do you want to send receipt for order #'+this.order.id+' ?';
        var receipt_status_str = ERLH_Order.static.get_receipt_status_ids_to_names()[this.order.receipt_status];
        message += ' \nReceipt status : '+this.order.receipt_status+' '+receipt_status_str;

        new ERLH_W_Dialog_Yes_No({
            jq_parent : this.jq_parent,
            message : message,
            on_yes : this._send_receipt.bind(this),
            on_no : this._on_cancel.bind(this)
        });
    },

    _send_receipt : function() {
        var that = this;

        erlh_server.send(
            erlh_server.url.platron.sendreceipt,
            {
                order_id : this.order.id,
                options : {
                    send_any_way : true
                }
            },
            function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    if(that.options.on_receipt_sent)
                        that.options.on_receipt_sent(response);
                }
            }
        );
    },

    _on_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
    },

};
/**
 * Created by erinsasha on 22/04/17.
 */
/**
 *
 * @param options
 * @param options.jq_parent
 * @param options.email
 * @param options.on_cancel
 * @returns {*}
 * @constructor
 */
function ERLH_W_Reset_Password(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.email = options.email;

    this.options = options;

    this.jq_main = $('#ERLH_W_Reset_Password');
    if(this.jq_main.length == 1) {
        var vthis = jQuery.data( this.jq_main[0], 'ERLH_W_Reset_Password');
        vthis.show(options.message);
        return vthis;
    }

    this._build();

    jQuery.data( this.jq_main[0], 'ERLH_W_Reset_Password', this );
}

ERLH_W_Reset_Password.prototype = {
    _build_HTML : function() {
        var html = '<div id="ERLH_W_Reset_Password" class="ERLH_W_Reset_Password">';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_popup = new ERLH_W_Popup({
            jq_parent : this.jq_main,
            not_closable : true
        });

        $('<p class="erlh_header">Reset password</p>').appendTo(this.w_popup.get_user_cont());

        this.w_tabs_and_conts = new ERLH_W_Tabs_And_Conts({
            jq_parent : this.w_popup.get_user_cont(),
            tabs : [
                {id : 'step1', name : 'Step 1'},
            ],
            active_tab_id : 'step1'
        });

        this.w_step1 = new ERLH_W_Reset_Password_Step1({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont('step1'),
            email : this.email,
            on_request_sent : this._on_get_reset_code_request_sent.bind(this),
            on_cancel : this._on_cancel.bind(this),
            on_email_changed : this._on_email_changed.bind(this)
        });

        this._add_handlers();
    },

    _build_step2 : function() {
        if(this.w_step2)
            return;

        var tab = {id : 'step2', name : 'Step 2'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_step2 = new ERLH_W_Reset_Password_Step2({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            email : this.email,
            on_cancel : this._on_cancel.bind(this),
        });
    },

    _add_handlers : function() {
        window.addEventListener(
            erlh_curr_user.EVENT_USER_LOGGED_IN,
            this._on_EVENT_USER_LOGGED_IN.bind(this),
            false);
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_email_changed : function(email) {
        this.email = email;

        if(this.w_step2) {
            this.w_step2.set_email(email);
        }
    },

    _on_get_reset_code_request_sent : function() {
        if(!this.w_step2) {
            this._build_step2();
        }
        this.w_tabs_and_conts.set_active('step2');
    },

    _on_cancel : function() {
        this.remove();

        if(this.options.on_cancel)
            this.options.on_cancel();
    },

    _on_EVENT_USER_LOGGED_IN : function(event) {
        this.remove();
    },


};
/**
 * Created by erinsasha on 22/04/17.
 */
/**
 *
 * @param options
 * @param options.jq_parent
 * @param options.email
 * @param options.on_request_sent
 * @param options.on_cancel
 * @param options.on_email_changed
 * @constructor
 */
function ERLH_W_Reset_Password_Step1(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.email = options.email;

    this._build();
}

ERLH_W_Reset_Password_Step1.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Reset_Password_Step1">';
        html += '<div class="email_cont"></div>';

        html += '<div class="buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_request_cont"></span>';

        html += '</div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_email = new ERLH_W_Input_Email({
            html_class : 'email_field',
            is_required : true,
            jq_parent : this.jq_main.children('.email_cont'),
            input_attrs : {
                value : this.email ? this.email : ''
            },
            on_change : this.options.on_email_changed
        });

        var jq_buttons_cont = this.jq_main.children('.buttons_cont');

        this.w_btn_request_reset_code = new ERLH_W_Button({
            html_class : 'btn_send',
            jq_parent : jq_buttons_cont.children('.btn_request_cont'),
            text : 'Request reset code',
            on_click : this._on_click_btn_request_reset_code.bind(this)
        });

        this.w_btn_cansel = new ERLH_W_Button({
            html_class : 'btn_send',
            jq_parent : jq_buttons_cont.children('.btn_cancel_cont'),
            text : 'Cansel',
            on_click : this.options.on_cancel
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_click_btn_request_reset_code : function() {
        if(!this.w_email.is_ok())
            return;

        var that = this;

        erlh_server.send(erlh_server.url.user.reqresetcode, { email : this.w_email.get() }, function(err, response) {
            if(err) {
                ERLH_W_LH_Connector_Server_Error.show_error(err);
            } else {
                new ERLH_W_Message({ message : 'Reset code has been sent!' });
                that.options.on_request_sent();
            }
        });
    },
};
/**
 * Created by erinsasha on 22/04/17.
 */
/**
 *
 * @param options
 * @param options.jq_parent
 * @param options.email
 * @param options.on_done
 * @param options.on_cancel
 * @constructor
 */
function ERLH_W_Reset_Password_Step2(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;
    this.email = options.email;

    this.options = options;

    this._build();
}

ERLH_W_Reset_Password_Step2.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Reset_Password_Step2">';
        html += '<div class="reset_code_cont"></div>';
        html += '<div class="passwords_cont"></div>';

        html += '<div class="buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_reset_cont"></span>';

        html += '</div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_reset_code = new ERLH_W_Input({
            html_class : 'reset_code_field',
            jq_parent : this.jq_main.children('.reset_code_cont'),
            input_attrs : {
                placeholder : 'Reset code',
                type : 'text'
            },
        });

        this.w_passwords_double = new ERLH_W_Input_Password_Double({
            html_class : 'password_double',
            placeholder : 'new password',
            jq_parent : this.jq_main.children('.passwords_cont')
        });

        var jq_buttons_cont = this.jq_main.children('.buttons_cont');

        this.w_btn_reset_password = new ERLH_W_Button({
            html_class : 'btn_reset',
            jq_parent : jq_buttons_cont.children('.btn_reset_cont'),
            text : 'Reset',
            on_click : this._on_click_btn_reset.bind(this)
        });

        this.w_btn_cansel = new ERLH_W_Button({
            html_class : 'btn_reset',
            jq_parent : jq_buttons_cont.children('.btn_cancel_cont'),
            text : 'Cansel',
            on_click : this.options.on_cancel
        });

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    remove : function() {
        this.jq_main.remove();
    },

    set_email : function(email) {
        this.email = email;
    },

    _check_before_sending : function() {
        var reset_code = this.w_reset_code.get();
        if(reset_code == '') {
            return "Please, set reset code";
        }

        check = this.w_passwords_double.is_ok();

        if(check !== true) {
            return check;
        }

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        return {
            email : this.email,
            reset_code : this.w_reset_code.get(),
            new_password : this.w_passwords_double.get(),
        }
    },

    _on_click_btn_reset : function() {
        if(!this._check_before_sending_and_show_message())
            return;

        var request = this._gather_fields();
        var that = this;

        erlh_server.send(erlh_server.url.user.resetpass, request, function(err, response) {
            if(err) {
                ERLH_W_LH_Connector_Server_Error.show_error(err);
            } else {
                response.user.password = request.new_password;
                erlh_curr_user.set_logged_in_user(response.user);
            }
        });
    },
};
/**
 * Created by erinsasha on 18/04/17.
 */

/**
 *
 * @param options
 * @param options.show_login_first
 * @param options.on_click_skip
 * @returns {*}
 * @constructor
 */
function ERLH_W_Sign_in_up(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.linkedin_mode = options.linkedin_mode;

    this.jq_main = $('#ERLH_W_Sign_in_up');
    if(this.jq_main.length == 1) {
        var vthis = jQuery.data( this.jq_main[0], 'ERLH_W_Sign_in_up');
        vthis.show(options.message);
        return vthis;
    }

    this._build();

    jQuery.data( this.jq_main[0], 'ERLH_W_Sign_in_up', this );
}

ERLH_W_Sign_in_up.prototype = {
    _build_HTML : function() {
        var html_class_linkedin_mode = this.linkedin_mode ? 'linkedin_mode' : '';

        var html = '<div id="ERLH_W_Sign_in_up" class="ERLH_W_Sign_in_up '+html_class_linkedin_mode+'">';
        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_popup = new ERLH_W_Popup({
            jq_parent : this.jq_main,
            not_closable : !this.linkedin_mode,
            dont_add_close_button : true,
            on_close : this._on_click_skip.bind(this)
        });

        this.w_popup.get_user_cont().append($('<div class="erlh_header">Linked Helper</div>'));

        this.w_tabs_and_conts = new ERLH_W_Tabs_And_Conts({
            jq_parent : this.w_popup.get_user_cont(),
            tabs : [
                {id : 'signin', name : 'Login'},
                {id : 'signup', name : 'Create account'},
            ],
            active_tab_id : this.options.show_login_first ? 'signin' : 'signup'
        });

        this.w_signin = new ERLH_W_Signin({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont('signin'),
            dont_add_header : true,
            linkedin_mode : this.linkedin_mode,
            on_click_skip : this._on_click_skip.bind(this)
        });

        this.w_signup = new ERLH_W_Signup({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont('signup'),
            dont_add_header : true,
            linkedin_mode : this.linkedin_mode,
            on_click_skip : this._on_click_skip.bind(this)
        });

        this._add_handlers();
    },

    _add_handlers : function() {
        window.addEventListener(
            erlh_curr_user.EVENT_USER_LOGGED_IN,
            this._on_EVENT_USER_LOGGED_IN.bind(this),
            false);
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_EVENT_USER_LOGGED_IN : function(event) {
        this.remove();
    },

    _on_click_skip : function() {
        this.remove();
        new ERLH_W_Message({ message : 'Go to "My Account" settings to Sign In / Sign Up' });

        erlh_curr_user._send_EVENT_USER_SKIPPED_LOGIN();

        if(this.options.on_click_skip)
            this.options.on_click_skip();
    },
};
/**
 * Created by erinsasha on 14/04/17.
 */
/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.on_click_skip
 * @constructor
 */
function ERLH_W_Signin(options) {
    options = options ? options : {};

    this.options = options;
    this.linkedin_mode = options.linkedin_mode;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Signin.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Signin">';
        if(!this.options.dont_add_header)
            html += '<p class="header">Login</p>';

        html += '<div class="email_cont"></div>';
        html += '<div class="password_cont"></div>';


        html += '<div class="erlh_buttons_cont">';

        html += '<span class="btn_forgot_cont"></span>';
        html += '<span class="btn_skip_cont"></span>';
        html += '<span class="btn_send_cont"></span>';

        html += '</div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },

    _add_handlers : function() {
        var closure_on_click_send = this._on_click_send.bind(this);

        this.w_email = new ERLH_W_Input_Email({
            html_class : 'email_field',
            is_required : true,
            jq_parent : this.jq_main.children('.email_cont'),
            on_enter : closure_on_click_send
        });

        this.w_password = new ERLH_W_Input_Password({
            jq_parent : this.jq_main.children('.password_cont'),
            html_class : 'w_password',
            on_enter : closure_on_click_send
        });

        var jq_buttons_cont = this.jq_main.children('.erlh_buttons_cont');

        this.w_btn_forgot = new ERLH_W_Button({
            html_class : 'btn_forgot',
            jq_parent : jq_buttons_cont.children('.btn_forgot_cont'),
            text : 'Forgot password',
            on_click : this._on_click_btn_forgot.bind(this)
        });

        if(this.linkedin_mode) {
            this.w_btn_skip = new ERLH_W_Button({
                html_class : 'btn_skip',
                jq_parent : jq_buttons_cont.children('.btn_skip_cont'),
                text : 'Skip',
                on_click : this._on_click_skip.bind(this)
            });
        }

        this.w_btn_send = new ERLH_W_Button({
            html_class : 'btn_send',
            jq_parent : jq_buttons_cont.children('.btn_send_cont'),
            text : 'Send',
            color : 'green',
            on_click : closure_on_click_send
        });
    },

    _check_before_sending : function() {
        var check = this.w_email.is_ok();
        if(check !== true) {
            return check;
        }

        check = this.w_password.is_ok();

        if(check !== true) {
            return check;
        }

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        return {
            email : this.w_email.get(),
            password : this.w_password.get(),
        }
    },

    _on_click_send : function() {
        if(this._check_before_sending_and_show_message()) {
            var login_password = this._gather_fields();
            erlh_server.send(erlh_server.url.user.login, login_password, function(err, response) {
                if(err) {
                    //new ERLH_W_Message({ message : err.message });
                    ERLH_W_LH_Connector_Server_Error.show_error(err);
                } else {
                    response.user.password = login_password.password;
                    erlh_curr_user.set_logged_in_user(response.user);
                }
            });
        }
    },

    _on_click_btn_forgot : function() {
        var w_reset_password = new ERLH_W_Reset_Password({
            jq_parent : this.jq_main,
            email : this.w_email.get(),
        })
    },

    _on_click_skip : function() {
        if(this.options.on_click_skip)
            this.options.on_click_skip();
    },
};
/**
 * Created by erinsasha on 12/04/17.
 */
/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.on_click_skip
 * @constructor
 */
function ERLH_W_Signup(options) {
    options = options ? options : {};

    this.options = options;
    this.linkedin_mode = options.linkedin_mode;

    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Signup.prototype = {
    _build_HTML : function() {
      var html = '<div class="ERLH_W_Signup">';
      if(!this.options.dont_add_header)
        html += '<p class="header">Create account</p>';

      html += '<div class="email_cont"></div>';
      html += '<div class="passwords_cont"></div>';
      html += '<div class="firstname_cont"></div>';
      html += '<div class="lastname_cont"></div>';

      html += this._build_HTML_buttons_cont();

      html += '</div>';

      return html;
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        if(this.linkedin_mode) {
            html += '<span class="btn_skip_cont"></span>';
        }
        html += '<span class="btn_send_cont"></span>';

        html += '</div>';

        return html;
    },

    _build : function() {
      var html = this._build_HTML();
      this.jq_main = $(html);
      this.jq_main.appendTo(this.jq_parent);

      this._add_handlers();
    },

    _add_handlers : function() {
      this.w_email = new ERLH_W_Input_Email({
          html_class : 'email_field',
          is_required : true,
          jq_parent : this.jq_main.children('.email_cont')
      });

      this.w_passwords_double = new ERLH_W_Input_Password_Double({
          html_class : 'password_double',
          jq_parent : this.jq_main.children('.passwords_cont')
      });

      this.w_firstname = new ERLH_W_Input({
          html_class : 'firstname_field',
          jq_parent : this.jq_main.children('.firstname_cont'),
          input_attrs : {
              placeholder : 'First name',
              type : 'text'
          },
      });

      this.w_lastname = new ERLH_W_Input({
          html_class : 'lastname_field',
          jq_parent : this.jq_main.children('.lastname_cont'),
          input_attrs : {
              placeholder : 'Last name',
              type : 'text'
          },
      });

      var jq_buttons_cont = this.jq_main.children('.erlh_buttons_cont');

      if(this.linkedin_mode) {
          this.w_btn_skip = new ERLH_W_Button({
              html_class : 'btn_skip',
              jq_parent : jq_buttons_cont.children('.btn_skip_cont'),
              text : 'Skip',
              on_click : this._on_click_skip.bind(this)
          });
      }

      this.w_btn_send = new ERLH_W_Button({
          html_class : 'btn_send',
          jq_parent : jq_buttons_cont.children('.btn_send_cont'),
          text : 'Send',
          color : 'green',
          on_click : this._on_click_send.bind(this)
      });
    },

    _check_before_sending : function() {
        var check = this.w_email.is_ok();
        if(check !== true) {
            return check;
        }

        check = this.w_passwords_double.is_ok();

        if(check !== true) {
            return check;
        }

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        return {
            email : this.w_email.get(),
            password : this.w_passwords_double.get(),
            firstname : this.w_firstname.get(),
            lastname : this.w_lastname.get(),
        }
    },

    _on_click_send : function() {
        if(this._check_before_sending_and_show_message()) {
            var user = this._gather_fields();
            erlh_server.send(erlh_server.url.user.create, {user : user}, function(err, response) {
                if(err) {
                    ERLH_W_LH_Connector_Server_Error.show_error(err);
                } else {
                    response.user.password = user.password;
                    erlh_curr_user.set_logged_in_user(response.user);
                }
            });
        }
    },

    _on_click_skip : function() {
        if(this.options.on_click_skip)
            this.options.on_click_skip();
    },
};
/**
 * Created by erinsasha on 24/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @param options.on_user_updated
 * @constructor
 */
function ERLH_W_User_Manage_General(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_User_Manage_General.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_User_Manage_General">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">General information</p>';

        html += '<div class="id_cont"></div>';
        html += '<div class="email_cont"></div>';
        html += '<div class="firstname_cont"></div>';
        html += '<div class="lastname_cont"></div>';
        html += '<div class="password_cont"></div>';
        html += '<div class="email_status_cont"></div>';
        html += '<div class="created_cont"></div>';
        html += '<div class="updated_cont"></div>';

        html += '<div class="btn_update_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_id = new ERLH_W_Input({
            html_class : 'id_field',
            jq_parent : this.jq_main.children('.id_cont'),
            input_attrs : {
                disabled : 'disabled',
                placeholder : 'ID',
                type : 'text',
                value : this.user ? this.user.id : ''
            },
        });

        this.w_email = new ERLH_W_Input_Email({
            html_class : 'email_field',
            is_required : true,
            jq_parent : this.jq_main.children('.email_cont'),
            input_attrs : {
                value : this.user ? this.user.email : ''
            }
        });

        this.w_firstname = new ERLH_W_Input({
            html_class : 'firstname_field',
            jq_parent : this.jq_main.children('.firstname_cont'),
            input_attrs : {
                placeholder : 'First name',
                type : 'text',
                value : this.user ? this.user.firstname : ''
            },
        });

        this.w_lastname = new ERLH_W_Input({
            html_class : 'lastname_field',
            jq_parent : this.jq_main.children('.lastname_cont'),
            input_attrs : {
                placeholder : 'Last name',
                type : 'text',
                value : this.user ? this.user.lastname : ''
            },
        });

        this.w_password = new ERLH_W_Input({
            html_class : 'password_field',
            jq_parent : this.jq_main.children('.password_cont'),
            input_attrs : {
                placeholder : 'password',
                type : 'text',
                value : this.user ? this.user.password : ''
            },
        });

        this.w_email_status = new ERLH_W_Input({
            html_class : 'email_status_field',
            jq_parent : this.jq_main.children('.email_status_cont'),
            input_attrs : {
                placeholder : 'Email status',
                type : 'number',
                value : this.user ? this.user.email_status : ''
            },
        });

        this.w_created = new ERLH_W_Input({
            html_class : 'id_field',
            jq_parent : this.jq_main.children('.created_cont'),
            input_attrs : {
                disabled : 'disabled',
                placeholder : 'created',
                type : 'text',
                value : this.user ? this.user.created : ''
            },
        });

        this.w_updated = new ERLH_W_Input({
            html_class : 'id_field',
            jq_parent : this.jq_main.children('.updated_cont'),
            input_attrs : {
                disabled : 'disabled',
                placeholder : 'updated',
                type : 'text',
                value : this.user ? this.user.updated : ''
            },
        });

        this.w_btn_update = new ERLH_W_Button({
            html_class : 'btn_update',
            jq_parent : this.jq_main.children('.btn_update_cont'),
            text : 'Update',
            on_click : this._on_click_update.bind(this)
        });

        this._add_handlers();
    },


    _add_handlers : function() {

    },

    set_user : function(user) {
        this.user = user;

        this.w_id.set(user.id);
        this.w_email.set(user.email);
        this.w_firstname.set(user.firstname);
        this.w_lastname.set(user.lastname);
        this.w_password.set(user.password);
        this.w_email_status.set(user.email_status);
        this.w_created.set(user.created);
        this.w_updated.set(user.updated);
    },

    _check_before_sending : function() {
        var check = this.w_email.is_ok();
        if(check !== true) {
            return check;
        }

        return true;
    },

    _check_before_sending_and_show_message : function() {
        var check = this._check_before_sending();
        if(check !== true) {
            new ERLH_W_Message({ message : check });
            return false;
        }

        return true;
    },

    _gather_fields : function() {
        var user = Object.assign({}, this.user);

        user.email = this.w_email.get();
        user.firstname = this.w_firstname.get();
        user.lastname = this.w_lastname.get();

        user.email_status = this.w_email_status.get();
        if(!user.email_status || user.email_status == '')
            delete user.email_status;
        else
            user.email_status = Number(user.email_status);


        var password = this.w_password.get();
        if(password && password.length > 0)
            user.password = password;

        return user;
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },

    _on_click_update : function() {
        var that = this;

        if(this._check_before_sending_and_show_message()) {
            var user = this._gather_fields();
            erlh_server.send(erlh_server.url.user.update, {user : user}, function(err, response) {
                if(err) {
                    new ERLH_W_Message({ message : err.message });
                } else {
                    response.user.password = user.password;

                    that.set_user(response.user);

                    new ERLH_W_Message({ message : 'Successfuly updated!' });

                    if(that.options.on_user_updated)
                        that.options.on_user_updated(that.user)
                }
            });
        }
    },
};
/**
 * Created by erinsasha on 24/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_User_Manage_Installs(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_User_Manage_Installs.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_User_Manage_Installs">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Installations</p>';

        html += this._build_HTML_buttons_panel();

        html += '<div class="install_list_cont"></div>';

        html += '</div>';

        return html;
    },
    _build_HTML_buttons_panel : function() {
        var html = '<div class="erlh_buttons_cont erlh_buttons_top_panel">';

        html += '<span class="btn_register_cont"></span>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_installs_list = new ERLH_W_Installs_List({
            jq_parent : this.jq_main.children('.install_list_cont'),
            lh_admin_header_set : true,
        });

        var jq_btns_cont = this.jq_main.children('.erlh_buttons_cont');

        this.w_btn_register = new ERLH_W_Button({
            html_class : 'btn_register',
            jq_parent : jq_btns_cont.children('.btn_register_cont'),
            text : 'Register',
            on_click : this._on_click_btn_register.bind(this)
        });

        this._add_handlers();
    },


    _add_handlers : function() {

    },

    set_user_id : function(user_id) {
        this.user_id = user_id;
        this.w_installs_list.set_user_id(user_id);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },

    _on_click_btn_register : function() {
        var w_install_register = new ERLH_W_Install_Register({
            jq_parent : this.jq_main,
            user_id : this.user_id,
            on_registered : this.callback_on_registered.bind(this)
        });
    },

    callback_on_registered : function(result) {
        this.w_installs_list.add_install(result.install);
    },
};
/**
 * Created by erinsasha on 30/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_User_Manage_License_Keys(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_User_Manage_License_Keys.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_User_Manage_License_Keys">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">License Keys</p>';

        html += '<div class="license_list_keys_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_license_keys_list = new ERLH_W_License_Keys_List({
            jq_parent : this.jq_main.children('.license_list_keys_cont'),
            is_admin_header_set : true
        });

        this._add_handlers();
    },


    _add_handlers : function() {

    },

    set_user_id : function(user_id) {
        this.user_id = user_id;
        this.w_license_keys_list.set_user_id(user_id);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },

};
/**
 * Created by erinsasha on 03/05/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_User_Manage_Licenses(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user = options.user;
    if(options.user) {
        this.user = options.user;
        this.user_id = options.user.id;
    } else
        this.user_id = options.user_id;

    this._build();
}

ERLH_W_User_Manage_Licenses.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_User_Manage_Licenses">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Licenses</p>';

        html += '<div class="licenses_list_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_license_list = new ERLH_W_Licenses_List_With_Control({
            jq_parent : this.jq_main.children('.licenses_list_cont'),
            is_admin_header_set : true,
            add_header_filter : true,
            on_license_selected : null,
            on_license_deselected : null
        });

        this._add_handlers();
    },


    _add_handlers : function() {

    },


    set_user : function(user) {
        this.user = user;
        this.user_id = user.id;
        this.w_license_list.set_filter({
            all_available_for_user_id : user.id
        });
        this.w_license_list.set_owner_user(user);
    },
    set_user_id : function(user_id) {
        if(this.user && this.user.id != user_id)
            this.user = null;

        this.user_id = user_id;
        this.w_license_list.set_filter({
            all_available_for_user_id : user_id
        });
        this.w_license_list.set_owner_user_id(user_id);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },

};
/**
 * Created by erinsasha on 25/04/17.
 */
/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_User_Manage_Organisations(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_User_Manage_Organisations.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_User_Manage_Organisations">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Organisations</p>';

        html += '<div class="organisation_list_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_organisations_list = new ERLH_W_Organisations_List({
            jq_parent : this.jq_main.children('.organisation_list_cont'),
            is_admin_header_set : true,
            add_header_filter : true
        });

        this._add_handlers();
    },


    _add_handlers : function() {

    },

    set_user_id : function(user_id) {
        this.user_id = user_id;
        this.w_organisations_list.set_user_id(user_id);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {

    },
    on_hide : function() {

    },

};
/**
 * Created by erinsasha on 23/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @param options.on_user_updated
 * @constructor
 */
function ERLH_W_User_Management(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this.user_id = options.user_id;

    this._build();
}

ERLH_W_User_Management.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_User_Management">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">User Management</p>';

        html += '<div class="tabs_conts_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_tabs_and_conts = new ERLH_W_Tabs_And_Conts({
            //jq_parent : this.w_popup.get_user_cont(),
            jq_parent : this.jq_main.children('.tabs_conts_cont'),
            tabs : [],
            active_tab_id : 'general'
        });

        this._build_general();
        this._build_installs();
        this._build_organisations();
        this._build_license_keys();
        this._build_licenses();

        this._add_handlers();
    },
    _build_general : function() {
        var tab = {id : 'general', name : 'General'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_general = new ERLH_W_User_Manage_General({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            //user_id : this.user,
            on_user_updated : this._on_user_updated.bind(this)
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_general.on_show();
            else
                that.w_general.on_hide();
        });
    },
    _build_installs : function() {
        var tab = {id : 'installs', name : 'Installs'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_installs = new ERLH_W_User_Manage_Installs({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            user_id : this.user ? this.user.id : null,
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_installs.on_show();
            else
                that.w_installs.on_hide();
        });
    },
    _build_organisations : function() {
        var tab = {id : 'organisations', name : 'Organisations'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_organisations = new ERLH_W_User_Manage_Organisations({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            user_id : this.user ? this.user.id : null,
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_organisations.on_show();
            else
                that.w_organisations.on_hide();
        });
    },
    _build_license_keys : function() {
        var tab = {id : 'license_keys', name : 'License Keys'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_license_keys = new ERLH_W_User_Manage_License_Keys({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            user_id : this.user ? this.user.id : null,
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_license_keys.on_show();
            else
                that.w_license_keys.on_hide();
        });
    },
    _build_licenses : function() {
        var tab = {id : 'licenses', name : 'Licenses'};
        this.w_tabs_and_conts.add_tab(tab);

        this.w_licenses = new ERLH_W_User_Manage_Licenses({
            jq_parent : this.w_tabs_and_conts.get_jq_subcont(tab.id),
            user_id : this.user ? this.user.id : null,
        });

        var that = this;

        this.w_tabs_and_conts.add_on_tab_state_changed(tab.id, function(is_showed) {
            if(is_showed)
                that.w_licenses.on_show();
            else
                that.w_licenses.on_hide();
        });
    },

    _add_handlers : function() {

    },

    set_user : function(user) {
        this.user = user;

        this.w_general.set_user(user);
        this.w_installs.set_user_id(user.id);
        this.w_organisations.set_user_id(user.id);
        this.w_license_keys.set_user_id(user.id);
        this.w_licenses.set_user(user);
    },

    hide : function() {
        this.jq_main.addClass('hidden');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },

    on_show : function() {
        
    },
    on_hide : function() {

    },

    _on_user_updated : function(user) {
        this.user = user;

        if(this.options.on_user_updated)
            this.options.on_user_updated(user)
    },
};
/**
 * Created by erinsasha on 22/04/17.
 */
/**
 *
 * @param options
 * @param options.filter
 * @param options.jq_parent
 * @param options.on_user_selected
 * @param options.on_user_deselected
 * @constructor
 */
function ERLH_W_Users_List(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = options.filter ? options.filter : {};

    this._build();
}

ERLH_W_Users_List.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Users_List">';
        
        html += '<div class="users_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.w_users_table = new ERLH_W_Table({
            jq_parent : this.jq_main.children('.users_cont'),
            html_class : 'users_table',
            header : [
                {id : 'id', name : 'ID'},
                {id : 'email', name : 'Email'},
                {id : 'firstname', name : 'First name'},
                {id : 'lastname', name : 'Last name'},
                {id : 'email_status', name : 'Email status'},
                {id : 'created', name : 'Registered', type : ERLH_W_Table.types.js_milliseconds},
            ],
            rows : [],
            add_filters : true,
            add_handlers_for_rows : this._callback_add_handlers_for_rows.bind(this),
            on_row_selected : this._callback_on_row_selected.bind(this),
            on_row_deselected : this._callback_on_row_deselected.bind(this),
        });

        this._add_handlers();
    },

    _request_users_from_server : function() {
        var that = this;

        erlh_server.send(erlh_server.url.user.list, { filter : this.filter }, function(err, response) {
            if(err) {
                new ERLH_W_Message({ message : err.message });
            } else {
                that._on_get_users_from_server(response);
            }
        });
    },

    _add_handlers : function() {

    },

    
    get : function(user_id) {
        return this.w_users_table.get_object_by_id(user_id);
    },

    update_object : function(user) {
        return this.w_users_table.update_object(user);
    },

    refresh : function() {
        this.w_users_table.delete_all_rows();
        this._request_users_from_server();
    },

    _on_get_users_from_server : function(response) {
        this.w_users_table.delete_all_rows();
        this.w_users_table.add_rows(response.users);
    },

    _callback_add_handlers_for_rows : function(jq_rows) {
        
    },

    _callback_on_row_selected : function(id, user) {
        if(this.options.on_user_selected)
            this.options.on_user_selected(id, user);
    },
    _callback_on_row_deselected : function(id, user) {
        if(this.options.on_user_deselected)
            this.options.on_user_deselected(id, user);
    },
};
/**
 * Created by erinsasha on 23/04/17.
 */

/**
 *
 * @param options
 * @param options.dont_add_header
 * @param options.jq_parent
 * @constructor
 */
function ERLH_W_Users_Management(options) {
    options = options ? options : {};

    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ERLH_W_Users_Management.prototype = {
    _build_HTML : function() {
        var html = '<div class="ERLH_W_Users_Management">';
        if(!this.options.dont_add_header)
            html += '<p class="erlh_header">Users Management</p>';

        html += '<div class="two_columns_cont"></div>';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this.jq_two_column = new ERLH_W_Two_Column({
            jq_parent : this.jq_main.children('.two_columns_cont')
        });
        
        this.w_users_list = new ERLH_W_Users_List({
            jq_parent : this.jq_two_column.get_first_column(),
            filter : {},
            on_user_selected : this._callback_on_user_list_user_selected.bind(this),
            on_user_deselected : this._callback_on_user_list_user_deselected.bind(this),
        });

        this.w_user_management = new ERLH_W_User_Management({
            jq_parent : this.jq_two_column.get_second_column(),
            dont_add_header : true,
            on_user_updated : this._callback_on_user_updated.bind(this)
        });
        this.w_user_management.hide();

        this._add_handlers();
    },

    _add_handlers : function() {

    },

    on_show : function() {
        this.w_users_list.refresh();
    },
    on_hide : function() {

    },

    _callback_on_user_list_user_selected : function(id, user) {
        this.w_user_management.set_user(user);
        this.w_user_management.show();
    },
    _callback_on_user_list_user_deselected : function(id, user) {
        this.w_user_management.hide();
    },
    _callback_on_user_updated : function(user) {
        this.w_users_list.update_object(user);
    },
};
/**
 * Created by erinsasha on 29/04/17.
 */

function ERLH_Employee(obj) {
    if(obj instanceof ERLH_Employee)
        return obj;

    if(obj) {
        var obj_keys = Object.keys(obj);
        for (var i = 0, key; i<obj_keys.length; i++) {
            key = obj_keys[i];
            this[key] = obj[key];
        }
    }
}

ERLH_Employee.prototype = {

};


ERLH_Employee.static = {};

ERLH_Employee.static.status = {};
ERLH_Employee.static.status.pending = 0;
ERLH_Employee.static.status.accepted = 1;
ERLH_Employee.static.status.declined = -1;
ERLH_Employee.static.status.deleted = -2;

ERLH_Employee.static.roles = {};
ERLH_Employee.static.roles.owner = 9;
ERLH_Employee.static.roles.member = 1;

ERLH_Employee.static.get_roles_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_Employee.static.roles);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_Employee.static.roles[name];
        result[id] = name;
    }

    return result;
};

ERLH_Employee.static.get_status_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_Employee.static.status);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_Employee.static.status[name];
        result[id] = name;
    }

    return result;
};
/**
 * Created by erinsasha on 01/05/17.
 */

function ERLH_License(obj) {
    if(obj instanceof ERLH_License)
        return obj;

    if(obj) {
        var obj_keys = Object.keys(obj);
        for (var i = 0, key; i<obj_keys.length; i++) {
            key = obj_keys[i];
            this[key] = obj[key];
        }
    }
}

ERLH_License.prototype = {

};

ERLH_License.EVENTS = {};

ERLH_License.EVENTS.LICENSE_ATTACHED = 'ERLH_EVENT_LICENSE_ATTACHED';

ERLH_License.EVENTS.send_EVENT_LICENSE_ATTACHED = function(server_data) {
    var evt = document.createEvent("CustomEvent");
    evt.initCustomEvent(ERLH_License.EVENTS.LICENSE_ATTACHED, true, true, server_data);
    window.dispatchEvent(evt);
};

ERLH_License.server = {};

ERLH_License.server.attachinstall = function(request, callback) {
    erlh_server.send(erlh_server.url.license.attachinstall,
        request,
        function(err, response) {
            try {
                callback(err, response);
            } catch (e) {
                console.error(e);
            }
            ERLH_License.EVENTS.send_EVENT_LICENSE_ATTACHED(response);
        });
};


ERLH_License.static = {};
ERLH_License.static.owner_type = {};
ERLH_License.static.owner_type.user = 1;
ERLH_License.static.owner_type.organisation = 2;

ERLH_License.static.status = {};
ERLH_License.static.status.unset = 0;
ERLH_License.static.status.deleted = -1;

ERLH_License.static.source = {};
ERLH_License.static.source.server = 1;
ERLH_License.static.source.client = 2;

ERLH_License.static.is_activated = {};
ERLH_License.static.is_activated.notactivated = 0;
ERLH_License.static.is_activated.activated = 1;

ERLH_License.static.type = {};
ERLH_License.static.type.enterprise = 'e';
ERLH_License.static.type.trial = 'p';

ERLH_License.static.get_owner_type_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_License.static.owner_type);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_License.static.owner_type[name];
        result[id] = name;
    }

    return result;
};

ERLH_License.static.get_source_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_License.static.source);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_License.static.source[name];
        result[id] = name;
    }

    return result;
};

ERLH_License.static.get_status_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_License.static.status);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_License.static.status[name];
        result[id] = name;
    }

    return result;
};

ERLH_License.static.get_is_activated_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_License.static.is_activated);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_License.static.is_activated[name];
        result[id] = name;
    }

    return result;
};

ERLH_License.static.get_type_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_License.static.type);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_License.static.type[name];
        result[id] = name;
    }

    return result;
};

ERLH_License.static.get_days_left = function(license) {
    if(license.status < 0)
        return 0;
    if(license.is_activated != ERLH_License.static.is_activated.activated) {
        return license.days;
    } else {
        var delta = license.udc - (new Date()).getTime();
        if(delta < 0)
            return 0;
        else
            return Math.round(delta/86400000);
    }
};

ERLH_License.static.check_license = function(license) {
    var result = { is_valid : true, message : 'License is valid' };

    if(license.status < 0) {
        result.is_valid = false;
        if(license.status == ERLH_License.static.status.deleted) {
            result.message = 'License has beem marked as deleted';
        } else {
            result.message = 'License is not valid';
        }
    } else {
        if(license.udc) {
            if(license.udc <= (new Date()).getTime()) {
                result.is_valid = false;
                result.message = 'License is expired';
            }
        }
    }

    return result;
};
/**
 * Created by erinsasha on 24/05/17.
 */

function ERLH_Order(obj) {
    if(obj instanceof ERLH_Order)
        return obj;

    if(obj) {
        var obj_keys = Object.keys(obj);
        for (var i = 0, key; i<obj_keys.length; i++) {
            key = obj_keys[i];
            this[key] = obj[key];
        }
    }
}

ERLH_Order.prototype = {

};


ERLH_Order.static = {};

ERLH_Order.static.status = {};
ERLH_Order.static.status.registered = 1;
ERLH_Order.static.status.deleted = -1;
ERLH_Order.static.status.completed = 2;

ERLH_Order.static.receipt_status = {};
ERLH_Order.static.receipt_status.error = -1;
ERLH_Order.static.receipt_status.not_sent = 0;
ERLH_Order.static.receipt_status.ok = 1;

ERLH_Order.static.method = {};
ERLH_Order.static.method.paypal_invoice_personal = 1;
ERLH_Order.static.method.paypal_invoice_organisation = 2;
ERLH_Order.static.method.paypal_invoice_bank_card = 3;
ERLH_Order.static.method.payoneer_invoice_personal = 4;
ERLH_Order.static.method.payoneer_invoice_organisation = 5;
ERLH_Order.static.method.payoneer_invoice_bank_card = 6;
ERLH_Order.static.method.webmoney = 7;
ERLH_Order.static.method.yandex_money = 8;
ERLH_Order.static.method.platron_bank_card = 9;

ERLH_Order.static.method_id_to_name = {
    1 : 'Personal PayPal account',
    2 : 'Organisation PayPal account',
    3 : 'Credit/Debit card via PayPal',
    4 : 'Personal Payoneer account',
    5 : 'Organisation Payoneer account',
    6 : 'Credit/Debit card via Payoneer',
    7 : 'WebMoney',
    8 : 'Yandex Money',
    9 : 'Credit/Debit Bank Card',
};

/**
 *
 * @param options
 * @param options.without_payoneer
 * @param options.without_credit_debit_card_via_paypal
 * @param options.without_yandex
 * @param options.without_webmoney
 * @returns {{}}
 */
ERLH_Order.static.get_method_ids_to_names = function(options) {
    options = options ? options : {};
    var keys = Object.keys(ERLH_Order.static.method_id_to_name);
    var result = {};
    for(var i= 0, key; i<keys.length; i++) {
        key = keys[i];
        result[key] = ERLH_Order.static.method_id_to_name[key];
    }

    if(options.without_credit_debit_card_via_paypal) {
        delete result[3];
    }

    if(options.without_payoneer) {
        delete result[4];
        delete result[5];
        delete result[6];
    }
    if(options.without_webmoney) {
        delete result[7];
    }
    if(options.without_yandex) {
        delete result[8];
    }
    if(options.without_credit_debit_card_via_platron) {
        delete result[9];
    }

    /*if(!erlh_curr_user.is_lh_admin())
        delete result[9];*/

    return result;
};

ERLH_Order.static.get_status_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_Order.static.status);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_Order.static.status[name];
        result[id] = name;
    }

    return result;
};

ERLH_Order.static.get_receipt_status_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_Order.static.receipt_status);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_Order.static.receipt_status[name];
        result[id] = name;
    }

    return result;
};

ERLH_Order.static.pricing_id_to_amount = {
    1 : 15,
    3 : 40,
    6 : 60,
    12 : 99
};

ERLH_Order.static.quantity_range_to_discount = [
    {q_start : 1, q_end : 9, discount : 0},
    {q_start : 10, q_end : 19, discount : 10},
    {q_start : 20, q_end : 49, discount : 20},
    {q_start : 50, q_end : Number.MAX_SAFE_INTEGER, discount : 30},
];

ERLH_Order.static.get_discount_for_quantity = function(quantity) {
    var arr = ERLH_Order.static.quantity_range_to_discount;
    for(var i= 0, el; i<arr.length; i++) {
        el = arr[i];
        if(el.q_start <= quantity && el.q_end >= quantity)
            return el.discount;
    }
    return 0;
};

ERLH_Order.server = {};

ERLH_Order.server.updatestatus = function(order_id, new_status, callback) {
    erlh_server.send(erlh_server.url.order.updatestatus,
        {
            order_id : order_id,
            new_status : new_status,
        },
        function(err, response) {
            callback(err, response);
        }
    );
};

ERLH_Order.server.executeorder = function(order_id, options, callback) {
    erlh_server.send(erlh_server.url.order.executeorder,
        {
            order_id : order_id,
            options : options,
        },
        function(err, response) {
            callback(err, response);
        }
    );
};

ERLH_Order.server.sendinvoice = function(order_id, invoice_url, options, callback) {
    erlh_server.send(erlh_server.url.order.sendinvoice,
        {
            order_id : order_id,
            invoice_url : invoice_url,
        },
        function(err, response) {
            callback(err, response);
        }
    );
};
/**
 * Created by erinsasha on 06/08/17.
 */
var erlhclient = window.erlhclient || {
    init : function() {
        if(this.started)
            return;
        console.log('ERLH-CLIENT START INIT');
        this.started = true;

        this.messages = {};

        this.createRequestCont();
        this.initObserverForErlhResponseCont();
        console.log('ERLH-CLIENT INITED');
    },
    createRequestCont : function() {
        console.log('ERLH-CLIENT START createRequestCont');
        this.elRequestCont = document.createElement("div");
        this.elRequestCont.id = 'erlh-server-request';
        this.elRequestCont.hidden = true;
        document.body.appendChild(this.elRequestCont);
        console.log('ERLH-CLIENT END createRequestCont');
    },
    writeMessage : function(id, requestMessage) {
        console.log('START ERLH-CLIENT writeMessage ID='+id);
        var el = document.createElement("div");
        el.id = id;
        el.innerText = JSON.stringify(requestMessage);
        this.elRequestCont.appendChild(el);
        console.log('END ERLH-CLIENT writeMessage ID='+id);
    },
    readMessage : function(id) {
        console.log('START ERLH-CLIENT readMessage ID='+id);
        var el = document.getElementById(id);
        var obj = JSON.parse(el.innerText);
        el.remove();
        console.log(obj);
        console.log('END ERLH-CLIENT readMessage ID='+id);
        return obj;
    },
    waitForErlhResponceCont : function(callback) {
        console.log('ERLH-CLIENT START waitForErlhResponceCont');
        this.elResponseCont = document.getElementById('erlh-server-response');

        if(this.elResponseCont) {
            console.log('ERLH-CLIENT END waitForErlhResponceCont');
            callback(this.elResponseCont);
        } else {
            var that = this;
            setTimeout(function() { that.waitForErlhResponceCont(callback) }, 100);
        }
    },
    initObserverForErlhResponseCont : function() {
        console.log('ERLH-CLIENT START initObserverForErlhResponseCont');
        if(!this.elResponseCont) {
            this.waitForErlhResponceCont(this.initObserverForErlhResponseCont.bind(this));
            return;
        }

        var observer = new MutationObserver(this.observerErlhResponseCont.bind(this));
        observer.observe(
            this.elResponseCont,
            { attributes: false, childList: true, characterData: false }
        );
        console.log('ERLH-CLIENT END initObserverForErlhResponseCont');
    },
    observerErlhResponseCont : function(mutations) {
        this.readAllResponses();
        /*for (var i = 0; i < mutations.length; i++)
        {
            var mut = mutations[i];
            // пройдем по добавленным песням
            for (var j = 0, node; j < mut.addedNodes.length; j++)
            {
                node = mut.addedNodes[j];
                this.executeResponse(node.id);
            }
            // удаленныые записи - mut.removedNodes игнорируем
        }*/
    },
    readAllResponses : function() {
        console.log('ERLH-CLIENT START readAllResponses');
        var childNodes = this.elResponseCont.childNodes;
        for(var i= 0, node; i<childNodes.length; i++) {
            node = childNodes[i];
            try {
                this.executeResponse(node.id);
            } catch (err) {
            console.log('ERLH-CLIENT ERROR executeResponse:');
            console.error(err);
        }

        }
        console.log('ERLH-CLIENT END readAllResponses');
    },
    executeResponse : function(id) {
        var obj = this.readMessage(id);
        var message = this.messages[id];
        message.callback(obj);
    },

    /**
     *
     * @param external_options
     * @param external_options.method (default : 'POST')
     * @param external_options.url
     * @param external_options.requestHeader
     * @param external_options.requestHeader[Content-Type] (default : "application/json;charset=UTF-8")
     * @param external_options.request String
     *
     * @param internal_options
     */
    send : function(external_options, callback) {
        console.log('ERLH-CLIENT START readAllResponses');
        var message_id = this.generate_message_id();
        console.log('ERLH-CLIENT prepare to write message_id='+message_id);

        this.messages[message_id] = {
            message_id : message_id,
            external_options : external_options,
            callback : callback
        };

        this.writeMessage(message_id, external_options);
    },
    generate_message_id : function() {
        return (new Date()).getTime() + '-' + erlh_utils.getRandomInt(100, 100000);
    },
};
/**
 * Created by erinsasha on 13/04/17.
 */
var erlh_server = window.erlh_server || {

        EVENT_NOT_AUTHORIZED : 'ERLH_EVENT_NOT_AUTHORIZED',

        is_linkedin : function() {
            return window.location.href.indexOf('linkedin.com') > 0;
        },

        send : function(url, request, callback) {
            if(this.is_linkedin()) {
                this.send_erlhclient(url, request, callback);
            } else {
                this.send_directly(url, request, callback);
            }
            //this.send_directly(url, request, callback);
        },

        send_directly : function(url, request, callback) {
            var that = this;

            var req = new XMLHttpRequest();
            req.open('POST', this.server + url);
            req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

            var token = this.get_token();
            if(token)
                req.setRequestHeader("token", token);


            req.onreadystatechange = function() {//Call a function when the state changes.
                if(req.readyState == XMLHttpRequest.DONE) {
                    var response;

                    response = req.responseText;
                    try {
                        if(response)
                            response = JSON.parse(response);
                    } catch (err) {
                        console.error(err);
                    }

                    if(req.status == 200) {
                        console.log(response);
                        callback(null, response)
                    } else {
                        console.log('url = '+url);
                        console.log('request');
                        console.log(request);
                        console.error(req.responseText);
                        var err;
                        if(req.status == 401) {
                            var evt = document.createEvent("CustomEvent");
                            evt.initCustomEvent(that.EVENT_NOT_AUTHORIZED, true, true, null);
                            window.dispatchEvent(evt);

                            err = new Error('NOT_AUTHORIZED');
                        } else {
                            var err_message;
                            if(response) {
                                var error = response.error;
                                if(error) {
                                    if(error.message) {
                                        err_message = error.message;
                                    } else {
                                        err_message = error;
                                    }
                                } else {
                                    err_message = 'Server communication error';
                                }
                            } else {
                                err_message = 'Server communication error';
                            }
                            err = new Error(err_message);
                        }
                        err.response_status = req.status;
                        callback(err, response);
                    }
                }
            };
            req.send(JSON.stringify(request));
        },
        send_erlhclient : function(url, request, callback) {
            var that = this;
            var external_options = {
                url : this.server + url,
                method : 'POST',
                requestHeader : {},
                request : JSON.stringify(request)
            };
            external_options.requestHeader['Content-Type'] = "application/json;charset=UTF-8";

            var token = this.get_token();
            if(token)
                external_options.requestHeader['token'] = token;

            erlhclient.send(
                external_options,
                function(serverResponse) {
                    var response;

                    response = serverResponse.responseText;
                    try {
                        if(response)
                            response = JSON.parse(response);
                    } catch (err) {
                        console.error(err);
                    }

                    if(serverResponse.status == 200) {
                        console.log(response);
                        callback(null, response)
                    } else {
                        console.log('url = ' + url);
                        console.log('request');
                        console.log(request);
                        console.error(serverResponse.responseText);
                        var err;
                        if (serverResponse.status == 401) {
                            var evt = document.createEvent("CustomEvent");
                            evt.initCustomEvent(that.EVENT_NOT_AUTHORIZED, true, true, null);
                            window.dispatchEvent(evt);

                            err = new Error('NOT_AUTHORIZED');
                        } else {
                            var err_message;
                            if (response) {
                                var error = response.error;
                                if (error) {
                                    if (error.message) {
                                        err_message = error.message;
                                    } else {
                                        err_message = error;
                                    }
                                } else {
                                    err_message = 'Server communication error';
                                }
                            } else {
                                err_message = 'Server communication error';
                            }
                            err = new Error(err_message);
                        }
                        err.response_status = serverResponse.status;
                        callback(err, response);
                    }
                }
            );
        },

        get_token_obj : function() {
            if(erlh_curr_user.is_logged_in()) {
                return {
                    email : erlh_curr_user.user.email,
                    password : erlh_curr_user.user.password,
                }
            }
        },
        get_token : function() {
            var token_obj = this.get_token_obj();
            if (token_obj)
                return btoa(JSON.stringify(token_obj));
            else
                return null;
        },

        server : 'http://localhost:8080',
        //server : 'https://linkedhelper.com',
        //server : 'https://miami.linkedhelper.com',
        url : {
            user : {
                create : '/users/create',
                login : '/users/login',
                update : '/users/update',
                list : '/users/list',
                setnewpass : '/users/setnewpass',
                reqresetcode : '/users/reqresetcode',
                resetpass : '/users/resetpass',
            },
            install : {
                list : '/installs/list',
                update : '/installs/update',
                register : '/installs/register',
            },
            organisation : {
                list : '/organisations/list',
                create : '/organisations/create',
                update : '/organisations/update',
                delete : '/organisations/delete',
            },
            employee : {
                list : '/employees/list',
                add : '/employees/add',
                update : '/employees/update',
                delete : '/employees/delete',
                acceptdecline : '/employees/acceptdecline',
            },
            license_key : {
                list : '/licenses/keys/list',
                registerclient : '/licenses/keys/registerclient',
                getstatus : '/licenses/keys/getstatus',
                getnewkey : '/licenses/keys/getnewkey',
            },
            license : {
                list : '/licenses/list',
                create : '/licenses/create',
                update : '/licenses/update',
                delete : '/licenses/delete',
                attachinstall : '/licenses/attachinstall',
                detachinstall : '/licenses/detachinstall',
            },
            order : {
                list : '/orders/list',
                create : '/orders/create',
                updatestatus : '/orders/updatestatus',
                executeorder : '/orders/executeorder',
                sendinvoice : '/orders/sendinvoice',
            },
            platron : {
                getorderlink : '/platron/getorderlink',
                sendreceipt : '/platron/sendreceipt'
            },
            ping : {
                ping : '/ping/ping',
            }
        }
    };
/**
 * Created by erinsasha on 30/04/17.
 */

function ERLH_License_Key(obj) {
    if(obj instanceof ERLH_License_Key)
        return obj;

    if(obj) {
        var obj_keys = Object.keys(obj);
        for (var i = 0, key; i<obj_keys.length; i++) {
            key = obj_keys[i];
            this[key] = obj[key];
        }
    }
}

ERLH_License_Key.prototype = {

};


ERLH_License_Key.static = {};
ERLH_License_Key.static.source = {};
ERLH_License_Key.static.source.server = 1;
ERLH_License_Key.static.source.client = 2;

ERLH_License_Key.static.status = {};
ERLH_License_Key.static.status.rejected = -1;
ERLH_License_Key.static.status.active = 1;

ERLH_License_Key.static.get_source_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_License_Key.static.source);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_License_Key.static.source[name];
        result[id] = name;
    }

    return result;
};

ERLH_License_Key.static.get_status_ids_to_names = function() {
    var result = {};
    var keys = Object.keys(ERLH_License_Key.static.status);

    for(var i= 0, name, id; i<keys.length; i++) {
        name = keys[i];
        id = ERLH_License_Key.static.status[name];
        result[id] = name;
    }

    return result;
};
/**
 * Created by erinsasha on 13/04/17.
 */
var erlh_curr_user = window.erlh_curr_user || {
        EVENT_USER_LOGGED_IN : 'ERLH_EVENT_USER_LOGGED_IN',
        EVENT_USER_INITED_IN : 'ERLH_EVENT_USER_INITED_IN',
        EVENT_USER_READY : 'ERLH_EVENT_USER_READY',
        EVENT_USER_LOGGED_OFF : 'ERLH_EVENT_USER_LOGGED_OFF',
        EVENT_USER_SKIPPED_LOGIN : 'ERLH_EVENT_USER_SKIPPED_LOGIN',

        user : null,

        init : function() {
            if(this.inited)
                return;

            this._init_from_storage();

            this.inited = true;
        },

        set_logged_in_user : function(user) {
            if(!(user instanceof ERLH_User))
                this.user = new ERLH_User(user);
            else
                this.user = user;
            this.save_to_storage();

            this._send_EVENT_USER_LOGGED_IN();
        },

        is_logged_in : function() {
            this.init();

            if(this.user)
                return true;
            else
                return false;
        },
        is_lh_admin : function() {
            if(this.user) {
                return this.user.is_lh_admin();
            } else {
                return false;
            }
        },

        logoff : function() {
            this.user = null;
            delete localStorage.erlh_curr_user;

            this._send_EVENT_USER_LOGGED_OFF();
        },

        _init_from_storage : function() {
            var user = localStorage.erlh_curr_user;
            if(user) {
                this.user = new ERLH_User(JSON.parse(user));
                this._send_EVENT_USER_INITED_IN();
            }
        },
        _send_EVENT_USER_LOGGED_IN : function() {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_USER_LOGGED_IN, true, true, null);
            window.dispatchEvent(evt);

            this._send_EVENT_USER_READY();
        },
        _send_EVENT_USER_INITED_IN : function() {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_USER_INITED_IN, true, true, null);
            window.dispatchEvent(evt);

            this._send_EVENT_USER_READY();
        },
        _send_EVENT_USER_READY : function() {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_USER_READY, true, true, null);
            window.dispatchEvent(evt);
        },
        _send_EVENT_USER_LOGGED_OFF : function() {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_USER_LOGGED_OFF, true, true, null);
            window.dispatchEvent(evt);
        },
        _send_EVENT_USER_SKIPPED_LOGIN : function() {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_USER_SKIPPED_LOGIN, true, true, null);
            window.dispatchEvent(evt);
        },
        save_to_storage : function() {
            if(this.user) {
                localStorage.erlh_curr_user = JSON.stringify(this.user);
            }
        }
    };
/**
 * Created by erinsasha on 13/04/17.
 */
function ERLH_User(obj) {
    if(obj instanceof ERLH_User)
        return obj;

    if(obj) {
        var obj_keys = Object.keys(obj);
        for (var i = 0, key; i<obj_keys.length; i++) {
            key = obj_keys[i];
            this[key] = obj[key];
        }
    }
}

ERLH_User.prototype = {
    get_fullname : function() {
        var name;
        if(this.firstname) {
            name = this.firstname;
            if(this.lastname && this.lastname != '')
                name += ' ' + this.lastname
        } else if(this.lastname) {
            name = this.lastname;
        } else {
            name = '';
        }
        return name;
    },
    is_lh_admin : function() {
        return this.lh == ERLH_User.static.lh.admin;
    }
};


ERLH_User.static = {};
ERLH_User.static.lh = {};
ERLH_User.static.lh.admin = 9;
/**
 * Created by erinsasha on 12/04/17.
 */
var erlh_utils = window.erlh_utils || {
        _emailCheck: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        checkMail : function(mail) {
            return this._emailCheck.test(mail);
        },

        months_short_names : ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"],
        get_month_short_name : function(month) {
            return this.months_short_names[month];
        },

        // https://stackoverflow.com/questions/8486099/how-do-i-parse-a-url-query-parameters-in-javascript
        getJsonFromUrl : function (href) {
            var query;
            var pos = href.indexOf("?");
            if(pos==-1) return [];
            query = href.substr(pos+1);

            var result = {};
            query.split("&").forEach(function(part) {
                if(!part) return;
                part = part.split("+").join(" "); // replace every + with space, regexp-free version
                var eq = part.indexOf("=");
                var key = eq>-1 ? part.substr(0,eq) : part;
                var val = eq>-1 ? decodeURIComponent(part.substr(eq+1)) : "";
                var from = key.indexOf("[");
                if(from==-1) result[decodeURIComponent(key)] = val;
                else {
                    var to = key.indexOf("]",from);
                    var index = decodeURIComponent(key.substring(from+1,to));
                    key = decodeURIComponent(key.substring(0,from));
                    if(!result[key]) result[key] = [];
                    if(!index) result[key].push(val);
                    else result[key][index] = val;
                }
            });
            return result;
        },

        /**
         * Возвращает рандномный Int
         * @param min
         * @param max
         * @returns {*}
         */
        getRandomInt : function(min, max) {
            return Math.floor(Math.random() * (max - min)) + min;
        },

        getLongestWord : function(str) {
            str = str.replace(new RegExp('\n|\t', 'g'), ' ');
            var arr = str.split(' ');
            var result, length = 0;

            if(arr.length > 0) {
                result = arr[0];
                length = result.length;
            }

            for(var i= 1, curr, curr_length; i<arr.length; i++) {
                curr = arr[i];
                curr_length = curr.length;
                if(curr_length > length) {
                    length = curr_length;
                    result = curr;
                }
            }

            return result;
        },

        addLeftZeros : function pad(num, size) {
            var s = num+"";
            while (s.length < size) s = "0" + s;
            return s;
        },
        datetimeServerToJSDate : function(datetimeFrom) {
            return new Date(datetimeFrom.replace(/ /g, 'T'));
        },
        datetimeServerToUser : function(datetimeFrom, options) {
            if (options == null)
                options = {};
            if (options.timeFirst == null)
                options.timeFirst = false;
            if (options.needSeconds === null || 'undefined' == typeof options.needSeconds)
                options.needSeconds = true;

            //var date = new Date(datetimeFrom.replace(/ /g, 'T'));
            var date = this.datetimeServerToJSDate(datetimeFrom);
            /*var strTime = this.addLeftZeros(date.getHours(), 2) + ":" + this.addLeftZeros(date.getMinutes(),2);
             if (options.needSeconds)
             strTime += ":" + this.addLeftZeros(date.getSeconds(),2);
             var strDate = date.getFullYear() + '-'+ this.addLeftZeros(date.getDate(), 2) + '-'+ this.addLeftZeros((date.getMonth()+1), 2);

             if (options.timeFirst)
             return strTime + ' ' + strDate;
             else
             return strDate + ' ' + strTime;*/

            return this.datetimeJSToUser(date, options);
        },
        datetimeJSToUser : function(datetimeFrom, options) {
            options = options ? options : {};

            var strTime;
            if(options.only_date)
                strTime = '';
            else
                strTime = this.addLeftZeros(datetimeFrom.getHours(), 2) + ":" + this.addLeftZeros(datetimeFrom.getMinutes(),2);
            if (options.needSeconds)
                strTime += ":" + this.addLeftZeros(datetimeFrom.getSeconds(),2);
            //var strDate = datetimeFrom.getFullYear() + '-'+ this.addLeftZeros((datetimeFrom.getMonth()+1), 2) + '-'+ this.addLeftZeros(datetimeFrom.getDate(), 2);
            var strDate = this.addLeftZeros(datetimeFrom.getDate(), 2) + ' '+ this.get_month_short_name(datetimeFrom.getMonth()) + ' '+ datetimeFrom.getFullYear();

            if (options.timeFirst)
                return strTime + ' ' + strDate;
            else
                return strDate + ' ' + strTime;
        },
        datetimeUserToServer : function(dateTime) {
            dateTime = dateTime.replace(/T/g, ' ');
            var colon_count = (dateTime.match(/:/g) || []).length;
            if(colon_count == 1)
                dateTime += ':00';
            return dateTime;
        },
        datetimeJSToServer : function(date) {
            var strDate = date.getFullYear() + '-'+ this.addLeftZeros((date.getMonth()+1), 2)  + '-'+ this.addLeftZeros(date.getDate(), 2);
            var strTime = this.addLeftZeros(date.getHours(), 2) + ":" + this.addLeftZeros(date.getMinutes(),2) + ":" + this.addLeftZeros(date.getSeconds(),2);
            return strDate + ' ' + strTime;
        },
        datetime_input_to_js : function(date) {
            return new Date(date);
        },
        datetime_js_to_input : function(datetimeFrom) {
            var strTime = this.addLeftZeros(datetimeFrom.getHours(), 2) + ":" + this.addLeftZeros(datetimeFrom.getMinutes(),2)+":" + this.addLeftZeros(datetimeFrom.getSeconds(),2);
            var strDate = datetimeFrom.getFullYear() + '-'+ this.addLeftZeros((datetimeFrom.getMonth()+1), 2) + '-'+ this.addLeftZeros(datetimeFrom.getDate(), 2);

            return strDate+'T'+strTime;
        },
        /**
         * Разница в минутах между date1 и date2
         *
         * @param date1 {Date}
         * @param date2 {Date}
         * @returns {*|number}
         */
        date_diff_in_minutes : function(date1, date2) {
            return Math.round((((date2-date1) % 86400000) % 3600000) / 60000);
        },

        my_index_of : function(arr, el) {
            var indexOf = arr.indexOf(el);
            if (indexOf >= 0)
                return indexOf;
            eln = Number(el);
            if (isNaN(eln))
                return -1;
            else
                return arr.indexOf(eln);
        },
        /**
         * Возвращает уникальные элементы массива arr1
         *
         * @param arr1
         * @param arr2
         * @returns {Array}
         */
        get_array_uniq : function(arr1, arr2) {
            var result = [];

            for(var i= 0, el, eln; i<arr1.length; i++) {
                el = arr1[i];
                eln = Number(el);
                if(arr2.indexOf(el) < 0
                    && (isNaN(eln) || arr2.indexOf(eln) < 0)
                )
                    result.push(el);
            }

            return result;
        },
        get_array_intersection : function(arr1, arr2) {
            var result = [];

            for(var i= 0, el; i<arr1.length; i++) {
                el = arr1[i];
                if(arr2.indexOf(el) >= 0)
                    result.push(el)
            }

            return result;
        },
        get_array_reverted : function(arr) {
            var result = [];

            for(var i=arr.length-1; i >=0; i--) {
                result.push(arr[i]);
            }

            return result;
        },

        shuffle_array : function (array) {
            var currentIndex = array.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }

            return array;
        },

        get_array_merge : function(arr1, arr2) {
            var result = [];
            for(var i=0; i<arr1.length; i++) {
                result.push(arr1[i]);
            }

            for(var i= 0, el; i<arr2.length; i++) {
                el = arr2[i];
                if(er_utils.my_index_of(result, el) < 0)
                    result.push(el);
            }

            return result;
        },

        prepare_string_for_input : function(str) {
            if(str)
                return str.replace(new RegExp('"', 'g'), '&quot;');
            else
                return '';
        },

        number_help : {
            /**
             * Decimal adjustment of a number.
             *
             * @param {String}  type  The type of adjustment.
             * @param {Number}  value The number.
             * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
             * @returns {Number} The adjusted value.
             */
            decimalAdjust : function(type, value, exp) {
                // If the exp is undefined or zero...
                if (typeof exp === 'undefined' || +exp === 0) {
                    return Math[type](value);
                }
                value = +value;
                exp = +exp;
                // If the value is not a number or the exp is not an integer...
                if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
                    return NaN;
                }
                // If the value is negative...
                if (value < 0) {
                    return -this.decimalAdjust(type, -value, exp);
                }
                // Shift
                value = value.toString().split('e');
                value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
                // Shift back
                value = value.toString().split('e');
                return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
            },


            /**
             * Decimal round
             * Math.round10(55.55, -1);   // 55.6
             Math.round10(55.549, -1);  // 55.5
             Math.round10(55, 1);       // 60
             Math.round10(54.9, 1);     // 50
             Math.round10(-55.55, -1);  // -55.5
             Math.round10(-55.551, -1); // -55.6
             Math.round10(-55, 1);      // -50
             Math.round10(-55.1, 1);    // -60
             Math.round10(1.005, -2);   // 1.01 -- compare this with Math.round(1.005*100)/100 above
             Math.round10(-1.005, -2);  // -1.01
             * @param value
             * @param exp
             * @returns {*|Number}
             */
            round10 : function(value, exp) {
                return this.decimalAdjust('round', value, exp);
            },

            /**
             * Decimal floor
             *
             * Math.floor10(55.59, -1);   // 55.5
             Math.floor10(59, 1);       // 50
             Math.floor10(-55.51, -1);  // -55.6
             Math.floor10(-51, 1);      // -60
             *
             * @param value
             * @param exp
             * @returns {*|Number}
             */
            floor10 : function(value, exp) {
                return this.decimalAdjust('floor', value, exp);
            },

            /**
             * Decimal ceil
             *
             * Math.ceil10(55.51, -1);    // 55.6
             Math.ceil10(51, 1);        // 60
             Math.ceil10(-55.59, -1);   // -55.5
             Math.ceil10(-59, 1);       // -50
             *
             * @param value
             * @param exp
             * @returns {*|Number}
             */
            ceil10 : function(value, exp) {
                return this.decimalAdjust('ceil', value, exp);
            }
        }
    };
/**
 * Created by erinsasha on 22/08/17.
 */
function ER_Widget_Endorse_Endorse (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Endorse_Endorse.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Endorse_Endorse">';

        html += this._HTML_build_contacts_for_endorse();
        html += this._HTML_build_endorsed_total();
        html += this._HTML_build_endorsed_in_current_period();
        html += this._HTML_build_current_period_state();
        html += this._HTML_build_next_period_start();

        html += this._HTML_build_endorse_period();
        html += this._HTML_build_endorse_limit();

        html += this._HTML_build_endorse_mode_cont();

        html += this._HTML_build_btn_begin_endorse();

        html += '<button class="btn_timeout_settings">Timeout settings</button>';

        html += '</div>';
        return html;
    },

    _HTML_build_contacts_for_endorse : function() {
        var value = er_endorse_queue.get_queue_length();

        return '<div class="stat_cont contacts_for_endorse"><span class="title label"></span><span class="er_contacts_for_endorse value">'+value+'</span></div>';
    },
    _HTML_build_endorsed_total : function() {
        var count_sent = er_endorsed_control.get_endorsed_counter();

        return '<div class="stat_cont endorsed_total"><span class="title label"></span><span class="er_endorsed_total value">'+count_sent+'</span></div>';
    },
    _HTML_build_endorsed_in_current_period : function() {
        var count_sent = er_endorse_endorser.get_endorsed_in_current_period();

        return '<div class="stat_cont endorsed_in_current_period"><span class="title label"></span><span class="er_endorsed_in_current_period value">'+count_sent+'</span></div>';
    },
    _HTML_build_current_period_state : function() {
        var state = er_endorse_endorser.get_current_period_state();

        return '<div class="stat_cont current_period_state"><span class="title label"></span><span class="er_current_period_state value">'+state+'</span></div>';
    },
    _HTML_build_next_period_start : function() {
        var date = er_endorse_endorser.get_next_period_start();
        var hidden = 'hidden';

        if (date != null) {
            hidden = '';
            date = er_utils.datetimeJSToUser(date);
        }
        return '<div class="stat_cont next_period_start '+hidden+'"><span class="title label"></span><span class="er_next_period_start value">'+date+'</span></div>';
    },


    _HTML_build_endorse_limit : function() {
        var html = '<div class="endorse_limit_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var limit = er_endorse_endorser.get_endorsed_limit_per_period();

        html += '<input class="endorse_limit" type="text" value="'+limit+'">';
        html += '</div>';
        return html;
    },
    _HTML_build_endorse_period : function() {
        var html = '<div class="endorse_period_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var period = er_endorse_endorser.get_endorse_period_hours_between();

        html += '<input class="endorse_period" type="text" value="'+period+'">';
        html += '</div>';
        return html;
    },

    _HTML_build_btn_begin_endorse : function() {
        var btn_begin_endorse_started = er_endorse_endorser.is_endorser_switched_on() ? 'started' : '';
        return '<button class="btn_begin_endorse '+btn_begin_endorse_started+'"></button>';
    },

    _HTML_build_endorse_mode_cont : function() {
        return '<div class="cont_endorse_mode_cont"></div>';
    },


    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {

        this._add_handlers_for_inputs();
        this._add_handlers_for_stats();
        this._add_handlers_for_buttons();

        er_main_view._add_callback_on_click_mode_after_turn_on('er_new_endorse_mode', this._on_click_mode_after_turn_on.bind(this));

        window.addEventListener(
            er_endorse_control.EVENT_NEW_ENDORSE_CREATED,
            this.on_EVENT_NEW_ENDORSE_CREATED.bind(this),
            false);
        window.addEventListener(
            er_endorse_control.EVENT_ACTIVE_ENDORSE_SWITCHED,
            this.on_EVENT_ACTIVE_ENDORSE_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_endorse_control.EVENT_ENDORSE_DELETED,
            this.on_EVENT_ENDORSE_DELETED.bind(this),
            false);

        this.closure_refresh = this._refresh.bind(this);
        this._refresh();
    },
    _add_handlers_for_inputs : function() {
        this.jq_input_endorse_period = this.jq_main.find('.endorse_period');
        this.jq_input_endorse_period.change(this._on_change_input_endorse_period.bind(this));

        this.jq_input_endorse_limit = this.jq_main.find('.endorse_limit');
        this.jq_input_endorse_limit.change(this._on_change_input_endorse_limit.bind(this));

        this.jq_main.find('.endorse_mode_first_limit').change(this._on_change_input_endorse_mode_first_limit.bind(this));

        this.w_endorse_mode_toggle = new ER_W_Endorse_Mode_Toggle({jq_parent : this.jq_main.find('.cont_endorse_mode_cont')});
    },
    _add_handlers_for_stats : function() {
        this.jq_contacts_for_endorse = this.jq_main.find('.er_contacts_for_endorse');
        this.jq_endorsed_total = this.jq_main.find('.er_endorsed_total');
        this.jq_endorsed_in_current_period = this.jq_main.find('.er_endorsed_in_current_period');
        this.jq_current_period_state = this.jq_main.find('.er_current_period_state');
        this.jq_next_period_start_cont = this.jq_main.find('.stat_cont.next_period_start');
        this.jq_next_period_start = this.jq_next_period_start_cont.find('.er_next_period_start');
    },
    _add_handlers_for_buttons : function() {
        this.jq_btn_begin_endorse = this.jq_main.find('.btn_begin_endorse');
        this.jq_btn_begin_endorse.click(this._on_click_btn_begin_endorse.bind(this));
        this.jq_main.find('button.btn_timeout_settings').click(this._on_click_btn_timeout_settings.bind(this));
    },

    _refresh : function(refresh_once_anyway) {
        if(this.is_widget_visible() || refresh_once_anyway) {
            this._refresh_contacts_for_endorse();
            this.jq_endorsed_total.text(er_endorsed_control.get_endorsed_counter());
            this.jq_endorsed_in_current_period.text(er_endorse_endorser.get_endorsed_in_current_period());
            this.jq_current_period_state.text(er_endorse_endorser.get_current_period_state());
            this._refresh_next_period_start();
            this._refresh_btn_begin_endorse();
        }
        if(!refresh_once_anyway)
            setTimeout(this.closure_refresh, this.CONST_REFRESH_STAT_TIMEOUT);
    },
    _refresh_contacts_for_endorse : function() {
        var value = er_endorse_queue.get_queue_length();

        this.jq_contacts_for_endorse.text(value);
    },
    _refresh_next_period_start : function() {
        var date = er_endorse_endorser.get_next_period_start();
        if (date) {
            this.jq_next_period_start_cont.removeClass('hidden');
            this.jq_next_period_start.text(er_utils.datetimeJSToUser(date));
        } else {
            this.jq_next_period_start_cont.addClass('hidden');
        }
    },
    _refresh_btn_begin_endorse : function() {
        if (er_endorse_endorser.is_endorser_switched_on()) {
            this.jq_btn_begin_endorse.addClass('started');
        } else {
            this.jq_btn_begin_endorse.removeClass('started');
        }
    },

    _check_limits_and_warn : function() {
        if(er_endorse_endorser.is_limits_are_safe()) {
            this.jq_input_endorse_period.removeClass('warning');
            this.jq_input_endorse_limit.removeClass('warning');
        } else {
            this.jq_input_endorse_period.addClass('warning');
            this.jq_input_endorse_limit.addClass('warning');

            er_main_view._info_popup_show(er_translator.get_text('er_endorse_view', 'messages', 'limits_warning', er_gen_settings.get_current_language_id()));
        }
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _on_change_input_endorse_period : function(event) {
        var jqInput = $(event.target);
        jqInput.val(er_endorse_endorser.set_endorse_period_hours_between(jqInput.val()));
        this._check_limits_and_warn();
    },
    _on_change_input_endorse_limit : function(event) {
        var jqInput = $(event.target);
        jqInput.val(er_endorse_endorser.set_endorsed_limit_per_period(jqInput.val()));
        this._check_limits_and_warn();
    },
    _on_change_input_endorse_mode_first_limit : function(event) {
        var jqInput = $(event.target);
        jqInput.val(er_endorse_endorser.set_max_endorse_skills_count(jqInput.val()));
    },
    _on_click_btn_begin_endorse : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_begin_endorse.hasClass('started')) {
            localStorage.er_new_endorse_mode = 'false';
            er_endorse_endorser.tab_delete_mode();
            this.jq_btn_begin_endorse.removeClass('started');
        } else {
            this.jq_btn_begin_endorse.addClass('started');
            er_endorse_endorser.tab_add_mode();
            er_endorse_endorser.begin_endorse_all_contacts();
        }
    },
    _on_click_btn_timeout_settings : function() {
        new ER_W_Endorse_Timeout_Settings({});
    },
    _on_click_mode_after_turn_on : function() {
        var contacts_for_endorse = er_endorse_queue.get_queue_length();

        var that = this;

        if (contacts_for_endorse > 0) {
            er_main_view.show_yes_no_dialog(
                er_translator.get_text('er_endorse_view', 'messages', 'need_begin_endorse', er_gen_settings.get_current_language_id()),
                function() {
                    that._on_click_btn_begin_endorse(null, true);
                }
            );
        } else {
            er_main_view.show_yes_no_dialog('Your queue is empty! Please, collect contact first');
            /*er_main_view.show_yes_no_dialog(
                er_translator.get_text('er_endorse_view', 'messages', 'need_begin_collect_for_endorse', er_gen_settings.get_current_language_id()),
                function() {
                    that._on_click_btn_collect(null, true);
                }
            );*/
        }
    },
    on_EVENT_NEW_ENDORSE_CREATED : function(event) {
        //this._refresh(true);
    },
    on_EVENT_ACTIVE_ENDORSE_SWITCHED : function(event) {
        this._refresh(true);
    },
    on_EVENT_ENDORSE_DELETED : function(event) {
        //this._refresh(true);
    },
};
ER_Widget_Endorse_Endorse.CONST_REFRESH_STAT_TIMEOUT = 5000;
/**
 * Created by erinsasha on 21/08/17.
 */

function ER_Widget_Delete_Endorse(options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Delete_Endorse.prototype = {
    _HTML_build_main_view : function() {
        var er_inactive = er_endorse_control.is_default_endorse_active() ? 'er_inactive' : '';
        return '<button class="ER_Widget_Delete_Endorse danger '+er_inactive+'">Delete current list</button>';
    },
    _add_handlers : function() {
        window.addEventListener(
            er_endorse_control.EVENT_ACTIVE_ENDORSE_SWITCHED,
            this.on_EVENT_ACTIVE_ENDORSE_SWITCHED.bind(this),
            false);

        this.jq_main.click(this.on_click_button.bind(this));
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    on_click_button : function() {
        if(this.jq_main.hasClass('er_inactive'))
            return;

        er_main_view.show_yes_no_dialog(
            'Delete list "'+er_endorse_control.get_active_list_id()+'"?',
            this.on_click_yes_delete_list.bind(this)
        );
    },
    on_click_yes_delete_list : function() {
        er_endorse_control.delete_list(er_endorse_control.get_active_list_id());
    },
    on_EVENT_ACTIVE_ENDORSE_SWITCHED : function(event) {
        if(er_endorse_control.is_default_endorse_active()) {
            this.jq_main.addClass('er_inactive');
        } else {
            this.jq_main.removeClass('er_inactive');
        }
    },
};

/**
 * Created by erinsasha on 22/08/17.
 */
//ER_W_Endorse_Mode_Toggle

/**
 *
 * @param options
 * @param options.jq_parent
 * @constructor
 */
function ER_W_Endorse_Mode_Toggle(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;

    this._process();
}

ER_W_Endorse_Mode_Toggle.prototype = {
    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_Endorse_Mode_Toggle endorse_mode_cont">';

        html += this._HTML_build_endorse_mode_toggle();

        html += '<div class="prefs_cont">';
        html += this._HTML_build_endorse_mode_specified();
        html += this._HTML_build_endorse_mode_first();
        html += '</div>';

        html += '</div>';

        return html;
    },
    _HTML_build_endorse_mode_toggle : function() {
        var setAll = '', setFirst = '', setSpecified ='';

        var endorse_mode = er_endorse_endorser.get_endorse_mode();

        switch (endorse_mode) {
            case er_endorse_endorser.CONST_ENDORSE_MODE_ALL          : setAll = 'set'; break;
            case er_endorse_endorser.CONST_ENDORSE_MODE_FIRST        : setFirst = 'set'; break;
            case er_endorse_endorser.CONST_ENDORSE_MODE_SPECIFIED    : setSpecified = 'set'; break;
        }

        var html = '<div class="b2ctoggle endorse_mode_toggle">';
        html += '<span class="label"></span>';
        html += '<span class="values">' +
            '<span class="togglevalue all left '+setAll+'" data-val="all"></span>' +
            '<span class="togglevalue first '+setFirst+'" data-val="first"></span>' +
            '<span class="togglevalue specified right '+setSpecified+'" data-val="specified"></span>' +
            '</span>';
        html += '</div>';

        return html;
    },
    _HTML_build_endorse_mode_specified : function() {
        var hidden = '';
        if (er_endorse_endorser.get_endorse_mode() != er_endorse_endorser.CONST_ENDORSE_MODE_SPECIFIED)
            hidden = 'hidden';

        return '<div class="tags_cont endorse_skills_cont '+hidden+'"></div>';
    },
    _HTML_build_endorse_mode_first : function() {
        var hidden = '';
        if (er_endorse_endorser.get_endorse_mode() != er_endorse_endorser.CONST_ENDORSE_MODE_FIRST)
            hidden = 'hidden';

        var html = '<div class="endorse_mode_first_cont er_label_input_cont '+hidden+'">';
        html += '<span class="label"></span>';

        var limit = er_endorse_endorser.get_max_endorse_skills_count();

        html += '<input class="endorse_mode_first_limit" type="text" value="'+limit+'">';
        html += '</div>';
        return html;
    },


    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },
    _add_handlers : function() {
        this.jq_endorse_mode_toggle = this.jq_main.find('.endorse_mode_toggle').b2ctoggle({
            multiMode : false,
            onValueChange : this._on_endorse_mode_toggle_state_change.bind(this)
        });

        this.jq_endorse_mode_first_cont = this.jq_main.find('.endorse_mode_first_cont');
        
        this._add_handlers_endorse_skills_cont();
    },
    _add_handlers_endorse_skills_cont : function() {
        this.jq_endorse_skills_cont = this.jq_main.find('.endorse_skills_cont');
        
        var skills = er_endorse_endorser.get_skill_for_endorse();
        this.jq_endorse_skills_cont.b2ctags({
            tags : skills,
            placeholder : 'Input skill and press Enter',
            unsetAllEnabled : false,
            onChanged : this._on_endorse_skills_cont_changed.bind(this)
        });
    },
    remove : function() {
        this.jq_main.remove();
    },

    _on_endorse_mode_toggle_state_change : function(states) {
        if(this.jq_endorse_mode_toggle.b2ctoggle('isset', 'all')) {
            this.jq_endorse_mode_first_cont.addClass('hidden');
            this.jq_endorse_skills_cont.addClass('hidden');
            er_endorse_endorser.set_endorse_mode(er_endorse_endorser.CONST_ENDORSE_MODE_ALL);
        } else if (this.jq_endorse_mode_toggle.b2ctoggle('isset', 'first')) {
            this.jq_endorse_mode_first_cont.removeClass('hidden');
            this.jq_endorse_skills_cont.addClass('hidden');
            er_endorse_endorser.set_endorse_mode(er_endorse_endorser.CONST_ENDORSE_MODE_FIRST);
        } else if (this.jq_endorse_mode_toggle.b2ctoggle('isset', 'specified')) {
            this.jq_endorse_mode_first_cont.addClass('hidden');
            this.jq_endorse_skills_cont.removeClass('hidden');
            er_endorse_endorser.set_endorse_mode(er_endorse_endorser.CONST_ENDORSE_MODE_SPECIFIED);
        }
    },
    _on_endorse_skills_cont_changed : function(skills) {
        er_endorse_endorser.set_skill_for_endorse(skills);
    },
};
/**
 * Created by erinsasha on 23/08/17.
 */
function ER_Widget_Endorse_Export (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Endorse_Export.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Endorse_Export">';

        html += this._HTML_build_delimiter_selector();
        html += '<button class="btn_export_file"></button>';
        html += '<a class="help er_blog" target="_blank" href="https://medium.com/linked-helper/how-to-import-csv-file-into-ms-excel-b4aee2f30375?source=---------1">Read How to Import CSV file into MS Excel</a>';

        html += '</div>';
        return html;
    },
    _HTML_build_delimiter_selector : function() {
        var html = '<div class="delimiter_selector_cont er_label_input_cont">';

        html += '<span class="label">Delimiter</span>';

        html += '<select class="select_delimiter">';

        html += '<option value="," selected>, - Google Sheets</option>';
        html += '<option value=";">; - Microsoft Excel</option>';

        html += '</select>';

        html += '</div>';

        return html;
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_btn_export_file = this.jq_main.find('.btn_export_file');
        this.jq_btn_export_file.click(this._on_btn_export_file_click.bind(this));

        this.jq_select_delimiter = this.jq_main.find('.select_delimiter');
    },



    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _on_btn_export_file_click : function() {
        if(this.jq_btn_export_file.hasClass('started'))
            return;

        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that.jq_btn_export_file.addClass('started');

                    var jq_option = that.jq_select_delimiter.find('option:selected');
                    var delimiter = jq_option.attr('value');

                    er_profiles_common_csv.delimiter = delimiter;
                    er_profiles_common_csv.generate_csv_file_for_ids(er_endorsed_control.get_endorsed_ids())
                        .then(function() {
                            that.jq_btn_export_file.removeClass('started');
                        });

                } else {
                    //that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },
};
/**
 * Created by erinsasha on 21/08/17.
 */
function ER_Widget_Endorse_Collect (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Endorse_Collect.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Endorse_Collect">';

        html += this._HTML_build_list_select_cont();
        html += this._HTML_build_btn_collect();
        html += this._HTML_build_list_stats();
        html += '<button class="view_collected">View collected</button>';
        html += '<button class="btn_lists_manager">Open lists manager</button>';

        html += '</div>';
        return html;
    },
    _HTML_build_list_select_cont : function() {
        var html = '<div class="wrapper_list_select_cont">';

        html += '<span class="label">List</span>';

        html += '</div>';

        return html;
    },
    _HTML_build_btn_collect : function() {
        var started = er_endorse_collector.get_mode_endorse_collect() ? 'started' : '';
        return '<button class="collect '+started+'"></button>';
    },
    _HTML_build_list_stats : function() {
        var html = '<div class="list_stats_cont">';

        html += this._HTML_build_profiles_collected();

        html += '</div>';
        return html;
    },
    _HTML_build_profiles_collected : function() {
        return '<div class="stat_cont profiles_collected_cont"><span class="title label">Already collected</span><span class="er_count_new value">0</span></div>';
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.er_Widget_Endorse_Selector = new ER_Widget_Endorse_Selector({
            jq_parent : this.jq_main.find('.wrapper_list_select_cont')
        });

        this.er_Widget_Delete_Endorse = new ER_Widget_Delete_Endorse({
            jq_parent : this.jq_main
        });

        this.jq_btn_collect = this.jq_main.find('button.collect');
        this.jq_btn_collect.click(this._on_click_btn_collect.bind(this));

        this.jq_btn_view_collected = this.jq_main.find('button.view_collected');
        this.jq_btn_view_collected.click(this._on_click_btn_view_collected.bind(this));

        this.jq_main.find('.btn_lists_manager').click(this._on_click_btn_lists_manager.bind(this));

        this.jq_profiles_collected_value = this.jq_main.find('.profiles_collected_cont .value');

        window.addEventListener(
            er_endorse_collector.EVENT_ENDORSE_COLLECT_MODE_SWITCHED_ON,
            this._set_btn_collect_as_started.bind(this),
            false);
        window.addEventListener(
            er_endorse_collector.EVENT_ENDORSE_COLLECT_MODE_SWITCHED_OFF,
            this._set_btn_collect_as_not_started.bind(this),
            false)

        window.addEventListener(
            er_endorse_control.EVENT_NEW_ENDORSE_CREATED,
            this.on_EVENT_NEW_ENDORSE_CREATED.bind(this),
            false);
        window.addEventListener(
            er_endorse_control.EVENT_ACTIVE_ENDORSE_SWITCHED,
            this.on_EVENT_ACTIVE_ENDORSE_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_endorse_control.EVENT_ENDORSE_DELETED,
            this.on_EVENT_ENDORSE_DELETED.bind(this),
            false);

        er_main_view._add_callback_on_click_mode_after_turn_on('er_endorse_mode_collect', this._on_click_mode_after_collect_turn_on.bind(this));

        this._refresh();
    },

    _set_btn_collect_as_started : function() {
        this.jq_btn_collect.addClass('started');
    },
    _set_btn_collect_as_not_started : function() {
        this.jq_btn_collect.removeClass('started');
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _refresh : function(refresh_once_anyway) {
        if(this.is_widget_visible() || refresh_once_anyway) {
            this._refresh_button_collect_state();
            this.jq_profiles_collected_value.text(er_endorse_queue.get_queue_length());
        }

        this.closure_refresh = this.closure_refresh ? this.closure_refresh : this._refresh.bind(this);
        if(!refresh_once_anyway)
            setTimeout(this.closure_refresh, ER_Widget_Endorse_Collect.CONST_REFRESH_STAT_TIMEOUT);
    },
    _refresh_button_collect_state : function() {
        if(er_endorse_collector.get_mode_endorse_collect())
            this._set_btn_collect_as_started();
        else
            this._set_btn_collect_as_not_started();
    },

    _on_click_btn_collect : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_collect.hasClass('started')) {
            er_endorse_collector.set_mode_endorse_collect(false);
            this._set_btn_collect_as_not_started();
        } else {
            if(er_search_page_helper.is_search_page() || er_utils.is_my_connections_page()) {
                er_endorse_collector.set_mode_on_and_tab_active();
                er_endorse_collector.process();
                this._set_btn_collect_as_started();
            } else {
                new ER_W_Go_To_Page({
                    add_go_to_my_connections : true,
                    add_go_to_1st : true,
                    add_go_to_1st_sn : true,
                });
                er_main_view._info_popup_show('Go to search page and set 1st connections and other filters and click Collect ...or you can collect all 1st connections from My Connections page');
            }
        }
    },
    _on_click_btn_view_collected : function() {
        var er_Widget_Endorse_Queue_Proc_Excl =
            new ER_Widget_Endorse_Queue_Proc_Excl({
                jq_parent : this.jq_main
            });
    },

    _on_click_btn_lists_manager : function() {
        new ER_W_List_Manager({
            jq_parent : this.jq_main,
            current_source_function_id : 'message_broadcast',
            current_target_function_id : 'endorse_my_contacts',
        })
    },

    _on_click_mode_after_collect_turn_on : function() {
        this._on_click_btn_collect(null, true);
    },
    on_EVENT_NEW_ENDORSE_CREATED : function(event) {
        //this._refresh(true);
    },
    on_EVENT_ACTIVE_ENDORSE_SWITCHED : function(event) {
        this._refresh(true);
    },
    on_EVENT_ENDORSE_DELETED : function(event) {
        //this._refresh(true);
    },
};
ER_Widget_Endorse_Collect.CONST_REFRESH_STAT_TIMEOUT = 5000;
/**
 * Created by erinsasha on 21/08/17.
 */

/**
 *
 * @param options
 * @constructor
 */
function ER_Widget_Endorse_Selector(options) {
    options = options || {};
    this.options = options;

    this.jq_parent = options.jq_parent;
    this.build_main_view();
};

ER_Widget_Endorse_Selector.prototype = {
    _HTML_build_main_view : function() {
        var html = '<span class="ER_Widget_Endorse_Selector">';

        html += '<select class="select_endorse_list">';

        html += '<option value="'+ER_Widget_Endorse_Selector.const.CONST_SELECTION_CREATE_MEW_ID+'">...CREATE NEW</option>';


        var active_list_id = er_endorse_control.get_active_list_id();
        var list = er_endorse_control.get_all_lists_ids();

        for(var i=0, current_list_id; i < list.length; i++) {
            current_list_id = list[i];
            html += this._HTML_build_select_option(current_list_id, active_list_id == current_list_id);
        }

        html += '</select>';

        html += '</span>';

        return html;
    },
    _HTML_build_select_option : function(id, is_selected) {
        var selected = is_selected ? 'selected' : '';
        return '<option value="'+id.replace(/"/g,'&quot;')+'" '+selected+'>'+id.replace(/"/g,'&quot;')+'</option>';
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_select = this.jq_main.find('.select_endorse_list');
        this.jq_select.change(this._on_change_select_endorse_list.bind(this));

        window.addEventListener(
            er_endorse_control.EVENT_NEW_ENDORSE_CREATED,
            this.on_EVENT_NEW_ENDORSE_CREATED.bind(this),
            false);
        window.addEventListener(
            er_endorse_control.EVENT_ACTIVE_ENDORSE_SWITCHED,
            this.on_EVENT_ACTIVE_ENDORSE_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_endorse_control.EVENT_ENDORSE_DELETED,
            this.on_EVENT_ENDORSE_DELETED.bind(this),
            false);
    },

    _add_new_list_to_selector : function(id) {
        if (this._is_select_option_created(id))
            return;

        var is_selected = er_endorse_control.get_active_list_id() == id;

        var option = this._HTML_build_select_option(id, is_selected);
        this.jq_select.append($(option));
    },

    _set_selected_list : function(id) {
        if(!this._is_select_option_created(id)) {
            this._add_new_list_to_selector(id);
        }

        this.jq_select.val(id);
    },
    _is_select_option_created : function(id) {
        return this._get_select_option(id).length == 1;
    },
    _get_select_option : function(id) {
        return this.jq_select.find('option[value="'+id.replace(/"/g,'\\\"')+'"]');
    },
    _delete_select_option : function(id) {
        this._get_select_option(id).remove();
    },

    _show_create_list_dialog : function() {
        var er_Widget_New_Endorse_List = new ER_Widget_New_Endorse_List({
            jq_parent : this.jq_main
        });
    },
    _on_change_select_endorse_list : function(event) {
        var jq_option = this.jq_select.find('option:selected');
        var list_id = jq_option.attr('value');
        if (list_id == ER_Widget_Endorse_Selector.const.CONST_SELECTION_CREATE_MEW_ID) {
            this._show_create_list_dialog();
            this.jq_select.val(er_endorse_control.get_active_list_id());
        } else {
            er_endorse_control.set_active_list_id(list_id);
        }
    },
    on_EVENT_NEW_ENDORSE_CREATED : function(event) {
        var id = event.detail.id;
        this._add_new_list_to_selector(id);
    },
    on_EVENT_ACTIVE_ENDORSE_SWITCHED : function(event) {
        var endorse = event.detail;
        this._set_selected_list(endorse.id);
    },
    on_EVENT_ENDORSE_DELETED : function(event) {
        var id = event.detail;
        this._delete_select_option(id);
    },
};
ER_Widget_Endorse_Selector.const = {};
ER_Widget_Endorse_Selector.const.CONST_SELECTION_CREATE_MEW_ID = '__create_new_endorse_list__';
/**
 * Created by erinsasha on 22/08/17.
 */
er_endorse_view = window.er_endorse_view || {
        type : 'er_endorse',
        tittle : 'Endorse my contacts',

        jq_main : null,

        init_main : function() {
            if (this.inited)
                return;

            this.jq_main = $(this._HTML_build_main());

            this._add_handlers();
            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

            if (er_endorse_endorser.is_mode_on_and_tab_active() || er_endorse_collector.is_mode_on_and_tab_active())
                er_main_view.show_settings(this.type);

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            html += this._HTML_build_tabs_pannel();

            html += this._HTML_build_content_collect();
            html += this._HTML_build_content_endorse();
            html += this._HTML_build_content_export();

            html += '</div>';
            return html;
        },

        _HTML_build_tabs_pannel : function() {
            var html = '<div class="tabs_pannel">';

            var collect_set = 'set', endorse_set = '';
            if(er_utils.is_profile_page() && er_endorse_endorser.is_mode_on_and_tab_active()) {
                collect_set = '';
                endorse_set = 'set';
            }

            html += '<span class="tab '+collect_set+'" data-tab="collect">Collect</span>';
            html += '<span class="tab '+endorse_set+'" data-tab="endorse">Endorse</span>';
            html += '<span class="tab" data-tab="export">Export</span>';

            html += '</div>';

            return html;
        },
        _HTML_build_content_collect : function() {
            var collect_set = 'set';
            if(er_utils.is_profile_page() && er_endorse_endorser.is_mode_on_and_tab_active())
                collect_set = '';

            var html = '<div class="content '+collect_set+'" data-type="collect">';
            html += '</div>';
            return html;
        },
        _HTML_build_content_endorse : function() {
            var endorse_set = '';

            if(er_utils.is_profile_page() && er_endorse_endorser.is_mode_on_and_tab_active())
                endorse_set = 'set';

            var html = '<div class="content '+endorse_set+'" data-type="endorse">';
            html += '</div>';
            return html;
        },
        _HTML_build_content_export : function() {
            var html = '<div class="content" data-type="export">';
            html += '</div>';
            return html;
        },


        _add_handlers : function() {
            new ER_Widget_How_To({
                jq_parent : this.jq_main,
                links : [ER_Widget_How_To.links.er_endorse_view]
            });

            this.jq_main.children('.tabs_pannel').children('.tab').click(this._on_click_tab.bind(this));

            var jq_content_collect = this.jq_main.find('.content[data-type=collect]');
            var jq_content_endorse = this.jq_main.find('.content[data-type=endorse]');
            var jq_content_export = this.jq_main.find('.content[data-type=export]');

            this.w_collect = new ER_Widget_Endorse_Collect({jq_parent : jq_content_collect});
            this.w_endorse = new ER_Widget_Endorse_Endorse({jq_parent : jq_content_endorse});
            this.w_export = new ER_Widget_Endorse_Export({jq_parent : jq_content_export});
        },

        is_widget_visible : function() {
            return this.jq_main.height() > 0;
        },

        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },
        _on_click_tab : function(event) {
            var jq_tab = $(event.target);
            if(jq_tab.hasClass('set'))
                return;

            jq_tab.siblings('.tab.set').removeClass('set');
            this.jq_main.children('.content.set').removeClass('set');

            jq_tab.addClass('set');
            this.jq_main.children('.content[data-type='+jq_tab.attr('data-tab')+']').addClass('set');
        },

    };
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_endorse_view._on_main_view_ready_for_sub_view() });
/**
 * Created by erinsasha on 11/08/17.
 */

/**
 *
 * @param options
 * @param options.jq_parent
 * @constructor
 */
function ER_W_Endorse_Timeout_Settings(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.options = options;

    this._process();
}

ER_W_Endorse_Timeout_Settings.prototype = {
    _process : function() {
        this.w_timeout_settings = new ER_W_Timeout_Settings({
            header : 'Timeouts for Endorse my contacts',
            timeouts_names : er_endorse_timeouts.const_timeouts_names,
            timeouts : er_endorse_timeouts.get_timeouts(),
            fast_timeouts : er_endorse_timeouts.const_timeout_fast,
            safe_timeouts : er_endorse_timeouts.const_timeout_safe,
            jq_parent : this.jq_parent,
            callback_save_settings : er_endorse_timeouts.save_timeouts_from_object.bind(er_endorse_timeouts)
        });
    },
};
/**
 * Created by erinsasha on 21/08/17.
 */
function ER_Widget_New_Endorse_List (options) {
    this.options = options;

    this.er_Widget_New_Something = new ER_Widget_New_Something({
        callback_on_create : this.callback_on_create.bind(this),
        html_main_class : 'ER_Widget_New_Endorse_List',
        input_placeholder : 'List name',
        jq_parent : options.jq_parent
    });

    this.er_Widget_New_Something.build_main_view();
};

ER_Widget_New_Endorse_List.prototype = {
    callback_on_create : function(name) {
        if(er_endorse_control.is_list_with_id_exists(name)) {
            this.er_Widget_New_Something.info_popup_show('List with such name already exists');
        } else {
            var that = this;
            er_endorse_control.create_new_endorse_as_active(name)
                .then(function() {
                    that.er_Widget_New_Something.close();
                });
        }
    },
};
/**
 * Created by erinsasha on 21/08/17.
 */
function ER_Widget_Endorse_Queue_Proc_Excl (options) {
    if(!options)
        options = {};
    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build_widget();
};

ER_Widget_Endorse_Queue_Proc_Excl.prototype = {
    listname_tech_to_user : {
        'queue' : 'Queue',
        'processed' : 'Endorsed',
        'excluded' : 'Excluded',
        'error' : 'Processed with Errors',
    },
    _build_widget : function() {
        this.er_Widget_Queue_Proc_Excl = new ER_Widget_Queue_Proc_Excl({
            jq_parent : this.jq_parent,
            html_additional_main_class : 'ER_Widget_Endorse_Queue_Proc_Excl',

            is_processed_enabled : true,
            is_excluded_enabled : true,
            is_error_enabled : true,

            callback_get_queue_deferred : this.callback_get_queue_deferred.bind(this),
            callback_get_processed_deferred : this.callback_get_processed_deferred.bind(this),
            callback_get_excluded_deferred : this.callback_get_excluded_deferred.bind(this),
            callback_get_error_deferred : this.callback_get_error_deferred.bind(this),

            callback_move_ids_from_queue_to_excluded_deferred : this.callback_move_ids_from_queue_to_excluded_deferred.bind(this),
            callback_move_ids_from_excluded_to_queue_deferred : this.callback_move_ids_from_excluded_to_queue_deferred.bind(this),
            callback_move_ids_from_queue_to_processed_deferred : this.callback_move_ids_from_queue_to_processed_deferred.bind(this),
            callback_move_ids_from_processed_to_queue_deferred : this.callback_move_ids_from_processed_to_queue_deferred.bind(this),
            callback_move_ids_from_processed_to_excluded_deferred : this.callback_move_ids_from_processed_to_excluded_deferred.bind(this),
            callback_move_ids_from_excluded_to_processed_deferred : this.callback_move_ids_from_excluded_to_processed_deferred.bind(this),
            callback_move_ids_from_error_to_queue_deferred : this.callback_move_ids_from_error_to_queue_deferred.bind(this),

            callback_get_dialog_message_move_from_queue_to_excluded : this.callback_get_dialog_message_move_from_queue_to_excluded.bind(this),
            callback_get_dialog_message_move_from_excluded_to_queue : this.callback_get_dialog_message_move_from_excluded_to_queue.bind(this),
            callback_get_dialog_message_move_from_queue_to_processed : this.callback_get_dialog_message_move_from_queue_to_processed.bind(this),
            callback_get_dialog_message_move_from_processed_to_queue : this.callback_get_dialog_message_move_from_processed_to_queue.bind(this),
            callback_get_dialog_message_move_from_processed_to_excluded : this.callback_get_dialog_message_move_from_processed_to_excluded.bind(this),
            callback_get_dialog_message_move_from_excluded_to_processed : this.callback_get_dialog_message_move_from_excluded_to_processed.bind(this),
            callback_get_dialog_message_move_from_error_to_queue : this.callback_get_dialog_message_move_from_error_to_queue.bind(this),

            callback_get_dialog_message_delete_selected : this.callback_get_dialog_message_delete_selected.bind(this),
            callback_delete_selected_deferred : this.callback_delete_selected_deferred.bind(this),
        });
    },

    callback_get_queue_deferred : function() {
        var deferred = $.Deferred();

        var ids = er_endorse_queue.get_contacts_for_endorse();
        deferred.resolve(ids);

        return deferred.promise();
    },
    callback_get_processed_deferred : function() {
        var deferred = $.Deferred();

        var ids = er_endorsed_control.get_endorsed_ids();
        deferred.resolve(ids);

        return deferred.promise();
    },
    callback_get_excluded_deferred : function() {
        var deferred = $.Deferred();

        var ids = er_endorse_excluded.get_excluded_ids();
        deferred.resolve(ids);

        return deferred.promise();
    },
    callback_get_error_deferred : function() {
        var deferred = $.Deferred();

        var ids = er_endorse_error.get_error_ids();
        deferred.resolve(ids);

        return deferred.promise();
    },

    callback_move_ids_from_queue_to_excluded_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_endorse_mover.move_ids_from_queue_to_excluded(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_excluded_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_endorse_mover.move_ids_from_excluded_to_queue(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_queue_to_processed_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_endorse_mover.move_ids_from_queue_to_endorsed(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_excluded_to_processed_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_endorse_mover.move_ids_from_excluded_to_endorsed(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_processed_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_endorse_mover.move_ids_from_endorsed_to_queue(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_processed_to_excluded_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_endorse_mover.move_ids_from_endorsed_to_excluded(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_error_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_endorse_mover.move_ids_from_error_to_queue(ids);
        deferred.resolve();

        return deferred.promise();
    },

    _generate_move_dialog_message : function(source_tech_name, target_tech_name) {
        var selected = this.er_Widget_Queue_Proc_Excl.get_selected_count();

        var source_user_name = this.listname_tech_to_user[source_tech_name];
        var target_user_name = this.listname_tech_to_user[target_tech_name];

        var message = 'Do you want to move '+selected + ' contact';
        if(selected > 1)
            message += 's';
        message += ' from '+source_user_name+' to '+target_user_name;
        return message;
    },

    callback_get_dialog_message_move_from_queue_to_excluded : function() {
        return this._generate_move_dialog_message('queue', 'excluded');
    },
    callback_get_dialog_message_move_from_excluded_to_queue : function() {
        return this._generate_move_dialog_message('excluded', 'queue');
    },
    callback_get_dialog_message_move_from_queue_to_processed : function() {
        return this._generate_move_dialog_message('queue', 'processed');
    },
    callback_get_dialog_message_move_from_processed_to_queue : function() {
        return this._generate_move_dialog_message('processed', 'queue');
    },
    callback_get_dialog_message_move_from_excluded_to_processed : function() {
        return this._generate_move_dialog_message('excluded', 'processed');
    },
    callback_get_dialog_message_move_from_processed_to_excluded : function() {
        return this._generate_move_dialog_message('processed', 'excluded');
    },
    callback_get_dialog_message_move_from_error_to_queue : function() {
        return this._generate_move_dialog_message('error', 'queue');
    },

    callback_get_dialog_message_delete_selected : function(listname, count) {
        var user_listname = this.listname_tech_to_user[listname];

        if(count <= 0)
            return 'Nothing selected';
        var message = 'Delete '+count+' selected contact';
        if(count > 1)
            message += 's';
        message += ' from '+user_listname+' ?';
        return message;
    },
    callback_delete_selected_deferred : function(listname, ids) {
        if(listname == 'queue') {
            er_endorse_queue.delete_ids(ids);
        } else if(listname == 'processed') {
            er_endorsed_control.delete_ids(ids);
        } else if(listname == 'excluded') {
            er_endorse_excluded.delete_ids(ids);
        } else if(listname == 'error') {
            er_endorse_error.delete_ids(ids);
        }

        var deferred = $.Deferred();
        deferred.resolve();
        return deferred.promise();
    }
};
/**
 * Created by erinsasha on 18/08/17.
 */

/**
 *
 * @param options
 * @param options.header
 * @param options.add_go_to_my_connections
 * @param options.add_go_to_1st
 * @param options.add_go_to_1st_sn
 * @param options.add_go_to_2nd
 * @param options.add_go_to_2nd_and_3rd
 * @param options.add_go_to_2nd_and_3rd_sn
 * @param options.jq_parent
 * @param options.on_close
 * @param options.on_cancel
 * @constructor
 */
function ER_W_Go_To_Page(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;

    this.options = options;

    this._process();
}

ER_W_Go_To_Page.prototype = {
    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_Go_To_Page">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();
        html += this._build_HTML_go_to_buttons_cont();
        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        var header = this.options.header ? this.options.header : 'From which page do you want to collect?';
        return '<p class="erlh_header">'+header+'</p>';
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';

        html += '</div>';
        return html;
    },
    _build_HTML_go_to_buttons_cont : function() {
        var html = '<div class="erlh_go_to_buttons_cont">';

        html += '</div>';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_go_to_buttons();
        this._build_buttons();

        this._add_handlers();
    },

    _build_go_to_buttons : function() {
        this.jq_go_to_btns_cont = this.jq_main_content.children('.erlh_go_to_buttons_cont');

        var option = this.options;

        if(option.add_go_to_my_connections)
            this._build_go_to_button('Go to All My Connections Page', 'https://www.linkedin.com/mynetwork/invite-connect/connections/');
        if(option.add_go_to_1st)
            this._build_go_to_button('Go to General LinkedIn Search Page', 'https://www.linkedin.com/search/results/people/?facetNetwork=%5B%22F%22%5D&origin=FACETED_SEARCH');
        if(option.add_go_to_1st_sn)
            this._build_go_to_button('Go to Sales Navigator Search Page', 'https://www.linkedin.com/sales/search?facet=N&facet.N=F&count=25&start=0');
        if(option.add_go_to_2nd)
            this._build_go_to_button('Go to General LinkedIn Search Page', 'https://www.linkedin.com/search/results/people/?facetNetwork=%5B%22S%22%5D&origin=FACETED_SEARCH');
        if(option.add_go_to_2nd_and_3rd)
            this._build_go_to_button('Go to General LinkedIn Search Page', 'https://www.linkedin.com/search/results/people/?facetNetwork=%5B%22S%22%2C%22O%22%5D&origin=FACETED_SEARCH');
        if(option.add_go_to_2nd_and_3rd_sn)
            this._build_go_to_button('Go to Sales Navigator Search Page', 'https://www.linkedin.com/sales/search?facet=N&facet.N=S&facet.N=O&count=25&start=0');
    },
    _build_go_to_button : function(text, url) {
        var go_to_button = new ERLH_W_Button({
            html_class : 'er_go_to_button',
            jq_parent : this.jq_go_to_btns_cont,
            text : text,
            on_click : function() {
                window.location.assign(url);
            }
        });

        return go_to_button;
    },
    _build_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });
    },

    _add_handlers : function() {

    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },
};
/**
 * Created by erinsasha on 12/04/17.
 */
var erlh_main = window.erlh_main || {
        /**
         *
          * @param options
          * @param options.show_login_first
         */
    init : function(options) {
        if(this.inited)
            return;

        options = options ? options : {};
        this.options = options;
        this.jq_parent = options.jq_parent;
        this.linkedin_mode = options.linkedin_mode;
        this.show_login_first = options.show_login_first;

        this._init_events_handlers();

        erlh_curr_user.init();

        this._create_main_widget();

        if((!erlh_curr_user.is_logged_in() && localStorage.erlh_USER_SKIPPED_LOGIN != 'true')
            || !this.linkedin_mode)
            this.show({ show_login_first : this.show_login_first });

        if(!this.linkedin_mode) {
            this._url_action_processor();
        }

        this.inited = true;
    },

    show : function(options) {
        options = options ? options : {};

        if(erlh_curr_user.is_logged_in()) {
            this.w_main.on_user_ready();
        } else {
            var w_sign_in_up = new ERLH_W_Sign_in_up({
                jq_parent : this.jq_parent,
                linkedin_mode : this.linkedin_mode,
                show_login_first : options.show_login_first,
            });
        }
    },

    _create_main_widget : function() {
        this.w_main = new ERLH_W_Main({
            linkedin_mode : this.linkedin_mode
        });
    },

    _init_events_handlers : function() {
        window.addEventListener(
            erlh_curr_user.EVENT_USER_LOGGED_IN,
            this._on_EVENT_USER_LOGGED_IN.bind(this),
            false);

        window.addEventListener(
            erlh_curr_user.EVENT_USER_LOGGED_OFF,
            this._on_EVENT_USER_LOGGED_OFF.bind(this),
            false);

        window.addEventListener(
            erlh_curr_user.EVENT_USER_SKIPPED_LOGIN,
            this._on_EVENT_USER_SKIPPED_LOGIN.bind(this),
            false);

        window.addEventListener(
            erlh_curr_user.EVENT_USER_READY,
            this._on_EVENT_USER_READY.bind(this),
            false);

        window.addEventListener(
            erlh_server.EVENT_NOT_AUTHORIZED,
            this._on_EVENT_NOT_AUTHORIZED.bind(this),
            false);

    },
    _url_action_processor : function() {
        var query = erlh_utils.getJsonFromUrl(window.location.href);
        if(!query.action || query.action == '')
            return;

        var data = query.data;
        if(data && data != '') {
            data = JSON.parse(data);
        }

        switch (query.action) {
            case 'ordercompleted' : this._action_ordercompleted(data); break;
            case 'orderfail' : this._action_orderfail(data); break;
        }
    },
    _action_ordercompleted : function(data) {
        new ERLH_W_Order_Completed_Popup({order_id : data.id});
    },
    _action_orderfail : function(data) {
        var message = 'Payment for order';
        if(data && data.id)
            message += ' #'+data.id;
        message += ' has been canceled';

        new ERLH_W_Message({ message : message });
    },

    _on_EVENT_USER_LOGGED_IN : function() {

    },
    _on_EVENT_USER_LOGGED_OFF : function() {
        var w_sign_in_up = new ERLH_W_Sign_in_up({ show_login_first : this.show_login_first });
        this.w_main.remove();
        this._create_main_widget();
    },
    _on_EVENT_USER_SKIPPED_LOGIN : function() {
        if(this.linkedin_mode) {
            localStorage.erlh_USER_SKIPPED_LOGIN = 'true';
        }
    },
    _on_EVENT_USER_READY : function() {

    },

    _on_EVENT_NOT_AUTHORIZED : function() {
        erlh_curr_user.logoff();
    },
};

/*
$( document ).ready(function() {
    console.log( "ready!" );
    erlh_main.init();
});*/

/**
 * Created by erinsasha on 26/08/17.
 */
// ER_W_Function_Chooser
/**
 *
 * @param options
 * @param options.html_class
 * @param options.header
 * @param options.jq_parent
 * @param options.current_function_id
 * @constructor
 */
function ER_W_Function_Chooser(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.header = options.header ? options.header : 'Choose function';
    this.current_function_id = options.current_function_id;

    this._process();
}

ER_W_Function_Chooser.prototype = {
    function_ids_to_names : {
        collect_select_invite_2nd_3rd : 'Collect, Select & Invite 2nd & 3rd contacts',
        endorse_my_contacts : 'Endorse my contacts',
        message_broadcast : 'Message broadcast to 1st connections',
        profiles_extractor : 'Profiles extractor',
        profiles_auto_visitor : 'Profiles Auto-Visitor',
    },
    _process : function() {
        this._build();
        this._refresh();
    },

    _build_HTML : function() {
        var html_class = this.options.html_class ? this.options.html_class : '';

        var html = '<div class="ER_W_Function_Chooser '+html_class+'">';

        html += this._build_HTML_header();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        return '<p class="erlh_header">'+this.header+'</p>';
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._build_select_function();
        this._build_list_chooser();

        this._add_handlers();
    },
    _build_select_function : function() {
        this.w_select_function = new ERLH_W_Select({
            html_class : 'er_function_select',
            jq_parent : this.jq_main,
            label : 'Choose LH function',
            select_attrs : {},
            ids_to_options : this.function_ids_to_names,
            selected_id : this.current_function_id,
            need_add_button : false,
            on_change : this._on_change_select_function.bind(this)
        });
    },
    _build_list_chooser : function() {
        this.w_list_chooser = new ER_W_List_Chooser({
            jq_parent : this.jq_main,
        });
    },

    _refresh : function() {
        this._refresh_list_selector();
    },
    _refresh_list_selector : function() {
        this.w_list_chooser.set_callbacks(this._get_callbacks_for_current_function());
    },
    _get_callbacks_for_current_function : function() {
        switch (this.current_function_id) {
            case 'collect_select_invite_2nd_3rd' : return er_connect_selected_lm_callbacks.get_callbacks();
            case 'endorse_my_contacts' : return er_endorse_lm_callbacks.get_callbacks();
            case 'message_broadcast' : return er_broadcast_lm_callbacks.get_callbacks();
            case 'profiles_extractor' : return er_profile_extractor_lm_callbacks.get_callbacks();
            case 'profiles_auto_visitor' : return er_autovisitor_lm_callbacks.get_callbacks();
        };
    },

    _add_handlers : function() {

    },

    get_selected_info : function() {
        return {
            id : this.current_function_id,
            name : this.function_ids_to_names[this.current_function_id],
            list : this.w_list_chooser.get_selected_info()
        }
    },
    get_ids_deferred : function() {
        return this.w_list_chooser.get_ids_deferred();
    },
    perform_action : function(action, source_ids) {
        return this.w_list_chooser.perform_action(action, source_ids);
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_change_select_function : function(option_id) {
        this.current_function_id = option_id;
        this._refresh_list_selector();
    },
};
/**
 * Created by erinsasha on 24/08/17.
 */
// ER_W_List_Chooser
/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.callbacks
 * @param options.callbacks.get_lists_deferred () // return ({id : id, name : name}, error_message)
 * @param options.callbacks.get_sublists() // return {id : id, name : name}
 * @param options.callbacks.get_sublists_counters_deferred (list_id) // ({id : sublist_id, counter : counter }, error_message)
 * @param options.callbacks.get_create_new_deferred (list_name) // return (list_id, list_name, error_message)
 * @param options.callbacks.get_current_list_id () // return list_id
 * @param options.callbacks.get_ids_deferred (list_id, sublist_id) // return ids
 * @param options.callbacks.perform_action_return_counter_deferred (list_id, sublist_id, action, ids) // return counter of target
 * @param options.on_change
 * @constructor
 */
function ER_W_List_Chooser(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.callbacks = options.callbacks;

    this._process();
}

ER_W_List_Chooser.prototype = {
    _process : function() {
        this._build();
        if(this.callbacks)
            this._refresh();
    },

    _build_HTML : function() {
        var html_class = this.options.html_class ? this.options.html_class : '';

        var html = '<div class="ER_W_List_Chooser '+html_class+'">';

        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._build_select_list();
        this._build_sublist_chooser();

        this._add_handlers();
    },
    _build_select_list : function() {
        this.w_select_list = new ERLH_W_Select({
            html_class : 'er_list_select',
            jq_parent : this.jq_main,
            label : 'Choose list',
            select_attrs : {},
            ids_to_options : {},
            need_add_button : true,
            on_change : this._on_change_select_list.bind(this),
            on_click_btn_add : this._on_click_add_list.bind(this)
        });
    },
    _build_sublist_chooser : function() {
        this.w_sublist_chooser = new ER_W_Sublist_Chooser({
            jq_parent : this.jq_main,
        });
    },

    _refresh : function() {
        this._refresh_list_selector();
        this._refresh_sublist_chooser();
    },
    _refresh_list_selector : function() {
        this.w_select_list.delete_all_options();

        this.current_list_id = this.callbacks.get_current_list_id();

        var that = this;
        this.callbacks.get_lists_deferred()
            .then(function(lists) {
                that.w_select_list.add_options(lists);
                that.w_select_list.set(that.current_list_id);
            })
    },
    _refresh_sublist_chooser : function() {
        var that = this;
        this.callbacks.get_sublists_counters_deferred(this.current_list_id)
            .then(function(counters) {
                var sublists = that.callbacks.get_sublists();
                var sublist_with_counters = that._merge_sublists_and_counters(sublists, counters);
                that.w_sublist_chooser.set_sublists_items(sublist_with_counters);
            });
    },

    _add_list_to_list_selector : function(list_id, list_name, is_selected) {
        this.w_select_list.add_option({id : list_id, name : list_name});
        if(is_selected) {
            this.current_list_id = list_id;
            this.w_select_list.set(list_id);
            this._refresh_sublist_chooser();
        }
    },

    _merge_sublists_and_counters : function(sublists, counters) {
        var result = [];

        for(var i= 0, sublist, el; i<sublists.length; i++) {
            sublist = sublists[i];
            el = {id : sublist.id, name : sublist.name};

            for(var j= 0, counter_el; j<counters.length; j++) {
                counter_el = counters[j];
                if(counter_el.id == sublist.id) {
                    el.counter = counter_el.counter;
                    break;
                }
            }
            result.push(el);
        }

        return result;
    },

    _add_handlers : function() {

    },
    get_list_id : function() {
        return this.current_list_id;
    },
    get_selected_info : function() {
        var option = this.w_select_list.get_option();
        var sublist = this.w_sublist_chooser.get_selected_sublist();
        return {
            id : option.id,
            name : option.name,
            sublist : sublist
        }
    },
    get_ids_deferred : function() {
        return this.callbacks.get_ids_deferred(this.current_list_id, this.w_sublist_chooser.get_item_id());
    },
    perform_action : function(action, source_ids) {
        var deferred = $.Deferred();

        var that = this;
        this.callbacks.perform_action_return_counter_deferred(
            this.current_list_id,
            this.w_sublist_chooser.get_item_id(),
            action,
            source_ids)
            .then(function(new_counter) {
                that.w_sublist_chooser.set_new_counter_for_sublist(that.w_sublist_chooser.get_item_id(), new_counter);
                deferred.resolve(new_counter);
            });

        return deferred.promise();
    },

    set_callbacks : function(callbacks) {
        this.callbacks = callbacks;
        this._refresh();
    },

    remove : function() {
        this.jq_main.remove();
    },

    _on_click_add_list : function() {
        this.w_create_new = new ER_Widget_New_Something({
            title : 'Create new list',
            jq_parent : this.jq_main,
            callback_on_create : this.callback_on_click_create.bind(this)
        });
        this.w_create_new.build_main_view();
    },
    callback_on_click_create : function(name) {
        var that = this;
        this.callbacks.get_create_new_deferred(name)
            .then(function(list_id, list_name, error_message) {
                if (error_message) {
                    new ERLH_W_Message({message : error_message});
                    return;
                }
                that._add_list_to_list_selector(list_id, list_name, true);
                that.w_create_new.close();
            });
    },
    _on_change_select_list : function(option_id) {
        this.current_list_id = option_id;
        this._on_list_switched();
    },
    _on_list_switched : function() {
        this._refresh_sublist_chooser();
    }
};
/**
 * Created by erinsasha on 30/08/17.
 */
// ER_W_List_Manager

/**
 *
 * @param options
 * @param options.jq_parent
 * @param options.current_source_function_id
 * @param options.current_target_function_id
 * @constructor
 */
function ER_W_List_Manager(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.current_source_function_id = options.current_source_function_id ? options.current_source_function_id : 'profiles_auto_visitor';
    this.current_target_function_id = options.current_target_function_id ? options.current_target_function_id : 'collect_select_invite_2nd_3rd';

    this._process();
}

ER_W_List_Manager.prototype = {


    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_List_Manager">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();
        html += this._build_HTML_subcont();
        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        return '<p class="erlh_header">Lists manager</p>';
    },
    _build_HTML_subcont : function() {
        var html = '<div class="erlh_subcont">';

        html += '<div class="er_source er_fn_chooser_cont"></div>';
        html += this._build_HTML_action_buttons_cont();
        html += '<div class="er_target er_fn_chooser_cont"></div>';

        html += '</div>';
        return html;
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_close_cont"></span>';

        html += '</div>';
        return html;
    },
    _build_HTML_action_buttons_cont : function() {
        var html = '<div class="erlh_action_buttons_cont">';

        html += '<span class="btn_add_cont"></span>';
        html += '<span class="btn_keep_the_same_cont"></span>';
        html += '<span class="btn_delete_the_same_cont"></span>';
        html += '<span class="btn_replace_cont"></span>';
        html += '<span class="btn_add_all_cont"></span>';

        html += '</div>';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_functions_choosers();
        this._build_action_buttons();
        this._build_buttons();

        this._add_handlers();
    },
    _build_functions_choosers : function() {
        var jq_subcont = this.jq_main_content.children('.erlh_subcont');

        this.w_fn_chooser_source = new ER_W_Function_Chooser({
            current_function_id : this.current_source_function_id,
            header : 'Source',
            jq_parent : jq_subcont.children('.er_source.er_fn_chooser_cont')
        });

        this.w_fn_chooser_target = new ER_W_Function_Chooser({
            current_function_id : this.current_target_function_id,
            header : 'Target',
            jq_parent : jq_subcont.children('.er_target.er_fn_chooser_cont')
        });
    },
    _build_action_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_subcont').children('.erlh_action_buttons_cont');

        this.w_btn_add = new ERLH_W_Button({
            html_class : 'btn_add',
            tag : 'div',
            color : 'green',
            jq_parent : jq_btns_cont.children('.btn_add_cont'),
            text : '--> Add (excluding contacts from all target sub-lists) -->',
            on_click : this._on_click_btn_add.bind(this)
        });

        this.w_btn_keep_the_same = new ERLH_W_Button({
            html_class : 'btn_keep_the_same',
            tag : 'div',
            jq_parent : jq_btns_cont.children('.btn_keep_the_same_cont'),
            text : '--> Keep the same contacts and delete other -->',
            disabled : false,
            on_click : this._on_click_btn_keep_the_same.bind(this)
        });

        this.w_btn_delete_the_same = new ERLH_W_Button({
            html_class : 'btn_delete_the_same',
            tag : 'div',
            jq_parent : jq_btns_cont.children('.btn_delete_the_same_cont'),
            text : '--> Delete the same contacts -->',
            disabled : false,
            on_click : this._on_click_btn_delete_the_same.bind(this)
        });

        this.w_btn_replace = new ERLH_W_Button({
            html_class : 'btn_replace',
            tag : 'div',
            jq_parent : jq_btns_cont.children('.btn_replace_cont'),
            text : '--> Replace all contacts -->',
            disabled : false,
            on_click : this._on_click_btn_replace.bind(this)
        });

        this.w_btn_add_all = new ERLH_W_Button({
            html_class : 'btn_add_all',
            tag : 'div',
            jq_parent : jq_btns_cont.children('.btn_add_all_cont'),
            text : '--> Add all, even if they are in other sub-lists -->',
            disabled : false,
            on_click : this._on_click_btn_add_all.bind(this)
        });
    },

    _build_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_close = new ERLH_W_Button({
            html_class : 'btn_close',
            jq_parent : jq_btns_cont.children('.btn_close_cont'),
            text : 'Close',
            on_click : this._on_click_btn_close.bind(this)
        });
    },

    _add_handlers : function() {

    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _show_preloader : function() {
        if(this.w_preloader) {
            this.w_preloader.show();
        } else {
            this.w_preloader = new ERLH_W_Preloader({
                jq_parent : this.jq_main_content,
                is_embedded : true
            })
        }
    },
    _hide_preloader : function() {
        if(this.w_preloader) {
            this.w_preloader.hide();
        }
    },

    _process_action : function(action) {
        this._show_action_dialog(
            action,
            this.w_fn_chooser_source.get_selected_info(),
            this.w_fn_chooser_target.get_selected_info()
        );
    },
    _perform_action : function(action, source_info, target_info) {
        this._show_preloader();
        var that = this;
        this.w_fn_chooser_source.get_ids_deferred()
            .then(function(source_ids) {
                that.w_fn_chooser_target.perform_action(action, source_ids)
                    .then(function() {
                        that._hide_preloader();
                        new ERLH_W_Message({message : 'Done!'});
                    })
            });
    },
    _generate_action_dialog_message : function(action, source_info, target_info) {
        var msg;

        switch (action) {
            case 'add'              : msg = 'Do you want to ADD UNIQUE contacts from ['+source_info.list.name+'].['+source_info.list.sublist.name+'] to ['+target_info.list.name+'].['+target_info.list.sublist.name+'] ?'; break;
            case 'keep_the_same'  : msg = 'Do you want to KEEP THE SAME contacts in ['+target_info.list.name+'].['+target_info.list.sublist.name+'], which are in ['+source_info.list.name+'].['+source_info.list.sublist.name+'] AND DELETE ALL OTHER CONTACTS, WHICH ARE NOT IN IT  ?'; break;
            case 'delete_the_same'  : msg = 'Do you want to DELETE THE SAME contacts from ['+target_info.list.name+'].['+target_info.list.sublist.name+'], which are in ['+source_info.list.name+'].['+source_info.list.sublist.name+'] ?'; break;
            case 'replace'          : msg = 'Do you want to REPLACE ALL contacts in ['+target_info.list.name+'].['+target_info.list.sublist.name+'] by contacts from ['+source_info.list.name+'].['+source_info.list.sublist.name+'] ?'; break;
            case 'add_all' : msg = 'Do you want to ADD contacts from ['+source_info.list.name+'].['+source_info.list.sublist.name+'] to ['+target_info.list.name+'].['+target_info.list.sublist.name+'] EVEN if they are in other sub-lists of ['+target_info.list.name+'] ?'; break;
        }

        return msg;
    },
    _show_action_dialog : function(action, source_info, target_info) {
        var message = this._generate_action_dialog_message(action, source_info, target_info);

        var that = this;
        new ERLH_W_Dialog_Yes_No({
            jq_parent : this.jq_main,
            message : message,
            on_yes : function() {
                that._perform_action(action, source_info, target_info);
            }
        })
    },

    _on_click_btn_close : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },
    _on_click_btn_add : function() {
        this._process_action('add');
    },
    _on_click_btn_keep_the_same : function() {
        this._process_action('keep_the_same');
    },
    _on_click_btn_delete_the_same : function() {
        this._process_action('delete_the_same');
    },
    _on_click_btn_replace : function() {
        this._process_action('replace');
    },
    _on_click_btn_add_all : function() {
        this._process_action('add_all');
    },
};
/**
 * Created by erinsasha on 23/08/17.
 */
// ER_W_Sublist_Chooser
/**
 *
 * @param options
 * @param options.html_class
 * @param options.jq_parent
 * @param options.sublists : [{id : id, name : name, count : count}]
 * @constructor
 */
function ER_W_Sublist_Chooser(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.sublists = options.sublists;

    this._process();
}

ER_W_Sublist_Chooser.prototype = {
    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html_class = this.options.html_class ? this.options.html_class : '';

        var html = '<div class="ER_W_Sublist_Chooser '+html_class+'">';

        if(this.sublists)
            html += this._build_HTML_sublist_items(this.sublists);

        html += '</div>';

        return html;
    },
    _build_HTML_sublist_items : function(items) {
        var html = '';

        for(var i=0; i<items.length; i++) {
            html += this._build_HTML_sublist_item(items[i], i==0);
        }
        
        return html;
    },
    _build_HTML_sublist_item : function(item, is_set) {
        var set = is_set ? 'er_set' : '';
        return '<div class="er_sublist_item '+set+'" data-id="'+item.id+'"><span class="er_name">'+item.name+'</span><span class="er_count">'+item.counter+'</span></div>';
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },

    _add_handlers : function() {
        this._add_handlers_sublist_item(this.jq_main.find('.er_sublist_item'));
    },
    _add_handlers_sublist_item : function(jq_sublists) {
        jq_sublists.click(this._on_click_item.bind(this));
    },
    
    remove_sublists_items : function() {
        this.sublists = [];
        this.jq_main.find('.er_sublist_item').remove();
    },
    set_sublists_items : function(sublists) {
        this.remove_sublists_items();
        this.sublists = sublists;

        var html_sublists = this._build_HTML_sublist_items(sublists);
        var jq_sublists = $(html_sublists).appendTo(this.jq_main);
        this._add_handlers_sublist_item(jq_sublists);
    },

    remove : function() {
        this.jq_main.remove();
    },
    get_item_id : function() {
        return this.jq_main.find('.er_sublist_item.er_set').attr('data-id');
    },
    get_selected_sublist : function() {
        var id = this.get_item_id();
        for(var i= 0, sublist; i<this.sublists.length; i++) {
            sublist = this.sublists[i];
            if(sublist.id == id)
                return sublist;
        }
    },

    set_new_counter_for_sublist : function(sublist_id, new_counter) {
        var jq_sublist = this.jq_main.find('.er_sublist_item[data-id="'+sublist_id+'"]');
        jq_sublist.find('.er_count').text(new_counter);
    },

    _on_click_item : function(event) {
        var jq_item = $(event.currentTarget);
        if(jq_item.hasClass('er_set'))
            return;
        this.jq_main.find('.er_sublist_item.er_set').removeClass('er_set');
        jq_item.addClass('er_set');
    },
};
/**
 * Created by erinsasha on 03/09/17.
 */
// ER_W_Download_Mini

/**
 *
 * @param options
 * @param options.header
 * @param options.jq_parent
 * @param options.callback_get_ids_deferred
 * @param options.on_close
 * @param options.on_cancel
 * @constructor
 */
function ER_W_Download_Mini(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.header = options.header ? options.header : 'Download mini-profiles';
    this.callback_get_ids_deferred = options.callback_get_ids_deferred;

    this.options = options;

    this._process();
}

ER_W_Download_Mini.prototype = {
    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_Download_Mini">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();

        html += '<div class="er_delimiter_cont"></div>';

        html += '<p><a class="help er_blog" target="_blank" href="https://medium.com/linked-helper/how-to-import-csv-file-into-ms-excel-b4aee2f30375?source=---------1">Read How to Import CSV file into MS Excel</a></p>';
        html += '<p class="er_note">Please note, that you are downloading contacts list with limited information. To download full information use [Profiles Extractor] function from the dropdown menu</p>';

        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        return '<p class="erlh_header">'+this.header+'</p>';
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_download_cont"></span>';

        html += '</div>';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_select_delimiter_cont();
        this._build_buttons();

        this._add_handlers();
    },

    _build_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_download = new ERLH_W_Button({
            html_class : 'btn_download',
            jq_parent : jq_btns_cont.children('.btn_download_cont'),
            text : 'Download CSV file',
            disabled : false,
            on_click : this._on_click_btn_download.bind(this)
        });
    },
    _build_select_delimiter_cont : function() {
        this.w_method_select = new ERLH_W_Select({
            html_class : 'select_delimiter',
            jq_parent : this.jq_main_content.find('.er_delimiter_cont'),
            label : 'Choose Delimiter for CSV file',
            select_attrs : {},
            ids_to_options : {
                comma : { id : 'comma', name : 'Comma [ , ] - Google Sheets'},
                semicolon : { id : 'semicolon', name : 'Semicolon [ ; ] - Microsoft Excel'},
            },
            selected_id : 'comma'
            //on_change : this._on_change.bind(this)
        });
    },

    _add_handlers : function() {

    },

    _show_preloader : function() {
        if(this.w_preloader) {
            this.w_preloader.show();
        } else {
            this.w_preloader = new ERLH_W_Preloader({
                jq_parent : this.jq_main_content,
                is_embedded : true
            })
        }
    },
    _hide_preloader : function() {
        if(this.w_preloader) {
            this.w_preloader.hide();
        }
    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_click_btn_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },

    _on_click_btn_download : function() {
        var that = this;
        this._show_preloader();

        this.callback_get_ids_deferred()
            .then(function(ids) {
                er_profiles_mini_common_csv.delimiter = that.w_method_select.get() == 'comma' ? ',' : ';';
                er_profiles_mini_common_csv.generate_csv_file_for_ids(ids);
                that._hide_preloader();
                that.close();
            });
    },
};
/**
 * Created by erinsasha on 03/09/17.
 */
// er_profiles_mini_common_csv

var er_profiles_mini_common_csv = window.er_profiles_mini_common_csv || {
        csv_string : null,
        profiles : null,
        delimiter : ',',

        common_header_columns : [
            'id',
            'Full name',
            'Profile url',
            'First name',
            'Last name',
            'Avatar',
            'Title',
            'Company',
            'Position',
        ],

        generate_csv_file_for_ids : function(ids) {
            var deferred = $.Deferred();

            this.csv_string = null;
            this.profiles = null;

            var that = this;

            er_mini_profiles_db.get_profiles(ids)
                .then(function(profiles) {
                    that.profiles = profiles;
                    that._generate_csv_file();
                    ////console.log(that.csv_string);
                    that._generate_uri();
                    deferred.resolve();
                });

            return deferred.promise();
        },

        _generate_csv_file : function() {
            this.csv_string = this._generate_csv_header();

            for(var i=0; i<this.profiles.length; i++) {
                this.csv_string += ('\n' + this._generate_csv_data_raw(this.profiles[i]));
            }
        },
        _generate_csv_header : function() {
            return this._array_to_csv_string(this.common_header_columns);
        },
        _generate_csv_data_raw : function(profile) {
            //console.log(profile);
            var arr = [];

            arr.push(profile.id);
            arr.push(profile.fullname);
            arr.push(profile.get_profile_url());
            arr.push(profile.firstname);
            arr.push(profile.lastname);
            arr.push(profile.avatar);
            arr.push(profile.description);
            arr.push(profile.company);
            arr.push(profile.position);

            var result = this._array_to_csv_string(arr);
            ////console.log(result);
            return result;
        },

        _generate_uri : function() {
            //var uriContent = "data:application/octet-stream," + encodeURIComponent(this.csv_string);
            //var newWindow = window.open(uriContent, 'neuesDokument');

            this._download('mini_contacts.csv', this.csv_string);
        },
        _download : function(filename, text) {
            var pom = document.createElement('a');

            csvData = new Blob([text], { type: 'text/csv' });
            var csvUrl = URL.createObjectURL(csvData);

            //pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            pom.setAttribute('href', csvUrl);
            pom.setAttribute('download', filename);

            if (document.createEvent) {
                var event = document.createEvent('MouseEvents');
                event.initEvent('click', true, true);
                pom.dispatchEvent(event);
            }
            else {
                pom.click();
            }
        },
        _add_null_to_arr : function(arr, amount) {
            for(var i=0; i<amount; i++)
                arr.push(null);
        },
        _array_to_csv_string : function(arr) {
            var rez = '';

            for(var i=0; i<arr.length; i++) {
                if(i+1 == arr.length)
                    rez += this._field_csv_field(arr[i]);
                else
                    rez += this._field_csv_field(arr[i]) + this.delimiter;
            }

            return rez;
        },
        _field_csv_field : function(field) {
            if (field == null)
                return '';
            field = field.trim().replace(/\n/g,' ').replace(/"/g,'""');
            if(field.indexOf(this.delimiter) >=0 )
                field = '"' + field + '"';

            return field;
        }
    };
/**
 * Created by erinsasha on 08/05/17.
 */

function ER_W_Backup_Modes(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;

    this._build();
}

ER_W_Backup_Modes.prototype = {
    _build_HTML : function() {
        var html = '<div class="ER_W_Backup_Modes">';

        html += '</div';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html).appendTo(this.jq_parent);

        this._build_modes_selector();
        this._build_profiles_list_selector();
    },
    _build_modes_selector : function() {
        this.w_modes_selector = new ERLH_W_Select({
            jq_parent : this.jq_main,
            label : 'Backup mode',
            selected_id : er_backup_exporter.MODES.all.id,
            ids_to_options : er_backup_exporter.MODES,
            on_change : this._on_mode_change_selector.bind(this)
        });
    },
    _build_profiles_list_selector : function() {
        this.w_profiles_list_selector = new ER_W_Profiles_List_Selector({
            jq_parent : this.jq_main,
        });

        this.w_profiles_list_selector.hide();
    },

    get : function() {
        var mode = this.w_modes_selector.get();
        var obj = {
            mode : mode,
            options : {}
        };

        if(mode == er_backup_exporter.MODES.profiles_list.id) {
            obj.options.list_id = this.w_profiles_list_selector.get();
        }

        return obj;
    },

    _on_mode_change_selector : function(mode_id) {
        if(mode_id == er_backup_exporter.MODES.profiles_list.id) {
            this.w_profiles_list_selector.show();
        } else {
            this.w_profiles_list_selector.hide();
        }
    }
};
/**
 * Created by Alex on 16.03.2017.
 */
// ER_Widget_Backup_Download
function ER_Widget_Backup_Download (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Backup_Download.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Backup_Download">';

        html += '<button class="download"></button>';
        html += this._HTML_build_building_backup_state();

        html += '</div>';
        return html;
    },
    _HTML_build_building_backup_state : function() {
        return '<div class="stat_cont building_backup_state_cont"><span class="title label"></span><span class="value">NOT STARTED</span></div>';
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {

        this.jq_btn_download = this.jq_main.find('button.download');
        this.jq_btn_download.click(this._on_click_btn_download.bind(this));

        this.jq_building_backup_state_value = this.jq_main.find('.building_backup_state_cont .value');

        this.w_backup_modes = new ER_W_Backup_Modes({
            jq_parent : this.jq_main
        });

        window.addEventListener(
            er_backup_exporter.EVENT_BACKUP_SMALL_OBJ_GENERATED,
            this.on_EVENT_BACKUP_SMALL_OBJ_GENERATED.bind(this),
            false);
        
    },

    _set_btn_download_as_started : function() {
        this.jq_btn_download.addClass('started');
    },
    _set_btn_download_as_not_started : function() {
        this.jq_btn_download.removeClass('started');
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _on_click_btn_download : function(event) {
        if(this.jq_btn_download.hasClass('started')) {
            return;
        } else {
            var that = this;

            that._set_btn_download_as_started();

            var mode = that.w_backup_modes.get();
            er_backup_exporter.build_file(mode.mode, mode.options)
                .then(function() {
                    that._set_btn_download_as_not_started();
                    that.jq_building_backup_state_value.text('FINISHED');
                });
        }
    },

    on_EVENT_BACKUP_SMALL_OBJ_GENERATED : function(event) {
        this.jq_building_backup_state_value.text(event.detail);
    },

    _on_click_mode_after_collect_turn_on : function() {
        this._on_click_btn_collect(null, true);
    },
};

/**
 * Created by Alex on 17.03.2017.
 */
// ER_Widget_Restore_from_Backup
function ER_Widget_Restore_from_Backup (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Restore_from_Backup.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Restore_from_Backup">';

        html += '<button class="choose_file"></button>';
        html += '<input class="inp_backup_file er_hidden" type="file">';
        html += this._HTML_build_building_import_state();

        html += '</div>';
        return html;
    },
    _HTML_build_building_import_state : function() {
        return '<div class="stat_cont building_import_state_cont"><span class="title label"></span><span class="value">NOT STARTED</span></div>';
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {

        this.jq_btn_choose_file = this.jq_main.find('button.choose_file');
        this.jq_btn_choose_file.click(this._on_click_btn_choose_file.bind(this));
        
        this.jq_inp_backup_file = this.jq_main.find('.inp_backup_file');
        er_backup_importer.set_jq_file_input_handlers(this.jq_inp_backup_file);

        this.jq_building_import_state_value = this.jq_main.find('.building_import_state_cont .value');

        window.addEventListener(
            er_backup_importer.EVENT_BACKUP_SMALL_OBJ_IMPORTED,
            this.on_EVENT_BACKUP_SMALL_OBJ_IMPORTED.bind(this),
            false);

    },

    _set_btn_choose_file_as_started : function() {
        this.jq_btn_choose_file.addClass('started');
    },
    _set_btn_choose_file_as_not_started : function() {
        this.jq_btn_choose_file.removeClass('started');
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _on_click_btn_choose_file : function(event) {
        if(this.jq_btn_choose_file.hasClass('started')) {
            return;
        } else {
            var that = this;

            var evtL = document.createEvent("CustomEvent");
            evtL.initCustomEvent('EVENT_GET_LK_INFO', true, true,
                function(license_info) {
                    if (license_info.is_still_valid) {
                        if (license_info.type == 'p') {

                            er_main_view._info_popup_show(er_translator.get_text('ER_Widget_Restore_from_Backup','messages','not_for_this_license'));
                        } else {
                            that.jq_inp_backup_file.click();
                        }
                    }
                });
            window.dispatchEvent(evtL);
        }
    },

    on_EVENT_BACKUP_SMALL_OBJ_IMPORTED : function(event) {
        this.jq_building_import_state_value.text(event.detail);
    },

    _on_click_mode_after_collect_turn_on : function() {
        this._on_click_btn_collect(null, true);
    },
};

var er_backup_common_exporter = window.er_backup_common_exporter || {
        build_object : function() {
            var deferred = $.Deferred();
            var obj = {};
            obj.lc = this._build_lc();

            this._build_db()
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },
        _build_lc : function() {
            var lc = {};

            lc.er_country_code = localStorage.er_country_code;
            lc.er_is_new_style_page = localStorage.er_is_new_style_page;
            lc.er_language_id = localStorage.er_language_id;
            lc.er_main_view_is_collapsed = localStorage.er_main_view_is_collapsed;
            lc.er_names_eng_to_rus = localStorage.er_names_eng_to_rus;
            lc.er_names_rus_to_eng = localStorage.er_names_rus_to_eng;

            return lc;
        },
        _build_db : function() {
            var deferred = $.Deferred();
            var db = {};

            er_mini_profiles_db.get_all_profiles()
                .then(function(mini_profiles) {
                    db.mini_profiles = mini_profiles;
                })
                .then(er_sn_ids_map_db.get_all_maps.bind(er_sn_ids_map_db))
                .then(function(sn_ids_maps) {
                    db.sn_ids_maps = sn_ids_maps;
                })
                .then(function() {
                    deferred.resolve(db);
                });


            return deferred.promise();
        },
    };
/**
 * Created by Alex on 14.03.2017.
 */
var er_backup_common_importer = window.er_backup_common_importer || {
        import : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj) {
                er_logger.log('SKIPS : Common data missing');
                deferred.resolve(true);
                return deferred.promise();
            }
            this._import_db(obj.db)
                .then(function() {
                    that._import_lc(obj.lc);
                    deferred.resolve(true);
                });

            return deferred.promise();
        },

        _import_db : function(db) {
            var deferred = $.Deferred();

            er_mini_profiles_db.push_profiles(db.mini_profiles)
                .then(er_sn_ids_map_db.push_maps(db.sn_ids_maps))
                .then(deferred.resolve.bind(deferred));

            return deferred.promise();
        },

        _import_lc : function(lc) {
            if(lc.er_country_code)
                localStorage.er_country_code = lc.er_country_code;
            else
                delete localStorage.er_country_code;

            if(lc.er_is_new_style_page)
                localStorage.er_is_new_style_page = lc.er_is_new_style_page;
            else
                delete localStorage.er_is_new_style_page;

            if(lc.er_language_id)
                localStorage.er_language_id = lc.er_language_id;
            else
                delete localStorage.er_language_id;

            if(lc.er_main_view_is_collapsed)
                localStorage.er_main_view_is_collapsed = lc.er_main_view_is_collapsed;
            else
                delete localStorage.er_main_view_is_collapsed;

            if(lc.er_names_eng_to_rus)
                localStorage.er_names_eng_to_rus = lc.er_names_eng_to_rus;
            else
                delete localStorage.er_names_eng_to_rus;

            if(lc.er_names_rus_to_eng)
                localStorage.er_names_rus_to_eng = lc.er_names_rus_to_eng;
            else
                delete localStorage.er_names_rus_to_eng;
        },
    };
/**
 * Created by Alex on 12.03.2017.
 */
var er_backup_exporter = window.er_backup_exporter || {
        EVENT_BACKUP_SMALL_OBJ_GENERATED : 'ER_EVENT_BACKUP_SMALL_OBJ_GENERATED',

        MODES : {
            all : {id : 'all', name : 'All'},
            all_without_profiles : {id : 'all_without_profiles', name : 'All without profiles'},
            profiles_list : {id : 'profiles_list', name : 'Profiles list'},
        },

        build_file : function(mode, options) {
            var deferred = $.Deferred();

            if(!mode)
                mode = this.MODES.all.id;

            var that = this;

            this._build_object(mode, options)
                .then(function(obj) {
                    //var text = btoa(JSON.stringify(obj));
                    var text = that._ug(JSON.stringify(obj));
                    var name = 'LH_Backup_' + er_utils.datetimeJSToServer(new Date) + '.txt';
                    name = name.replace(/:/g, "-").replace(/-/g, "_").replace(/ /g, "_");
                    that._download(name, text);

                    that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('DONE!');
                    deferred.resolve();
                });

            return deferred.promise();
        },

        _build_object : function(mode, options) {
            var deferred = $.Deferred();

            if(!mode)
                mode = this.MODES.all.id;

            this._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('Building ! ! !');

            var obj = {};
            obj.export_mode = mode;
            obj.created = (new Date()).getTime();

            var that = this;

            if(mode == this.MODES.profiles_list.id) {
                er_profiles_extractor_backup_export.build_object_for_list(options.list_id)
                    .then(function(profiles_extractor) {
                        obj.profiles_extractor = profiles_extractor;
                        that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('PROFILES EXTRACTOR EXPORTED');
                    })
                    .then(function() {
                        deferred.resolve(obj);
                    });
            } else {
                er_backup_common_exporter.build_object()
                    .then(function(common) {
                        obj.common = common;
                        that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('GENERAL DATA EXPORTED');
                    })
                    .then(er_broadcast_backup_export.build_object.bind(er_broadcast_backup_export))
                    .then(function(broadcasts) {
                        obj.broadcasts = broadcasts;
                        that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('BROADCASTS EXPORTED');
                    })
                    .then(er_autovisitor_backup_export.build_object.bind(er_autovisitor_backup_export))
                    .then(function(autovisitors) {
                        obj.autovisitors = autovisitors;
                        that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('AUTO-VISIT LISTS EXPORTED');
                    })
                    .then(er_connect_in_search_backup_export.build_object.bind(er_connect_in_search_backup_export))
                    .then(function(connect_in_search) {
                        obj.connect_in_search = connect_in_search;
                        that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('CONNECT IN SEARCH INFO EXPORTED');
                    })
                    .then(er_connect_selected_backup_export.build_object.bind(er_connect_selected_backup_export))
                    .then(function(connect_selected) {
                        obj.connect_selected = connect_selected;
                        that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('Connect,Select & Invite INFO EXPORTED');
                    })
                    .then(er_endorse_backup_export.build_object.bind(er_endorse_backup_export))
                    .then(function(endorse) {
                        obj.endorse = endorse;
                        that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('ENDORSEMENTS EXPORTED');
                    })
                    .then(er_user_signature_backup_export.build_object.bind(er_user_signature_backup_export))
                    .then(function(user_signature) {
                        obj.user_signature = user_signature;
                        that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('USER SIGNATURE EXPORTED');
                    })
                    .then(function() {
                        if(mode == that.MODES.all_without_profiles.id) {
                            return;
                        } else {
                            return er_profiles_extractor_backup_export.build_object()
                                .then(function(profiles_extractor) {
                                    obj.profiles_extractor = profiles_extractor;
                                    that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('PROFILES EXTRACTOR EXPORTED');
                                })
                        }
                    })
                    /*.then(er_profiles_extractor_backup_export.build_object.bind(er_profiles_extractor_backup_export))
                     .then(function(profiles_extractor) {
                     obj.profiles_extractor = profiles_extractor;
                     that._send_EVENT_BACKUP_SMALL_OBJ_GENERATED('PROFILES EXTRACTOR EXPORTED');
                     })*/
                    .then(function() {
                        deferred.resolve(obj);
                    });
            }



            return deferred.promise();
        },
        _send_EVENT_BACKUP_SMALL_OBJ_GENERATED : function(message) {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_BACKUP_SMALL_OBJ_GENERATED, true, true, message);
            window.dispatchEvent(evt);
        },

        _download : function(filename, text) {
            er_utils_file.export_file(filename, text, 'text');
        },
        _ug : function(text) {
            var func_revers = function(str) {
                var revers = '';
                for(var i=str.length-1; i>=0; i--) {
                    revers += str[i];
                }

                return revers;
            };
            text = func_revers(text);

            var pos = er_utils.getRandomInt(2,9);
            var t_1 = text.substring(0, pos-1);
            var t_2 = text.substring(pos-1);
            text = pos + t_1 + ':' + t_2;
            return text;
        },



    };
/**
 * Created by Alex on 16.03.2017.
 */
var er_backup_importer = window.er_backup_importer || {
        EVENT_BACKUP_SMALL_OBJ_IMPORTED : 'ER_EVENT_BACKUP_SMALL_OBJ_IMPORTED',

        set_jq_file_input_handlers : function(jq_file_input) {
            var domElem = jq_file_input[0];
            domElem.addEventListener('change', this.on_jq_file_input_change.bind(this), false);
        },
        on_jq_file_input_change : function(event) {
            var file = event.target.files[0];

            var reader = new FileReader();

            var that = this;

            // Closure to capture the file information.
            reader.onload = (function(theFile) {
                return function(event) {
                    var text = event.target.result;
                    that._import_from_text(text)
                        .then(function() {
                            window.location.reload();
                        });
                };
            })(file);

            reader.readAsText(file);
        },

        _import_from_text : function(text) {
            var obj;
            try {
                //obj = JSON.parse(atob(text));
                obj = JSON.parse(this._uug(text));
                this._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('FILE PARSED');
            } catch (error) {
                er_logger.log(error);
                this._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('PARSE FILE ERROR');

                var deferred = $.Deferred();
                deferred.reject();
                return deferred.promise();
            }
            return this._import_object(obj);
        },

        _import_object : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj.export_mode)
                obj.export_mode = er_backup_exporter.MODES.all.id;

            if(obj.export_mode == er_backup_exporter.MODES.profiles_list.id) {
                that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('Importing Profiles List');
                er_profiles_extractor_backup_import.import_list(obj.profiles_extractor)
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('PROFILES LIST IMPORTED');
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('FINISHED');
                        deferred.resolve();
                    });
            } else {
                er_backup_common_importer.import(obj.common)
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('COMMON DATA IMPORTED');
                    })
                    .then(function() {
                        return er_broadcast_backup_import.import(obj.broadcasts);
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('BROADCASTS IMPORTED');
                    })
                    .then(function() {
                        return er_autovisitor_backup_import.import(obj.autovisitors);
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('AUTO-VISIT LISTS IMPORTED');
                    })
                    .then(function() {
                        return er_connect_in_search_backup_import.import(obj.connect_in_search);
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('CONNECT IN SEARCH INFO IMPORTED');
                    })
                    .then(function() {
                        return er_connect_selected_backup_import.import(obj.connect_selected);
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('Connect,Select & Invite INFO IMPORTED');
                    })
                    .then(function() {
                        return er_endorse_backup_import.import(obj.endorse);
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('ENDORSEMENTS IMPORTED');
                    })
                    .then(function() {
                        return er_user_signature_backup_import.import(obj.user_signature);
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('USER SIGNATURE IMPORTED');
                    })
                    .then(function() {
                        return er_profiles_extractor_backup_import.import(obj.profiles_extractor);
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('PROFILES EXTRACTOR IMPORTED');
                    })
                    .then(function() {
                        that._send_EVENT_BACKUP_SMALL_OBJ_IMPORTED('FINISHED');
                        deferred.resolve();
                    });
            }


            return deferred.promise();
        },
        _send_EVENT_BACKUP_SMALL_OBJ_IMPORTED : function(message) {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_BACKUP_SMALL_OBJ_IMPORTED, true, true, message);
            window.dispatchEvent(evt);
        },

        _uug : function(text) {
            var func_revers = function(str) {
                var revers = '';
                for(var i=str.length-1; i>=0; i--) {
                    revers += str[i];
                }

                return revers;
            };

            pos = Number(text[0]);
            var t_1 = text.substring(1, pos);
            var t_2 = text.substring(pos+1);
            var t = t_1+t_2;
            t = func_revers(t);
            return t;
        },
    };
/**
 * Created by Alex on 16.03.2017.
 */
var er_backup_view = window.er_backup_view || {
        type : 'er_backup_view',
        tittle : 'Backup',

        init_main : function() {
            if (this.inited)
                return;

            this.jq_main = $(this._HTML_build_main());

            this._add_handlers();

            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);
                //er_main_view.show_settings(this.type);

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            html += this._HTML_build_tabs_pannel();

            html += this._HTML_build_content_backup();
            html += this._HTML_build_content_restore();

            html += '</div>';
            return html;
        },
        _HTML_build_tabs_pannel : function() {
            var html = '<div class="tabs_pannel">';

            html += '<span class="tab set" data-tab="backup"></span>';
            html += '<span class="tab" data-tab="restore"></span>';

            html += '</div>';

            return html;
        },

        _HTML_build_content_backup : function() {
            var html = '<div class="content set" data-type="backup">';
            html += '</div>';
            return html;
        },
        _HTML_build_content_restore : function() {
            var html = '<div class="content" data-type="restore">';
            html += '</div>';
            return html;
        },

        _add_handlers : function() {
            /*new ER_Widget_How_To({
                jq_parent : this.jq_main,
                links : [ER_Widget_How_To.links.er_backup_view]
            });*/

            this.jq_main.children('.tabs_pannel').children('.tab').click(this._on_click_tab.bind(this));

            var jq_content_backup = this.jq_main.find('.content[data-type=backup]');
            var jq_content_restore = this.jq_main.find('.content[data-type=restore]');

            this.er_Widget_Backup_Download = new ER_Widget_Backup_Download({
                jq_parent : jq_content_backup
            });

            this.er_Widget_Restore_from_Backup = new ER_Widget_Restore_from_Backup({
                jq_parent : jq_content_restore
            });
        },

        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },
        _on_click_tab : function(event) {
            var jq_tab = $(event.target);
            if(jq_tab.hasClass('set'))
                return;

            jq_tab.siblings('.tab.set').removeClass('set');
            this.jq_main.children('.content.set').removeClass('set');

            jq_tab.addClass('set');
            this.jq_main.children('.content[data-type='+jq_tab.attr('data-tab')+']').addClass('set');
        },
    };
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_backup_view._on_main_view_ready_for_sub_view() });
/**
 * Created by erinsasha on 04/05/17.
 */

function ER_UI_Draggable(options) {
    this.options = options;

    this.jq_draggable = options.jq_draggable;

    this.jq_event_provider = options.jq_event_provider ? options.jq_event_provider : this.jq_draggable;

    this._add_handlers();
}

ER_UI_Draggable.prototype = {
    delta_trigger : 10,
    _add_handlers : function() {
        this.jq_event_provider
            .mousedown(this._on_mousedown.bind(this))
            .mouseup(this._on_mouseup.bind(this))
            .click(this._on_event_provider_click.bind(this));

        var jq_body = $('body');
        jq_body
            .mousemove(this._on_mousemove.bind(this))
            .mouseup(this._on_mouseup.bind(this));
    },

    is_just_dragged : function() {
        return this.drag_ended_at &&
            ((new Date).getTime() < (this.drag_ended_at+1000));
    },

    _on_mousedown : function(event) {
        if(this.mousedown)
           return;
        this.mousedown = true;
        this.startX = event.pageX;
        this.startY = event.pageY;

    },
    _on_mousemove : function(event) {
        if(!this.mousedown)
            return;

        if( !this.drag_mode &&
            (
                Math.abs(this.startX - event.pageX) >= this.delta_trigger
                || Math.abs(this.startY - event.pageY) >= this.delta_trigger
            )
        ) {
            this.drag_mode = true;

            var old_pos = this.jq_draggable.position();
            this.corner_left = old_pos.left;
            this.corner_top = old_pos.top;

            this.jq_draggable.css('left', old_pos.left+'px');
            this.jq_draggable.css('top', old_pos.top+'px');

            this.jq_draggable.css('right', 'initial');
            this.jq_draggable.css('bottom', 'initial');
        }

        if(this.drag_mode) {
            var new_x = this.corner_left - (this.startX - event.pageX);
            var new_y = this.corner_top - (this.startY - event.pageY);

            this.jq_draggable.css('left', new_x+'px');
            this.jq_draggable.css('top', new_y+'px');
        }
    },
    _on_mouseup : function(event) {
        if(this.mousedown) {
            this.mousedown = false;

            if(this.drag_mode) {
                this.drag_mode = false;
                this.drag_ended_at = (new Date()).getTime();
            }
        }
    },
    _on_event_provider_click : function(event) {
        /*if(this.is_just_dragged()) {
            event.stopPropagation();
            event.preventDefault();
        }*/
    }
};
/**
 * Created by Alex on 07.03.2017.
 */
function ER_Widget_How_To(options) {
    options = options || {};
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.is_need_to_append = options.is_need_to_append;
    this.links = options.links || [];
    this.html_main_class = options.html_main_class ? options.html_main_class : '';

    this.build_main_view();
};

ER_Widget_How_To.prototype = {
    _HTML_build_main_view : function() {
        var is_multiple = this.links.length > 1;
        var html_class_is_multiple = is_multiple ? 'er_multiple' : 'er_single';
        var html = '<div class="ER_Widget_How_To '+this.html_main_class+' '+html_class_is_multiple+'">';

        for(var i=0; i<this.links.length; i++) {
            html += this._html_build_link(this.links[i], is_multiple, i);
        }

        html += '</div>';

        return html;
    },
    _html_build_link : function(link, is_multiple, pos) {
        var pos_html = is_multiple && (pos || pos === 0) ? pos+1 : '';
        return '<a class="how_to_link" href="'+link+'" target="_blank">'+pos_html+'</a>';
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html);
        if(this.is_need_to_append) {
            this.jq_main.appendTo(this.jq_parent);
        } else {
            this.jq_main.prependTo(this.jq_parent);
        }
    },
};

ER_Widget_How_To.links = {};
ER_Widget_How_To.links.er_autovisitor_view = 'https://medium.com/linked-helper/auto-visit-profiles-to-get-look-back-8fe2aa4be7a9?source=---------0';
ER_Widget_How_To.links.er_connect_in_search_view = 'https://medium.com/linked-helper/how-to-invite-linkedin-2nd-connections-automatically-expand-your-social-networks-by-adding-ec69dc67b56d?source=collection_home---4------5----------';
ER_Widget_How_To.links.er_connect_selected_view = 'https://medium.com/linked-helper/collect-select-invite-2nd-3rd-linkedin-connections-4f9d41628467?source=---------0';
ER_Widget_How_To.links.er_endorse_view = 'https://medium.com/linked-helper/boost-your-profile-and-get-hundreds-of-endorsements-from-other-users-in-no-time-automatically-b75758237a0f?source=collection_home---4------3----------';
ER_Widget_How_To.links.er_message_broadcast_view_general = 'https://medium.com/linked-helper/how-to-send-your-messages-to-your-linkedin-1st-connections-mailing-system-message-broadcast-8d6d0308516e?source=collection_home---4------8----------';
ER_Widget_How_To.links.er_message_broadcast_view_manage_single = 'https://medium.com/linked-helper/how-to-manage-collected-recipients-recipients-queue-processed-recipients-and-excluded-contacts-580d53f6ee63?source=---------9';
ER_Widget_How_To.links.er_message_broadcast_view_manage_multiple = 'https://medium.com/linked-helper/how-to-manage-broadcasts-to-linkedin-1st-connections-creating-messages-chains-61f746389009?source=---------8';
ER_Widget_How_To.links.er_profiles_extractor_view = 'https://medium.com/linked-helper/export-your-contacts-to-csv-file-build-mailing-list-only-for-new-linkedin-interface-2c0327b18716?source=collection_home---4------4----------';
ER_Widget_How_To.links.er_user_signature_view = 'https://medium.com/linked-helper/automatically-add-your-signature-to-new-messages-61574a394b02?source=collection_home---4------2----------';
/**
 * Created by erinsasha on 02/03/17.
 */
/**
 *
 * @param options
 * @param options.html_main_class
 *
 * @param options.message_template
 * @param options.message_placeholder
 * @param options.message_maxlength
 *
 * @param options.company
 * @param options.position
 *
 * @param options.callback_on_message_template_save_deferred
 * @param options.callback_on_defaults_change
 * @constructor
 */
function ER_Widget_Message_Template (options) {
    options = options || {};
    this.options = options;
    this.jq_parent = options.jq_parent;

    this.html_main_class = options.html_main_class ? options.html_main_class : '';

    this.message_template = options.message_template ? options.message_template : 'Hello {firstname}! Please, join my network!';
    this.message_placeholder = options.message_placeholder ? options.message_placeholder : '';
    this.message_maxlength = options.message_maxlength ? options.message_maxlength : 30000;

    this.company = options.company ? options.company : 'your company';
    this.position = options.position ? options.position : 'your position';

    this.cursor_position = 0;

    this.build_main_view();
};

ER_Widget_Message_Template.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Message_Template '+this.html_main_class+'">';

        html += '<p class="label"></p>';
        html += this._HTML_build_tip();

        html += this._HTML_build_textarea_container();

        html += '<button class="save er_inactive"></button>';
        html += this._HTML_build_defaults_invitation_cont();
        html += this._HTML_build_eng_names_to_rus_switch();
        html += this._HTML_build_rus_names_to_eng_switch();

        html += '</div>';
        return html;
    },
    _HTML_build_tip : function() {
        var html = '<p class="tip">';
        html += this._HTML_build_tip_variable('firstname', '{firstname}')+', ';
        html += this._HTML_build_tip_variable('lastname', '{lastname}')+', ';
        html += this._HTML_build_tip_variable('company', '{company}')+' & ';
        html += this._HTML_build_tip_variable('position', '{position}');
            html += ' - will be replaced by real recipient first name & last name, company name & position / title.</p>';
        return html;
    },
    _HTML_build_tip_variable : function(id, text) {
        return '<span class="er_tip_var" data-id="id">'+text+'</span>';
    },
    _HTML_build_textarea_container : function() {
        var html = '<div class="textarea_container">';

        var template = this.message_template;
        template = template == null ? '' : template;

        html += '<textarea class="er_message_template" maxlength="'+this.message_maxlength+'" placeholder="'+this.message_placeholder+'">'+template+'</textarea>';

        var space_left = this.message_maxlength;
        if (template)
            space_left = space_left - template.length;
        html += '<div class="space_left">'+space_left+'</div>';
        html += '</div>';
        return html;
    },
    _HTML_build_defaults_invitation_cont : function() {
        return '<div class="defaults_invitation_cont"></div>';
    },
    _HTML_build_eng_names_to_rus_switch : function() {
        var er_off = localStorage.er_names_eng_to_rus == 'true' ? '' : 'er_off';
        return '<div class="er_state_toggle jim-sm-default er_mode_cont er_names_eng_to_rus '+er_off+'" data-variable="er_names_eng_to_rus"><span class="title"></span></div>';
    },
    _HTML_build_rus_names_to_eng_switch : function() {
        var er_off = localStorage.er_names_rus_to_eng == 'true' ? '' : 'er_off';
        return '<div class="er_state_toggle jim-sm-default er_mode_cont er_names_rus_to_eng '+er_off+'" data-variable="er_names_rus_to_eng"><span class="title"></span></div>';
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },
    _add_handlers : function() {
        this.jq_btn_save = this.jq_main.find('button.save');
        this.jq_btn_save.click(this._on_click_save.bind(this));
        var closure_make_save_btn_active = this._make_save_btn_active.bind(this);


        this.jq_textarea = this.jq_main.find('.er_message_template');
        this.jq_textarea
            .click(this._on_click_textarea.bind(this))
            .change(this._on_change_textarea.bind(this))
            .keypress(this._on_keypress_textarea.bind(this))
            .keydown(this._on_keydown_textarea.bind(this))
            .on('input', this._on_input_textarea.bind(this))
            .focus(this._on_focus_textarea.bind(this))
            .focusout(this._on_focusout_textarea.bind(this));

        this.jq_main.children('.tip').children('.er_tip_var').click(this._on_click_tip_var.bind(this));

        this.jq_space_left = this.jq_main.find('.space_left');

        this.jq_eng_names_to_rus_switch = this.jq_main.find('.er_names_eng_to_rus');
        this.jq_rus_names_to_eng_switch = this.jq_main.find('.er_names_rus_to_eng');
        this.jq_main.find('.er_names_eng_to_rus').click(this._on_click_eng_names_to_rus_switch.bind(this));
        this.jq_main.find('.er_names_rus_to_eng').click(this._on_click_rus_names_to_eng_switch.bind(this));

        this.er_Message_Defaults_Editor = new ER_Message_Defaults_Editor({
            jq_parent : this.jq_main.find('.defaults_invitation_cont'),
            variables : {
                company : this.company,
                position : this.position
            },
            callback_on_change : this.callback_on_defaults_change.bind(this)
        });
        this.er_Message_Defaults_Editor.build_main_view();
    },

    set_message_template : function(message) {
        this.message_template = message;
        this.jq_textarea.val(message);
    },

    set_defaults : function(variables) {
        this.er_Message_Defaults_Editor.set_variables(variables);
    },

    /**
     * Показывает всплывающее окно с указанным сообщением
     *
     * @param message {string}
     * @private
     */
    info_popup_show : function(message) {
        if (this.jqInfoPopup == null) {
            var that = this;
            this.jqInfoPopup = $('<div class="b2c_info_popup"></div>').appendTo(this.jq_main).b2cpopup({
                html_content : '<p class="message"></p>',
                lightMode : true
            });
            this.jqInfoPopup.b2cpopup('getUserCont').click(function(event) { that.jqInfoPopup.b2cpopup('close'); });
        }
        this.jqInfoPopup.b2cpopup('getUserCont').text(message);
        this.jqInfoPopup.b2cpopup('show');
    },

    _make_save_btn_active : function () {
        var template = this.jq_textarea.val();
        var space_left = this.message_maxlength - template.length;
        if (space_left >= 0) {
            this.jq_btn_save.removeClass('er_inactive');
            this.jq_space_left.removeClass('minus');
        }
        else {
            this.jq_btn_save.addClass('er_inactive');
            this.jq_space_left.addClass('minus');
        }

        this.jq_space_left.text(space_left);
    },

    _insert_var_at_current_position : function(tip_var) {
        var value = this.jq_textarea.val();
        var new_value = value.substring(0, this.cursor_position) + tip_var + value.substring(this.cursor_position);
        this.cursor_position += tip_var.length;
        this.jq_textarea.val(new_value);
        this._make_save_btn_active();
    },

    _on_click_save : function() {
        if(this.jq_btn_save.hasClass('er_inactive'))
            return;
        var template = this.jq_textarea.val();
        var space_left = this.message_maxlength - template.length;
        if (space_left >= 0) {
            this.jq_btn_save.addClass('started');
            this.options.callback_on_message_template_save_deferred(template)
                .then(this._on_template_saved.bind(this));
        } else {
            er_main_view._info_popup_show(er_translator.get_text('ER_Widget_Message_Template', 'messages', 'template_too_long', er_gen_settings.get_current_language_id()));
        }
    },
    _on_template_saved : function() {
        this.jq_btn_save.removeClass('started');
        this.jq_btn_save.addClass('er_inactive');
    },
    _on_click_eng_names_to_rus_switch : function() {
        var variable = this.jq_eng_names_to_rus_switch.attr('data-variable');
        localStorage[variable] = this.jq_eng_names_to_rus_switch.hasClass('er_off');
        this.jq_eng_names_to_rus_switch.toggleClass('er_off');
    },
    _on_click_rus_names_to_eng_switch : function() {
        var variable = this.jq_rus_names_to_eng_switch.attr('data-variable');
        localStorage[variable] = this.jq_rus_names_to_eng_switch.hasClass('er_off');
        this.jq_rus_names_to_eng_switch.toggleClass('er_off');
    },
    _on_click_textarea : function() {
        try {
            this.cursor_position = this.jq_textarea.prop("selectionStart");
            //console.log('TEXTAREA POSITION : '+this.cursor_position);
        } catch(error) {
            console.log(error);
        }
    },
    _on_keydown_textarea : function() {
        this._make_save_btn_active();
        try {
            this.cursor_position = this.jq_textarea.prop("selectionStart");
            //console.log('TEXTAREA POSITION : '+this.cursor_position);
        } catch(error) {
            console.log(error);
        }
    },
    _on_keypress_textarea : function() {
        this._make_save_btn_active();
        try {
            this.cursor_position = this.jq_textarea.prop("selectionStart");
            //console.log('TEXTAREA POSITION : '+this.cursor_position);
        } catch(error) {
            console.log(error);
        }
    },
    _on_change_textarea : function() {
        this._make_save_btn_active();
    },
    _on_input_textarea : function() {
        this._make_save_btn_active();
    },
    _on_focus_textarea : function() {
        try {
            this.cursor_position = this.jq_textarea.prop("selectionStart");
            //console.log('TEXTAREA POSITION : '+this.cursor_position);
        } catch(error) {
            console.log(error);
        }
    },
    _on_focusout_textarea : function() {

    },

    _on_click_tip_var : function(event) {
        var jq_tip_var = $(event.target);
        var text = jq_tip_var.text().trim();
        this._insert_var_at_current_position(text);
    },

    callback_on_defaults_change : function(variables) {
        if(this.options.callback_on_defaults_change)
            this.options.callback_on_defaults_change(variables);
    },

};
/**
 * Created by erinsasha on 25/02/17.
 */
/**
 *
 * @param options
 * @param options.callback_on_create : function(name)
 * @param options.callback_on_cancel : function(name)
 * @param options.jq_parent
 * @param options.title
 * @param options.html_main_class
 * @param options.input_placeholder
 * @constructor
 */
function ER_Widget_New_Something (options) {
    options = options || {};
    this.options = options;
    this.jq_parent = options.jq_parent;
    
    this.html_main_class = options.html_main_class ? options.html_main_class : '';
    this.input_placeholder = options.input_placeholder ? options.input_placeholder : 'name';
};

ER_Widget_New_Something.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_New_Something '+this.html_main_class+'">';
        html += '<div class="er_transparent_back"></div>';
        html += this._HTML_build_main_content();
        html += '</div>';
        return html;
    },
    _HTML_build_main_content : function() {
        var html = '<div class="content"><div class="internal_wrapper">';

        var title = this.options.title ? this.options.title : '';
        html += '<p class="title">'+title+'</p>';
        html += '<input class="inp_something_name" type="text" maxlength="255" placeholder="'+this.input_placeholder+'">';

        html += this._HTML_build_buttons_panel();

        html += '</div></div>';
        return html;
    },
    _HTML_build_buttons_panel : function() {
        var html = '<div class="buttons_panel">';

        html += '<button class="create"></button>';
        html += '<button class="cancel"></button>';

        html += '</div>';
        return html;
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_input_name = this.jq_main.find('.inp_something_name');
        this.jq_input_name.focus();
        this.jq_main.find('.er_transparent_back').click(this._on_click_er_transparent_back.bind(this));
        this.jq_main.find('button.create').click(this._on_click_btn_create.bind(this));
        this.jq_main.find('button.cancel').click(this._on_click_btn_cancel.bind(this));
    },

    close : function() {
        this.jq_main.remove();
    },

    /**
     * Показывает всплывающее окно с указанным сообщением
     *
     * @param message {string}
     * @private
     */
    info_popup_show : function(message) {
        if (this.jqInfoPopup == null) {
            var that = this;
            this.jqInfoPopup = $('<div class="b2c_info_popup"></div>').appendTo(this.jq_main).b2cpopup({
                html_content : '<p class="message"></p>',
                lightMode : true
            });
            this.jqInfoPopup.b2cpopup('getUserCont').click(function(event) { that.jqInfoPopup.b2cpopup('close'); });
        }
        this.jqInfoPopup.b2cpopup('getUserCont').text(message);
        this.jqInfoPopup.b2cpopup('show');
    },
    

    _on_click_er_transparent_back : function() {
        this.close();
        if(this.options.callback_on_cancel)
            this.options.callback_on_cancel();
    },
    _on_click_btn_cancel : function() {
        this.close();
        if(this.options.callback_on_cancel)
            this.options.callback_on_cancel();
    },
    _on_click_btn_create : function() {
        var val = this.jq_input_name.val().trim();
        if (val == '')
            return;
        if(this.options.callback_on_create)
            this.options.callback_on_create(val);
    },

};
/**
 * Created by erinsasha on 26/02/17.
 */
/**
 *
 * @param options
 * @param optionsIdentifierional_main_class
 *
 * @param options.callback_custom_fields_builder - function(
 *          mini_profile,
 *          ER_Widget_Queue_Proc_Excl.const.modes.[queue | processed | excluded | error])
 *
 * @param options.callback_custom_data_for_fullname_descr - function(
 *          mini_profile,
 *          ER_Widget_Queue_Proc_Excl.const.modes.[queue | processed | excluded | error])
 *
 *  @param options.callback_on_add_handlers_for_profile_item - function(
 *          jq_profile_table_item,
 *          ER_Widget_Queue_Proc_Excl.const.modes.[queue | processed | excluded | error])
 *
 * @param options.is_processed_enabled
 * @param options.is_excluded_enabled
 * @param options.is_error_enabled
 *
 * @param options.callback_build_custom_filter_html
 * @param options.callback_add_handlers_custom_filter_html
 * @param options.callback_is_match_custom_filter
 * @param options.callback_clear_filters
 *
 * @param options.callback_get_queue_deferred - function must return mini profiles ids of Queue
 * @param options.callback_get_processed_deferred - function must return mini profiles ids of Processed
 * @param options.callback_get_excluded_deferred - function must return mini profiles ids of Excluded
 * @param options.callback_get_error_deferred - function must return mini profiles ids of Error List
 *
 * @param options.callback_move_ids_from_queue_to_processed_deferred - function(ids)
 * @param options.callback_move_ids_from_queue_to_excluded_deferred - function(ids)
 * @param options.callback_move_ids_from_processed_to_queue_deferred - function(ids)
 * @param options.callback_move_ids_from_processed_to_excluded_deferred - function(ids)
 * @param options.callback_move_ids_from_excluded_to_queue_deferred - function(ids)
 * @param options.callback_move_ids_from_excluded_to_processed_deferred - function(ids)
 * @param options.callback_move_ids_from_error_to_queue_deferred - function(ids)
 *
 * @param options.callback_get_dialog_message_move_from_queue_to_processed - function()
 * @param options.callback_get_dialog_message_move_from_queue_to_excluded - function()
 * @param options.callback_get_dialog_message_move_from_processed_to_queue - function()
 * @param options.callback_get_dialog_message_move_from_processed_to_excluded - function()
 * @param options.callback_get_dialog_message_move_from_excluded_to_queue - function()
 * @param options.callback_get_dialog_message_move_from_excluded_to_processed - function()
 * @param options.callback_get_dialog_message_move_from_error_to_queue - function()
 *
 * @param options.callback_get_dialog_message_delete_selected - function(listname, count) return string
 * @param options.callback_delete_selected_deferred - function(listname, ids)
 *
 * @constructor
 */
function ER_Widget_Queue_Proc_Excl (options) {
    if(!options)
        options = {};
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = {
        id : '',
        fullname : '',
        description : '',
        ischecked : 0, // 0 - both, 1 - only checked, -1 - only unchecked
    };

    this.mode = this.options.mode ? this.options.mode : ER_Widget_Queue_Proc_Excl.const.modes.queue;
    this.profiles = {};
    this.jq_profiles = {};
    this.selected_profiles_ids = {};
    this.profiles_count = 0;
    this.selected_profiles_count = 0;

    this.build_main_view();
};

ER_Widget_Queue_Proc_Excl.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Queue_Proc_Excl '+this.options.html_additional_main_class+'" data-mode="'+this.mode+'">';
        html += this._HTML_build_main_content();
        html += '</div>';
        return html;
    },
    _HTML_build_main_content : function() {
        var html = '<div class="content">';
        html += '<p class="title"></p>';
        html += this._HTML_build_top_panel();
        html += this._HTML_build_profiles_cont();
        html += this._HTML_build_preloader();

        html += '</div>';
        return html;
    },
    _HTML_build_preloader : function() {
        return '<div class="preloader"><span class="img"></span></div>';
    },
    _HTML_build_top_panel : function() {
        var html = '<div class="top_panel">';
        html += this._HTML_build_tabs_panel();
        html += this._HTML_build_control_panel();
        html += this._HTML_build_filter_panel();
        html += '</div>';
        return html;
    },
    _HTML_build_tabs_panel : function() {
        var html = '<div class="tabs_panel">';

        html += this._HTML_build_tab('queue');
        if(this.options.is_processed_enabled)
            html += this._HTML_build_tab('processed');
        if(this.options.is_excluded_enabled)
            html += this._HTML_build_tab('excluded');
        if(this.options.is_error_enabled)
            html += this._HTML_build_tab('error');

        html += '</div>';
        return html;
    },
    _HTML_build_tab : function(name) {
        var set = name == this.mode ? ' set' : '';
        return '<span class="er_tab '+set+'" data-tab="'+name+'"></span>';
    },
    _HTML_build_control_panel : function() {
        var html = '<div class="control_panel">';
        html += '<button class="select_all"></button>';
        html += '<button class="deselect_all"></button>';
        if(this.options.is_excluded_enabled)
            html += '<button class="move_to_excluded"></button>';
        if(this.options.is_processed_enabled)
            html += '<button class="move_to_processed"></button>';
        html += '<button class="move_to_queue"></button>';
        /*html += '<button class="save"></button>';*/
        html += '<button class="delete_selected danger">Delete selected</button>';
        html += '<button class="download_selected">Download selected</button>';
        html += '<button class="close"></button>';
        html += '<span class="count selected">0</span>';
        html += '<span class="count deselected">0</span>';
        html += '</div>';
        return html;
    },
    _HTML_build_filter_panel : function() {
        var html = '<div class="filter_panel">';
        html += '<span class="cont_filter_fullname"><input class="filter_fullname" type="text" placeholder="Name"></span>';
        html += '<span class="cont_filter_description"><input class="filter_description" type="text" placeholder="Position & company"></span>';
        html += '<span class="cont_filter_id"><input class="filter_id" type="text" placeholder="Profile Identifier"></span>';

        if(this.options.callback_build_custom_filter_html)
            html += this.options.callback_build_custom_filter_html();

        html += this._HTML_build_filter_checked_toggle();
        html += '</div>';
        return html;
    },
    _HTML_build_filter_checked_toggle : function() {
        var html = '<div class="b2ctoggle filter_checked_toggle">';
        html += '<span class="label"></span>';
        html += '<span class="values">' +
            '<span class="togglevalue unchecked left" data-val="unchecked"></span>' +
            '<span class="togglevalue all set" data-val="all"></span>' +
            '<span class="togglevalue checked right"  data-val="checked"></span>' +
            '</span>';
        html += '</div>';

        return html;
    },
    _HTML_build_profiles_cont : function() {
        var html = '<div class="profiles_cont"><table class="profiles_table">';
        html += '</table></div>';
        return html;
    },
    _HTML_build_profile_items : function(profiles) {
        var html = '';
        for(var i=0; i<profiles.length; i++) {
            html += this._HTML_build_profile_item(profiles[i]);
        }

        return html;
    },
    _HTML_build_profile_item : function(profile) {
        var html = '<tr class="item" data-id="'+profile.id+'">';

        html += '<td class="td_checkbox"><input class="checkbox" type="checkbox"></td>';
        if(er_gen_settings.get_show_avatars_in_profiles_list())
            html += '<td class="avatar"><a class="profile_url" href="'+profile.url+'" target="_blank"><img src="'+profile.avatar+'"></a></td>';
        html += this._HTML_build_profile_cell_fullname_descr(profile);
        html += '<td class="edit_profile"><button class="er_edit_profile">Edit Profile</button></td>';

        if (this.options.callback_custom_fields_builder)
            html += this.options.callback_custom_fields_builder(profile, this.mode);

        html += '</tr>';
        return html;
    },
    _HTML_build_profile_cell_fullname_descr : function(profile) {
        var html = '<td class="fullname_descr">';

        html += '<a class="profile_url fullname" href="'+profile.url+'" target="_blank">'+profile.firstname +' '+profile.lastname+'</a>';

        html += '<div class="description">'+profile.description+'</div><div class="company_position"><span class="er_company">'+profile.company+'</span>; <span class="er_position">'+profile.position+'</span></div><div class="profile_id">'+profile.id+'</div>';

        if(this.options.callback_custom_data_for_fullname_descr)
            html += this.options.callback_custom_data_for_fullname_descr(profile, this.mode);

        html += '</td>';
        return html;
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
        this._load_profiles();
    },
    _add_handlers : function() {
        var that = this;

        var jq_linkedin_top_header = $('#top-header');
        var jq_linkedin_responsive_nav_scrollable = $('#responsive-nav-scrollable');

        var linkedin_height = jq_linkedin_top_header.outerHeight() + jq_linkedin_responsive_nav_scrollable.outerHeight();
        //this.jq_main.height(window.screen.height - linkedin_height);
        this.jq_main.css('height', window.innerHeight - linkedin_height);
        this.jq_main.css('top', linkedin_height);

        var content_height = window.innerHeight - linkedin_height;
        var jq_content = this.jq_main.children('.content').css('height', content_height);

        var jq_title = jq_content.children('.title');
        var jq_top_panel = jq_content.children('.top_panel');
        var jq_profiles_cont = jq_content.children('.profiles_cont');
        var profiles_cont_height = content_height - jq_title.outerHeight() - jq_top_panel.outerHeight()-50;
        profiles_cont_height = Math.round(profiles_cont_height * 100 / content_height);
        //jq_profiles_cont.css('max-height', content_height - jq_title.outerHeight() - jq_top_panel.outerHeight()-10);
        jq_profiles_cont.css('height', profiles_cont_height+'%');

        this.jq_tabs_panel = this.jq_main.find('.tabs_panel');

        this.jq_tabs_panel.find('.er_tab').click(function() { that._on_tab_click($(this)) });

        this.jq_main.find('.select_all').click(this._on_click_btn_select_all.bind(this));
        this.jq_main.find('.deselect_all').click(this._on_click_btn_deselect_all.bind(this));

        this.jq_main.find('.move_to_queue').click(this._on_click_btn_move_to_queue.bind(this));
        this.jq_main.find('.move_to_processed').click(this._on_click_btn_move_to_processed.bind(this));
        this.jq_main.find('.move_to_excluded').click(this._on_click_btn_move_to_excluded.bind(this));
        this.jq_main.find('.delete_selected').click(this._on_click_delete_selected.bind(this));
        this.jq_main.find('.download_selected').click(this._on_click_download_selected.bind(this));

        this.jq_main.find('.close').click(this._on_click_btn_close.bind(this));

        var jq_filter_panel = this.jq_main.find('.filter_panel').first();

        this.jq_filter_fullname = jq_filter_panel.find('.filter_fullname').change(this._on_change_input_filter_fullname.bind(this));
        this.jq_filter_description = jq_filter_panel.find('.filter_description').change(this._on_change_input_filter_description.bind(this));
        this.jq_filter_id = jq_filter_panel.find('.filter_id').change(this._on_change_input_filter_id.bind(this));

        if(this.options.callback_add_handlers_custom_filter_html)
            this.options.callback_add_handlers_custom_filter_html(jq_filter_panel);

        this.jq_profiles_table = this.jq_main.find('.profiles_table');

        this.jq_preloader = this.jq_main.find('.preloader');

        this.jq_count_selected = this.jq_main.find('.count.selected');
        this.jq_count_deselected = this.jq_main.find('.count.deselected');

        this.jq_filter_checked_toggle = this.jq_main.find('.filter_checked_toggle');
        this.jq_filter_checked_toggle.b2ctoggle({
            multiMode : false,
            onValueChange : this._on_filter_checked_toggle_state_change.bind(this)
        })
    },
    _load_profiles : function() {
        this._show_preloader();

        this.closure_on_profiles_loaded = this.closure_on_profiles_loaded ? this.closure_on_profiles_loaded : this._on_profiles_loaded.bind(this);

        switch (this.mode) {
            case ER_Widget_Queue_Proc_Excl.const.modes.queue :
                this.options.callback_get_queue_deferred()
                    .then(er_mini_profiles_db.get_profiles.bind(er_mini_profiles_db))
                    .then(this.closure_on_profiles_loaded);
                break;
            case ER_Widget_Queue_Proc_Excl.const.modes.processed :
                this.options.callback_get_processed_deferred()
                    .then(er_mini_profiles_db.get_profiles.bind(er_mini_profiles_db))
                    .then(this.closure_on_profiles_loaded);
                break;
            case ER_Widget_Queue_Proc_Excl.const.modes.excluded :
                this.options.callback_get_excluded_deferred()
                    .then(er_mini_profiles_db.get_profiles.bind(er_mini_profiles_db))
                    .then(this.closure_on_profiles_loaded);
                break;
            case ER_Widget_Queue_Proc_Excl.const.modes.error :
                this.options.callback_get_error_deferred()
                    .then(er_mini_profiles_db.get_profiles.bind(er_mini_profiles_db))
                    .then(this.closure_on_profiles_loaded);
                break;
        }

    },
    _add_profiles : function(profiles) {
        this._add_profiles_butch(profiles);
        return;

        for(var i=0; i<profiles.length; i++) {
            this._add_profile(profiles[i]);
        }
        this.jq_count_deselected.text(this.profiles_count);
    },
    _add_profile : function(profile) {
        this.profiles[profile.id] = profile;

        var jq_profile = this._create_jq_profile(profile);
        jq_profile.appendTo(this.jq_profiles_table);

        this.jq_profiles[profile.id] = jq_profile;
        this.profiles_count++;
    },
    _add_profiles_butch : function(profiles) {
        var html = this._HTML_build_profile_items(profiles);
        var jq_profiles = $(html);
        jq_profiles.appendTo(this.jq_profiles_table);
        this.profiles_count += profiles.length;
        this.jq_count_deselected.text(this.profiles_count);
        for(var i= 0, jq_profile, profile; i<profiles.length; i++) {
            profile = profiles[i];
            jq_profile = $(jq_profiles[i]);
            this.profiles[profile.id] = profile;
            this.jq_profiles[profile.id] = jq_profile;
            this._add_jq_profile_handlers(jq_profile);
        }
    },
    _create_jq_profile : function(profile) {
        var html = this._HTML_build_profile_item(profile);
        var jq_profile = $(html);
        this._add_jq_profile_handlers(jq_profile);
        return jq_profile;
    },
    _add_jq_profile_handlers : function(jq_profile) {
        jq_profile.find('.checkbox').change(this._on_change_input_profile_item_checkbox.bind(this));
        jq_profile.find('button.er_edit_profile').click(this._on_click_btn_edit_profile.bind(this));

        if(this.options.callback_on_add_handlers_for_profile_item)
            this.options.callback_on_add_handlers_for_profile_item(jq_profile, this.mode);
    },
    _show_preloader : function() {
        this.jq_preloader.addClass('show');
    },
    _hide_preloader : function() {
        this.jq_preloader.removeClass('show');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },
    hide : function() {
        this.jq_main.addClass('hidden');
    },
    destroy : function() {
        this.profiles = {};
        this.jq_profiles = {};
        this.selected_profiles_ids = {};
        this.profiles_count = 0;
        this.selected_profiles_count = 0;
        this.jq_main.remove();
    },
    start_filter : function() {
        var jq_profile;
        for(var id in this.profiles) {
            jq_profile = this.jq_profiles[id];
            if(this._is_match_filter(id)) {
                jq_profile.removeClass('hidden');
            } else {
                jq_profile.addClass('hidden');
            }
        }
    },
    _is_match_filter : function(profile_id) {
        var profile = this.profiles[profile_id];
        if(this.filter.fullname != null && this.filter.fullname != '') {
            if (profile.fullname.toLowerCase().indexOf(this.filter.fullname) < 0)
                return false;
        }
        if(this.filter.description != null && this.filter.description != '') {
            if (profile.description.toLowerCase().indexOf(this.filter.description) < 0)
                return false;
        }
        if(this.filter.id != null && this.filter.id != '') {
            if (profile.id.toLowerCase().indexOf(this.filter.id) < 0)
                return false;
        }
        if(this.filter.ischecked == -1 && this.selected_profiles_ids[profile_id]) {
            return false;
        } else if(this.filter.ischecked == 1 && !this.selected_profiles_ids[profile_id]) {
            return false;
        }
        if(this.options.callback_is_match_custom_filter) {
            if(!this.options.callback_is_match_custom_filter(profile))
                return false;
        }

        return true;
    },
    /**
     * Показать диалог
     * @private
     */
    show_yes_no_dialog : function(message, onYes, onNo) {
        /*var jqDialog = $('<div class="yes_no_dialog"></div>').appendTo(this.jq_main);
        jqDialog.b2cpopupyesnodialog({
            message : message,
            onYes : onYes,
            onNo : onNo,
            onClose : function() { jqDialog.remove() }
        });
        jqDialog.b2cpopupyesnodialog('show');*/

        new ERLH_W_Dialog_Yes_No({
            message : message,
            jq_parent : this.jq_main,
            on_yes : onYes,
            on_no : onNo,
        });
    },
    /**
     * Показывает всплывающее окно с указанным сообщением
     *
     * @param message {string}
     * @private
     */
    _info_popup_show : function(message) {
        if (this.jqInfoPopup == null) {
            var that = this;
            this.jqInfoPopup = $('<div class="b2c_info_popup"></div>').appendTo(this.jq_main).b2cpopup({
                html_content : '<p class="message"></p>',
                lightMode : true
            });
            this.jqInfoPopup.b2cpopup('getUserCont').click(function(event) { that.jqInfoPopup.b2cpopup('close'); });
        }
        this.jqInfoPopup.b2cpopup('getUserCont').text(message);
        this.jqInfoPopup.b2cpopup('show');
    },

    get_cached_profile : function(profile_id) {
        return this.profiles[profile_id];
    },

    set_mode : function(mode) {
        this.mode = mode;
        this.jq_main.attr('data-mode', mode);
        this._adjust_tabs_to_mode();
        this._clear();

        this._load_profiles();
    },
    _adjust_tabs_to_mode : function() {
        this.jq_tabs_panel.find('.er_tab').removeClass('set');
        this.jq_tabs_panel.find('.er_tab[data-tab='+this.mode+']').addClass('set');
    },
    _clear : function() {
        this._clear_results();

        this.jq_count_selected.text(0);
        this.jq_count_deselected.text(0);

        this._clear_filters();

    },
    _clear_filters : function() {
        this.jq_filter_fullname.val('');
        this.jq_filter_description.val('');
        this.jq_filter_id.val('');
        this.jq_filter_checked_toggle.b2ctoggle('set',
            [{val : 'unchecked', set : false}, {val : 'all', set : true}, {val : 'checked', set : false}]
        );

        this.filter = {
            fullname : '',
            description : '',
            id : '',
            ischecked : 0, // 0 - both, 1 - only checked, -1 - only unchecked
        };

        if(this.options.callback_clear_filters)
            this.options.callback_clear_filters();
    },
    _clear_results : function() {
        for(var id in this.jq_profiles) {
            this.jq_profiles[id].remove();
        }

        this.profiles = {};
        this.jq_profiles = {};
        this.selected_profiles_ids = {};
        this.profiles_count = 0;
        this.selected_profiles_count = 0;
    },

    _get_selected_profiles_ids_as_array : function() {
        var arr = [];

        for(var id in this.selected_profiles_ids)
            arr.push(id);

        return arr;
    },
    get_selected_count : function() {
        return this.selected_profiles_count;
    },

    _delete_selected_from_widget : function() {
        var ids = this._get_selected_profiles_ids_as_array();
        this._delete_jq_profiles_by_ids(ids);

        for(var i=0; i<ids.length; i++) {
            delete this.profiles[ids[i]];
        }

        this.selected_profiles_ids = {};
        this.profiles_count -= ids.length;
        this.selected_profiles_count = 0;

        this.jq_count_selected.text(0);
        this.jq_count_deselected.text(this.profiles_count);
    },

    _delete_jq_profiles_by_ids : function(ids) {
        for(var i= 0, id; i<ids.length; i++) {
            id = ids[i];
            this.jq_profiles[ids[i]].remove();
            delete this.jq_profiles[id];
        }
    },

    _get_jq_item_from_child : function(jq) {
        var jq_profile_item;
        if(jq.hasClass('item'))
            jq_profile_item = jq;
        else
            jq_profile_item = jq.closest('.item');

        return jq_profile_item;
    },
    _get_profile_id_from_jq : function(jq) {
        var jq_profile_item = this._get_jq_item_from_child(jq);
        return jq_profile_item.attr('data-id');
    },

    _on_click_btn_close : function() {
        this.destroy();
    },
    _on_click_btn_select_all : function() {
        var jq_rows = this.jq_profiles_table.find('.item:not(.hidden)');

        var additional_selected = 0;
        for(var i= 0, jq_row, jq_input, id; i<jq_rows.length; i++) {
            jq_row = $(jq_rows[i]);
            jq_input = jq_row.find('input');
            if(!jq_input.prop('checked')) {
                id = jq_row.attr('data-id');
                this.selected_profiles_ids[id] = id;
                ++additional_selected;
                jq_input.prop('checked', true);
            }
        }

        this.selected_profiles_count += additional_selected;
        this.jq_count_selected.text(this.selected_profiles_count);
        this.jq_count_deselected.text(this.profiles_count - this.selected_profiles_count);
    },
    _on_click_btn_deselect_all : function() {
        var jq_rows = this.jq_profiles_table.find('.item:not(.hidden)');

        var additional_deselected = 0;
        for(var i= 0, jq_row, jq_input, id; i<jq_rows.length; i++) {
            jq_row = $(jq_rows[i]);
            jq_input = jq_row.find('input');
            if(jq_input.prop('checked')) {
                id = jq_row.attr('data-id');
                delete this.selected_profiles_ids[id];
                ++additional_deselected;
                jq_input.prop('checked', false);
            }
        }

        this.selected_profiles_count -= additional_deselected;
        this.jq_count_selected.text(this.selected_profiles_count);
        this.jq_count_deselected.text(this.profiles_count - this.selected_profiles_count);
    },

    _on_click_download_selected : function() {
        var that = this;

        new ER_W_Download_Mini({
            jq_parent : this.jq_main,
            header : 'Download '+this.selected_profiles_count+' selected contacts',
            callback_get_ids_deferred : function() {
                var deferred = $.Deferred();
                deferred.resolve(that._get_selected_profiles_ids_as_array());
                return deferred.promise();
            }
        });
    },

    _on_click_btn_move_to_queue : function() {
        var message;
        switch (this.mode) {
            case ER_Widget_Queue_Proc_Excl.const.modes.processed :
                message = this.options.callback_get_dialog_message_move_from_processed_to_queue(this.selected_profiles_count);
                break;
            case ER_Widget_Queue_Proc_Excl.const.modes.excluded :
                message = this.options.callback_get_dialog_message_move_from_excluded_to_queue(this.selected_profiles_count);
                break;
            case ER_Widget_Queue_Proc_Excl.const.modes.error :
                message = this.options.callback_get_dialog_message_move_from_error_to_queue(this.selected_profiles_count);
                break;
        }

        this.show_yes_no_dialog(
            message,
            this._on_move_to_queue_yes.bind(this)
        )
    },
    _on_move_to_queue_yes : function() {
        this._show_preloader();

        var ids = this._get_selected_profiles_ids_as_array();

        var promise;
        if(this.mode == ER_Widget_Queue_Proc_Excl.const.modes.processed) {
            promise = this.options.callback_move_ids_from_processed_to_queue_deferred(ids);
        } else if(this.mode == ER_Widget_Queue_Proc_Excl.const.modes.excluded) {
            promise = this.options.callback_move_ids_from_excluded_to_queue_deferred(ids);
        } else if(this.mode == ER_Widget_Queue_Proc_Excl.const.modes.error) {
            promise = this.options.callback_move_ids_from_error_to_queue_deferred(ids);
        }

        promise.then(this._on_move_finished.bind(this));
    },
    _on_click_btn_move_to_processed : function() {
        var message;
        switch (this.mode) {
            case ER_Widget_Queue_Proc_Excl.const.modes.queue :
                message = this.options.callback_get_dialog_message_move_from_queue_to_processed(this.selected_profiles_count);
                break;
            case ER_Widget_Queue_Proc_Excl.const.modes.excluded :
                message = this.options.callback_get_dialog_message_move_from_excluded_to_processed(this.selected_profiles_count);
                break;
        }

        this.show_yes_no_dialog(
            message,
            this._on_move_to_processed_yes.bind(this)
        );
    },
    _on_move_to_processed_yes : function() {
        this._show_preloader();

        var ids = this._get_selected_profiles_ids_as_array();

        var promise;
        if(this.mode == ER_Widget_Queue_Proc_Excl.const.modes.queue) {
            promise = this.options.callback_move_ids_from_queue_to_processed_deferred(ids);
        } else if(this.mode == ER_Widget_Queue_Proc_Excl.const.modes.excluded) {
            promise = this.options.callback_move_ids_from_excluded_to_processed_deferred(ids);
        }

        promise.then(this._on_move_finished.bind(this));
    },
    _on_click_btn_move_to_excluded : function() {
        var message;
        switch (this.mode) {
            case ER_Widget_Queue_Proc_Excl.const.modes.queue :
                message = this.options.callback_get_dialog_message_move_from_queue_to_excluded(this.selected_profiles_count);
                break;
            case ER_Widget_Queue_Proc_Excl.const.modes.processed :
                message = this.options.callback_get_dialog_message_move_from_processed_to_excluded(this.selected_profiles_count);
                break;
        }

        this.show_yes_no_dialog(
            message,
            this._on_move_to_excluded.bind(this)
        );
    },
    _on_move_to_excluded : function() {
        this._show_preloader();

        var ids = this._get_selected_profiles_ids_as_array();

        var promise;
        if(this.mode == ER_Widget_Queue_Proc_Excl.const.modes.queue) {
            promise = this.options.callback_move_ids_from_queue_to_excluded_deferred(ids);
        } else if(this.mode == ER_Widget_Queue_Proc_Excl.const.modes.processed) {
            promise = this.options.callback_move_ids_from_processed_to_excluded_deferred(ids);
        }

        promise.then(this._on_move_finished.bind(this));
    },
    _on_move_finished : function() {
        this._delete_selected_from_widget();

        this._hide_preloader();
    },
    _on_click_delete_selected : function() {
        var message = this.options.callback_get_dialog_message_delete_selected(this.mode, this.selected_profiles_count);
        this.show_yes_no_dialog(
            message,
            this._on_delete_selected_yes.bind(this)
        );
    },
    _on_delete_selected_yes : function() {
        var that = this;
        this._show_preloader();
        var ids = this._get_selected_profiles_ids_as_array();
        this.options.callback_delete_selected_deferred(this.mode, ids)
            .then(this._on_delete_selected_done.bind(this));
    },
    _on_delete_selected_done : function() {
        this._delete_selected_from_widget();

        this._hide_preloader();
        this._info_popup_show('DONE!');
    },
    _on_close_and_discard_yes : function() {
        this.destroy();
    },
    _on_tab_click : function(jq_tab) {
        if(jq_tab.hasClass('set'))
            return;
        var mode = jq_tab.attr('data-tab');
        this.set_mode(mode);
    },
    _on_change_input_filter_fullname : function() {
        this.filter.fullname = this.jq_filter_fullname.val().toLowerCase();
        this.start_filter();
    },
    _on_change_input_filter_description : function() {
        this.filter.description = this.jq_filter_description.val().toLowerCase();
        this.start_filter();
    },
    _on_change_input_filter_id : function() {
        this.filter.id = this.jq_filter_id.val().toLowerCase();
        this.start_filter();
    },
    _on_change_input_profile_item_checkbox : function(event) {
        var jq_checkbox = $(event.target);
        var id = this._get_profile_id_from_jq(jq_checkbox);

        if (jq_checkbox.prop( "checked" )) {
            this.selected_profiles_ids[id] = id;
            this.selected_profiles_count++;
        } else {
            delete this.selected_profiles_ids[id];
            this.selected_profiles_count--;
        }
        var deselected = this.profiles_count - this.selected_profiles_count;

        this.jq_count_deselected.text(deselected);
        this.jq_count_selected.text(this.selected_profiles_count);
    },
    _on_click_btn_edit_profile : function(event) {
        var jq_btn = $(event.target);
        var id = this._get_profile_id_from_jq(jq_btn);
        new ER_W_MiniProfile_Editor({
            profile_id : id,
            on_changed : this._on_profile_changed.bind(this)
        });
    },
    _on_filter_checked_toggle_state_change : function(sates) {
        if(this.jq_filter_checked_toggle.b2ctoggle('isset', 'all')) {
            this.filter.ischecked = 0;
        } else if (this.jq_filter_checked_toggle.b2ctoggle('isset', 'checked')) {
            this.filter.ischecked = 1;
        } else if (this.jq_filter_checked_toggle.b2ctoggle('isset', 'unchecked')) {
            this.filter.ischecked = -1;
        }
        this.start_filter();
    },
    _on_profiles_loaded : function(profiles) {
        console.log('START ER_Widget_Queue_Proc_Excl._on_profiles_loaded');
        var start = (new Date()).getTime();
        this._hide_preloader();
        this._add_profiles(profiles);
        console.log('END ER_Widget_Queue_Proc_Excl._on_profiles_loaded');
        var end = (new Date()).getTime();
        console.log('seconds = '+(end-start)/1000);
    },
    _on_profile_changed : function(profile) {
        this.profiles[profile.id] = profile;
        var jq_profile = this.jq_profiles[profile.id];
        var new_jq_profile = this._create_jq_profile(profile);
        new_jq_profile.insertAfter(jq_profile);
        jq_profile.remove();
        this.jq_profiles[profile.id] = new_jq_profile;
    },
};

ER_Widget_Queue_Proc_Excl.const = {};
ER_Widget_Queue_Proc_Excl.const.modes = {};
ER_Widget_Queue_Proc_Excl.const.modes.queue = 'queue';
ER_Widget_Queue_Proc_Excl.const.modes.processed = 'processed';
ER_Widget_Queue_Proc_Excl.const.modes.excluded = 'excluded';
ER_Widget_Queue_Proc_Excl.const.modes.error = 'error';
/**
 * Created by Alex on 13.03.2016.
 */
// B2C Popup
var er_b2cpopup_initer = window.er_b2cpopup_initer || {
    init : function(){
        if (!window.jQuery) {
            setTimeout(this.init.bind(this), 100);
            return;
        } else {
            var b2cpopup = function( $ ){
                var methods = {
                    init : function( options ) {

                        return this.each(function(){

                            var $this = $(this),
                                data = $this.data('b2cpopup');

                            if(data) {
                                $this.children().remove();
                            }

                            //if ( ! data ) {

                            data = {};
                            data.$this = $this;
                            data.options = $.extend(true, {}, $.fn.b2cpopup.defaults, options);

                            $(this).data('b2cpopup', data);

                            $this.addClass(data.options.cl_main);
                            if(! data.options.defaultOpen)
                                $this.addClass(data.options.cl_hidden);

                            if (data.options.lightMode)
                                $this.addClass(data.options.cl_light);

                            $.fn.b2cpopup.init(data);

                            //}
                        });
                    },
                    close : function() {
                        return this.each(function(){
                            var $this = $(this),
                                data = $this.data('b2cpopup');
                            $.fn.b2cpopup.close(data);
                        });
                    },
                    show : function() {
                        return this.each(function(){
                            var $this = $(this),
                                data = $this.data('b2cpopup');
                            $.fn.b2cpopup.show(data);
                        });
                    },
                    isOpen : function() {
                        var $this = this.first(),
                            data = $this.data('b2cpopup');
                        return $.fn.b2cpopup.isOpen(data);
                    },
                    getUserCont : function() {
                        var $first = this.first();
                        var data = $first.data('b2cpopup');
                        return data.jqUserCont;
                    },
                    option : function(key, value) {
                        return this.each(function(){
                            var $this = $(this),
                                data = $this.data('b2cpopup');
                            data.options[key] = value;
                        });
                    },
                };

                $.fn.b2cpopup = function( method ) {

                    if ( methods[method] ) {
                        return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
                    } else if ( typeof method === 'object' || ! method ) {
                        return methods.init.apply( this, arguments );
                    } else {
                        $.error( 'Cannot find ' +  method + ' in jQuery.b2cpopup' );
                    }

                };

                $.fn.b2cpopup.defaults = {
                    onClose : null, // onTagAdded(tagName, tags)
                    onShow : null, // onTagAdded(tagName, tags)
                    cl_main : 'b2cpopup',
                    cl_b2cPopupBackground : 'b2cPopupBackground',
                    cl_excontent : 'b2cexcontent',
                    cl_content : 'b2ccontent',
                    cl_btnclose : 'btnclose',
                    cl_hidden : 'hidden',
                    cl_light : 'b2clight',
                    html_content : '',
                    jq_content : null,
                    lightMode : false,
                    defaultOpen : true,
                };

                $.fn.b2cpopup.init = function(data) {
                    data.$this.append($($.fn.b2cpopup.buildHtml(data)));
                    var fclose = function(event) { $.fn.b2cpopup.close(data) };
                    data.$this.children('.'+data.options.cl_b2cPopupBackground).click(fclose);
                    var jqExcontent = data.$this.children('.'+data.options.cl_excontent);
                    jqExcontent.children('.'+data.options.cl_btnclose).click(fclose);

                    var jqContent = jqExcontent.children('.'+data.options.cl_content);
                    if (data.options.jq_content != null)
                        jqContent.append(data.options.jq_content);
                    data.jqUserCont = jqContent.children();
                };

                $.fn.b2cpopup.buildHtml = function(data) {
                    var html_content = data.options.html_content != null ? data.options.html_content : '';

                    return '<div class="'+data.options.cl_b2cPopupBackground+'"></div><div class="'+data.options.cl_excontent+'"><button class="'+data.options.cl_btnclose+'"></button><div class="'+data.options.cl_content+'">'+html_content+'</div></div> ';
                };

                $.fn.b2cpopup.close = function(data) {
                    data.$this.addClass(data.options.cl_hidden);
                    if(data.options.onClose != null)
                        data.options.onClose();
                };

                $.fn.b2cpopup.show = function(data) {
                    data.$this.removeClass(data.options.cl_hidden);
                    if(data.options.onShow != null)
                        data.options.onShow();
                };

                $.fn.b2cpopup.isOpen = function(data) {
                    return ! data.$this.hasClass(data.options.cl_hidden);
                };

            };

            b2cpopup( window.jQuery );
        }
    }
};

er_b2cpopup_initer.init();
/**
 * Created by Alex on 23.03.2016.
 */
// B2C Popup Yes No Dialog
var er_b2cpopupyesnodialog_initer = window.er_b2cpopupyesnodialog_initer || {
        init : function() {
            if (!window.jQuery) {
                setTimeout(this.init.bind(this), 100);
                return;
            } else {
                var b2cpopupyesnodialog  = function( $ ){
                    var methods = {
                        init : function( options ) {

                            return this.each(function(){

                                var $this = $(this),
                                    data = $this.data('b2cpopupyesnodialog');

                                if ( ! data ) {

                                    data = {};
                                    data.$this = $this;
                                    data.options = $.extend(true, {}, $.fn.b2cpopupyesnodialog.defaults, options);

                                    $(this).data('b2cpopupyesnodialog', data);

                                    $this.addClass(data.options.cl_main);

                                    $.fn.b2cpopupyesnodialog.init(data);
                                }
                            });
                        },
                        close : function() {
                            return this.each(function(){
                                var $this = $(this),
                                    data = $this.data('b2cpopupyesnodialog');
                                $.fn.b2cpopupyesnodialog.close(data);
                            });
                        },
                        show : function(message) {
                            return this.each(function(){
                                var $this = $(this),
                                    data = $this.data('b2cpopupyesnodialog');
                                $.fn.b2cpopupyesnodialog.show(data, message);
                            });
                        },
                        setMessage : function(message)  {
                            return this.each(function(){
                                var $this = $(this),
                                    data = $this.data('b2cpopupyesnodialog');
                                $.fn.b2cpopupyesnodialog.setMessage(data, message);
                            });
                        },
                    };

                    $.fn.b2cpopupyesnodialog = function( method ) {

                        if ( methods[method] ) {
                            return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
                        } else if ( typeof method === 'object' || ! method ) {
                            return methods.init.apply( this, arguments );
                        } else {
                            $.error( 'Cannot find ' +  method + ' in jQuery.b2cpopupyesnodialog' );
                        }

                    };

                    $.fn.b2cpopupyesnodialog.defaults = {
                        onYes : null, // onCancel()
                        onClose : null, // onClose()
                        onNo : null, // onSend(typeid, comment, callBackOnSuccess(), callBackOnError(message) )
                        cl_main : 'b2cpopupyesnodialog',
                        cl_btn_no : 'b2c_btn_no',
                        cl_btn_yes : 'b2c_btn_yes',
                        cl_message : 'message',
                        message : 'Are you happy?',
                    };

                    $.fn.b2cpopupyesnodialog.init = function(data) {
                        var html = $.fn.b2cpopupyesnodialog.buildHTML(data);
                        data.$this.b2cpopup({
                            html_content : html,
                            lightMode : true,
                            onClose : function() { $.fn.b2cpopupyesnodialog.onMainPopupClose(data, true); }
                        });
                        //data.$this.append($(html));
                        data.jqMessage = data.$this.find('.'+data.options.cl_message);

                        $.fn.b2cpopupyesnodialog.addHandlers(data);
                    };

                    $.fn.b2cpopupyesnodialog.buildHTML = function(data) {
                        var options = data.options;
                        return '<p class="'+options.cl_message+'">' + options.message + '</p>' + '<span class="'+options.cl_btn_yes+'">Yes</span><span class="'+options.cl_btn_no+'">No</span>';
                    };



                    $.fn.b2cpopupyesnodialog.addHandlers = function(data) {
                        data.$this.find('.'+data.options.cl_btn_no).click(function(event) { $.fn.b2cpopupyesnodialog.onNoClick(data) });
                        data.$this.find('.'+data.options.cl_btn_yes).click(function(event) { $.fn.b2cpopupyesnodialog.onYesClick(data) });
                    };

                    $.fn.b2cpopupyesnodialog.onNoClick = function(data) {
                        $.fn.b2cpopupyesnodialog.close(data);
                        if(data.options.onCancel != null) {
                            data.options.onCancel();
                        }
                    };

                    $.fn.b2cpopupyesnodialog.onYesClick = function(data) {
                        $.fn.b2cpopupyesnodialog.close(data);
                        if(data.options.onYes != null) {
                            data.options.onYes();
                        }
                    };

                    $.fn.b2cpopupyesnodialog.onMainPopupClose = function(data) {
                        $.fn.b2cpopupyesnodialog.close(data, true);
                    };


                    $.fn.b2cpopupyesnodialog.show = function(data, message){
                        if (message != null)
                            $.fn.b2cpopupyesnodialog.setMessage(data, message);
                        data.$this.b2cpopup('show');
                    };

                    $.fn.b2cpopupyesnodialog.close = function(data, isCallFrom_b2cpopup){
                        if(!isCallFrom_b2cpopup)
                            data.$this.b2cpopup('close');
                        else if(data.options.onClose != null)
                            data.options.onClose();
                    };

                    $.fn.b2cpopupyesnodialog.setMessage = function(data, message) {
                        data.options.message = message;
                        data.jqMessage.text(message);
                    };

                };
                b2cpopupyesnodialog( window.jQuery );
            }
        }
    };

er_b2cpopupyesnodialog_initer.init();
/**
 * Created by Alex on 13.03.2016.
 */

// B2C Tags
var er_b2ctags_initer = window.er_b2ctags_initer || {
        init : function() {
            if (!window.jQuery) {
                setTimeout(this.init.bind(this), 100);
                return;
            } else {
                var b2ctags = function( $ ){
                    var methods = {
                        init : function( options ) {

                            return this.each(function(){

                                var $this = $(this),
                                    data = $this.data('b2ctags');

                                if ( ! data ) {

                                    data = {};
                                    data.$this = $this;
                                    data.options = $.extend(true, {}, $.fn.b2ctags.defaults, options);

                                    $(this).data('b2ctags', data);

                                    $this.addClass(data.options.cl_main);

                                    if (! data.options.readOnly) {
                                        $.fn.b2ctags.initInputer(data);
                                    }
                                    $.fn.b2ctags.initTagsCont(data);

                                    if(data.options.tags != null) {
                                        var tags = data.options.tags;
                                        data.options.tags = null;
                                        $.fn.b2ctags.addTags(data, tags);
                                    }
                                }
                            });
                        },
                        get : function() {
                            var $first = this.first();
                            var data = $first.data('b2ctags');
                            return data.options.tags;
                        },
                        set : function(tags) {
                            return this.each(function() {

                                var $this = $(this),
                                    data = $this.data('b2ctags');

                                if (data != null) {
                                    data.options.tags = [];
                                    data.options.jqTagsContainer.find('.'+data.options.cl_tag).remove();
                                    $.fn.b2ctags.addTags(data, tags);
                                }
                            });
                        },
                    };

                    $.fn.b2ctags = function( method ) {

                        if ( methods[method] ) {
                            return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
                        } else if ( typeof method === 'object' || ! method ) {
                            return methods.init.apply( this, arguments );
                        } else {
                            $.error( 'Cannot find ' +  method + ' in jQuery.b2ctags' );
                        }

                    };

                    $.fn.b2ctags.defaults = {
                        onTagAdded : null, // onTagAdded(tagName, tags)
                        onTagDeleted : null, // onTagDeleted(tagName, tags)
                        onChanged : null, // onChanged(tags)
                        onTagClick : null, // onTagClick(tagName)
                        jqTagInputerCont : null,
                        jqTagsContainer : null,
                        readOnly : false,
                        tags : [],
                        cl_main : 'b2ctags',
                        cl_input_cont : 'b2ctags_input_cont',
                        cl_inputer : 'b2ctags_input',
                        cl_tags_cont : 'b2ctags_cont',
                        cl_tag : 'b2ctag',
                        cl_tag_name : 'name',
                        cl_tag_btn_del : 'del',
                        cl_hidden : 'hidden',
                        maxlength : 30,
                        placeholder : 'input tags',
                        inputerAttrDataRole : 'none',
                    };

                    $.fn.b2ctags.onTagClick = function(data, jqTag) {
                        if (data.options.onTagClick == null)
                            return;
                        var tagName = jqTag.find('.'+data.options.cl_tag_name).text();
                        data.options.onTagClick(tagName);
                    };

                    $.fn.b2ctags.onTagDeleteClick = function(data, jqBtnTagDelete) {
                        if (data.options.readOnly)
                            return;
                        var jqTag = jqBtnTagDelete.closest('.'+data.options.cl_tag);
                        var tagName = jqTag.find('.'+data.options.cl_tag_name).text();
                        var tagIndex = data.options.tags.indexOf(tagName);
                        data.options.tags.splice(tagIndex, 1);
                        jqTag.remove();
                        if (data.options.onTagDeleted != null)
                            data.options.onTagDeleted(tagName, data.options.tags);
                        if (data.options.onChanged != null)
                            data.options.onChanged(data.options.tags);
                    };

                    $.fn.b2ctags.onInputChange = function(data) {
                        var val = data.jqInput.val().replace(/#/g,'');
                        if (val == '')
                            return;
                        var addedTags = $.fn.b2ctags.addTags(data, [val]);
                        if (addedTags != null && addedTags.length == 1) {
                            if (data.options.onTagAdded != null)
                                data.options.onTagAdded(val, data.options.tags);

                            if (data.options.onChanged != null)
                                data.options.onChanged(data.options.tags);
                        }
                        data.jqInput.val('');
                    };

                    $.fn.b2ctags.addTags = function(data, tags) {
                        if (data.options.tags == null)
                            data.options.tags = [];
                        var tagsToAdd = [];

                        if (tags != null) {
                            var tag;
                            for(var i=0; i<tags.length; i++) {
                                if (data.options.tags.indexOf(tags[i]) == -1)
                                    tagsToAdd.push(tags[i]);
                            }

                            if (tagsToAdd.length == 0)
                                return;

                            var htmlTags = $.fn.b2ctags.buildTagsHTML(data, tags);
                            var jqTags = $(htmlTags).appendTo(data.options.jqTagsContainer);
                            jqTags.click(function(event) { $.fn.b2ctags.onTagClick(data, $(this)) });
                            jqTags.find('.'+data.options.cl_tag_btn_del).click(function(event) { $.fn.b2ctags.onTagDeleteClick(data, $(this)) });
                        }

                        data.options.tags = data.options.tags.concat(tagsToAdd);

                        return tagsToAdd;
                    }

                    $.fn.b2ctags.buildTagsHTML = function(data, tags) {
                        var result = '';
                        if(tags == null)
                            return result;
                        for(var i=0; i<tags.length; i++) {
                            result += $.fn.b2ctags.buildTagHTML(data, tags[i]);
                        }

                        return result;
                    }

                    $.fn.b2ctags.buildTagHTML = function(data, tag) {
                        var hidden = '';
                        if (data.options.readOnly)
                            hidden = ' '+data.options.cl_hidden;
                        return '<span class="'+data.options.cl_tag+'"><span class="'+data.options.cl_tag_name+'">'+tag+'</span><span class="'+data.options.cl_tag_btn_del+hidden+'"></span></span>';
                    };

                    $.fn.b2ctags.initInputer = function(data) {
                        if (data.options.jqTagInputerCont == null) {
                            data.options.jqTagInputerCont = $($.fn.b2ctags.buildInputContHTML(data)).prependTo(data.$this);
                        }
                        data.jqInput =  data.options.jqTagInputerCont.find('.'+data.options.cl_inputer);
                        if (data.jqInput.length == 0) {
                            data.jqInput = $($.fn.b2ctags.buildInputHTML(data)).appendTo(data.options.jqTagInputerCont);
                        }
                        data.jqInput.attr('maxlength', data.options.maxlength);
                        data.jqInput.attr('placeholder', data.options.placeholder);
                        data.jqInput.attr('data-role', data.options.inputerAttrDataRole);
                        data.jqInput.change(function(event) { $.fn.b2ctags.onInputChange(data) });
                    };

                    $.fn.b2ctags.buildInputContHTML = function(data) {
                        return '<span class="'+data.options.cl_input_cont+'">'+$.fn.b2ctags.buildInputHTML(data)+'</span>';
                    }

                    $.fn.b2ctags.buildInputHTML = function(data) {
                        return '<input class="'+data.options.cl_inputer+'" type="text">';
                    };

                    $.fn.b2ctags.initTagsCont = function(data) {
                        if (data.options.jqTagsContainer == null) {
                            data.options.jqTagsContainer = $('<span class="'+data.options.cl_tags_cont+'"></span>').appendTo(data.$this);
                        } else {
                            data.options.jqTagsContainer.addClass(data.options.cl_tags_cont);
                        }
                    }

                };
                b2ctags( window.jQuery );
            }
        }
    };

er_b2ctags_initer.init();
/**
 * Created by Alex on 11.03.2016.
 */
// B2C Toggle
var er_b2ctoggle_initer = window.er_b2ctoggle_initer || {
        init : function() {
            if (!window.jQuery) {
                setTimeout(this.init.bind(this), 100);
                return;
            } else {
                var b2ctoggle = function( $ ){
                    var methods = {
                        init : function( options ) {

                            return this.each(function(){

                                var $this = $(this),
                                    data = $this.data('b2ctoggle');

                                if ( ! data ) {

                                    data = {};
                                    data.$this = $this;
                                    data.options = $.extend(true, {}, $.fn.b2ctoggle.defaults, options);

                                    data.$values = $this.find('.'+data.options.cl_toggle_value);

                                    data.$values.click(function(event) { $.fn.b2ctoggle.onValueClick($(this), data) });

                                    $(this).data('b2ctoggle', data);

                                    if (data.options.states != null) {
                                        $.fn.b2ctoggle.setValuesState(data, data.options.states);
                                    }

                                    if (data.options.needEqualWidth)
                                        $.fn.b2ctoggle.setValuesWidthToEqual(data.$values);
                                }
                            });
                        },
                        get : function() {
                            var $first = this.first();
                            var data = $first.data('b2ctoggle');
                            return $.fn.b2ctoggle.getValuesState(data);
                        },
                        set : function(states) {
                            return this.each(function() {

                                var $this = $(this),
                                    data = $this.data('b2ctoggle');

                                if (data != null) {
                                    $.fn.b2ctoggle.setValuesState(data, states);
                                }
                            });
                        },
                        isset : function(valName) {
                            var $first = this.first();
                            var data = $first.data('b2ctoggle');

                            var isNotFound = true, result = false;

                            for(var i=0; i<data.$values.length && isNotFound; i++) {
                                var $value = $(data.$values[i]);
                                if (valName == $value.attr(data.options.attr_toggle_value)) {
                                    result = $value.hasClass(data.options.cl_toggle_value_set);
                                    isNotFound = false;
                                }
                            }

                            return result;
                        },
                        /**
                         *
                         * @returns first set value
                         */
                        get_set_value : function() {
                            var $first = this.first();
                            var data = $first.data('b2ctoggle');
                            var states = $.fn.b2ctoggle.getValuesState(data);
                            for(var i=0; i<states.length; i++) {
                                var state = states[i];
                                if (state.set)
                                    return state.val;
                            }
                            return null;
                        },
                        /* destroy : function( ) {

                         return this.each(function(){

                         var $this = $(this),
                         data = $this.data('b2ctoggle');

                         // пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ!!11
                         $(window).unbind('.tooltip');
                         data.tooltip.remove();
                         $this.removeData('tooltip');

                         })

                         },
                         reposition : function( ) { },
                         show : function( ) {  },
                         hide : function( ) { },
                         update : function( content ) { } */
                    };

                    $.fn.b2ctoggle = function( method ) {

                        if ( methods[method] ) {
                            return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
                        } else if ( typeof method === 'object' || ! method ) {
                            return methods.init.apply( this, arguments );
                        } else {
                            $.error( 'Cannot find ' +  method + ' in jQuery.b2ctoggle' );
                        }

                    };

                    $.fn.b2ctoggle.defaults = {
                        cl_toggle_value : 'togglevalue',
                        attr_toggle_value : 'data-val',
                        cl_toggle_value_set : 'set',
                        cl_container : 'b2ctoggle',
                        readOnly : false,
                        multiMode : true,
                        unsetAllEnabled : false,
                        onBeforeValueChange : null, // callback function(val, states) @return [true | false] - false, то действие отменяется
                        onValueChange : null, // callback function(states)
                        states : null, // array of objects {val : 'valueName', set : boolean}
                        needEqualWidth : false,
                    };

                    $.fn.b2ctoggle.onValueClick = function($value, data) {
                        var options = data.options;

                        if (options.readOnly)
                            return;
                        if(!options.unsetAllEnabled && $value.hasClass(options.cl_toggle_value_set)) {
                            if(data.$this.find('.'+options.cl_toggle_value +'.'+options.cl_toggle_value_set).length == 1)
                                return;
                        }

                        var value = $value.attr(options.attr_toggle_value);
                        if (options.onBeforeValueChange != null) {
                            if (! options.onBeforeValueChange(value, $.fn.b2ctoggle.getValuesState(data)))
                                return;
                        }

                        if(!options.multiMode) {
                            if (! $value.hasClass(options.cl_toggle_value_set)) {
                                data.$values.removeClass(options.cl_toggle_value_set);
                                //$value.addClass(data.options.cl_toggle_value_set);
                            }
                        }
                        $value.toggleClass(options.cl_toggle_value_set);
                        if(options.onValueChange != null) {
                            options.onValueChange($.fn.b2ctoggle.getValuesState(data));
                        }
                    };

                    $.fn.b2ctoggle.getValuesState = function(data) {
                        var result = [];

                        for(var i=0; i<data.$values.length; i++) {
                            var $value = $(data.$values[i]);
                            var res = { };
                            res.val = $value.attr(data.options.attr_toggle_value);
                            res.set = $value.hasClass(data.options.cl_toggle_value_set);
                            result.push(res);
                        }

                        return result;
                    };

                    $.fn.b2ctoggle.setValuesState = function(data, states) {
                        for(var i=0; i<data.$values.length; i++) {
                            var $value = $(data.$values[i]);
                            var valName = $value.attr(data.options.attr_toggle_value);
                            for(var j = 0; j<states.length && states[j].val != valName; j++) {
                                ; // empty operator
                            }
                            if (j < states.length) {
                                if (states[j].set)
                                    $value.addClass(data.options.cl_toggle_value_set);
                                else
                                    $value.removeClass(data.options.cl_toggle_value_set);
                            } else
                                $value.removeClass(data.options.cl_toggle_value_set);
                        }
                    };

                    $.fn.b2ctoggle.setValuesWidthToEqual = function($values) {
                        var maxWidth = 0, width;
                        for(var i = 0; i < $values.length; i++) {
                            //width = Number($($values[i]).width().replace(/\D/g,''));
                            width = $($values[i]).text().length;
                            console.log('width='+width);
                            if (maxWidth < width)
                                maxWidth = width;
                        }
                        for(var i = 0; i < $values.length; i++) {
                            $($values[i]).css('min-width', maxWidth+'em');
                        }
                    }

                };
                b2ctoggle( window.jQuery );
            }
        }
    };

er_b2ctoggle_initer.init();
/**
 * Created by erinsasha on 18/02/17.
 */
if(!window.ER_Message_Defaults_Editor) {
    window.ER_Message_Defaults_Editor = function (options) {
        options = options || {};
        options.variables = options.variables ? options.variables : {
            company : '',
            position : '',
        };

        this.options = options;
        this.variables = options.variables;
        this.callback_on_change = this.options.callback_on_change;

        this.jq_parent = options.jq_parent;
    };
    ER_Message_Defaults_Editor.prototype = {
        build_main_view : function(jq_parent) {
            if(jq_parent)
                this.jq_parent = jq_parent;

            var html = this._HTML_build_main_view();
            this.jq_main = $(html).appendTo(this.jq_parent);
            this._add_handlers();
        },

        _HTML_build_main_view : function() {
            var html = '<div class="ER_Message_Defaults_Editor">';
            html += '<p class="tip"></p>';
            html += this._HTML_build_connect_in_search_limit('company', this.variables.company);
            html += this._HTML_build_connect_in_search_limit('position', this.variables.position);
            html += '</div>';
            return html;
        },
        _HTML_build_connect_in_search_limit : function(variable_name, value) {
            var html = '<div class="default_inp_cont er_label_input_cont" data-variable-name="'+variable_name+'">';
            html += '<span class="label">{'+variable_name+'}</span>';

            value = value == null ? '' : value;

            html += '<input class="def-inp"  type="text" data-variable-name="'+variable_name+'" value="'+value+'" placeholder="'+variable_name+'">';
            html += '</div>';
            return html;
        },

        _add_handlers : function() {
            this.jq_main.find('input.def-inp').change(this._on_input_change.bind(this));
        },

        set_variables : function(variables) {
            this.variables = variables;

            var jq_input;
            for(var var_name in variables) {
                jq_input = this.jq_main.find('input.def-inp[data-variable-name='+var_name+']');
                if(jq_input.length > 0) {
                    jq_input.val(variables[var_name]);
                }
            }
        },

        _on_input_change : function(event) {
            var jq_input = $(event.currentTarget);
            var variable_name = jq_input.attr('data-variable-name');
            this.variables[variable_name] = jq_input.val().trim();

            if (this.callback_on_change) {
                this.callback_on_change(this.variables);
            }
        },
    };
};
/**
 * Created by erinsasha on 17/02/17.
 */
if(!window.ER_Textbox_Preview) {
    window.ER_Textbox_Preview = function (options) {
        options = options || {};
        this.options = options;
        this.jq_parent = options.jq_parent;
    };
    ER_Textbox_Preview.prototype = {

        show : function(title, message, jq_parent) {
            this._build_main_view(jq_parent);
            if(title != null)
                this.jq_title.text(title);
            else
                this.jq_title.addClass('er_hidden');

            this.jq_textarea.val(message);
        },

        _build_main_view : function(jq_parent) {
            if(jq_parent)
                this.jq_parent = jq_parent;

            var html = this._HTML_build_main_view();
            this.jq_main = $(html).appendTo(this.jq_parent);
            this._add_handlers();
        },

        _HTML_build_main_view : function() {
            var mini = this.options.mini ? 'er_mini' : '';

            var html = '<div class="ER_Textbox_Preview '+mini+'">';
            html += '<div class="er_transparent_back"></div>';
            html += this._HTML_build_main_content();
            html += '</div>';
            return html;
        },
        _HTML_build_main_content : function() {
            var html = '<div class="content"><div class="internal_wrapper">';

            html += '<p class="title"></p>';
            html += '<textarea class="er_text" readonly placeholder="set message template first"></textarea>';

            html += this._HTML_build_buttons_panel();

            html += '</div></div>';
            return html;
        },
        _HTML_build_buttons_panel : function() {
            var html = '<div class="buttons_panel">';

            html += '<button class="close"></button>';

            html += '</div>';
            return html;
        },

        _add_handlers : function() {
            this.jq_main.find('.er_transparent_back').click(this.close.bind(this));
            this.jq_main.find('button.close').click(this.close.bind(this));
            this.jq_title = this.jq_main.find('.title');
            this.jq_textarea = this.jq_main.find('.er_text');
        },

        close : function() {
            this.jq_main.remove();
        },
    };
};
/**
 * Created by erinsasha on 24/08/17.
 */
// ER_Widget_InvSearch_Message_Template
function ER_Widget_InvSearch_Message_Template (options) {
    options = options || {};
    this.options = options;
    this.jq_parent = options.jq_parent;

    this.er_Widget_Message_Template = new ER_Widget_Message_Template({
        html_main_class : 'ER_Widget_InvSearch_Message_Template',
        jq_parent : this.jq_parent,

        message_template : '',
        message_placeholder : 'Hello {firstname}! Please, join my network!',
        message_maxlength : er_connect_in_search.CONST_INVITATION_MESSAGE_TMPL_MAXLENGTH,

        callback_on_message_template_save_deferred : this.callback_on_message_template_save_deferred.bind(this),
        callback_on_defaults_change : this.callback_on_defaults_change.bind(this),
    });

    this._add_handlers();
};

ER_Widget_InvSearch_Message_Template.prototype = {
    _add_handlers : function() {
        this.set_values();
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    set_values : function() {
        this.er_Widget_Message_Template.set_message_template(er_connect_in_search.get_invite_message_template());
        this.er_Widget_Message_Template.set_defaults({
            company : localStorage.er_connect_message_company,
            position : localStorage.er_connect_message_position
        });
    },

    callback_on_message_template_save_deferred : function(message) {
        var deferred = $.Deferred();
        er_connect_in_search.set_invite_message_template(message);
        deferred.resolve();

        return deferred.promise();
    },
    callback_on_defaults_change : function(variables) {
        var deferred = $.Deferred();
        localStorage.er_connect_message_company = variables.company;
        localStorage.er_connect_message_position = variables.position;
        deferred.resolve();

        return deferred.promise();
    },
};
/**
 * Created by erinsasha on 11/08/17.
 */

/**
 *
 * @param options
 * @param options.jq_parent
 * @constructor
 */
function ER_W_Connect_In_Search_Timeout_Settings(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.options = options;

    this._process();
}

ER_W_Connect_In_Search_Timeout_Settings.prototype = {
    _process : function() {
        this.w_timeout_settings = new ER_W_Timeout_Settings({
            header : 'Timeouts for Connect all 2nd contact in search',
            timeouts_names : er_connect_in_search_timeouts.const_timeouts_names,
            timeouts : er_connect_in_search_timeouts.get_timeouts(),
            fast_timeouts : er_connect_in_search_timeouts.const_timeout_fast,
            safe_timeouts : er_connect_in_search_timeouts.const_timeout_safe,
            add_message_mode_switcher : true,
            message_mode : er_connect_in_search_timeouts.get_message_mode(),
            jq_parent : this.jq_parent,
            callback_save_settings : er_connect_in_search_timeouts.save_timeouts_and_message_mode.bind(er_connect_in_search_timeouts)
        });
    },
};
/**
 * Created by Alex on 30.08.2016.
 */
var er_connect_in_search = window.er_connect_in_search || {
    WARNING_THRESHOLD_LIMIT : 180,
    DEFAULT_SEND_LIMIT_PER_PERIOD : 180,
    DEFAULT_SEND_LIMIT_UNSET_VALUE : 'UNSET',
    DEFAULT_SEND_PERIOD_HOURS : 24,
    DEFAULT_SEND_PERIOD_UNSET_VALUE : 'UNSET',

    CONST_CONNECT_IN_SEARCH_STARTED : 'STARTED',
    CONST_CONNECT_IN_SEARCH_FINISHED : 'FINISHED',
    CONST_INVITATION_MESSAGE_MAXLENGTH : 300,
    CONST_INVITATION_MESSAGE_TMPL_MAXLENGTH : 295,

    search_exclude_ids : null,

    invites_limit_per_period : null,
    period_hours_between_invites : null,
    invited_in_current_bunch : 0,
    invited_on_current_page : 0,


    /**
     * Инициализирует лимиты по отправке сообщений
     */
    init_limits : function() {
        // КОЛИЧЕСИТВО ИНВАЙТОВ ЗА ПЕРИОД
        this.invites_limit_per_period = this.get_invites_limit_per_period();
        /*if(localStorage.er_connect_in_search_limit == this.DEFAULT_SEND_LIMIT_UNSET_VALUE) {
            this.invites_limit_per_period = this.DEFAULT_SEND_LIMIT_UNSET_VALUE;
        } else {
            this.invites_limit_per_period = Number(localStorage.er_connect_in_search_limit);
            if (isNaN(this.invites_limit_per_period) || this.invites_limit_per_period == 0) {
                this.invites_limit_per_period = this.DEFAULT_SEND_LIMIT_PER_PERIOD;
                localStorage.er_connect_in_search_limit = this.DEFAULT_SEND_LIMIT_PER_PERIOD;
            }
        }*/

        // ПЕРЕРЫВ В ЧАСХ МЕЖДУ ИНВАЙТАМИ
        this.period_hours_between_invites = this.get_period_hours_between_invites();
        /*if(localStorage.er_connect_in_search_period == this.DEFAULT_SEND_PERIOD_UNSET_VALUE) {
            this.period_hours_between_invites = this.DEFAULT_SEND_PERIOD_UNSET_VALUE;
        } else {
            this.period_hours_between_invites = Number(localStorage.er_connect_in_search_period);
            if (isNaN(this.period_hours_between_invites) || this.period_hours_between_invites == 0) {
                this.period_hours_between_invites = this.DEFAULT_SEND_PERIOD_HOURS;
                localStorage.er_connect_in_search_period = this.DEFAULT_SEND_PERIOD_HOURS;
            }
        }*/
    },
    
    /**
     * Инициализирует переменные
     */
    _init_from_local_storage : function() {
        if (window.localStorage.er_search_exclude_ids != null) {
            this.search_exclude_ids = JSON.parse(window.localStorage.er_search_exclude_ids);
        } else {
            this.search_exclude_ids = [];
        }

        this.invited_in_current_bunch = localStorage.er_connect_in_search_invited_in_bunch;
        if(this.invited_in_current_bunch != null && this.invited_in_current_bunch != '')
            this.invited_in_current_bunch = Number(localStorage.er_connect_in_search_invited_in_bunch);
        else {
            this.invited_in_current_bunch = 0;
            localStorage.er_connect_in_search_invited_in_bunch = 0;
        }

    },

    /**
     * ПЕРЕРЫВ В ЧАСХ МЕЖДУ ИНВАЙТАМИ
      */
    get_period_hours_between_invites : function() {
        if(localStorage.er_connect_in_search_period == this.DEFAULT_SEND_PERIOD_UNSET_VALUE) {
            return this.DEFAULT_SEND_PERIOD_UNSET_VALUE;
        } else {
            var period_hours_between_invites = Number(localStorage.er_connect_in_search_period);
            if (isNaN(period_hours_between_invites) || period_hours_between_invites == 0) {
                period_hours_between_invites = this.DEFAULT_SEND_PERIOD_HOURS;
                localStorage.er_connect_in_search_period = this.DEFAULT_SEND_PERIOD_HOURS;
            }

            return period_hours_between_invites
        }
    },
    set_period_hours_between_invites : function(newVal) {
        newVal = Number(newVal);
        if(isNaN(newVal) || newVal == 0) {
            localStorage.er_connect_in_search_period = this.DEFAULT_SEND_PERIOD_UNSET_VALUE;
            this.period_hours_between_invites = this.DEFAULT_SEND_PERIOD_UNSET_VALUE;
        } else {
            localStorage.er_connect_in_search_period = newVal;
            this.period_hours_between_invites = newVal;
        }
    },
    /**
     * КОЛИЧЕСИТВО ИНВАЙТОВ ЗА ПЕРИОД
      */
    get_invites_limit_per_period : function() {
        if(localStorage.er_connect_in_search_limit == this.DEFAULT_SEND_LIMIT_UNSET_VALUE) {
            return this.DEFAULT_SEND_LIMIT_UNSET_VALUE;
        } else {
            var invites_limit_per_period = Number(localStorage.er_connect_in_search_limit);
            if (isNaN(invites_limit_per_period) || invites_limit_per_period == 0) {
                invites_limit_per_period = this.DEFAULT_SEND_LIMIT_PER_PERIOD;
                localStorage.er_connect_in_search_limit = this.DEFAULT_SEND_LIMIT_PER_PERIOD;
            }

            return invites_limit_per_period;
        }
    },

    set_invites_limit_per_period : function(newVal) {
        newVal = Number(newVal);
        if(isNaN(newVal) || newVal == 0) {
            localStorage.er_connect_in_search_limit = this.DEFAULT_SEND_LIMIT_UNSET_VALUE;
            this.invites_limit_per_period = this.DEFAULT_SEND_LIMIT_UNSET_VALUE;
        } else {
            newVal = Math.round(newVal/10)*10;
            newVal = newVal == 0 ? 10 : newVal;
            localStorage.er_connect_in_search_limit = newVal.toString();
            this.invites_limit_per_period = newVal;
        }
    },

    is_connect_in_search_mode_on : function() {
        return localStorage.er_search_next == 'true';
    },
    set_connect_in_search_mode_on : function() {
        localStorage.er_search_next = 'true';
    },
    set_connect_in_search_mode_off : function() {
        localStorage.er_search_next = 'false';
        this.tab_delete_mode();
        localStorage.er_connect_in_search_state = this.CONST_CONNECT_IN_SEARCH_FINISHED;
    },
    /**
     * Возвращает счетчик всего приглашенных
     * @returns {number|*|total|t}
     */
    get_total_invites_counter : function() {
        var total = localStorage.er_connect_in_search_total;
        if (total == null || total == '') {
            total = 0;
            localStorage.er_connect_in_search_total = 0;
        } else
            total = Number(total);

        return total;
    },
    /**
     * Увеличивает счетчик всего приглашенных
     * @param new_counts
     * @returns {*}
     * @private
     */
    _increase_total_invites_counter : function(new_counts) {
        var total = this.get_total_invites_counter();
        total += new_counts;
        localStorage.er_connect_in_search_total = total;

        return total;
    },
    /**
     * Возвращает количество приглашенных людей за период
     * @returns {*}
     */
    get_invited_in_current_period : function() {
        var count_sent = Number(localStorage.er_connect_in_search_invited_in_bunch);
        if (isNaN(count_sent))
            count_sent = 0;
        return count_sent;
    },
    /**
     * Возвращает количество приглашенных людей за период
     * @returns {*}
     */
    add_invited_in_current_period : function(amount) {
        localStorage.er_connect_in_search_invited_in_bunch = this.get_invited_in_current_period() + amount;
    },
    /**
     * Текущеее состоание текущего периода
     * @returns {*}
     */
    get_current_period_state : function() {
        var state = localStorage.er_connect_in_search_state;
        if (state != er_connect_in_search.CONST_CONNECT_IN_SEARCH_STARTED)
            state = er_connect_in_search.CONST_CONNECT_IN_SEARCH_FINISHED;

        return state;
    },
    /**
     * Возвращает время старта следующего периода
     * @returns {*}
     */
    get_next_period_start : function() {
        var date = localStorage.er_connect_in_search_next_starts_at;

        if (date != null && date != '')
            date = new Date(JSON.parse(date));

        if (date instanceof Date && !isNaN(date.getHours()) && new Date < date) {
           return date;
        } else {
            return null;
        }
    },
    /**
     * Возврашает url последней обработанной страницы поиска
      * @returns {string|*}
     */
    get_last_search_page : function() {
        return localStorage.er_connect_in_search_location;
    },
    /**
     * Возвращает шаблон инвайта или null
     * @returns {*}
     */
    get_invite_message_template : function() {
        var template = localStorage.er_connect_in_search_msg_template;
        if (!template || template == '')
            return null;
        else
            return template;
    },
    /**
     * Возвращает шаблон инвайта или null
     * @returns {*}
     */
    set_invite_message_template : function(template) {
        if(template == null || template == '')
            delete localStorage.er_connect_in_search_msg_template;
        else {
            localStorage.er_connect_in_search_msg_template = template;
        }
    },

    tab_add_mode : function() {
        er_tabs_control.add_active_mode('er_search_next');
    },
    tab_delete_mode : function() {
        er_tabs_control.delete_active_mode('er_search_next');
    },
    tab_is_active_in : function() {
        return er_tabs_control.is_mode_active('er_search_next');
    },

        is_limits_are_safe : function() {
            var limit = Number(this.get_invites_limit_per_period());
            var period = Number(this.get_period_hours_between_invites());

            if (isNaN(limit) || isNaN(period))
                return false;

            var x = 24 * limit / period;
            return x <= this.WARNING_THRESHOLD_LIMIT;
        },

    /**
     * Инициадизирует процесс инвайта на новой группы
     */
    begin_connect_all_in_search : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    window.localStorage.er_search_next = 'true';
                    localStorage.er_connect_in_search_state = that.CONST_CONNECT_IN_SEARCH_STARTED;
                    localStorage.er_connect_in_search_invited_in_bunch = 0;
                    that.invited_in_current_bunch = 0;

                    that.tab_add_mode();

                    that._store_current_location();
                    that._start_next_connect_in_search();
                    //that.connect_all_in_search();
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },

    /**
     * Запускает продложение поиска с места разъединения
     */
    continue_connect_all_in_search : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    window.localStorage.er_search_next = 'true';
                    that.tab_add_mode();
                    that._start_next_connect_in_search();
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },

    /**
     * Отправялет инвайты всем на странице поиска
     */
    connect_all_in_search : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {

                    var href = window.location.href;
                    if (href.indexOf('linkedin.com/vsearch') < 0
                        && href.indexOf('linkedin.com/search/') < 0
                        && !er_utils.is_sales_navigator_search_page())
                        return;

                    that._init_from_local_storage();
                    that._store_current_location();

                    if (!that._on_before_begin_invites())
                        return;

                    var jq_peoples = er_search_page_helper.get_jq_mini_profiles();

                    if (jq_peoples.length == 0) {
                        setTimeout(that.connect_all_in_search.bind(that), 300);
                        return;
                    }
                    if (er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page()) {
                        er_utils.scroll_page_down_by_screens()
                            .then(function() {
                                var jq_peoples = er_search_page_helper.get_jq_mini_profiles();
                                that._ns_sn_connect_all_in_search(jq_peoples);
                            });
                    } else {
                        var timeout_step = 0;

                        for(var i= 0; i<jq_peoples.length; i++) {
                            timeout_step += 500 + er_utils.getRandomInt(500, 1000);
                            that._connect_one_in_search_st($(jq_peoples[i]), i+1 == jq_peoples.length, timeout_step);
                        }
                    }
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },
    _ns_sn_connect_all_in_search : function(jq_peoples) {
        var that = this;
        this._ns_sn_invite_all_on_page(jq_peoples).then(function(){
            if(that.is_connect_in_search_mode_on()) {
                er_search_page_helper._ns_sn_load_next_page()
                    .then(function(result) {
                        if (result) {
                            that._store_current_location();
                            setTimeout(that.connect_all_in_search.bind(that), 300);
                        }
                    });
            }
        })
    },
    /**
     * Последовательно ивайтит всех из jq_peoples
     * @param jq_peoples
     * @returns {*} - промис
     * @private
     */
    _ns_sn_invite_all_on_page : function(jq_peoples) {
        var deferred = $.Deferred();
        var promise = $.when();
        var that = this;

        this._store_current_location();

        jq_peoples.each(function(index) {
            var jq_people = $(this);
            promise = promise.then(function() {
                return that._ns_sn_check_and_invite_singe(jq_people);
            });
        });
        promise.then(function() {
            deferred.resolve();
        });

        return deferred.promise();
    },
    /**
     * Проверяет - не был ли юзер уже приглашен, и если не был, то инватид
     * @param jq_people
     * @returns {*} - промис
     * @private
     */
    _ns_sn_check_and_invite_singe : function(jq_people) {
        er_logger.log('START _ns_sn_check_and_invite_singe');

        var deferred = $.Deferred();
        if(this.is_connect_in_search_mode_on()) {
            var id = er_utils.get_profile_id_from_search_card(jq_people);
            er_logger.log('ID='+id);

            var fullname;

            if(er_utils.is_sales_navigator_search_page())
                fullname = jq_people.find('.name .name-link').text();
            else
                fullname = jq_people.find('.actor-name-with-distance .name').text();

            er_logger.log('fullname='+fullname);

            if(!id || id == ''
                || !fullname || fullname == ''
                || fullname.toLowerCase().indexOf('linkedin') >= 0
                && fullname.toLowerCase().indexOf('member') >= 0 ) {
                deferred.resolve();
            } else {
                var that = this;
                this._ns_sn_is_should_be_invited(id).then(function(is_should_be_invited){
                    if(is_should_be_invited)
                        return that._ns_sn_invite_singe(jq_people, id);
                }).then(function() {
                    deferred.resolve();
                });
            }
        } else {
            deferred.reject();
        }
        return deferred.promise();
    },
    /**
     * инвайтид юзера, который еще точно не был ранее приглашен
      * @param jq_people
     * @param id
     * @returns {*} - промис
     * @private
     */
    _ns_sn_invite_singe : function(jq_people, id) {
        er_logger.log('START _ns_sn_invite_singe with ID='+id);

        var deferred = $.Deferred();
        var that = this;
        er_utils.scroll_to_element_promise(jq_people, 100).then(function() {
            setTimeout(function() {
                var jq_btn_connect;
                if (er_utils.is_new_style_page())
                    jq_btn_connect = jq_people.find('.search-result__actions--primary');
                else // sales navigator
                    jq_btn_connect = jq_people.find('button.connect');

                if (jq_btn_connect.length == 0 || jq_btn_connect.is(":disabled")
                || (jq_btn_connect.attr('href') != null && jq_btn_connect.attr('href').indexOf('/messaging/compose/?recipient=') >= 0)
                || (jq_btn_connect.find('.premium-upsell-link').length >= 1)
                || jq_btn_connect.text().trim().toLocaleLowerCase() == 'follow'
                || jq_btn_connect.parent().attr('data-control-name') == 'send_inmail'
                || jq_btn_connect.text().trim().toLocaleLowerCase() == 'inmail'
                || jq_btn_connect.text().trim().toLocaleLowerCase() == 'message'
                ) {
                    er_logger.log('Connect button not found!');
                    er_logger.log('END _ns_sn_invite_singe');
                    deferred.resolve();
                } else {
                    setTimeout(function() {
                        jq_btn_connect.click();
                        er_logger.log('Connect button has been clicked');
                        that._ns_sn_process_invitation_popup(null, jq_people, id).then(function() {
                            er_inviteddb.push_id(id).then(function() {
                                that._increase_total_invites_counter(1);
                                that.add_invited_in_current_period(1);
                                er_license_limit._increase_invites_counter(1);
                                er_logger.log('END _ns_sn_invite_singe');
                                setTimeout(deferred.resolve.bind(deferred), er_connect_in_search_timeouts.get_random_timeout('go_to_next_contact'));
                                //deferred.resolve();
                            });
                        });
                    }, er_connect_in_search_timeouts.get_random_timeout('click_connect'));
                }
            }, er_utils.getRandomInt(100, 200));
        });

        return deferred.promise();
    },
    _ns_sn_process_invitation_popup : function(deferred, jq_people, id) {
        er_logger.log('START _ns_sn_process_invitation_popup with ID='+id);
        if (er_utils.is_new_style_page())
            return this._ns_process_invitation_popup(deferred, jq_people, id);
        else // Sales Navigator
            return this._sn_process_invitation_popup(deferred, jq_people, id);
    },
    /**
     * Обрабатывает попап, который всплывает при нажатии на кнопку Connect
      * @param deferred
     * @param jq_people - карточка пользователя, которого ивайтим
     * @param id - айди пользователя, которого ивайтим
     * @returns {*}
     * @private
     */
    _ns_process_invitation_popup : function(deferred, jq_people, id) {
        if (!deferred)
            deferred = $.Deferred();
        var that = this;
        var jq_invitation_popup = $('#li-modal-container').find('.modal-wormhole.send-invite');

        if (jq_invitation_popup.length == 0) {
            setTimeout(function() { that._ns_process_invitation_popup(deferred, jq_people, id) }, 100);
        } else {
            jq_invitation_popup = jq_invitation_popup.first();
            var msg_template = this.get_invite_message_template();
            if (!msg_template || msg_template == '') {
                setTimeout(function() {
                    var jq_btn_send_now = jq_invitation_popup.find('button.primary-btn');
                    if (jq_btn_send_now.length == 0)
                        jq_btn_send_now = jq_invitation_popup.find('button.button-primary-large');
                    jq_btn_send_now.click();

                    if(!jq_btn_send_now.is(":disabled")) {
                        jq_btn_send_now.click();
                    } else {
                        var jq_btn_cancel = jq_invitation_popup.find('button.send-invite__cancel-btn');
                        jq_btn_cancel.click();
                    }

                    that._ns_sn_wait_until_invitation_popup_close().then(function(){
                        deferred.resolve();
                    });
                }, er_connect_in_search_timeouts.get_random_timeout('click_send'));
            } else {
                setTimeout(function() {
                    var jq_btn_add_note = jq_invitation_popup.find('button.add-custom.secondary-btn');
                    if (jq_btn_add_note.length == 0)
                        jq_btn_add_note = jq_invitation_popup.find('button.button-secondary-large');
                    jq_btn_add_note.click();
                    that._ns_insert_and_send_invitation_message(jq_invitation_popup, jq_people)
                        .then(function(){
                            deferred.resolve();
                        });
                }, er_connect_in_search_timeouts.get_random_timeout('click_add_note'));
            }
        }
        return deferred.promise();
    },
    _ns_insert_and_send_invitation_message : function(jq_invitation_popup, jq_people) {
        var deferred = $.Deferred();

        var that = this;
        setTimeout(function() {
            that._ns_insert_invitation_message(jq_invitation_popup, jq_people).
                then(function() {
                    setTimeout(function(){
                        var jq_btn_send = jq_invitation_popup.find('button.primary-btn');
                        if (jq_btn_send.length == 0)
                            jq_btn_send = jq_invitation_popup.find('button.button-primary-large');

                        if(!jq_btn_send.is(":disabled")) {
                            jq_btn_send.click();
                        } else {
                            var jq_btn_cancel = jq_invitation_popup.find('button.send-invite__cancel-btn');
                            var jq_textarea = that._get_textarea();
                            jq_textarea.val('');
                            jq_btn_cancel.click();
                        }

                        that._ns_sn_wait_until_invitation_popup_close().then(function(){
                            deferred.resolve();
                        });
                    }, er_connect_in_search_timeouts.get_random_timeout('click_send'));
                });
        }, er_connect_in_search_timeouts.get_random_timeout('insert_message'));

        return deferred.promise();
    },
    _ns_insert_invitation_message : function(jq_invitation_popup, jq_people, deferred) {
        if (!deferred)
            deferred = $.Deferred();

        var jq_textarea = $('#custom-message');
        if(jq_textarea.length == 0) {
            var that = this;
            setTimeout(function() { that._ns_insert_invitation_message(jq_invitation_popup, jq_people, deferred) }, 100);
            return;
        }

        /*var obj_name = er_utils.get_translated_firstname_lastname_from_people_mini_card(jq_people);
        var message = this._ns_generate_invitation_message(obj_name.firstname, obj_name.lastname);*/

        var mini_profile = er_search_page_helper._extract_mini_profile(jq_people);
        var message = this._generate_message_text_from_mini_profile_object(mini_profile);

        var jq_email = $('#email');
        if(jq_email.length > 0) {
            jq_email.val(er_utils.generate_fake_email(mini_profile.firstname, mini_profile.lastname));
            jq_email.focus().keyup().change().focusout();
        }

        er_utils.insert_or_imitate_writing(
            message,
            jq_textarea,
            er_connect_in_search_timeouts.get_message_mode(),
            function() {
                deferred.resolve();
            }
        );

        return deferred.promise();
    },
    _ns_generate_invitation_message : function(firstname, lastname) {
        /*var message_template = this.get_invite_message_template();
        return message_template.replace(/{firstname}/g,firstname).replace(/{lastname}/g,lastname);*/

        var mini_profile = {
            firstname : firstname,
            lastname : lastname
        };

        return this._generate_message_text_from_mini_profile_object(mini_profile);
    },
    _sn_process_invitation_popup : function(deferred, jq_people, id) {
        er_logger.log('START _sn_process_invitation_popup with ID='+id);
        if (!deferred)
            deferred = $.Deferred();

        var that = this;

        var jq_dialog = $('#dialog');
        var jq_textarea = $('#connect-message-content');
        if (jq_dialog.length == 0 || jq_textarea.length == 0) {
            er_logger.log('Invitation Popup not found');
            setTimeout(function() { that._sn_process_invitation_popup(deferred, jq_people, id) },100);
            return deferred.promise();
        }

        var mini_profile = er_search_page_helper._extract_mini_profile(jq_people);
        if (this.get_invite_message_template() != null) {
            var message = this._generate_message_text_from_mini_profile_object(mini_profile);

            jq_textarea.focus().focusout().keyup().change();
            jq_textarea.val('');
            jq_textarea.focus().focusout().keyup().change();

            setTimeout(function() {
                er_utils.insert_or_imitate_writing(
                    message,
                    jq_textarea,
                    er_connect_in_search_timeouts.get_message_mode(),
                    function() {
                        //jq_textarea.val(message);
                        jq_textarea.focusout().keyup().change();
                        er_logger.log('Message set');
                        that._sn_click_send_and_wait_popup_close(jq_dialog)
                            .then(deferred.resolve.bind(deferred));
                    }
                );
            }, er_connect_in_search_timeouts.get_random_timeout('insert_message'));
        } else {
            that._sn_click_send_and_wait_popup_close(jq_dialog)
                .then(deferred.resolve.bind(deferred));
        }

        return deferred.promise();
    },
        _sn_click_send_and_wait_popup_close : function(jq_dialog) {
            var deferred = $.Deferred();
            var that = this;

            setTimeout(function() {
                jq_dialog.find('button.submit-button').click();
                er_logger.log('submit-button has been clicked');

                that._sn_wait_until_invitation_popup_close(null, 15)
                    .then(deferred.resolve.bind(deferred));
            }, er_connect_in_search_timeouts.get_random_timeout('click_send'));

            return deferred.promise();
        },
    _generate_message_text_from_mini_profile_object : function(mini_profile) {
        var defaults = {
            position : localStorage.er_connect_message_position,
            company : localStorage.er_connect_message_company
        };

        return er_utils.message_generator(
            this.get_invite_message_template(),
            mini_profile,
            defaults);
    },
    _get_textarea : function() {
        var jq_textarea;
        if (er_utils.is_new_style_page()) {
            jq_textarea = $('#custom-message');
        } else {
            jq_textarea = $('#connect-message-content');
        }

        return jq_textarea;
    },
    /**
     * Ждет закрытия попапа отправки инвайта
     * @param deferred
     * @returns {*} - промис
     * @private
     */
    _ns_sn_wait_until_invitation_popup_close : function(deferred) {
        er_logger.log('START _ns_sn_wait_until_invitation_popup_close');

        if (!deferred)
            deferred = $.Deferred();
        var jq_invitation_popup;
        if(er_utils.is_new_style_page())
            jq_invitation_popup = $('#li-modal-container').find('.modal-wormhole.send-invite');
        else // Sales Navigator
            jq_invitation_popup = $('#dialog');
        if(jq_invitation_popup.length == 0) {
            er_logger.log('END _ns_sn_wait_until_invitation_popup_close');
            deferred.resolve();
        } else {
            var that = this;
            setTimeout(function() {that._ns_sn_wait_until_invitation_popup_close(deferred)}, 100);
        }
        return deferred.promise();
    },
        /**
         * Ждет закрытия попапа отправки инвайта
         * @param deferred
         * @param attempt
         * @returns {*} - промис
         * @private
         */
        _sn_wait_until_invitation_popup_close : function(deferred, attempt) {
            er_logger.log('START _sn_wait_until_invitation_popup_close attempt='+attempt);

            if (!deferred)
                deferred = $.Deferred();
            var jq_invitation_popup;
                jq_invitation_popup = $('#dialog');

            if(jq_invitation_popup.length == 0) {
                er_logger.log('END _sn_wait_until_invitation_popup_close attempt='+attempt);
                deferred.resolve();
            } else {
                if(attempt == 0) {
                    var jq_textarea = this._get_textarea();
                    jq_textarea.val('');
                    jq_invitation_popup.find('button.cancel-button').click();
                }

                var that = this;
                setTimeout(function() {that._sn_wait_until_invitation_popup_close(deferred, attempt-1)}, 100);
            }
            return deferred.promise();
        },
    /**
     * Проверяет, должен ли быть заинвайтен пользователь с указанным id
     * @param id
     * @returns {*} - промис
     * @private
     */
    _ns_sn_is_should_be_invited : function(id) {
        var deferred = $.Deferred();
        er_logger.log('START _ns_sn_is_should_be_invited with ID='+id);
        if (this.search_exclude_ids.indexOf(id) < 0) {
            er_inviteddb.is_invited(id).then(function(is_invited) {
                er_logger.log('END _ns_sn_is_should_be_invited with RESULT='+(!is_invited));
                deferred.resolve(!is_invited);
            });
        } else {
            er_logger.log('END _ns_sn_is_should_be_invited with RESULT=FALSE');
            deferred.resolve(false);
        }

        return deferred.promise();
    },
    /**
     * Загружает следующую страницу результатов поиска
     * если она есть, то вернет true
      * @returns {boolean}
     * @private
     */
    /*_ns_load_next_page : function() {
        var jq_btn_next = $('.results-paginator button.next');
        if (jq_btn_next.length > 0) {
            jq_btn_next.click();
            return true;
        } else {
            return false;
        }
    },*/

    delete_all_invited_ids : function() {
        return er_inviteddb.delete_all_invited_ids();
    },
    delete_all_skipped_ids : function() {
        this.search_exclude_ids = [];
        localStorage.er_search_exclude_ids = JSON.stringify(this.search_exclude_ids);
    },

    /**
     * Проверяет можно ли дальше продолжать приглашение юзеров.
     *
     * @returns {boolean} true - если дальше продолжать
     * @private
     */
    _on_before_begin_invites : function() {
        var wait = er_license_limit.when_can_continue_invites();
        if (wait > 0) {
            setTimeout(this.connect_all_in_search.bind(this), wait);
            return false;
        }

        if(this.get_invites_limit_per_period() != this.DEFAULT_SEND_LIMIT_UNSET_VALUE
            && this.get_period_hours_between_invites() != this.DEFAULT_SEND_PERIOD_UNSET_VALUE
            && this.invited_in_current_bunch >= this.get_invites_limit_per_period()
        ) {
            // Превышено количество отрпавленных инвайтов за данный период
            if (localStorage.er_connect_in_search_state == this.CONST_CONNECT_IN_SEARCH_STARTED) {
                // Мы еще в режиме инвайтов текущего периода
                // Выключаем данный режим
                localStorage.er_connect_in_search_state = this.CONST_CONNECT_IN_SEARCH_FINISHED;
                // Вычисляем дату, когда должны заново запуститься
                var date = new Date();
                // Количество миллисекунд до следующего запуска
                var wait_milli_seconds = 3600000*this.get_period_hours_between_invites();
                date.setTime(date.getTime() + wait_milli_seconds);
                // КОГДА ДОЛЖНА ЗАПУСТИТЬСЯ СЛЕДУЮЩАЯ ОТПРАВКА
                localStorage.er_connect_in_search_next_starts_at = JSON.stringify(date);
            }


            var currDate = new Date();
            // Дата следующего запуска
            var nextStartDate = localStorage.er_connect_in_search_next_starts_at;
            if (nextStartDate == null || nextStartDate == '') {
                // Дата не задана - Запускаем следующий период
                this._start_next_connect_in_search();
            } else {
                // Вычисляем через сколько милллисекунд должны запуститься
                nextStartDate = new Date(JSON.parse(nextStartDate));
                var diff = nextStartDate.getTime() - currDate.getTime();
                if (diff <= 0) {
                    // Запускаемся
                    this._start_next_connect_in_search();
                } else {
                    // СПИМ ДО НАЧААЛА СЛЕДУЮЩЕГО ПЕРИОДА
                    setTimeout(this._start_next_connect_in_search.bind(this), diff);
                }
            }
            // Сейчас еще рано отрпавлять
            return false;
        } else {
            return true;
        }
    },

    /**
     * Сбрасываем счетчики периода загрузки
     * и запускает загрузку переходя на страницу, на которой загрузка остановилась
     * @private
     */
    _start_next_connect_in_search : function() {
        // Сбарсываем счетчик приглашений
        this.invited_in_current_bunch = 0;
        localStorage.er_connect_in_search_invited_in_bunch = this.invited_in_current_bunch;
        // Отмечаем состоние, что мы в процессе новой партии раздачи инвайтов
        localStorage.er_connect_in_search_state = this.CONST_CONNECT_IN_SEARCH_STARTED;

        this._go_to_stored_location();
    },

    /**
     * Инвайтит одного человека и через таймаут азпускает инвайт следующего
     *
     * @param jq_people
     * @param is_last_on_page
     * @param timeout
     * @private
     */
    _connect_one_in_search_st : function(jq_people, is_last_on_page, timeout) {
        var that = this;
        setTimeout(
            function() { that._connect_one_in_search(jq_people, is_last_on_page) },
            timeout
        )
    },
    _connect_one_in_search : function(jq_people, is_last_on_page) {
        var id = er_utils.get_profile_id_from_search_card(jq_people);
        var that = this;
        if (this.search_exclude_ids.indexOf(id) < 0) {
            er_inviteddb.is_invited(id).then(function(is_invited) {
                if(!is_invited) {
                    if(er_utils.is_new_style_page()) {
                        jq_people.find('.search-result__actions--primary').click();
                        that._process_invitation_popup(jq_people);
                    } else
                        jq_people.find('.primary-action-button').click();
                    that.invited_on_current_page++;
                    er_license_limit._increase_invites_counter(1);
                    er_inviteddb.push_id(id).then(function() { that._on_last_on_page(is_last_on_page); });
                } else {
                    that._on_last_on_page(is_last_on_page);
                }
            });
        } else {
            this._on_last_on_page(is_last_on_page);
        }
    },

    _process_invitation_popup : function(jq_people) {
        $('.send-invite .primary-btn').first().click();
    },
    /**
     * Сохраняет инфу, когда доходим до конца страницы
     * затем переводит на следующую страницу
      * @param is_last_on_page
     * @private
     */
    _on_last_on_page : function(is_last_on_page) {
        if(is_last_on_page) {
            localStorage.er_connect_in_search_invited_in_bunch = this.invited_in_current_bunch + this.invited_on_current_page;
            this._increase_total_invites_counter(this.invited_on_current_page);
            this.invited_on_current_page = 0;
            this._in_search_load_next_page();
        }
    },
    /**
     * Заугружает следующую страницу результатов поиска
     * @private
     */
    _in_search_load_next_page : function() {
        var jq_btn_next;
        if(er_utils.is_new_style_page())
            jq_btn_next = $('.results-paginator button.next');
        else
            jq_btn_next = $('.next .page-link');
        if (jq_btn_next.length > 0) {
            //window.localStorage.er_search_next = 'true';

            jq_btn_next.click();
            if(!er_utils.is_new_style_page()) {
                var href = jq_btn_next.attr('href');
                window.location.assign(href);
            }
            console.log(window.location);
        } else {
            window.localStorage.er_search_next = 'false';
            this.tab_delete_mode();
        }
    },

    /**
     * Сохраняет url текущей страницы результатов
      * @private
     */
    _store_current_location : function() {
        localStorage.er_connect_in_search_location = window.location.href;
    },
    _go_to_stored_location : function() {
        var href = localStorage.er_connect_in_search_location;
        if (href != null && href != '') {
            window.location.assign(href);
            return true;
        }
        return false;
    },

    /**
     * Обрабатывает, когда зашли на страницу инфайта и от нас просят емейл контакта
     */
    on_linkedin_requare_contact_email : function() {
        this._init_from_local_storage();
        var href = window.location.href;
        var search_str = "key=";
        var search_str_length = search_str.length;
        var start = href.indexOf(search_str);
        var end = href.indexOf('&', start+search_str_length);
        var id = href.substring(start+search_str_length, end);

        this.search_exclude_ids.push(id);
        window.localStorage.er_search_exclude_ids = JSON.stringify(this.search_exclude_ids);

        window.history.back();
    },

    /**
     * Обработчик события - лицензия не валидна
      * @private
     */
    _on_license_not_valid : function() {
        window.localStorage.er_search_next = 'false';
        localStorage.er_connect_in_search_state = this.CONST_CONNECT_IN_SEARCH_FINISHED;
        this.tab_delete_mode();
    },
};
/**
 * Created by Alex on 17.03.2017.
 */
//connect_in_search_backup_export
var er_connect_in_search_backup_export = window.er_connect_in_search_backup_export || {
        build_object : function() {
            var deferred = $.Deferred();
            var obj = {};
            obj.lc = this._build_lc();

            this._build_db()
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },
        _build_lc : function() {
            var lc = {};

            lc.er_search_exclude_ids = localStorage.er_search_exclude_ids;
            lc.er_connect_in_search_period = localStorage.er_connect_in_search_period;
            lc.er_connect_in_search_limit = localStorage.er_connect_in_search_limit;
            lc.er_connect_in_search_total = localStorage.er_connect_in_search_total;
            lc.er_connect_in_search_location = localStorage.er_connect_in_search_location;
            lc.er_connect_in_search_msg_template = localStorage.er_connect_in_search_msg_template;
            lc.er_connect_message_position = localStorage.er_connect_message_position;
            lc.er_connect_message_company = localStorage.er_connect_message_company;

            return lc;
        },
        _build_db : function() {
            var deferred = $.Deferred();
            var db = {};

            er_inviteddb.get_all_invited_ids()
                .then(function(invitedids) {
                    db.invitedids = invitedids;
                    deferred.resolve(db);
                });

            return deferred.promise();
        },
    };
/**
 * Created by Alex on 18.03.2017.
 */
//er_connect_in_search_backup_import
var er_connect_in_search_backup_import = window.er_connect_in_search_backup_import || {
        import : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj) {
                er_logger.log('SKIPS : Connect in Search data missing');
                deferred.resolve(true);
                return deferred.promise();
            }

            this._import_db(obj.db)
                .then(function() {
                    that._import_lc(obj.lc);
                    deferred.resolve(true);
                });

            return deferred.promise();
        },

        _import_db : function(db) {
            var deferred = $.Deferred();

            er_inviteddb.push_ids(db.invitedids)
                .then(deferred.resolve.bind(deferred));

            return deferred.promise();
        },

        _import_lc : function(lc) {
            if(lc.er_search_exclude_ids)
                localStorage.er_search_exclude_ids = lc.er_search_exclude_ids;
            else
                delete localStorage.er_search_exclude_ids;

            if(lc.er_connect_in_search_period)
                localStorage.er_connect_in_search_period = lc.er_connect_in_search_period;
            else
                delete localStorage.er_connect_in_search_period;

            if(lc.er_connect_in_search_limit)
                localStorage.er_connect_in_search_limit = lc.er_connect_in_search_limit;
            else
                delete localStorage.er_connect_in_search_limit;

            if(lc.er_connect_in_search_total)
                localStorage.er_connect_in_search_total = lc.er_connect_in_search_total;
            else
                delete localStorage.er_connect_in_search_total;

            if(lc.er_connect_in_search_location)
                localStorage.er_connect_in_search_location = lc.er_connect_in_search_location;
            else
                delete localStorage.er_connect_in_search_location;

            if(lc.er_connect_in_search_msg_template)
                localStorage.er_connect_in_search_msg_template = lc.er_connect_in_search_msg_template;
            else
                delete localStorage.er_connect_in_search_msg_template;

            if(lc.er_connect_message_position)
                localStorage.er_connect_message_position = lc.er_connect_message_position;
            else
                delete localStorage.er_connect_message_position;

            if(lc.er_connect_message_company)
                localStorage.er_connect_message_company = lc.er_connect_message_company;
            else
                delete localStorage.er_connect_message_company;
        },
    };
/**
 * Created by erinsasha on 11/08/17.
 */

var er_connect_in_search_timeouts = window.er_connect_in_search_timeouts || {
        const_timeouts_names : {
            click_connect : 'Click "Connect"',
            click_add_note : 'Click "Add note" after invitation popup opening',
            insert_message : 'Insert message after clicking "Add note"',
            click_send : 'Click "Send" after inserting message',
            go_to_next_contact : 'Go to next contact',

        },
        const_timeout_fast : {
            click_connect : {min : 1000, max : 2000},
            click_add_note : {min : 1000, max : 2000},
            insert_message : {min : 1000, max : 2000},
            click_send : {min : 1000, max : 2000},
            go_to_next_contact : {min : 1000, max : 5000}
        },
        const_timeout_safe : {
            click_connect : {min : 5000, max : 120000},
            click_add_note : {min : 5000, max : 120000},
            insert_message : {min : 5000, max : 120000},
            click_send : {min : 5000, max : 60000},
            go_to_next_contact : {min : 30000, max : 600000}
        },
        const_message_mode_type_write : 1,
        const_message_mode_insert : 2,

        init : function() {
            if(this.started)
                return;
            this.started = true;
            this._init_timeouts_from_local_storage();
            this._init_message_mode_from_local_storage();
        },
        _init_timeouts_from_local_storage : function() {
            if(this.current_timeouts)
                return;

            var current_timeouts = localStorage.er_connect_in_search_timeouts;
            if(current_timeouts && current_timeouts != '') {
                this.current_timeouts = JSON.parse(current_timeouts);
                this.restore_missed_values();
            } else
                this.save_timeouts_from_object(this.const_timeout_fast);
        },
        _init_message_mode_from_local_storage : function() {
            if(this.message_mode)
                return;

            var message_mode = localStorage.er_connect_in_search_message_mode;
            if(message_mode && message_mode != '') {
                this.message_mode = JSON.parse(message_mode);
            } else
                this.message_mode = this.const_message_mode_insert;
        },
        restore_missed_values : function() {
            var timeouts_tech_names = Object.keys(this.const_timeout_fast);

            var tech_name;

            for(var i=0; i<timeouts_tech_names.length; i++) {
                tech_name = timeouts_tech_names[i];
                if(!this.current_timeouts[tech_name])
                    this.current_timeouts[tech_name] = this.const_timeout_fast[tech_name];
            }
        },
        save_timeouts_from_object : function(obj) {
            this.current_timeouts = er_utils.get_object_copy(obj);
            this.save_current_timeouts_to_local_storage();
        },
        save_current_timeouts_to_local_storage : function() {
            localStorage.er_connect_in_search_timeouts = JSON.stringify(this.current_timeouts);
        },
        save_timeouts_and_message_mode : function(timeouts, message_mode) {
            this.save_timeouts_from_object(timeouts);
            this.set_message_mode(message_mode);
        },
        get_timeouts : function() {
            this.init();
            return this.current_timeouts;
        },
        get_random_timeout : function(timeout_name, dont_show_clock) {
            this.init();
            var timeout = this.current_timeouts[timeout_name];
            var rt = er_utils.getRandomInt(timeout.min, timeout.max);

            if(!dont_show_clock) {
                new ER_W_Timeout_Clock({
                    timeout : rt,
                    techname : timeout_name,
                    description : this.const_timeouts_names[timeout_name]
                })
            }

            return rt;
        },
        get_message_mode : function() {
            this.init();
            return this.message_mode;
        },
        set_message_mode : function(val) {
            this.message_mode = val;
            localStorage.er_connect_in_search_message_mode = JSON.stringify(val);
        },
    };
/**
 * Created by Alex on 17.10.2016.
 */
er_connect_in_search_view = window.er_connect_in_search_view || {
    CONST_REFRESH_STAT_TIMEOUT : 5000,

    type : 'er_connect_in_search',
    tittle : 'Connect new contacts in search',

    jq_main : null,

    jq_invited_total : null,
    jq_invited_in_current_period : null,
    jq_current_period_state : null,
    jq_next_period_start_cont : null,
    jq_next_period_start : null,
    jq_last_search_page_cont : null,
    jq_last_search_page : null,
    jq_btn_save : null,
    jq_textarea : null,

    init_main : function() {
        if (this.inited)
            return;

        er_connect_in_search.init_limits();

        this.jq_main = $(this._HTML_build_main());

        this.jq_invited_total = this.jq_main.find('.er_invited_total');
        this.jq_invited_in_current_period = this.jq_main.find('.er_invited_in_current_period');
        this.jq_current_period_state = this.jq_main.find('.er_current_period_state');
        this.jq_next_period_start_cont = this.jq_main.find('.stat_cont.next_period_start');
        this.jq_next_period_start = this.jq_next_period_start_cont.find('.er_next_period_start');
        this.jq_last_search_page_cont = this.jq_main.find('.stat_cont.last_search_page');
        this.jq_last_search_page = this.jq_next_period_start_cont.find('.er_last_search_page');

        this.jq_btn_connect_all = this.jq_main.find('.btn_connect_all');
        this.jq_btn_timeout_settings = this.jq_main.find('.btn_timeout_settings');

        this.jq_btn_save = this.jq_main.find('button.save');
        this.jq_textarea = this.jq_main.find('.er_message_template');
        this.jq_space_left = this.jq_main.find('.space_left');
        this.jq_eng_names_to_rus_switch = this.jq_main.find('.er_names_eng_to_rus');
        this.jq_rus_names_to_eng_switch = this.jq_main.find('.er_names_rus_to_eng');

        this.jq_btn_clear_sent_invites = this.jq_main.find('button.clear_sent_invites');
        this.jq_btn_clear_skipped_invites = this.jq_main.find('button.clear_skipped_invites');

        this._add_handlers();
        er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

        er_main_view._add_callback_on_click_mode_after_turn_on('er_search_next', this._on_click_mode_after_turn_on.bind(this));

        this.closure_refresh = this._refresh.bind(this);
        setTimeout(this.closure_refresh, this.CONST_REFRESH_STAT_TIMEOUT);

        var href = window.location.href;
        if (localStorage.er_search_next == 'true'
            && (href.indexOf('linkedin.com/vsearch') >= 0
            || href.indexOf('linkedin.com/search/') >= 0
            || er_utils.is_sales_navigator_search_page())
        )
            er_main_view.show_settings(this.type);

        this.inited = true;
    },
    _HTML_build_main : function() {
        var html = '<div class="er_sub_view '+this.type+'">';

        html += this._HTML_build_tabs_pannel();
        html += this._HTML_build_content_general();
        html += this._HTML_build_content_invitation_message();
        html += this._HTML_build_content_invitation_clear();

        html += '</div>';
        return html;
    },
    _HTML_build_tabs_pannel : function() {
        var html = '<div class="tabs_pannel">';

        html += '<span class="tab set" data-tab="general"></span>';

        if (er_utils.is_new_style_page()
            || er_utils.is_sales_navigator_page())
            html += '<span class="tab" data-tab="invitation_message"></span>';

        html += '<span class="tab" data-tab="lh_invites_clear"></span>';

        html += '</div>';

        return html;
    },
    _HTML_build_content_general : function() {
        var html = '<div class="content set" data-type="general">';
        /*html += '<p class="warning"></p>';*/

        html += this._HTML_build_invited_total();
        html += this._HTML_build_invited_in_current_period();
        html += this._HTML_build_current_period_state();
        html += this._HTML_build_next_period_start();

        html += this._HTML_build_connect_in_search_period();
        html += this._HTML_build_connect_in_search_limit();

        var started = er_connect_in_search.is_connect_in_search_mode_on() ? 'started' : '';
        html += '<button class="btn_timeout_settings">Timeout settings</button>';
        html += '<button class="btn_connect_all '+started+'"></button>';

        html += this._HTML_build_last_search_page();
        html += '<button class="btn_continue_connect"></button>';
        html += '</div>';
        return html;
    },
    _HTML_build_content_invitation_message : function() {
        var html = '<div class="content" data-type="invitation_message">';

        /*html += '<p class="label"></p>';
        html += '<p class="tip"></p>';

        html += this._HTML_build_textarea_container();

        html += '<button class="save er_inactive"></button>';
        html += this._HTML_build_defaults_invitation_cont();
        html += this._HTML_build_eng_names_to_rus_switch();
        html += this._HTML_build_rus_names_to_eng_switch();*/

        html += '</div>';

        return html;
    },
    _HTML_build_content_invitation_clear : function() {
        var html = '<div class="content" data-type="lh_invites_clear">';

        html += '<p class="label"></p>';
        html += '<p class="tip"></p>';

        html += '<button class="clear_sent_invites"></button>';
        html += '<button class="clear_skipped_invites"></button>';

        html += '</div>';

        return html;
    },
    /*_HTML_build_textarea_container : function() {
        var html = '<div class="textarea_container">';

        var template = er_connect_in_search.get_invite_message_template();
        template = template == null ? '' : template;

        html += '<textarea class="er_message_template" maxlength="'+er_connect_in_search.CONST_INVITATION_MESSAGE_TMPL_MAXLENGTH+'" placeholder="Hello {firstname}! Please, join my network!">'+template+'</textarea>';

        var space_left = er_connect_in_search.CONST_INVITATION_MESSAGE_TMPL_MAXLENGTH;
        if (template)
            space_left = space_left - template.length;
        html += '<div class="space_left">'+space_left+'</div>';
        html += '</div>';
        return html;
    },
    _HTML_build_defaults_invitation_cont : function() {
        return '<div class="defaults_invitation_cont"></div>';
    },*/
    _HTML_build_invited_total : function() {
    var count_sent = er_connect_in_search.get_total_invites_counter();

    return '<div class="stat_cont invited_total"><span class="title label"></span><span class="er_invited_total value">'+count_sent+'</span></div>';
},
    _HTML_build_invited_in_current_period : function() {
        var count_sent = er_connect_in_search.get_invited_in_current_period();

        return '<div class="stat_cont invited_in_current_period"><span class="title label"></span><span class="er_invited_in_current_period value">'+count_sent+'</span></div>';
    },
    _HTML_build_current_period_state : function() {
        var state = er_connect_in_search.get_current_period_state();

        return '<div class="stat_cont current_period_state"><span class="title label"></span><span class="er_current_period_state value">'+state+'</span></div>';
    },
    _HTML_build_next_period_start : function() {
        var date = er_connect_in_search.get_next_period_start();
        var hidden = 'hidden';

        if (date != null) {
            hidden = '';
            date = er_utils.datetimeJSToUser(date);
        }
        return '<div class="stat_cont next_period_start '+hidden+'"><span class="title label"></span><span class="er_next_period_start value">'+date+'</span></div>';
    },
    _HTML_build_connect_in_search_limit : function() {
        var html = '<div class="connect_in_search_limit_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var limit = localStorage.er_connect_in_search_limit;

        html += '<input class="connect_in_search_limit" type="text" value="'+limit+'">';
        html += '</div>';
        return html;
    },
    _HTML_build_last_search_page : function() {
        var page = er_connect_in_search.get_last_search_page();
        var hidden = 'hidden';

        if (page != null && page != '') {
            hidden = '';
        }
        return '<div class="stat_cont last_search_page '+hidden+'"><span class="title label"></span><input class="er_last_search_page value" value="'+page+'" disabled></div>';
    },
    _HTML_build_connect_in_search_period : function() {
        var html = '<div class="connect_in_search_period_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var period = localStorage.er_connect_in_search_period;

        html += '<input class="connect_in_search_period" type="text" value="'+period+'">';
        html += '</div>';
        return html;
    },
    /*_HTML_build_eng_names_to_rus_switch : function() {
        var er_off = localStorage.er_names_eng_to_rus == 'true' ? '' : 'er_off';
        return '<div class="er_state_toggle jim-sm-default er_mode_cont er_names_eng_to_rus '+er_off+'" data-variable="er_names_eng_to_rus"><span class="title"></span></div>';
    },
    _HTML_build_rus_names_to_eng_switch : function() {
        var er_off = localStorage.er_names_rus_to_eng == 'true' ? '' : 'er_off';
        return '<div class="er_state_toggle jim-sm-default er_mode_cont er_names_rus_to_eng '+er_off+'" data-variable="er_names_rus_to_eng"><span class="title"></span></div>';
    },*/

    _add_handlers : function() {
        new ER_Widget_How_To({
            jq_parent : this.jq_main,
            links : [ER_Widget_How_To.links.er_connect_in_search_view]
        });

        this.jq_main.children('.tabs_pannel').children('.tab').click(this._on_click_tab.bind(this));

        this.w_invitation_template = new ER_Widget_InvSearch_Message_Template({jq_parent : this.jq_main.children('.content[data-type=invitation_message]')});

        this.jq_connect_in_search_period = this.jq_main.find('.connect_in_search_period').change(this._on_change_input_connect_in_search_period.bind(this));
        this.jq_connect_in_search_limit = this.jq_main.find('.connect_in_search_limit').change(this._on_change_input_connect_in_search_limit.bind(this));
        this.jq_btn_connect_all.click(this._on_click_btn_connect_all.bind(this));
        this.jq_btn_timeout_settings.click(this._on_click_btn_timeout_settings.bind(this));
        this.jq_main.find('.btn_continue_connect').click(this._on_click_btn_continue_connect.bind(this));
        /*this.jq_main.find('.er_names_eng_to_rus').click(this._on_click_eng_names_to_rus_switch.bind(this));
        this.jq_main.find('.er_names_rus_to_eng').click(this._on_click_rus_names_to_eng_switch.bind(this));*/

        this.jq_btn_save.click(this._on_click_save.bind(this));

        this.jq_btn_clear_sent_invites.click(this._on_click_btn_clear_sent_invites.bind(this));
        this.jq_btn_clear_skipped_invites.click(this._on_click_btn_clear_skipped_invites.bind(this));

        /*var closure_make_save_btn_active = this._make_save_btn_active.bind(this);
        this.jq_textarea.change(closure_make_save_btn_active).keypress(closure_make_save_btn_active).on('input', closure_make_save_btn_active);
*/
        /*if(er_utils.is_new_style_page()
            || er_utils.is_sales_navigator_page()) {
            this.er_Message_Defaults_Editor = new ER_Message_Defaults_Editor({
                jq_parent : this.jq_main.find('.defaults_invitation_cont'),
                variables : {
                    company : localStorage.er_connect_message_company,
                    position : localStorage.er_connect_message_position
                },
                callback_on_change : this.callback_on_invitation_defaults_change.bind(this)
            });
            this.er_Message_Defaults_Editor.build_main_view();
        }*/

        window.addEventListener(
            er_license_limit.EVENT_INVITES_LIMIT,
            this._on_EVENT_INVITES_LIMIT.bind(this),
            false);
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _refresh : function() {
        if(this.is_widget_visible()) {
            this._refresh_invited_total();
            this._refresh_invited_in_current_period();
            this._refresh_current_period_state();
            this._refresh_next_period_start();
            this._refresh_last_search_page();
            this._refresh_btn_connect_all_in_search();
        }

        setTimeout(this.closure_refresh, this.CONST_REFRESH_STAT_TIMEOUT);
    },
    _refresh_invited_total : function() {
        this.jq_invited_total.text(er_connect_in_search.get_total_invites_counter());
    },
    _refresh_invited_in_current_period : function() {
        this.jq_invited_in_current_period.text(er_connect_in_search.get_invited_in_current_period());
    },
    _refresh_current_period_state : function() {
        this.jq_current_period_state.text(er_connect_in_search.get_current_period_state());
    },
    _refresh_next_period_start : function() {
        var date = er_connect_in_search.get_next_period_start();
        if (date) {
            this.jq_next_period_start_cont.removeClass('hidden');
            this.jq_next_period_start.text(er_utils.datetimeJSToUser(date));
        } else {
            this.jq_next_period_start_cont.addClass('hidden');
        }
    },
    _refresh_last_search_page : function() {
        var page = er_connect_in_search.get_last_search_page();
        if (page != null && page != '') {
            this.jq_last_search_page_cont.removeClass('hidden');
            this.jq_last_search_page.val(page);
        } else {
            this.jq_last_search_page_cont.addClass('hidden');
        }
    },
    _refresh_btn_connect_all_in_search : function() {
        if(er_connect_in_search.is_connect_in_search_mode_on()) {
            this.jq_btn_connect_all.addClass('started');
        } else {
            this.jq_btn_connect_all.removeClass('started');
        }
    },

    _make_save_btn_active : function () {
        var template = this.jq_textarea.val();
        var space_left = er_connect_in_search.CONST_INVITATION_MESSAGE_TMPL_MAXLENGTH - template.length;
        if (space_left >= 0) {
            this.jq_btn_save.removeClass('er_inactive');
            this.jq_space_left.removeClass('minus');
        }
        else {
            this.jq_btn_save.addClass('er_inactive');
            this.jq_space_left.addClass('minus');
        }

        this.jq_space_left.text(space_left);
    },

    _check_limits_and_warn : function() {
        if(er_connect_in_search.is_limits_are_safe()) {
            this.jq_connect_in_search_limit.removeClass('warning');
            this.jq_connect_in_search_period.removeClass('warning');
        } else {
            this.jq_connect_in_search_limit.addClass('warning');
            this.jq_connect_in_search_period.addClass('warning');

            er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'limits_warning', er_gen_settings.get_current_language_id()));
        }
    },

    _check_limits : function(period, maxinvites) {
        var deferred = $.Deferred();
        var that = this;

        er_license_limit.get_limits()
            .then(function(limits) {
                if(limits && limits.invites) {
                    period = Number(period);
                    maxinvites = Number(maxinvites);
                    if(isNaN(period) || isNaN(maxinvites) ||
                        (limits.invites / 24) < (maxinvites / period)
                    ) {
                        er_connect_in_search.set_invites_limit_per_period(limits.invites);
                        er_connect_in_search.set_period_hours_between_invites(24);
                        that.jq_connect_in_search_limit.val(limits.invites);
                        that.jq_connect_in_search_period.val(24);
                    }
                }

                deferred.resolve();
            });

        return deferred.promise();
    },

    _show_message_reached_day_limit : function() {
        var message = 'You have reached day limit for connecting new contacts according your license plan.';

        new ER_Buy_Unlimited_Control({
            show_any_way : true,
            additional_message : message
        });
        //er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'reached_today_limit', er_gen_settings.get_current_language_id()));
    },

    _on_main_view_ready_for_sub_view : function() {
        this.init_main();
    },
    _on_click_tab : function(event) {
        var jq_tab = $(event.target);
        if(jq_tab.hasClass('set'))
            return;

        jq_tab.siblings('.tab.set').removeClass('set');
        this.jq_main.children('.content.set').removeClass('set');

        jq_tab.addClass('set');
        this.jq_main.children('.content[data-type='+jq_tab.attr('data-tab')+']').addClass('set');
    },
    _on_click_save : function() {
        var template = this.jq_textarea.val();
        var space_left = er_connect_in_search.CONST_INVITATION_MESSAGE_TMPL_MAXLENGTH - template.length;
        if (space_left >= 0) {
            er_connect_in_search.set_invite_message_template(this.jq_textarea.val());
        } else {
            er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'invitation_template_too_long', er_gen_settings.get_current_language_id()));
        }
        this.jq_btn_save.addClass('er_inactive');
    },
    /*_on_click_eng_names_to_rus_switch : function() {
        var variable = this.jq_eng_names_to_rus_switch.attr('data-variable');
        localStorage[variable] = this.jq_eng_names_to_rus_switch.hasClass('er_off');
        this.jq_eng_names_to_rus_switch.toggleClass('er_off');
    },
    _on_click_rus_names_to_eng_switch : function() {
        var variable = this.jq_rus_names_to_eng_switch.attr('data-variable');
        localStorage[variable] = this.jq_rus_names_to_eng_switch.hasClass('er_off');
        this.jq_rus_names_to_eng_switch.toggleClass('er_off');
    },*/
    _on_change_input_connect_in_search_period : function(event) {
        var jqInput = $(event.target);
        var newVal = Number(jqInput.val());
        if(isNaN(newVal) || newVal == 0) {
            localStorage.er_connect_in_search_period = er_connect_in_search.DEFAULT_SEND_PERIOD_UNSET_VALUE;
            jqInput.val(er_connect_in_search.DEFAULT_SEND_PERIOD_UNSET_VALUE);
        } else {
            localStorage.er_connect_in_search_period = newVal;
        }

        this._check_limits_and_warn();
        this._check_limits(er_connect_in_search.get_period_hours_between_invites(), er_connect_in_search.get_invites_limit_per_period());
    },
    _on_change_input_connect_in_search_limit : function(event) {
        var jqInput = $(event.target);
        var newVal = Number(jqInput.val());
        if(isNaN(newVal) || newVal == 0) {
            localStorage.er_connect_in_search_limit = er_connect_in_search.DEFAULT_SEND_LIMIT_UNSET_VALUE;
            jqInput.val(er_connect_in_search.DEFAULT_SEND_LIMIT_UNSET_VALUE);
        } else {
            newVal = Math.round(newVal/10)*10;
            newVal = newVal == 0 ? 10 : newVal;
            localStorage.er_connect_in_search_limit = newVal.toString();
            jqInput.val(newVal);
        }

        this._check_limits_and_warn();
        this._check_limits(er_connect_in_search.get_period_hours_between_invites(), er_connect_in_search.get_invites_limit_per_period());
    },
    _on_click_btn_connect_all : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_connect_all.hasClass('started')) {
            er_connect_in_search.set_connect_in_search_mode_off();
            this.jq_btn_connect_all.removeClass('started');
            return;
        }

        var wait = er_license_limit.when_can_continue_invites();
        if (wait > 0) {
            this._show_message_reached_day_limit();
            return;
        }

        var href = window.location.href;
        if (href.indexOf('linkedin.com/vsearch') >= 0
            || href.indexOf('linkedin.com/search/') >= 0
            || er_utils.is_sales_navigator_search_page()
        ) {
            er_connect_in_search.begin_connect_all_in_search();
            this.jq_btn_connect_all.addClass('started');
        } else {
            new ER_W_Go_To_Page({
                header : 'From which page do you want to invite?',
                add_go_to_2nd : true,
                add_go_to_2nd_and_3rd_sn : true
            });
            er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'go_to_search_page', er_gen_settings.get_current_language_id()));
        }


    },
    _on_click_btn_continue_connect : function() {
        var wait = er_license_limit.when_can_continue_invites();
        if (wait > 0) {
            this._show_message_reached_day_limit();
            //er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'reached_today_limit', er_gen_settings.get_current_language_id()));
            return;
        }

        var page = er_connect_in_search.get_last_search_page();
        if (page != null && page != '')
            er_connect_in_search.continue_connect_all_in_search();
        else
            er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'no_last_search_page', er_gen_settings.get_current_language_id()));
    },
    _on_click_btn_timeout_settings : function() {
        new ER_W_Connect_In_Search_Timeout_Settings({  });
    },
    _on_click_btn_clear_sent_invites : function() {
        er_main_view.show_yes_no_dialog(
            er_translator.get_text('er_connect_in_search', 'messages', 'clear_all_sent_invites_list', er_gen_settings.get_current_language_id()),
            this._on_click_yes_dialog_clear_sent_invites.bind(this)
        );
    },
    _on_click_yes_dialog_clear_sent_invites : function() {
        er_connect_in_search.delete_all_invited_ids()
            .then(function() {
                er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'done', er_gen_settings.get_current_language_id()));
            });
    },
    _on_click_btn_clear_skipped_invites : function() {
        er_connect_in_search.delete_all_skipped_ids();
        er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'done', er_gen_settings.get_current_language_id()));
    },
    _on_EVENT_INVITES_LIMIT : function() {
        //this._show_message_reached_day_limit();
    },
    _on_click_mode_after_turn_on : function() {
        var that = this;
        er_main_view.show_yes_no_dialog(
            er_translator.get_text('er_connect_in_search', 'messages', 'need_start_connect_all_on_this_page', er_gen_settings.get_current_language_id()),
            function() {
                that._on_click_btn_connect_all(null, true);
            }
        );
    },
    callback_on_invitation_defaults_change : function(variables) {
        localStorage.er_connect_message_company = variables.company;
        localStorage.er_connect_message_position = variables.position;
    },
};
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_connect_in_search_view._on_main_view_ready_for_sub_view() });

/**
 * Created by erinsasha on 22/02/17.
 */
if(!window.ER_AutoVisit_List) {
    window.ER_AutoVisit_List = function (obj) {
        for(key in obj)
            this[key] = obj[key];

        this.name = this.name ? this.name : this.id;
        this.id = this.id ? this.id : this.name;

        this.queue = this.queue ? this.queue : [];
        this.visited = this.visited ? this.visited : [];
        this.exclueded = this.exclueded ? this.exclueded : [];
        this.visit_info = this.visit_info ? this.visit_info : {};

        if(obj.t)
            this.t = obj.t;
        else {
            var d = new Date();
            this.t = d.getTime();
        }
    };
    ER_AutoVisit_List.prototype = {
        save_to_db : function() {
            var d = new Date();
            this.u = d.getTime();

            return er_autovisitor_db.push_list(this);
        },

        get_all_ids_in_queue : function() {
            return this.queue;
        },
        get_all_ids_in_visited : function() {
            return this.visited;
        },
        get_all_ids_in_exclueded : function() {
            return this.get_all_ids_in_excluded();
        },
        get_all_ids_in_excluded : function() {
            return this.exclueded;
        },
        get_all_ids_in_queue_and_visited : function() {
            return er_utils.get_array_merge(this.queue, this.visited);
        },
        get_uniq : function(ids) {
            var not_visited_ids = er_utils.get_array_uniq(ids, this.visited);
            var not_excluded_ids = er_utils.get_array_uniq(not_visited_ids, this.exclueded);
            var not_in_queue = er_utils.get_array_uniq(not_excluded_ids, this.queue);
            return not_in_queue;
        },

        set_ids_in_queue : function(ids) {
            this.queue = ids;
        },
        set_ids_in_visited : function(ids) {
            this.visited = ids;
        },
        set_ids_in_excluded : function(ids) {
            this.exclueded = ids;
        },


        add_ids_to_queue : function(ids) {
            var not_visited_ids = er_utils.get_array_uniq(ids, this.visited);
            var not_excluded_ids = er_utils.get_array_uniq(not_visited_ids, this.exclueded);
            for(var i= 0; i<not_excluded_ids.length; i++) {
                this._add_id_to_queue_without_visited_excluded_check(not_excluded_ids[i]);
            }
        },
        add_id_to_queue : function(id) {
            if(!this.is_id_in_excluded(id) && !this.is_id_in_visited(id))
                this._add_id_to_queue_without_visited_excluded_check(id);
        },
        _add_id_to_queue_without_visited_excluded_check : function(id) {
            if(id != '' && id != null && !this.is_id_in_queue(id)) {
                this.queue.push(id);
                this.visit_info[id] = this._create_empty_visit_info_elem(id);
            }
        },
        _create_empty_visit_info_elem : function(id) {
            return {
                id : id,
                visits : 0,
                lv : null,
                cr : (new Date()).getTime()
            };
        },
        update_visit_info_elem : function(elem) {
            this.visit_info[elem.id] = elem;
        },
        set_id_as_just_visited : function(id) {
            var elem = this.visit_info[id];
            if (elem) {
                ++elem.visits;
                elem.lv = (new Date()).getTime();

                if(elem.visits >= er_autovisitor.get_max_visits_per_contact())
                    this.move_id_from_queue_to_visited(id);
            }
        },
        is_id_in_queue : function(id) {
            return this.queue.indexOf(id) >= 0;
        },
        is_id_in_visited : function(id) {
            return this.visited.indexOf(id) >= 0;
        },
        is_id_in_excluded : function(id) {
            return this.exclueded.indexOf(id) >= 0;
        },
        delete_id_from_queue : function(id) {
            var id_pos = this.queue.indexOf(id);
            if(id_pos >= 0)
                this.queue.splice(id_pos, 1);
        },
        delete_ids_from_queue : function(ids) {
            this.queue = er_utils.get_array_uniq(this.queue, ids);
        },
        delete_ids_from_visited : function(ids) {
            this.visited = er_utils.get_array_uniq(this.visited, ids);
        },
        delete_ids_from_excluded : function(ids) {
            this.exclueded = er_utils.get_array_uniq(this.exclueded, ids);
        },
        move_id_from_queue_to_visited : function(id) {
            this.delete_id_from_queue(id);
            if(!this.is_id_in_visited(id))
                this.visited.push(id);
        },
        move_ids_from_queue_to_excluded : function(ids) {
            this.queue = er_utils.get_array_uniq(this.queue, ids);
            this.exclueded = er_utils.get_array_merge(this.exclueded, ids);
        },
        move_ids_from_queue_to_visited : function(ids) {
            this.queue = er_utils.get_array_uniq(this.queue, ids);
            this.visited = er_utils.get_array_merge(this.visited, ids);
        },
        move_ids_from_excluded_to_queue : function(ids) {
            this.exclueded = er_utils.get_array_uniq(this.exclueded, ids);
            this.queue = er_utils.get_array_merge(this.queue, ids);
        },
        move_ids_from_visited_to_queue : function(ids) {
            this.visited = er_utils.get_array_uniq(this.visited, ids);
            this.queue = er_utils.get_array_merge(this.queue, ids);
        },
        move_ids_from_visited_to_excluded : function(ids) {
            this.visited = er_utils.get_array_uniq(this.visited, ids);
            this.exclueded = er_utils.get_array_merge(this.exclueded, ids);
        },
        move_ids_from_excluded_to_visited : function(ids) {
            this.exclueded = er_utils.get_array_uniq(this.exclueded, ids);
            this.visited = er_utils.get_array_merge(this.visited, ids);
        },
        get_visit_info_for_id : function(id) {
            var info = this.visit_info[id];
            if(!info) {
                info = this._create_empty_visit_info_elem(id);
                this.visit_info[id] = info;
            }
            return info;
        },
        get_all_visit_infos : function() {
            return this.visit_info;
        },
        get_the_oldest_visited_visit_info : function() {
            var oldest_visit_info;

            for(var i= 0, id, curr_visit_info; i<this.queue.length; i++) {
                id = this.queue[i];
                if (id != null && id != '') {
                    curr_visit_info = this.visit_info[id];
                    if(!oldest_visit_info
                        || curr_visit_info.lv == null && oldest_visit_info.lv != null
                        || curr_visit_info.lv < oldest_visit_info.lv
                    ) {
                        oldest_visit_info = curr_visit_info;
                    }
                }
            }

            return oldest_visit_info;
        },
        get_queue_length : function() {
            return this.queue.length;
        },
        get_visited_length : function() {
            return this.visited.length;
        },
        get_excluded_length : function() {
            return this.exclueded.length;
        }

    };
    ER_AutoVisit_List.static = {};

};
/**
 * Created by erinsasha on 25/02/17.
 */
function ER_Widget_Autovisit_Collect (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Autovisit_Collect.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Autovisit_Collect">';

        html += this._HTML_build_list_select_cont();
        html += this._HTML_build_btn_collect();
        html += this._HTML_build_list_stats();
        html += '<button class="view_collected"></button>';
        html += '<button class="btn_lists_manager">Open lists manager</button>';

        html += '</div>';
        return html;
    },
    _HTML_build_list_select_cont : function() {
        var html = '<div class="wrapper_list_select_cont">';

        html += '<span class="label"></span>';

        html += '</div>';

        return html;
    },
    _HTML_build_btn_collect : function() {
        var started = er_autovisitor_collector.get_mode_autovisitor_collect() ? 'started' : '';
        return '<button class="collect '+started+'"></button>';
    },
    _HTML_build_list_stats : function() {
        var html = '<div class="list_stats_cont">';

        html += this._HTML_build_profiles_collected();

        html += '</div>';
        return html;
    },
    _HTML_build_profiles_collected : function() {
        return '<div class="stat_cont profiles_collected_cont"><span class="title label"></span><span class="er_count_new value">0</span></div>';
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.er_Widget_Autovisit_Selector = new ER_Widget_Autovisit_Selector({
            jq_parent : this.jq_main.find('.wrapper_list_select_cont')
        });

        this.er_Widget_Delete_Auto_Visit = new ER_Widget_Delete_Auto_Visit({
            jq_parent : this.jq_main
        });

        this.jq_btn_collect = this.jq_main.find('button.collect');
        this.jq_btn_collect.click(this._on_click_btn_collect.bind(this));

        this.jq_btn_view_collected = this.jq_main.find('button.view_collected');
        this.jq_btn_view_collected.click(this._on_click_btn_view_collected.bind(this));

        this.jq_main.find('.btn_lists_manager').click(this._on_click_btn_lists_manager.bind(this));

        this.jq_profiles_collected_value = this.jq_main.find('.profiles_collected_cont .value');

        window.addEventListener(
            er_autovisitor_collector.EVENT_AUTOVISITOR_COLLECT_MODE_SWITCHED_ON,
            this._set_btn_collect_as_started.bind(this),
            false);
        window.addEventListener(
            er_autovisitor_collector.EVENT_AUTOVISITOR_COLLECT_MODE_SWITCHED_OFF,
            this._set_btn_collect_as_not_started.bind(this),
            false);

        window.addEventListener(
            er_autovisitor_lists_control.EVENT_NEW_AUTOVISIT_CREATED,
            this.on_EVENT_NEW_AUTOVISIT_CREATED.bind(this),
            false);
        window.addEventListener(
            er_autovisitor_lists_control.EVENT_ACTIVE_AUTOVISIT_SWITCHED,
            this.on_EVENT_ACTIVE_AUTOVISIT_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_autovisitor_lists_control.EVENT_AUTOVISIT_DELETED,
            this.on_EVENT_AUTOVISIT_DELETED.bind(this),
            false);

        er_main_view._add_callback_on_click_mode_after_turn_on('er_autovisitor_mode_collect', this._on_click_mode_after_collect_turn_on.bind(this));

        this._refresh();
    },

    _set_btn_collect_as_started : function() {
        this.jq_btn_collect.addClass('started');
    },
    _set_btn_collect_as_not_started : function() {
        this.jq_btn_collect.removeClass('started');
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _refresh : function(refresh_once_anyway) {
        if(this.is_widget_visible() || refresh_once_anyway) {
            this._refresh_button_collect_state();

            er_autovisitor_lists_control.get_active_list()
                .then(this.closure_refresh_using_autovisitor_list);
        }

        if(!this.closure_refresh_using_autovisitor_list)
            this.closure_refresh_using_autovisitor_list = this._refresh_using_autovisitor_list.bind(this);

        this.closure_refresh = this.closure_refresh ? this.closure_refresh : this._refresh.bind(this);
        if(!refresh_once_anyway)
            setTimeout(this.closure_refresh, ER_Widget_Autovisit_Collect.CONST_REFRESH_STAT_TIMEOUT);
    },
    _refresh_using_autovisitor_list : function(active_list) {
        this.jq_profiles_collected_value.text(active_list.get_queue_length());
    },
    _refresh_button_collect_state : function() {
        if(er_autovisitor_collector.get_mode_autovisitor_collect())
            this._set_btn_collect_as_started();
        else
            this._set_btn_collect_as_not_started();
    },

    _on_click_btn_collect : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_collect.hasClass('started')) {
            er_autovisitor_collector.set_mode_autovisitor_collect(false);
            this._set_btn_collect_as_not_started();
        } else {
            if(er_search_page_helper.is_search_page()) {
                er_autovisitor_collector.set_mode_on_and_tab_active();
                er_autovisitor_collector.process();
                this._set_btn_collect_as_started();
            } else {
                new ER_W_Go_To_Page({
                    add_go_to_2nd_and_3rd : true,
                    add_go_to_2nd_and_3rd_sn : true
                });
                er_main_view._info_popup_show(er_translator.get_text('ER_Widget_Autovisit_Collect', 'messages', 'go_to_search_page', er_gen_settings.get_current_language_id()));
            }
        }
    },
    _on_click_btn_view_collected : function() {
        var er_Widget_Autovisit_Queue_Proc_Excl =
            new ER_Widget_Autovisit_Queue_Proc_Excl({
                jq_parent : this.jq_main
            });
    },

    _on_click_btn_lists_manager : function() {
        new ER_W_List_Manager({
            jq_parent : this.jq_main,
            current_source_function_id : 'profiles_auto_visitor',
            current_target_function_id : 'collect_select_invite_2nd_3rd',
        })
    },

    _on_click_mode_after_collect_turn_on : function() {
        this._on_click_btn_collect(null, true);
    },
    on_EVENT_NEW_AUTOVISIT_CREATED : function(event) {
        // this._refresh(true);
    },
    on_EVENT_ACTIVE_AUTOVISIT_SWITCHED : function(event) {
        this._refresh(true);
    },
    on_EVENT_AUTOVISIT_DELETED : function(event) {
        // this._refresh(true);
    },
};
ER_Widget_Autovisit_Collect.CONST_REFRESH_STAT_TIMEOUT = 5000;
/**
 * Created by erinsasha on 26/02/17.
 */
function ER_Widget_Autovisit_Export (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Autovisit_Export.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Autovisit_Export">';

        html += this._HTML_build_delimiter_selector();
        html += '<button class="btn_export_file"></button>';
        html += '<a class="help er_blog" target="_blank" href="https://medium.com/linked-helper/how-to-import-csv-file-into-ms-excel-b4aee2f30375?source=---------1">Read How to Import CSV file into MS Excel</a>';

        html += '</div>';
        return html;
    },
    _HTML_build_delimiter_selector : function() {
        var html = '<div class="delimiter_selector_cont er_label_input_cont">';

        html += '<span class="label"></span>';

        html += '<select class="select_delimiter">';

        html += '<option value="," selected>, - Google Sheets</option>';
        html += '<option value=";">; - Microsoft Excel</option>';

        html += '</select>';

        html += '</div>';

        return html;
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_btn_export_file = this.jq_main.find('.btn_export_file');
        this.jq_btn_export_file.click(this._on_btn_export_file_click.bind(this));

        this.jq_select_delimiter = this.jq_main.find('.select_delimiter');
    },



    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _on_btn_export_file_click : function() {
        if(this.jq_btn_export_file.hasClass('started'))
            return;

        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that.jq_btn_export_file.addClass('started');

                    var jq_option = that.jq_select_delimiter.find('option:selected');
                    var delimiter = jq_option.attr('value');

                    er_autovisitor_lists_control.get_active_list()
                        .then(function(active_list) {
                            er_profiles_common_csv.delimiter = delimiter;
                            er_profiles_common_csv.generate_csv_file_for_ids(active_list.get_all_ids_in_queue_and_visited())
                                .then(function() {
                                    that.jq_btn_export_file.removeClass('started');
                                });
                        });

                } else {
                    //that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);


    },

};

/**
 * Created by erinsasha on 26/02/17.
 */
function ER_Widget_Autovisit_Queue_Proc_Excl (options) {
    if(!options)
        options = {};
    this.options = options;
    this.jq_parent = options.jq_parent;

    var that = this;
    this.filter = {
        min : 0,
        max : 999
    };

    er_autovisitor_lists_control.get_active_list()
        .then(function(active_list) {
            that.active_list = active_list;
            that._build_widget();
        });
};

ER_Widget_Autovisit_Queue_Proc_Excl.prototype = {
    listname_tech_to_user : {
        'queue' : 'Auto-Visiting Queue',
        'processed' : 'Visited',
        'excluded' : 'Excluded',
        'error' : 'Processed with Errors',
    },
    _build_widget : function() {
        this.er_Widget_Queue_Proc_Excl = new ER_Widget_Queue_Proc_Excl({
            jq_parent : this.jq_parent,
            html_additional_main_class : 'ER_Widget_Autovisit_Queue_Proc_Excl',

            callback_custom_fields_builder : this.callback_custom_fields_builder.bind(this),

            is_processed_enabled : true,
            is_excluded_enabled : true,

            callback_get_queue_deferred : this.callback_get_queue_deferred.bind(this),
            callback_get_processed_deferred : this.callback_get_processed_deferred.bind(this),
            callback_get_excluded_deferred : this.callback_get_excluded_deferred.bind(this),

            callback_move_ids_from_queue_to_excluded_deferred : this.callback_move_ids_from_queue_to_excluded_deferred.bind(this),
            callback_move_ids_from_excluded_to_queue_deferred : this.callback_move_ids_from_excluded_to_queue_deferred.bind(this),

            callback_move_ids_from_processed_to_excluded_deferred : this.callback_move_ids_from_processed_to_excluded_deferred.bind(this),
            callback_move_ids_from_excluded_to_processed_deferred : this.callback_move_ids_from_excluded_to_processed_deferred.bind(this),

            callback_move_ids_from_queue_to_processed_deferred : this.callback_move_ids_from_queue_to_processed_deferred.bind(this),
            callback_move_ids_from_processed_to_queue_deferred : this.callback_move_ids_from_processed_to_queue_deferred.bind(this),

            callback_get_dialog_message_move_from_queue_to_excluded : this.callback_get_dialog_message_move_from_queue_to_excluded.bind(this),
            callback_get_dialog_message_move_from_excluded_to_queue : this.callback_get_dialog_message_move_from_excluded_to_queue.bind(this),

            callback_get_dialog_message_move_from_queue_to_processed : this.callback_get_dialog_message_move_from_queue_to_processed.bind(this),
            callback_get_dialog_message_move_from_processed_to_queue : this.callback_get_dialog_message_move_from_processed_to_queue.bind(this),

            callback_get_dialog_message_move_from_excluded_to_processed : this.callback_get_dialog_message_move_from_excluded_to_processed.bind(this),
            callback_get_dialog_message_move_from_processed_to_excluded : this.callback_get_dialog_message_move_from_processed_to_excluded.bind(this),

            callback_get_dialog_message_delete_selected : this.callback_get_dialog_message_delete_selected.bind(this),
            callback_delete_selected_deferred : this.callback_delete_selected_deferred.bind(this),

            callback_build_custom_filter_html : this.callback_build_custom_filter_html.bind(this),
            callback_add_handlers_custom_filter_html : this.callback_add_handlers_custom_filter_html.bind(this),
            callback_is_match_custom_filter : this.callback_is_match_custom_filter.bind(this),
            callback_clear_filters : this.callback_clear_filters.bind(this),
        });
    },

    callback_custom_fields_builder : function(mini_profile, mode) {
        var visit_info = this.active_list.get_visit_info_for_id(mini_profile.id);
        return this._build_HTML_visits_count(visit_info) + this._build_HTML_last_visit(visit_info);
    },
    _build_HTML_visits_count : function(visit_info) {
        return '<td class="td_visits_count"><span class="label"></span><span class="count">'+visit_info.visits+'</span></td>';
    },
    _build_HTML_last_visit : function(visit_info) {
        var last_visit, class_never;
        if (visit_info.lv) {
            class_never = '';
            last_visit = er_utils.datetimeJSToUser(new Date(visit_info.lv));
        } else {
            last_visit = '';
            class_never = 'er_never';
        }
        return '<td class="td_last_visit '+class_never+'"><span class="label"></span><span class="value">'+last_visit+'</span></td>';
    },

    _HTML_build_filter_min_visits : function() {
        return '<span class="cont_filter_min_visits er_custom_filter"><input class="filter_min_visits" type="number" value="0" step="1" min="0"></span>';
    },
    _HTML_build_filter_max_visits : function() {
        return '<span class="cont_filter_max_visits er_custom_filter"><input class="filter_max_visits" type="number" value="999" step="1" min="0"></span>';
    },

    callback_get_queue_deferred : function() {
        var deferred = $.Deferred();

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
               deferred.resolve(active_list.get_all_ids_in_queue())
            });

        return deferred.promise();
    },
    callback_get_processed_deferred : function() {
        var deferred = $.Deferred();

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
                deferred.resolve(active_list.get_all_ids_in_visited())
            });

        return deferred.promise();
    },
    callback_get_excluded_deferred : function() {
        var deferred = $.Deferred();

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
                deferred.resolve(active_list.get_all_ids_in_exclueded())
            });

        return deferred.promise();
    },

    callback_move_ids_from_queue_to_excluded_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_queue_to_excluded(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_move_ids_from_excluded_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_excluded_to_queue(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },

    callback_move_ids_from_queue_to_processed_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_queue_to_visited(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_move_ids_from_processed_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_visited_to_queue(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },

    callback_move_ids_from_processed_to_excluded_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_visited_to_excluded(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_move_ids_from_excluded_to_processed_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_autovisitor_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_excluded_to_visited(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },

    _generate_move_dialog_message : function(source_tech_name, target_tech_name) {
        var selected = this.er_Widget_Queue_Proc_Excl.get_selected_count();

        var source_user_name = this.listname_tech_to_user[source_tech_name];
        var target_user_name = this.listname_tech_to_user[target_tech_name];

        var message = 'Do you want to move '+selected + ' contact';
        if(selected > 1)
            message += 's';
        message += ' from '+source_user_name+' to '+target_user_name;
        return message;
    },

    callback_get_dialog_message_move_from_queue_to_excluded : function() {
        return this._generate_move_dialog_message('queue', 'excluded');
    },
    callback_get_dialog_message_move_from_excluded_to_queue : function() {
        return this._generate_move_dialog_message('excluded', 'queue');
    },
    callback_get_dialog_message_move_from_queue_to_processed : function() {
        return this._generate_move_dialog_message('queue', 'processed');
    },
    callback_get_dialog_message_move_from_processed_to_queue : function() {
        return this._generate_move_dialog_message('processed', 'queue');
    },
    callback_get_dialog_message_move_from_excluded_to_processed : function() {
        return this._generate_move_dialog_message('excluded', 'processed');
    },
    callback_get_dialog_message_move_from_processed_to_excluded : function() {
        return this._generate_move_dialog_message('processed', 'excluded');
    },

    callback_get_dialog_message_delete_selected : function(listname, count) {
        var user_listname = this.listname_tech_to_user[listname];

        if(count <= 0)
            return 'Nothing selected';
        var message = 'Delete '+count+' selected contact';
        if(count > 1)
            message += 's';
        message += ' from '+user_listname+' ?';
        return message;
    },
    callback_delete_selected_deferred : function(listname, ids) {
        if(listname == 'queue') {
            this.active_list.delete_ids_from_queue(ids);
        } else if(listname == 'excluded') {
            this.active_list.delete_ids_from_excluded(ids);
        } else if(listname == 'processed') {
            this.active_list.delete_ids_from_visited(ids);
        }

        return this.active_list.save_to_db();
    },
    callback_build_custom_filter_html : function() {
        var html = this._HTML_build_filter_min_visits();
        html += this._HTML_build_filter_max_visits();

        return html;
    },
    callback_add_handlers_custom_filter_html : function(jq_filter_panel) {
        this.jq_filter_min_visits = jq_filter_panel.find('.filter_min_visits').change(this._on_change_input_filter_min_visits.bind(this));
        this.jq_filter_max_visits = jq_filter_panel.find('.filter_max_visits').change(this._on_change_input_filter_max_visits.bind(this));
    },
    callback_is_match_custom_filter : function(profile) {
        var info = this.active_list.get_visit_info_for_id(profile.id);
        return this.filter.min <= info.visits
            && (this.filter.max === null || info.visits <= this.filter.max);
    },
    callback_clear_filters : function() {
        this.jq_filter_min_visits.val(0);
        this.jq_filter_max_visits.val(999);
        this.filter.min = 0;
        this.filter.max = 999;
    },

    _on_change_input_filter_min_visits : function() {
        this.filter.min = Number(this.jq_filter_min_visits.val());
        if(isNaN(this.filter.min)) {
            this.filter.min = 0;
            this.jq_filter_min_visits.val(0);
        }

        this.er_Widget_Queue_Proc_Excl.start_filter();
    },
    _on_change_input_filter_max_visits : function() {
        var val = this.jq_filter_max_visits.val();
        if(val == "") {
            this.filter.max = null;
        } else {
            this.filter.max = Number(val);
        }
        this.er_Widget_Queue_Proc_Excl.start_filter();
    },
};
/**
 * Created by erinsasha on 25/02/17.
 */
/**
 *
 * @param options
 * @constructor
 */
function ER_Widget_Autovisit_Selector(options) {
    options = options || {};
    this.options = options;

    this.jq_parent = options.jq_parent;
    this.build_main_view();
};

ER_Widget_Autovisit_Selector.prototype = {
    _HTML_build_main_view : function() {
        var html = '<span class="ER_Widget_Autovisit_Selector">';

        html += '<select class="select_autovisit_list">';

        html += '<option value="'+ER_Widget_Autovisit_Selector.const.CONST_SELECTION_CREATE_MEW_ID+'">'+er_translator.get_text('ER_Widget_Autovisit_Selector', 'select_autovisit_list', 'create_new', er_gen_settings.get_current_language_id())+'</option>';


        var active_list_id = er_autovisitor_lists_control.get_active_list_id();
        var list = er_autovisitor_lists_control.get_all_lists_ids();

        for(var i=0, current_list_id; i < list.length; i++) {
            current_list_id = list[i];
            html += this._HTML_build_select_option(current_list_id, active_list_id == current_list_id);
        }

        html += '</select>';

        html += '</span>';

        return html;
    },
    _HTML_build_select_option : function(id, is_selected) {
        var selected = is_selected ? 'selected' : '';
        return '<option value="'+id.replace(/"/g,'&quot;')+'" '+selected+'>'+id.replace(/"/g,'&quot;')+'</option>';
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_select = this.jq_main.find('.select_autovisit_list');
        this.jq_select.change(this._on_change_select_autovisit_list.bind(this));

        window.addEventListener(
            er_autovisitor_lists_control.EVENT_NEW_AUTOVISIT_CREATED,
            this.on_EVENT_NEW_AUTOVISIT_CREATED.bind(this),
            false);
        window.addEventListener(
            er_autovisitor_lists_control.EVENT_ACTIVE_AUTOVISIT_SWITCHED,
            this.on_EVENT_ACTIVE_AUTOVISIT_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_autovisitor_lists_control.EVENT_AUTOVISIT_DELETED,
            this.on_EVENT_AUTOVISIT_DELETED.bind(this),
            false);
    },

    _add_new_list_to_selector : function(id) {
        if (this._is_select_option_created(id))
            return;

        var is_selected = er_autovisitor_lists_control.get_active_list_id() == id;

        var option = this._HTML_build_select_option(id, is_selected);
        this.jq_select.append($(option));
    },

    _set_selected_list : function(id) {
        if(!this._is_select_option_created(id)) {
            this._add_new_list_to_selector(id);
        }

        this.jq_select.val(id);
    },
    _is_select_option_created : function(id) {
        return this._get_select_option(id).length == 1;
    },
    _get_select_option : function(id) {
        return this.jq_select.find('option[value="'+id.replace(/"/g,'\\\"')+'"]');
    },
    _delete_select_option : function(id) {
        this._get_select_option(id).remove();
    },

    _show_create_list_dialog : function() {
        var er_Widget_New_Autovisit_List = new ER_Widget_New_Autovisit_List({
            jq_parent : this.jq_main
        });
    },
    _on_change_select_autovisit_list : function(event) {
        var jq_option = this.jq_select.find('option:selected');
        var list_id = jq_option.attr('value');
        if (list_id == ER_Widget_Autovisit_Selector.const.CONST_SELECTION_CREATE_MEW_ID) {
            this._show_create_list_dialog();
            this.jq_select.val(er_autovisitor_lists_control.get_active_list_id());
        } else {
            er_autovisitor_lists_control.set_active_list_id(list_id);
        }
    },
    on_EVENT_NEW_AUTOVISIT_CREATED : function(event) {
        var id = event.detail.id;
        this._add_new_list_to_selector(id);
    },
    on_EVENT_ACTIVE_AUTOVISIT_SWITCHED : function(event) {
        var id = event.detail;
        this._set_selected_list(id);
    },
    on_EVENT_AUTOVISIT_DELETED : function(event) {
        var id = event.detail;
        this._delete_select_option(id);
    },
};
ER_Widget_Autovisit_Selector.const = {};
ER_Widget_Autovisit_Selector.const.CONST_SELECTION_CREATE_MEW_ID = '__create_new_autovisit_list__';
/**
 * Created by erinsasha on 26/02/17.
 */
function ER_Widget_Autovisit_Visit (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Autovisit_Visit.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Autovisit_Visit">';

        html += '<p class="warning message separate_window"></p>';
        html += this._HTML_build_btn_begin_visiting();
        html += this._HTML_build_current_period_state();
        html += this._HTML_build_visited_in_current_period();
        html += this._HTML_build_next_period_start();
        html += this._HTML_build_visit_limit();
        html += this._HTML_build_visit_period();
        html += this._HTML_build_max_visits_per_contact();
        html += '<button class="er_timeout_settings">Timeout settings</button>';

        html += '</div>';
        return html;
    },
    _HTML_build_btn_begin_visiting : function() {
        var started = er_autovisitor.get_mode_autovisitor_visit() ? 'started' : '';
        return '<button class="begin_visiting '+started+'"></button>';
    },

    _HTML_build_current_period_state : function() {
        var state = er_autovisitor.get_current_period_state();

        return '<div class="stat_cont current_period_state"><span class="title label"></span><span class="er_current_period_state value">'+state+'</span></div>';
    },
    _HTML_build_visited_in_current_period : function() {
        var count_sent = er_autovisitor.get_visited_in_current_period();

        return '<div class="stat_cont visited_in_current_period"><span class="title label"></span><span class="er_visited_in_current_period value">'+count_sent+'</span></div>';
    },
    _HTML_build_next_period_start : function() {
        var date = er_autovisitor.get_next_period_start();
        var hidden = 'hidden';

        if (date != null) {
            hidden = '';
            date = er_utils.datetimeJSToUser(date);
        }
        return '<div class="stat_cont next_period_start '+hidden+'"><span class="title label"></span><span class="er_next_period_start value">'+date+'</span></div>';
    },
    _HTML_build_visit_limit : function() {
        var html = '<div class="visit_limit_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var limit = er_autovisitor.get_visit_limit_per_period();

        html += '<input class="visit_limit" type="number" value="'+limit+'">';
        html += '</div>';
        return html;
    },
    _HTML_build_visit_period : function() {
        var html = '<div class="visit_period_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var period = er_autovisitor.get_period_hours();

        html += '<input class="visit_period" type="number" value="'+period+'">';
        html += '</div>';
        return html;
    },
    _HTML_build_max_visits_per_contact : function() {
        var html = '<div class="max_visits_per_contact_cont er_label_input_cont">';
        html += '<span class="label">Visits per each profile :</span>';

        var limit = er_autovisitor.get_max_visits_per_contact();

        html += '<input class="max_visits_per_contact" type="number" min="1" step="1" value="'+limit+'">';
        html += '</div>';
        return html;
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_btn_begin_visiting = this.jq_main.find('button.begin_visiting');
        this.jq_btn_begin_visiting.click(this._on_click_btn_begin_visiting.bind(this));

        this.jq_main.find('button.er_timeout_settings').click(this._on_click_btn_timeout_settings.bind(this));

        this.jq_input_visit_limit = this.jq_main.find('input.visit_limit');
        this.jq_input_visit_limit.change(this._on_input_visit_limit.bind(this));
        
        this.jq_input_visit_period = this.jq_main.find('input.visit_period');
        this.jq_input_visit_period.change(this._on_input_visit_period.bind(this));

        this.jq_input_max_visits_per_contact = this.jq_main.find('input.max_visits_per_contact');
        this.jq_input_max_visits_per_contact.change(this._on_input_max_visits_per_contact.bind(this));

        this.jq_visited_in_current_period = this.jq_main.find('.er_visited_in_current_period');

        this.jq_current_period_state = this.jq_main.find('.er_current_period_state');

        this.jq_next_period_start_cont = this.jq_main.find('.stat_cont.next_period_start');
        this.jq_next_period_start = this.jq_next_period_start_cont.find('.er_next_period_start');

        window.addEventListener(
            er_autovisitor.EVENT_AUTOVISITOR_MODE_SWITCHED_ON,
            this._set_btn_begin_visiting_as_started.bind(this),
            false);
        window.addEventListener(
            er_autovisitor.EVENT_AUTOVISITOR_MODE_SWITCHED_OFF,
            this._set_btn_begin_visiting_as_not_started.bind(this),
            false);

        window.addEventListener(
            er_autovisitor_lists_control.EVENT_NEW_AUTOVISIT_CREATED,
            this.on_EVENT_NEW_AUTOVISIT_CREATED.bind(this),
            false);
        window.addEventListener(
            er_autovisitor_lists_control.EVENT_ACTIVE_AUTOVISIT_SWITCHED,
            this.on_EVENT_ACTIVE_AUTOVISIT_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_autovisitor_lists_control.EVENT_AUTOVISIT_DELETED,
            this.on_EVENT_AUTOVISIT_DELETED.bind(this),
            false);

        er_main_view._add_callback_on_click_mode_after_turn_on('er_autovisitor_mode_visit', this._on_click_mode_after_visit_turn_on.bind(this));

        this._refresh();
    },

    _set_btn_begin_visiting_as_started : function() {
        this.jq_btn_begin_visiting.addClass('started');
    },
    _set_btn_begin_visiting_as_not_started : function() {
        this.jq_btn_begin_visiting.removeClass('started');
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _refresh : function(refresh_once_anyway) {
        if(this.is_widget_visible() || refresh_once_anyway) {
            this._refresh_button_begin_visiting_state();
            this._refresh_visited_in_current_period();
            this._refresh_current_period_state();
            this._refresh_next_period_start();
        }

        this.closure_refresh = this.closure_refresh ? this.closure_refresh : this._refresh.bind(this);
        if(!refresh_once_anyway)
            setTimeout(this.closure_refresh, ER_Widget_Autovisit_Visit.CONST_REFRESH_STAT_TIMEOUT);
    },
    _refresh_button_begin_visiting_state : function() {
        if(er_autovisitor.get_mode_autovisitor_visit())
            this._set_btn_begin_visiting_as_started();
        else
            this._set_btn_begin_visiting_as_not_started();
    },
    _refresh_visited_in_current_period : function() {
        var visited = er_autovisitor.get_visited_in_current_period();
        this.jq_visited_in_current_period.text(visited);
    },
    _refresh_current_period_state : function() {
        var state = er_autovisitor.get_current_period_state();
        this.jq_current_period_state.text(state);
    },
    _refresh_next_period_start : function() {
        var date = er_autovisitor.get_next_period_start();
        if (date) {
            this.jq_next_period_start_cont.removeClass('hidden');
            this.jq_next_period_start.text(er_utils.datetimeJSToUser(date));
        } else {
            this.jq_next_period_start_cont.addClass('hidden');
        }
    },

    _check_limits_and_warn : function() {
        if(er_autovisitor.is_limits_are_safe()) {
            this.jq_input_visit_limit.removeClass('warning');
            this.jq_input_visit_period.removeClass('warning');
        } else {
            this.jq_input_visit_limit.addClass('warning');
            this.jq_input_visit_period.addClass('warning');

            er_main_view._info_popup_show(er_translator.get_text('ER_Widget_Autovisit_Visit', 'messages', 'limits_warning', er_gen_settings.get_current_language_id()));
        }
    },

    _on_click_btn_begin_visiting : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_begin_visiting.hasClass('started')) {
            er_autovisitor.set_mode_autovisitor_visit(false);
            this._set_btn_begin_visiting_as_not_started();
        } else {
            er_autovisitor.set_mode_on_and_tab_active();
            er_autovisitor.begin_process();
            this._set_btn_begin_visiting_as_started();
        }
    },
    _on_click_btn_timeout_settings : function() {
        new ER_W_Autovisitor_Timeout_Settings({});
    },

    _on_input_visit_limit : function() {
        er_autovisitor.set_visit_limit_per_period(this.jq_input_visit_limit.val());
        this._check_limits_and_warn();
    },
    _on_input_visit_period : function() {
        er_autovisitor.set_period_hours(this.jq_input_visit_period.val());
        this._check_limits_and_warn();
    },
    _on_input_max_visits_per_contact : function() {
        var val = this.jq_input_max_visits_per_contact.val();
        if(val < 1) {
            this.jq_input_max_visits_per_contact.val(1);
            return;
        }
        er_autovisitor.set_max_visits_per_contact(val);
    },
    
    _on_click_mode_after_visit_turn_on : function() {
        this._on_click_btn_begin_visiting(null, true);
    },

    on_EVENT_NEW_AUTOVISIT_CREATED : function(event) {
        // this._refresh(true);
    },
    on_EVENT_ACTIVE_AUTOVISIT_SWITCHED : function(event) {
        this._refresh(true);
    },
    on_EVENT_AUTOVISIT_DELETED : function(event) {
        // this._refresh(true);
    },
};
ER_Widget_Autovisit_Visit.CONST_REFRESH_STAT_TIMEOUT = 5000;
/**
 * Created by Alex on 12.03.2017.
 */
function ER_Widget_Delete_Auto_Visit(options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Delete_Auto_Visit.prototype = {
    _HTML_build_main_view : function() {
        var er_inactive = er_autovisitor_lists_control.is_default_list_active() ? 'er_inactive' : '';
        return '<button class="ER_Widget_Delete_Auto_Visit danger '+er_inactive+'"></button>';
    },
    _add_handlers : function() {
        window.addEventListener(
            er_autovisitor_lists_control.EVENT_ACTIVE_AUTOVISIT_SWITCHED,
            this.on_EVENT_ACTIVE_AUTOVISIT_SWITCHED.bind(this),
            false);

        this.jq_main.click(this.on_click_button.bind(this));
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    on_click_button : function() {
        if(this.jq_main.hasClass('er_inactive'))
            return;

        var message = er_translator.get_text('ER_Widget_Delete_Auto_Visit', 'messages', 'need_delete_list');
        message = message.replace(/{LIST_NAME}/g,er_autovisitor_lists_control.get_active_list_id());

        er_main_view.show_yes_no_dialog(
            message,
            this.on_click_yes_delete_list.bind(this)
        );
    },
    on_click_yes_delete_list : function() {
        er_autovisitor_lists_control.delete_list(er_autovisitor_lists_control.get_active_list_id());
    },
    on_EVENT_ACTIVE_AUTOVISIT_SWITCHED : function(event) {
        if(er_autovisitor_lists_control.is_default_list_active()) {
            this.jq_main.addClass('er_inactive');
        } else {
            this.jq_main.removeClass('er_inactive');
        }
    },
};

/**
 * Created by erinsasha on 25/02/17.
 */
function ER_Widget_New_Autovisit_List (options) {
    this.options = options;

    this.er_Widget_New_Something = new ER_Widget_New_Something({
        callback_on_create : this.callback_on_create.bind(this),
        html_main_class : 'ER_Widget_New_Autovisit_List',
        input_placeholder : 'List name',
        jq_parent : options.jq_parent
    });

    this.er_Widget_New_Something.build_main_view();
};

ER_Widget_New_Autovisit_List.prototype = {
    callback_on_create : function(name) {
        if(er_autovisitor_lists_control.is_list_with_id_exists(name)) {
            this.er_Widget_New_Something.info_popup_show(er_translator.get_text('ER_Widget_New_Autovisit_List', 'messages', 'list_exists', er_gen_settings.get_current_language_id()));
        } else {
            var that = this;
            er_autovisitor_lists_control.create_new_list_as_active_with_id(name)
                .then(function() {
                    that.er_Widget_New_Something.close();
                });
        }
    },
};
/**
 * Created by erinsasha on 12/08/17.
 */

// W_Autovisitor_Timeout_Settings

/**
 *
 * @param options
 * @param options.jq_parent
 * @constructor
 */
function ER_W_Autovisitor_Timeout_Settings(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.options = options;

    this._process();
}

ER_W_Autovisitor_Timeout_Settings.prototype = {
    _process : function() {
        this.w_timeout_settings = new ER_W_Timeout_Settings({
            header : 'Timeouts for Profiles Auto-Visitor',
            timeouts_names : er_autovisitor_timeouts.const_timeouts_names,
            timeouts : er_autovisitor_timeouts.get_timeouts(),
            fast_timeouts : er_autovisitor_timeouts.const_timeout_fast,
            safe_timeouts : er_autovisitor_timeouts.const_timeout_safe,
            jq_parent : this.jq_parent,
            callback_save_settings : er_autovisitor_timeouts.save_timeouts_from_object.bind(er_autovisitor_timeouts)
        });
    },
};
/**
 * Created by erinsasha on 22/02/17.
 */
var er_autovisitor = window.er_autovisitor || {
        EVENT_AUTOVISITOR_MODE_SWITCHED_ON : 'ER_EVENT_AUTOVISITOR_MODE_SWITCHED_ON',
        EVENT_AUTOVISITOR_MODE_SWITCHED_OFF : 'ER_EVENT_AUTOVISITOR_MODE_SWITCHED_OFF',

        WARNING_THRESHOLD_LIMIT : 400,
        DEFAULT_EXTRACT_LIMIT_PER_PERIOD : 400,
        DEFAULT_PERIOD_HOURS : 24,
        CONST_CURRENT_PERIOD_STARTED : 'STARTED',
        CONST_CURRENT_PERIOD_FINISHED : 'FINISHED',

        CONST_DEFAULT_MAX_VISITS_PER_CONTACT : 3,

        get_mode_autovisitor_visit : function() {
            return localStorage.er_autovisitor_mode_visit == 'true';
        },
        set_mode_autovisitor_visit : function(value) {
            var evt_name;
            if(value === true || value == 'true' || value == 'TRUE') {
                localStorage.er_autovisitor_mode_visit = 'true';
                evt_name = this.EVENT_AUTOVISITOR_MODE_SWITCHED_ON;
            } else {
                localStorage.er_autovisitor_mode_visit = 'false';
                this.tab_delete_mode();
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_FINISHED);
                evt_name = this.EVENT_AUTOVISITOR_MODE_SWITCHED_OFF;
            }
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(evt_name, true, true, null);
            window.dispatchEvent(evt);
        },

        tab_add_mode : function() {
            er_tabs_control.add_active_mode('er_autovisitor_mode_visit');
        },
        tab_delete_mode : function() {
            er_tabs_control.delete_active_mode('er_autovisitor_mode_visit');
        },
        tab_is_active_in : function() {
            return er_tabs_control.is_mode_active('er_autovisitor_mode_visit');
        },

        is_mode_on_and_tab_active : function() {
            return this.get_mode_autovisitor_visit() && this.tab_is_active_in();
        },
        set_mode_on_and_tab_active : function() {
            this.set_mode_autovisitor_visit(true);
            this.tab_add_mode();
        },

        is_need_to_extract_profile : function() {
            var value = localStorage.er_autovisitor_extract_mode;
            if (value == 'true' || value == 'false')
                return value == 'true';

            if(er_utils.is_new_style_page())
                value = true;
            else
                value = false;

            localStorage.er_autovisitor_extract_mode = value;

            return value;
        },

        get_visit_limit_per_period : function() {
            var limit = Number(localStorage.er_autovisitor_limit_per_period);
            if (isNaN(limit)) {
                localStorage.er_autovisitor_limit_per_period = this.DEFAULT_EXTRACT_LIMIT_PER_PERIOD;
                limit = this.DEFAULT_EXTRACT_LIMIT_PER_PERIOD;
            }
            return limit;
        },
        set_visit_limit_per_period : function(value) {
            var limit = Number(value);
            if (isNaN(limit) || limit <= 0) {
                return false;
            }
            localStorage.er_autovisitor_limit_per_period = limit;
        },

        get_period_hours : function() {
            var limit = Number(localStorage.er_autovisitor_period_hours);
            if (isNaN(limit)) {
                localStorage.er_autovisitor_period_hours = this.DEFAULT_PERIOD_HOURS;
                limit = this.DEFAULT_PERIOD_HOURS;
            }
            return limit;
        },
        set_period_hours : function(value) {
            var limit = Number(value);
            if (isNaN(limit) || limit <= 0) {
                return false;
            }
            localStorage.er_autovisitor_period_hours = limit;
        },

        is_limits_are_safe : function() {
            var x = 24 * this.get_visit_limit_per_period() / this.get_period_hours();
            return x <= this.WARNING_THRESHOLD_LIMIT;
        },

        is_get_current_period_state_STARTED : function() {
            return this.CONST_CURRENT_PERIOD_STARTED = this.get_current_period_state();
        },
        get_current_period_state : function() {
            var current_period_state = localStorage.er_autovisitor_period_state;
            if (current_period_state == this.CONST_CURRENT_PERIOD_STARTED
                && this.get_mode_autovisitor_visit()
            ) {
                return this.CONST_CURRENT_PERIOD_STARTED;
            } else {
                return this.CONST_CURRENT_PERIOD_FINISHED;
            }
        },
        set_current_period_state : function(value) {
            if (value == this.CONST_CURRENT_PERIOD_STARTED || value === true) {
                localStorage.er_autovisitor_period_state = this.CONST_CURRENT_PERIOD_STARTED;
            } else {
                localStorage.er_autovisitor_period_state =  this.CONST_CURRENT_PERIOD_FINISHED;
            }
        },

        get_visited_in_current_period : function() {
            var value = Number(localStorage.er_autovisitor_visited_in_current_period);
            if (isNaN(value)) {
                value = 0;
            }
            return value;
        },
        set_visited_in_current_period : function(value) {
            value = Number(value);
            if (isNaN(value))
                return;
            localStorage.er_autovisitor_visited_in_current_period = value;
        },
        increase_visited_in_current_period : function(delta) {
            localStorage.er_autovisitor_visited_in_current_period = delta + this.get_visited_in_current_period();
        },

        get_max_visits_per_contact : function() {
            var value = Number(localStorage.er_autovisitor_max_visits_per_contact);
            if (isNaN(value)) {
                value = this.CONST_DEFAULT_MAX_VISITS_PER_CONTACT;
                localStorage.er_autovisitor_max_visits_per_contact = this.CONST_DEFAULT_MAX_VISITS_PER_CONTACT;
            }
            return value;
        },
        set_max_visits_per_contact : function(value) {
            value = Number(value);
            if (isNaN(value))
                return;
            localStorage.er_autovisitor_max_visits_per_contact = value;
        },

        /**
         * Возвращает дату начала следующего периода
         * @returns {*}
         */
        get_next_period_start : function() {
            var date = localStorage.er_autovisitor_next_starts_at;

            if (date != null && date != '')
                date = new Date(JSON.parse(date));

            if (date instanceof Date && !isNaN(date.getHours()) && new Date < date) {
                return date;
            } else {
                return null;
            }
        },
        /**
         * Задает через сколько должен запуститься следующий период от текущего момента
         * @returns {number}
         */
        set_next_period_start : function() {
            var date = new Date();
            // Количество миллисекунд до следующего запуска
            var wait_milli_seconds = 3600000*this.get_period_hours();
            date.setTime(date.getTime() + wait_milli_seconds);
            localStorage.er_autovisitor_next_starts_at = JSON.stringify(date);

            return wait_milli_seconds;
        },
        /**
         * Возвращает количество миллисекунд между текущем временем и временем следующего запуска
         */
        get_diff_between_now_and_next_period_start : function() {
            var nextStartDate = this.get_next_period_start();
            if (nextStartDate == null) {
                return 0;
            } else {
                var currDate = new Date();
                return nextStartDate.getTime() - currDate.getTime();
            }
        },

        reset_current_period : function() {
            this.set_visited_in_current_period(0);
            delete localStorage.er_autovisitor_next_starts_at;
        },
        check_should_continue_work : function(is_need_setup_waiter) {
            if(!this.is_mode_on_and_tab_active())
                return false;
            if(this.get_visited_in_current_period() < this.get_visit_limit_per_period())
                return true;
            else
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_FINISHED);

            var diff = this.get_diff_between_now_and_next_period_start();
            if (diff <= 0) {
                this.reset_current_period();
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_STARTED);
                return true;
            } else {
                if (is_need_setup_waiter) {
                    setTimeout(this.process.bind(this), diff);
                }
                return false;
            }
        },

        begin_process : function() {
            var that = this;

            var evtPK = document.createEvent("CustomEvent");
            evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                function(result) {
                    if (result) {
                        that.reset_current_period();
                        that.set_current_period_state(true);
                        that._go_to_next_profile();
                    } else {
                        that._on_license_not_valid();
                    }
                }
            );
            window.dispatchEvent(evtPK);
        },

        process : function() {
            if(!this.check_should_continue_work(true))
                return;

            var that = this;

            var evtPK = document.createEvent("CustomEvent");
            evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                function(result) {
                    if (result) {
                        that._process();
                    } else {
                        that._on_license_not_valid();
                    }
                }
            );
            window.dispatchEvent(evtPK);
        },

        _process : function() {
            this._process_single_page()
                .then(this._on_process_single_page_finished.bind(this));
        },
        _on_process_single_page_finished : function() {
            if(this.get_visited_in_current_period() >= this.get_visit_limit_per_period()) {
                this.set_next_period_start();
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_FINISHED);
            }

            if(this.check_should_continue_work(false)) {
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_STARTED);
                setTimeout(this._go_to_next_profile.bind(this), er_autovisitor_timeouts.get_random_timeout('go_to_next_contact'));
            } else {
                var diff = this.get_diff_between_now_and_next_period_start();
                if (diff > 0) {
                    setTimeout(this.begin_process.bind(this), diff);
                    new ER_W_Timeout_Clock({
                        timeout : diff,
                        techname : 'autovisitor_next_period',
                        description : 'Start next iteration of auto-visiting'
                    });
                }
            }

        },

        _process_single_page : function() {
            var deferred = $.Deferred();

            var  that = this;

            if(er_utils.is_current_page_deleted_profile()) {
                this._move_first_to_excluded()
                    .then(function() {
                        that.increase_visited_in_current_period(1);
                        deferred.resolve();
                    });
            } else {
                var promise;
                if (er_utils.is_new_style_page())
                    promise = this._process_new_style_page();
                else if (er_utils.is_sales_navigator_profile_page())
                    promise = this._process_sales_navigator_page();
                else
                promise = this._process_old_style_page();

                promise.then(this._mark_first_as_processed.bind(this))
                    .then(function() {
                        that.increase_visited_in_current_period(1);
                        deferred.resolve();
                    });
            }

            return deferred.promise();
        },

        _process_new_style_page : function() {
            var deferred = $.Deferred();

            if(this.is_need_to_extract_profile()) {
                er_profile_extractor.process_single_page()
                    .then(function() {
                        setTimeout(
                            deferred.resolve.bind(deferred),
                            er_utils.getRandomInt(100, 200)
                        );
                    });
            } else {
                setTimeout(
                    deferred.resolve.bind(deferred),
                    er_utils.getRandomInt(3000, 12000)
                );
            }

            return deferred.promise();
        },
        _process_sales_navigator_page : function() {
            return er_sn_profile_helper._export_to_db_current_profile_page();

            /*var deferred = $.Deferred();

            setTimeout(
                deferred.resolve.bind(deferred),
                er_utils.getRandomInt(100, 200)
            );
            return deferred.promise();*/
        },
        _process_old_style_page : function() {
            var deferred = $.Deferred();
            deferred.resolve();
            return deferred.promise();
        },

        _mark_first_as_processed : function() {
            var deferred = $.Deferred();

            er_autovisitor_lists_control.init()
                .then(er_autovisitor_lists_control.get_active_list.bind(er_autovisitor_lists_control))
                .then(function(visit_list) {
                    var first_elem = visit_list.get_the_oldest_visited_visit_info();
                    visit_list.set_id_as_just_visited(first_elem.id);
                    visit_list.save_to_db()
                        .then(deferred.resolve.bind(deferred));
                });

            return deferred.promise();
        },
        _move_first_to_excluded : function() {
            var deferred = $.Deferred();

            er_autovisitor_lists_control.init()
                .then(er_autovisitor_lists_control.get_active_list.bind(er_autovisitor_lists_control))
                .then(function(visit_list) {
                    var first_elem = visit_list.get_the_oldest_visited_visit_info();
                    visit_list.move_ids_from_queue_to_excluded([first_elem.id]);
                    visit_list.save_to_db()
                        .then(deferred.resolve.bind(deferred));
                });

            return deferred.promise();
        },
        _get_current_visit_info_elem : function() {
            var deferred = $.Deferred();

            er_autovisitor_lists_control.init()
                .then(er_autovisitor_lists_control.get_active_list.bind(er_autovisitor_lists_control))
                .then(function(visit_list) {
                    deferred.resolve(visit_list.get_the_oldest_visited_visit_info());
                });

            return deferred.promise();
        },

        _go_to_profile : function(profile_id) {
            var url;
            if (er_utils.is_sales_navigator_profile_id(profile_id))
                url = er_utils.get_profile_url_from_sale_navigator_profile_id(profile_id);
            else if (er_utils.is_new_style_page() || er_utils.is_cached_as_new_style_page())
                url = er_utils._ns_get_profile_url_by_id(profile_id);
            else
                url = er_utils._old_get_profile_url_by_id(profile_id);
            window.location.assign(url);
        },
        _go_to_next_profile : function() {
            var that = this;

            this._get_current_visit_info_elem()
                .then(function(visit_info_elem) {
                    if(visit_info_elem) {
                        that._go_to_profile(visit_info_elem.id);
                    }
                });
        },

        
        
        _on_license_not_valid : function() {
            this.set_mode_autovisitor_visit(false);
        },
    };
/**
 * Created by Alex on 17.03.2017.
 */
//autovisitor_backup_export
var er_autovisitor_backup_export = window.er_autovisitor_backup_export || {
        build_object : function() {
            var deferred = $.Deferred();
            var obj = {};
            obj.lc = this._build_lc();

            this._build_db()
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },
        _build_lc : function() {
            var lc = {};

            lc.er_autovisit_active_id = localStorage.er_autovisit_active_id;
            lc.er_autovisit_lists_ids = localStorage.er_autovisit_lists_ids;
            lc.er_autovisitor_limit_per_period = localStorage.er_autovisitor_limit_per_period;
            lc.er_autovisitor_period_hours = localStorage.er_autovisitor_period_hours;

            return lc;
        },
        _build_db : function() {
            var deferred = $.Deferred();
            var db = {};

            er_autovisitor_db.get_all_lists()
                .then(function(autovisitor) {
                    db.autovisitor = autovisitor;
                    deferred.resolve(db);
                });

            return deferred.promise();
        },
    };
/**
 * Created by Alex on 17.03.2017.
 */
// autovisitor_backup_import
var er_autovisitor_backup_import = window.er_autovisitor_backup_import || {
        import : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj) {
                er_logger.log('SKIPS : Auto-visitor data missing');
                deferred.resolve(true);
                return deferred.promise();
            }

            this._import_db(obj.db)
                .then(function() {
                    that._import_lc(obj.lc);
                    deferred.resolve(true);
                });

            return deferred.promise();
        },

        _import_db : function(db) {
            var deferred = $.Deferred();

            er_autovisitor_db.push_lists(db.autovisitor)
                .then(deferred.resolve.bind(deferred));

            return deferred.promise();
        },

        _import_lc : function(lc) {
            if(lc.er_autovisit_active_id)
                localStorage.er_autovisit_active_id = lc.er_autovisit_active_id;
            else
                delete localStorage.er_autovisit_active_id;

            if(lc.er_autovisit_lists_ids)
                localStorage.er_autovisit_lists_ids = lc.er_autovisit_lists_ids;
            else
                delete localStorage.er_autovisit_lists_ids;

            if(lc.er_autovisitor_limit_per_period)
                localStorage.er_autovisitor_limit_per_period = lc.er_autovisitor_limit_per_period;
            else
                delete localStorage.er_autovisitor_limit_per_period;

            if(lc.er_autovisitor_period_hours)
                localStorage.er_autovisitor_period_hours = lc.er_autovisitor_period_hours;
            else
                delete localStorage.er_autovisitor_period_hours;
        },
    };
/**
 * Created by erinsasha on 22/02/17.
 */
var er_autovisitor_collector = window.er_autovisitor_collector || {
        EVENT_AUTOVISITOR_COLLECT_MODE_SWITCHED_ON : 'ER_EVENT_AUTOVISITOR_COLLECT_MODE_SWITCHED_ON',
        EVENT_AUTOVISITOR_COLLECT_MODE_SWITCHED_OFF : 'ER_EVENT_AUTOVISITOR_COLLECT_MODE_SWITCHED_OFF',

        get_mode_autovisitor_collect : function() {
            return localStorage.er_autovisitor_mode_collect == 'true';
        },
        set_mode_autovisitor_collect : function(value) {
            var evt_name;
            if(value === true || value == 'true' || value == 'TRUE') {
                localStorage.er_autovisitor_mode_collect = 'true';
                evt_name = this.EVENT_AUTOVISITOR_COLLECT_MODE_SWITCHED_ON;
            } else {
                localStorage.er_autovisitor_mode_collect = 'false';
                this.tab_delete_mode();
                evt_name = this.EVENT_AUTOVISITOR_COLLECT_MODE_SWITCHED_OFF;
            }
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(evt_name, true, true, null);
            window.dispatchEvent(evt);
        },

        tab_add_mode : function() {
            er_tabs_control.add_active_mode('er_autovisitor_mode_collect');
        },
        tab_delete_mode : function() {
            er_tabs_control.delete_active_mode('er_autovisitor_mode_collect');
        },
        tab_is_active_in : function() {
            return er_tabs_control.is_mode_active('er_autovisitor_mode_collect');
        },

        is_mode_on_and_tab_active : function() {
            return this.get_mode_autovisitor_collect() && this.tab_is_active_in();
        },
        set_mode_on_and_tab_active : function() {
            this.set_mode_autovisitor_collect(true);
            this.tab_add_mode();
        },

        process : function() {
            if (!this.is_mode_on_and_tab_active())
                return;

            this.process_single_page()
                .then(this._after_single_page_processed.bind(this));
        },

        process_single_page : function() {
            var deferred = $.Deferred();

            if(!this.is_mode_on_and_tab_active()) {
                deferred.reject();
                return deferred.promise();
            }

            er_search_page_helper.wait_people_card_load_and_extract_single_page()
                .then(function(mini_profiles) {
                    er_autovisitor_lists_control.init()
                        .then(er_autovisitor_lists_control.get_active_list.bind(er_autovisitor_lists_control))
                        .then(function(active_list) {
                            var ids = ER_Profile_Mini.static.get_profiles_ids_from_profiles_arr(mini_profiles);

                            active_list.add_ids_to_queue(ids);
                            active_list.save_to_db()
                                .then(function() {
                                    deferred.resolve();
                                });
                        });
                });

            return deferred.promise();
        },

        _after_single_page_processed : function() {
            if (!this.is_mode_on_and_tab_active())
                return;
            var that = this;
            er_search_page_helper.ns_sn_old_load_next_page_deferred()
                .then(function(result) {
                    if (result) {
                        if (er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page())
                            that.process();
                    } else
                        that.set_mode_autovisitor_collect(false);
                });
        },
    };
/**
 * Created by erinsasha on 22/02/17.
 */
var er_autovisitor_lists_control = window.er_autovisitor_lists_control || {
        EVENT_NEW_AUTOVISIT_CREATED : 'ER_EVENT_NEW_AUTOVISIT_CREATED',
        EVENT_AUTOVISIT_DELETED : 'ER_EVENT_AUTOVISIT_DELETED',
        EVENT_ACTIVE_AUTOVISIT_SWITCHED : 'ER_EVENT_ACTIVE_AUTOVISIT_SWITCHED',


        DEFAULT_AUTOVISIT_ID : 'DEFAULT_AUTOVISIT',

        init : function() {
            var deferred = $.Deferred();

            if(this.inited) {
                deferred.resolve();
                return deferred.promise();
            }

            var that = this;
            this._init_create_default_list()
                .then(function() {
                    that.inited = true;
                    deferred.resolve();
                });

            return deferred.promise();
        },
        _init_create_default_list : function() {
            var deferred = $.Deferred();
            if (localStorage.er_autovisit_active_id != null && localStorage.er_autovisit_active_id != '') {
                deferred.resolve();
                return deferred.promise();
            }
            
            var that = this;

            var autovisit = new ER_AutoVisit_List({ id : this.DEFAULT_AUTOVISIT_ID });
            autovisit.save_to_db()
                .then(function() {
                    that._add_list_id_to_list(that.DEFAULT_AUTOVISIT_ID);
                    localStorage.er_autovisit_active_id = that.DEFAULT_AUTOVISIT_ID;

                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_NEW_AUTOVISIT_CREATED, true, true, autovisit);
                    window.dispatchEvent(evt);

                    evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_ACTIVE_AUTOVISIT_SWITCHED, true, true, that.DEFAULT_AUTOVISIT_ID);
                    window.dispatchEvent(evt);

                    deferred.resolve();
                });

            return deferred.promise();
        },

        get_active_list_id : function() {
            return localStorage.er_autovisit_active_id;
        },
        set_active_list_id : function(id) {
            if (localStorage.er_autovisit_active_id == id)
                return;

            localStorage.er_autovisit_active_id = id;

            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_ACTIVE_AUTOVISIT_SWITCHED, true, true, id);
            window.dispatchEvent(evt);
        },
        is_default_list_active : function() {
            return this.DEFAULT_AUTOVISIT_ID == this.get_active_list_id();
        },

        get_active_list : function() {
            return er_autovisitor_db.get_list(this.get_active_list_id());
        },
        create_new_list_with_id : function(id) {
            if(this.is_list_with_id_exists(id))
                return er_autovisitor_db.get_list(id);

            var deferred = $.Deferred();

            var that = this;

            var autovisit = new ER_AutoVisit_List({ id : id });
            autovisit.save_to_db()
                .then(function() {
                    that._add_list_id_to_list(id);

                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_NEW_AUTOVISIT_CREATED, true, true, autovisit);
                    window.dispatchEvent(evt);

                    deferred.resolve(autovisit);
                });

            return deferred.promise();
        },
        create_new_list_as_active_with_id : function(id) {
            var deferred = $.Deferred();

            var that = this;
            this.create_new_list_with_id(id)
                .then(function(list) {
                    if(list) {
                        that.set_active_list_id(id);
                        deferred.resolve(list);
                    }
                });

            return deferred.promise();
        },

        get_all_lists_ids : function() {
            var list = localStorage.er_autovisit_lists_ids;
            if (!list || list == '') {
                list = [];
                localStorage.er_autovisit_lists_ids = JSON.stringify(list);
            } else {
                list = JSON.parse(list);
            }
            return list;
        },
        is_list_with_id_exists : function(id) {
            var list = this.get_all_lists_ids();
            return list.indexOf(id) >= 0;
        },
        _add_list_id_to_list : function(id) {
            var list = this.get_all_lists_ids();
            if(list.indexOf(id) < 0) {
                list.push(id);
                localStorage.er_autovisit_lists_ids = JSON.stringify(list);
            }
        },
        delete_list : function(id) {
            var deferred = $.Deferred();

            var list = this.get_all_lists_ids();
            var id_pos = list.indexOf(id);
            if (id_pos < 0 || id == this.DEFAULT_AUTOVISIT_ID) {
                deferred.resolve(false);
                return deferred.promise();
            }

            if(id == this.get_active_list_id()) {
                this.set_active_list_id(this.DEFAULT_AUTOVISIT_ID);
            }

            list.splice(id_pos, 1)
            localStorage.er_autovisit_lists_ids = JSON.stringify(list);

            var that = this;

            er_autovisitor_db.delete_list(id)
                .then(function() {
                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_AUTOVISIT_DELETED, true, true, id);
                    window.dispatchEvent(evt);

                    deferred.resolve(true);
                });

            return deferred.promise();
        },
    };
/**
 * Created by erinsasha on 28/08/17.
 */
var er_autovisitor_lm_callbacks = window.er_autovisitor_lm_callbacks || {
    get_callbacks : function() {
        return {
            get_lists_deferred : this.get_lists_deferred.bind(this), // get_lists_deferred () // return ({id : id, name : name}, error_message)
            get_sublists : this.get_sublists.bind(this), // get_sublists() // return {id : id, name : name}
            get_sublists_counters_deferred : this.get_sublists_counters_deferred.bind(this), // get_sublists_counters_deferred (list_id) // ({id : sublist_id, counter : counter }, error_message)
            get_create_new_deferred : this.get_create_new_deferred.bind(this), // get_create_new_deferred (list_name) // return (list_id, list_name, error_message)
            get_current_list_id : this.get_current_list_id.bind(this), // get_current_list_id () // return list_id
            get_ids_deferred : this.get_ids_deferred.bind(this), // get_ids_deferred (list_id, sublist_id) // return ids
            perform_action_return_counter_deferred : this.perform_action_return_counter_deferred.bind(this), // perform_action_return_counter_deferred (list_id, sublist_id, action, ids) // return counter of target
        }
    },

        get_lists_deferred : function() {
            var deferred = $.Deferred();
            var lists = er_autovisitor_lists_control.get_all_lists_ids();
            var result = [];
            for(var i= 0, list_id; i<lists.length; i++) {
                list_id = lists[i];
                result.push({id : list_id, name : list_id});
            }
            deferred.resolve(result);
            return deferred.promise();
        },
        get_sublists : function() {
            return [
                {id : 'queue', name : 'Auto-Visiting Queue'},
                {id : 'visited', name : 'Visited'},
                {id : 'excluded', name : 'Excluded'},
            ];
        },
        get_sublists_counters_deferred : function(list_id) {
            var deferred = $.Deferred();
            er_autovisitor_db.get_list(list_id)
                .then(function(auto_visit_list){
                    var result = [
                        {id : 'queue', counter : auto_visit_list.get_queue_length()},
                        {id : 'visited', counter : auto_visit_list.get_visited_length()},
                        {id : 'excluded', counter : auto_visit_list.get_excluded_length()}
                    ];
                    deferred.resolve(result);
                });
            return deferred.promise();
        },
        get_create_new_deferred : function(list_name) {
            var deferred = $.Deferred();
            if(er_autovisitor_lists_control.is_list_with_id_exists(list_name)) {
                deferred.resolve(null, null, 'List already exists');
            } else {
                er_autovisitor_lists_control.create_new_list_with_id(list_name)
                    .then(function(auto_visit_list) {
                        deferred.resolve(auto_visit_list.id, auto_visit_list.name);
                    });
            }

            return deferred.promise();
        },
        get_current_list_id : function() {
            return er_autovisitor_lists_control.get_active_list_id();
        },
        get_ids_deferred : function(list_id, sublist_id) {
            var deferred = $.Deferred();
            er_autovisitor_db.get_list(list_id)
                .then(function(auto_visit_list){
                    var result;
                    switch (sublist_id) {
                        case  'queue' : result = auto_visit_list.get_all_ids_in_queue(); break;
                        case  'visited' : result = auto_visit_list.get_all_ids_in_visited(); break;
                        case  'excluded' : result = auto_visit_list.get_all_ids_in_excluded(); break;
                    }

                    deferred.resolve(result);
                });
            return deferred.promise();
        },
        perform_action_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();
            er_autovisitor_db.get_list(list_id)
                .then(function(auto_visit_list){

                    var target_ids;

                    switch (sublist_id) {
                        case  'queue' : target_ids = auto_visit_list.get_all_ids_in_queue(); break;
                        case  'visited' : target_ids = auto_visit_list.get_all_ids_in_visited(); break;
                        case  'excluded' : target_ids = auto_visit_list.get_all_ids_in_excluded(); break;
                    }

                    switch (action) {
                        case 'add' : target_ids = er_utils.get_array_merge(target_ids, auto_visit_list.get_uniq(ids)); break;
                        case 'keep_the_same' : target_ids = er_utils.get_array_intersection(target_ids, ids); break;
                        case 'delete_the_same' : target_ids = er_utils.get_array_uniq(target_ids, ids); break;
                        case 'replace' : target_ids = ids; break;
                        case 'add_all' : target_ids = er_utils.get_array_merge(target_ids, ids); break;
                    }

                    switch (sublist_id) {
                        case  'queue' : auto_visit_list.set_ids_in_queue(target_ids); break;
                        case  'visited' : auto_visit_list.set_ids_in_visited(target_ids); break;
                        case  'excluded' : auto_visit_list.set_ids_in_excluded(target_ids); break;
                    }

                    auto_visit_list.save_to_db()
                        .then(deferred.resolve.bind(deferred));
                });
            return deferred.promise();
        },
        perform_action_return_counter_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();

            this.perform_action_deferred(list_id, sublist_id, action, ids)
                .then(function(auto_visit_list) {
                    var new_counter;

                    switch (sublist_id) {
                        case  'queue' : new_counter = auto_visit_list.get_queue_length(); break;
                        case  'visited' : new_counter = auto_visit_list.get_visited_length(); break;
                        case  'excluded' : new_counter = auto_visit_list.get_excluded_length(); break;
                    }

                    deferred.resolve(new_counter);
                });

            return deferred.promise();
        },
};
/**
 * Created by erinsasha on 12/08/17.
 */

var er_autovisitor_timeouts = window.er_autovisitor_timeouts || {
        const_timeouts_names : {
            go_to_next_contact : 'Go to next contact',

        },
        const_timeout_fast : {
            go_to_next_contact : {min : 10000, max : 20000}
        },
        const_timeout_safe : {
            go_to_next_contact : {min : 30000, max : 600000}
        },

        init : function() {
            if(this.started)
                return;
            this.started = true;
            this._init_from_local_storage();
        },
        _init_from_local_storage : function() {
            if(this.current_timeouts)
                return;

            var current_timeouts = localStorage.er_autovisitor_timeouts;
            if(current_timeouts && current_timeouts != '') {
                this.current_timeouts = JSON.parse(current_timeouts);
                this.restore_missed_values();
            } else
                this.save_timeouts_from_object(this.const_timeout_fast);
        },
        restore_missed_values : function() {
            var timeouts_tech_names = Object.keys(this.const_timeout_fast);

            var tech_name;

            for(var i=0; i<timeouts_tech_names.length; i++) {
                tech_name = timeouts_tech_names[i];
                if(!this.current_timeouts[tech_name])
                    this.current_timeouts[tech_name] = this.const_timeout_fast[tech_name];
            }
        },
        save_timeouts_from_object : function(obj) {
            this.current_timeouts = er_utils.get_object_copy(obj);
            this.save_current_timeouts_to_local_storage();
        },
        save_current_timeouts_to_local_storage : function() {
            localStorage.er_autovisitor_timeouts = JSON.stringify(this.current_timeouts);
        },
        get_timeouts : function() {
            this.init();
            return this.current_timeouts;
        },
        get_random_timeout : function(timeout_name, dont_show_clock) {
            this.init();
            var timeout = this.current_timeouts[timeout_name];
            var rt = er_utils.getRandomInt(timeout.min, timeout.max);

            if(!dont_show_clock) {
                new ER_W_Timeout_Clock({
                    timeout : rt,
                    techname : timeout_name,
                    description : this.const_timeouts_names[timeout_name]
                })
            }

            return rt;
        },
    };
/**
 * Created by erinsasha on 22/02/17.
 */
var er_autovisitor_view = window.er_autovisitor_view || {
        type : 'er_autovisitor_view',
        tittle : 'Profiles Auto-Visitor',

        init_main : function() {
            if (this.inited
            // || (!er_utils.is_new_style_page() && !er_utils.is_sales_navigator_page())
            )
                return;

            this.jq_main = $(this._HTML_build_main());

            this._add_handlers();

            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);


            if (
                (er_search_page_helper.is_search_page()
                    && er_autovisitor_collector.is_mode_on_and_tab_active()
                )
                || (er_utils.is_profile_page()
                    &&  er_autovisitor.is_mode_on_and_tab_active()
                )
            )
                er_main_view.show_settings(this.type);

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            html += this._HTML_build_tabs_pannel();

            html += this._HTML_build_content_collect();
            html += this._HTML_build_content_visit();
            html += this._HTML_build_content_export();

            html += '</div>';
            return html;
        },
        _HTML_build_tabs_pannel : function() {
            var html = '<div class="tabs_pannel">';
            var collect_set = 'set', visit_set = '';

            if (!er_autovisitor_collector.is_mode_on_and_tab_active()
                && er_autovisitor.is_mode_on_and_tab_active()) {
                collect_set = '';
                visit_set = 'set';
            }

            html += '<span class="tab '+collect_set+'" data-tab="collect"></span>';

            html += '<span class="tab '+visit_set+'" data-tab="visit"></span>';

            html += '<span class="tab" data-tab="export"></span>';

            html += '</div>';

            return html;
        },

        _HTML_build_content_collect : function() {
            var collect_set = 'set';

            if (!er_autovisitor_collector.is_mode_on_and_tab_active()
                && er_autovisitor.is_mode_on_and_tab_active()) {
                collect_set = '';
            }

            var html = '<div class="content '+collect_set+'" data-type="collect">';
            html += '</div>';
            return html;
        },
        _HTML_build_content_visit : function() {
            var visit_set = '';

            if (!er_autovisitor_collector.is_mode_on_and_tab_active()
                && er_autovisitor.is_mode_on_and_tab_active()) {
                visit_set = 'set';
            }

            var html = '<div class="content '+visit_set+'" data-type="visit">';

            html += '</div>';
            return html;
        },
        _HTML_build_content_export : function() {
            var html = '<div class="content" data-type="export">';


            html += '</div>';
            return html;
        },

        _add_handlers : function() {
            new ER_Widget_How_To({
                jq_parent : this.jq_main,
                links : [ER_Widget_How_To.links.er_autovisitor_view]
            });

            this.jq_main.children('.tabs_pannel').children('.tab').click(this._on_click_tab.bind(this));

            var jq_content_collect = this.jq_main.find('.content[data-type=collect]');
            var jq_content_visit = this.jq_main.find('.content[data-type=visit]');
            var jq_content_export = this.jq_main.find('.content[data-type=export]');

            this.er_Widget_Autovisit_Collect = new ER_Widget_Autovisit_Collect({
                jq_parent : jq_content_collect
            });

            this.er_Widget_Autovisit_Visit = new ER_Widget_Autovisit_Visit({
                jq_parent : jq_content_visit
            });

            this.er_Widget_Autovisit_Export = new ER_Widget_Autovisit_Export({
                jq_parent : jq_content_export
            });
        },

        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },
        _on_click_tab : function(event) {
            var jq_tab = $(event.target);
            if(jq_tab.hasClass('set'))
                return;

            jq_tab.siblings('.tab.set').removeClass('set');
            this.jq_main.children('.content.set').removeClass('set');

            jq_tab.addClass('set');
            this.jq_main.children('.content[data-type='+jq_tab.attr('data-tab')+']').addClass('set');
        },
    };
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_autovisitor_view._on_main_view_ready_for_sub_view() });
/**
 * Created by erinsasha on 22/02/17.
 */
var er_autovisitor_db = window.er_autovisitor_db || {
        push_list : function(list) {
            console.log('er_autovisitor_db->push_list : START');
            console.log(list);

            var deferred = $.Deferred();

            if(!(list instanceof ER_AutoVisit_List))
                list = new ER_AutoVisit_List(list);

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_list(db, deferred, list);
            });

            return deferred.promise();
        },
        _push_list : function(db, deferred, list) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_AUTOVISIT_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_AUTOVISIT_LIST);

            objectStore.put(list);

            transaction.oncomplete = function(event) {
                console.log('er_autovisitor_db->push_list : SUCCESS RESOLVE');
                console.log("Transaction completed.");
                deferred.resolve(list);
            };

            transaction.onerror = function(event) {
                console.log("Transaction error.");
                console.log(event);
                console.log('er_autovisitor_db->push_list : REJECT');
                deferred.reject();
            };
        },

        push_lists : function(lists) {
            var deferred = $.Deferred();

            var v_lists = [];
            for(var i=0,list; i<lists.length; i++) {
                list = lists[i];
                if(!(list instanceof ER_AutoVisit_List))
                    list = new ER_AutoVisit_List(list);
                v_lists.push(list);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_lists(db, deferred, v_lists);
            });

            return deferred.promise();
        },
        _push_lists : function(db, deferred, lists){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_AUTOVISIT_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_AUTOVISIT_LIST);

            for(var i= 0; i<lists.length; i++) {
                objectStore.put(lists[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },
        
        get_list : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_list(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_list : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_AUTOVISIT_LIST]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_AUTOVISIT_LIST);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var r = request.result;
                if(r)
                    r = new ER_AutoVisit_List(r);
                deferred.resolve(r);
            };
        },
        get_all_lists : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all_lists(db, deferred);
            });

            return deferred.promise();
        },
        _get_all_lists : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_AUTOVISIT_LIST).objectStore(er_indexeddb.CONST_TABLE_AUTOVISIT_LIST);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    result.push(new ER_AutoVisit_List(cursor.value));
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
        delete_list : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._delete_list(db, deferred, id);
            });

            return deferred.promise();
        },
        _delete_list : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_AUTOVISIT_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_AUTOVISIT_LIST);

            var request = objectStore.delete(id);

            request.onsuccess = function(event) {
                console.log("Record has been deleted from your database.");
                deferred.resolve();
            };

            request.onerror = function(event) {
                console.log("Unable to delete data");
                deferred.resolve('error'); // Все равно продолжаем нормальную работу
            };
        },
    };
/**
 * Created by erinsasha on 12/02/17.
 */
var er_broadcast_db = window.er_broadcast_db || {
        push_broadcast : function(broadcast) {
            console.log('er_broadcast_db->push_broadcast : START');
            console.log(broadcast);

            var deferred = $.Deferred();

            if(!(broadcast instanceof ER_Broadcast))
                broadcast = new ER_Broadcast(broadcast);

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_broadcast(db, deferred, broadcast);
            });

            return deferred.promise();
        },
        _push_broadcast : function(db, deferred, broadcast) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_BROADCAST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_BROADCAST);

            objectStore.put(broadcast);

            transaction.oncomplete = function(event) {
                console.log('er_broadcast_db->push_broadcast : SUCCESS RESOLVE');
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                console.log("Transaction error.");
                console.log(event);
                console.log('er_broadcast_db->push_broadcast : REJECT');
                deferred.reject();
            };
        },

        push_broadcasts : function(broadcasts) {
            var deferred = $.Deferred();

            var v_broadcasts = [];
            for(var i=0,broadcast; i<broadcasts.length; i++) {
                broadcast = broadcasts[i];
                if(!(broadcast instanceof ER_Broadcast))
                    broadcast = new ER_Broadcast(broadcast);
                v_broadcasts.push(broadcast);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_broadcasts(db, deferred, v_broadcasts);
            });

            return deferred.promise();
        },
        _push_broadcasts : function(db, deferred, broadcasts){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_BROADCAST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_BROADCAST);

            for(var i= 0; i<broadcasts.length; i++) {
                objectStore.put(broadcasts[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },
        
        get_broadcast : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_broadcast(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_broadcast : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_BROADCAST]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_BROADCAST);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var r = request.result;
                if(r)
                    r = new ER_Broadcast(r);
                deferred.resolve(r);
            };
        },
        get_all : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all(db, deferred);
            });

            return deferred.promise();
        },
        _get_all : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_BROADCAST).objectStore(er_indexeddb.CONST_TABLE_BROADCAST);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    result.push(new ER_Broadcast(cursor.value));
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
    };
/**
 * Created by erinsasha on 01/03/17.
 */
var er_connect_list_db = window.er_connect_list_db || {
        push_list : function(list) {
            console.log('er_connect_list_db->push_list : START');
            console.log(list);

            var deferred = $.Deferred();

            if(!(list instanceof ER_Connect_List))
                list = new ER_Connect_List(list);

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_list(db, deferred, list);
            });

            return deferred.promise();
        },
        _push_list : function(db, deferred, list) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_CONNECT_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_CONNECT_LIST);

            objectStore.put(list);

            transaction.oncomplete = function(event) {
                console.log('er_connect_list_db->push_list : SUCCESS RESOLVE');
                console.log("Transaction completed.");
                deferred.resolve(list);
            };

            transaction.onerror = function(event) {
                console.log("Transaction error.");
                console.log(event);
                console.log('er_connect_list_db->push_list : REJECT');
                deferred.reject();
            };
        },

        push_lists : function(lists) {
            var deferred = $.Deferred();

            var v_lists = [];
            for(var i=0,list; i<lists.length; i++) {
                list = lists[i];
                if(!(list instanceof ER_Connect_List))
                    list = new ER_Connect_List(list);
                v_lists.push(list);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_lists(db, deferred, v_lists);
            });

            return deferred.promise();
        },
        _push_lists : function(db, deferred, lists){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_CONNECT_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_CONNECT_LIST);

            for(var i= 0; i<lists.length; i++) {
                objectStore.put(lists[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },
        
        get_list : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_list(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_list : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_CONNECT_LIST]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_CONNECT_LIST);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var r = request.result;
                if(r)
                    r = new ER_Connect_List(r);
                deferred.resolve(r);
            };
        },
        get_all_lists : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all_lists(db, deferred);
            });

            return deferred.promise();
        },
        _get_all_lists : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_CONNECT_LIST).objectStore(er_indexeddb.CONST_TABLE_CONNECT_LIST);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    result.push(new ER_Connect_List(cursor.value));
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
        delete_list : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._delete_list(db, deferred, id);
            });

            return deferred.promise();
        },
        _delete_list : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_CONNECT_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_CONNECT_LIST);

            var request = objectStore.delete(id);

            request.onsuccess = function(event) {
                console.log("Record has been deleted from your database.");
                deferred.resolve();
            };

            request.onerror = function(event) {
                console.log("Unable to delete data");
                deferred.resolve('error'); // Все равно продолжаем нормальную работу
            };
        },
    };
/**
 * Created by erinsasha on 21/08/17.
 */
var er_endorse_db = window.er_endorse_db || {
        push_endorse : function(endorse) {
            console.log('er_endorse_db->push_endorse : START');
            console.log(endorse);

            var deferred = $.Deferred();

            if(!(endorse instanceof ER_Endorse))
                endorse = new ER_Endorse(endorse);

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_endorse(db, deferred, endorse);
            });

            return deferred.promise();
        },
        _push_endorse : function(db, deferred, endorse) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_ENDORSE], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_ENDORSE);

            objectStore.put(endorse);

            transaction.oncomplete = function(event) {
                console.log('er_endorse_db->push_endorse : SUCCESS RESOLVE');
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                console.log("Transaction error.");
                console.log(event);
                console.log('er_endorse_db->push_endorse : REJECT');
                deferred.reject();
            };
        },

        push_endorses : function(endorses) {
            var deferred = $.Deferred();

            var v_endorses = [];
            for(var i=0,endorse; i<endorses.length; i++) {
                endorse = endorses[i];
                if(!(endorse instanceof ER_Endorse))
                    endorse = new ER_Endorse(endorse);
                v_endorses.push(endorse);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_endorses(db, deferred, v_endorses);
            });

            return deferred.promise();
        },
        _push_endorses : function(db, deferred, endorses){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_ENDORSE], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_ENDORSE);

            for(var i= 0; i<endorses.length; i++) {
                objectStore.put(endorses[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },

        get_endorse : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_endorse(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_endorse : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_ENDORSE]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_ENDORSE);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var r = request.result;
                if(r)
                    r = new ER_Endorse(r);
                deferred.resolve(r);
            };
        },
        get_all : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all(db, deferred);
            });

            return deferred.promise();
        },
        _get_all : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_ENDORSE).objectStore(er_indexeddb.CONST_TABLE_ENDORSE);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    result.push(new ER_Endorse(cursor.value));
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
    };
/**
 * Created by erinsasha on 04/12/16.
 */
var er_indexeddb = window.er_indexeddb || {
    CONST_TABLE_MINI_PROFILES : 'mbroadcast-profiles',
    CONST_TABLE_INVITED : 'invited',
    CONST_TABLE_BROADCAST : 'broadcast',
    CONST_TABLE_PROFILES : 'profiles',
    CONST_TABLE_PROFILES_LIST : 'profiles-list',
    CONST_TABLE_PROFILES_LIST_OF_LIST : 'profiles-list-of-list',
    CONST_TABLE_SALES_NAV_ID_MAP : 'sales-nav-id-map',
    CONST_TABLE_AUTOVISIT_LIST : 'autovisit-list',
    CONST_TABLE_CONNECT_LIST : 'connect-list',
    CONST_TABLE_ENDORSE : 'endorse',

    db : null,
    db_version : 16,

    init_db : function() {
        var deferred = $.Deferred();
        if (this.db) {
            deferred.resolve(this.db);
            return deferred.promise();
        }

        window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;

        window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
        window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;

        var that = this;

        var request = window.indexedDB.open("er_indexeddb", this.db_version);

        request.onerror = function(event) {
            console.log("error: ");
            deferred.reject();
        };

        request.onsuccess = function(event) {
            that.db = request.result;
            console.log("success: "+ that.db);
            deferred.resolve(that.db);
        };

        request.onupgradeneeded = function(event) {
            that.db = event.target.result;

            // http://stackoverflow.com/questions/38886385/check-if-indexeddb-index-already-exists

            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_MINI_PROFILES)) {
                that.db.createObjectStore(that.CONST_TABLE_MINI_PROFILES, {keyPath: "id"});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_INVITED)) {
                that.db.createObjectStore(that.CONST_TABLE_INVITED, {keyPath: "id"});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_PROFILES)) {
                var objectStore_TABLE_PROFILES = that.db.createObjectStore(that.CONST_TABLE_PROFILES, {keyPath: "id"});
                objectStore_TABLE_PROFILES.createIndex("id","id", {unique:false});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_PROFILES_LIST)) {
                var objectStore_TABLE_PROFILES_LIST = that.db.createObjectStore(that.CONST_TABLE_PROFILES_LIST, {keyPath: "id"});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_PROFILES_LIST_OF_LIST)) {
                var objectStore_TABLE_PROFILES_LIST_OF_LIST = that.db.createObjectStore(that.CONST_TABLE_PROFILES_LIST_OF_LIST, {keyPath: "id"});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_BROADCAST)) {
                var objectStore_TABLE_BROADCAST = that.db.createObjectStore(that.CONST_TABLE_BROADCAST, {keyPath: "id"});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_SALES_NAV_ID_MAP)) {
                var objectStore_TABLE_SALES_NAV_ID_MAP = that.db.createObjectStore(that.CONST_TABLE_SALES_NAV_ID_MAP, {keyPath: "id"});
                objectStore_TABLE_SALES_NAV_ID_MAP.createIndex("id","id", {unique:false});
                objectStore_TABLE_SALES_NAV_ID_MAP.createIndex("snid","snid", {unique:false});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_AUTOVISIT_LIST)) {
                var objectStore_TABLE_AUTOVISIT_LIST = that.db.createObjectStore(that.CONST_TABLE_AUTOVISIT_LIST, {keyPath: "id"});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_CONNECT_LIST)) {
                var objectStore_TABLE_CONNECT_LIST = that.db.createObjectStore(that.CONST_TABLE_CONNECT_LIST, {keyPath: "id"});
            }
            if(!that.db.objectStoreNames.contains(that.CONST_TABLE_ENDORSE)) {
                var objectStore_TABLE_ENDORSE = that.db.createObjectStore(that.CONST_TABLE_ENDORSE, {keyPath: "id"});
            }
        };

        return deferred.promise();
    },
};
/**
 * Created by erinsasha on 04/12/16.
 */
er_inviteddb = window.er_inviteddb || {
    push_id : function(id) {
        er_logger.log('START er_inviteddb.push_id ID='+id);
        var deferred = $.Deferred();

        var that = this;
        er_indexeddb.init_db().then(function(db) {
            that._push_id(db, deferred, id);
        });

        return deferred.promise();
    },
    _push_id : function(db, deferred, id) {
        var transaction = db.transaction([er_indexeddb.CONST_TABLE_INVITED], "readwrite");
        var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_INVITED);

        var d =  new Date();
        objectStore.put({id : id, t : d.getTime()});

        transaction.oncomplete = function(event) {
            console.log("Transaction completed.");
            er_logger.log('END er_inviteddb.push_id ID='+id);
            deferred.resolve();
        };

        transaction.onerror = function(event) {
            console.log("Transaction completed.");
            er_logger.log(event);
            er_logger.log('END with ERROR er_inviteddb.push_id ID='+id);
        };
    },

        push_ids : function(ids) {
            var deferred = $.Deferred();

            var v_ids = [];
            for(var i=0,id; i<ids.length; i++) {
                id = ids[i];
                if(id) {
                    if (typeof id == 'string' || typeof id == 'number') {
                        id = {id : id, t : (new Date).getTime()}
                    }
                    v_ids.push(id);
                }
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_ids(db, deferred, v_ids);
            });

            return deferred.promise();
        },
        _push_ids : function(db, deferred, ids){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_INVITED], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_INVITED);

            for(var i= 0; i<ids.length; i++) {
                objectStore.put(ids[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },    
        
    get_all_invited_ids : function() {
        var deferred = $.Deferred();

        var that = this;
        er_indexeddb.init_db().then(function(db) {
            that._get_all_invited_ids(db, deferred);
        });

        return deferred.promise();
    },
    _get_all_invited_ids : function(db, deferred) {
        var result = [];

        var objectStore = db.transaction(er_indexeddb.CONST_TABLE_INVITED).objectStore(er_indexeddb.CONST_TABLE_INVITED);

        objectStore.openCursor().onsuccess = function(event) {
            var cursor = event.target.result;

            if (cursor) {
                result.push(cursor.key);
                cursor.continue();
            } else {
                deferred.resolve(result);
            }
        };
    },
    is_invited : function(id) {
        er_logger.log('START er_inviteddb.is_invited with ID='+id);
        var deferred = $.Deferred();

        var that = this;
        er_indexeddb.init_db().then(function(db) {
            that._is_invited(db, deferred, id);
        });

        return deferred.promise();
    },
    _is_invited : function(db, deferred, id) {
        var transaction = db.transaction([er_indexeddb.CONST_TABLE_INVITED]);
        var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_INVITED);
        var request = objectStore.get(id);
        request.onerror = function(event) {
            er_logger.log(event);
            deferred.resolve(false);
            er_logger.log('END er_inviteddb.is_invited');
        };
        request.onsuccess = function(event) {
            deferred.resolve(!!request.result);
            er_logger.log('END er_inviteddb.is_invited');
        };
    },
    delete_all_invited_ids : function() {
        var deferred = $.Deferred();

        var that = this;
        er_indexeddb.init_db().then(function(db) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_INVITED], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_INVITED);

            // clear all the data out of the object store
            var objectStoreRequest = objectStore.clear();

            objectStoreRequest.onsuccess = function(event) {
                // report the success of our clear operation
                deferred.resolve();
            };

        });

        return deferred.promise();
    },
};
/**
 * Created by erinsasha on 10/02/17.
 */
var er_mini_profiles_db = window.er_mini_profiles_db || {
        push_profile : function(profile) {
            var deferred = $.Deferred();

            if(!(profile instanceof ER_Profile_Mini))
                profile = new ER_Profile_Mini(profile);

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_profile(db, deferred, profile);
            });

            return deferred.promise();
        },
        _push_profile : function(db, deferred, profile) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_MINI_PROFILES], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_MINI_PROFILES);

            var d =  new Date();
            profile.t = d.getTime();
            objectStore.put(profile);

            transaction.oncomplete = function(event) {
                console.log("er_mini_profiles_db._push_profile Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                console.log("er_mini_profiles_db._push_profile Transaction error.");
                console.log(event);
                deferred.reject();
            };
        },
        push_profiles : function(profiles) {
            var deferred = $.Deferred();

            var v_profiles = [];
            for(var i=0,profile; i<profiles.length; i++) {
                profile = profiles[i];
                if(!(profile instanceof ER_Profile_Mini))
                    profile = new ER_Profile_Mini(profile);
                v_profiles.push(profile);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_profiles(db, deferred, v_profiles);
            });

            return deferred.promise();
        },
        _push_profiles : function(db, deferred, profiles){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_MINI_PROFILES], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_MINI_PROFILES);

            for(var i= 0; i<profiles.length; i++) {
                objectStore.put(profiles[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },
        get_profile : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_profile(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_profile : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_MINI_PROFILES]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_MINI_PROFILES);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var profile = request.result;
                if (profile)
                    profile = new ER_Profile_Mini(profile);
                deferred.resolve(profile);
            };
        },
        get_profiles : function(ids) {
            console.log('START er_mini_profiles_db.get_profiles');
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                //that._get_profiles(db, deferred, ids);
                that._get_profiles_method2(db, deferred, ids);
            });

            return deferred.promise();
        },
        _get_profiles : function(db, deferred, ids) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_MINI_PROFILES).objectStore(er_indexeddb.CONST_TABLE_MINI_PROFILES);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    var profile = cursor.value;

                    if(ids.indexOf(profile.id) >= 0)
                        result.push(new ER_Profile_Mini(profile));
                    cursor.continue();
                } else {
                    console.log('END er_mini_profiles_db.get_profiles');
                    deferred.resolve(result);
                }
            };
        },
        _get_profiles_method2 : function(db, deferred, ids) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_MINI_PROFILES]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_MINI_PROFILES);

            var result = [];

            this._get_profiles_method2_recur(deferred, objectStore, result, ids, 0);
        },
        _get_profiles_method2_recur : function(deferred, objectStore, result, ids, i) {
            if(ids.length <= i) {
                console.log('END er_mini_profiles_db.get_profiles');
                deferred.resolve(result);
                return;
            }

            var that = this;

            var id;
            --i;
            do {
                ++i;
                id = ids[i];
            } while(id === null);

            var request;
            try {
                request = objectStore.get(id);
            } catch (e) {
                console.error(e);
                console.log('id='+id);
                deferred.resolve(false);
                return;
            }

            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var profile = request.result;
                if (profile) {
                    profile = new ER_Profile_Mini(profile);
                    result.push(profile);
                }

                that._get_profiles_method2_recur(deferred, objectStore, result, ids, i+1);
            };

        },

        get_all_profiles : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all_profiles(db, deferred);
            });

            return deferred.promise();
        },
        _get_all_profiles : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_MINI_PROFILES).objectStore(er_indexeddb.CONST_TABLE_MINI_PROFILES);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    var profile = cursor.value;
                    if (profile)
                        profile = new ER_Profile_Mini(profile);
                    result.push(profile);
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
        delete : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._delete(db, deferred, id);
            });

            return deferred.promise();
        },
        _delete : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_MINI_PROFILES], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_MINI_PROFILES);

            var request = objectStore.delete(id);

            request.onsuccess = function(event) {
                console.log("Record has been deleted from your database.");
                deferred.resolve();
            };

            request.onerror = function(event) {
                console.log("Unable to delete data");
                deferred.resolve('error'); // Все равно продолжаем нормальную работу
            };
        },
    };
/**
 * Created by erinsasha on 12/01/17.
 */
var er_profiles_list_db = window.er_profiles_list_db || {
        push_list : function(list) {
            er_logger.log('er_profiles_list_db->push_list : START');
            er_logger.log(list);

            var deferred = $.Deferred();

            if(!(list instanceof ER_Profiles_List))
                list = new ER_Profiles_List(list);

            er_logger.log('list.indexed_ids.length = ' + list.indexed_ids.length);
            er_logger.log('list.index_queue.length = ' + list.index_queue.length);

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_list(db, deferred, list);
            });

            return deferred.promise();
        },
        _push_list : function(db, deferred, list) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST);

            objectStore.put(list);

            transaction.oncomplete = function(event) {
                er_logger.log('er_profiles_list_db->push_list : SUCCESS RESOLVE');
                er_logger.log("Transaction completed.");
                deferred.resolve(list);
            };

            transaction.onerror = function(event) {
                er_logger.log("Transaction error.");
                er_logger.log(event);
                er_logger.log('er_profiles_list_db->push_list : REJECT');
                deferred.reject();
            };
        },

        push_lists : function(lists) {
            var deferred = $.Deferred();

            var v_lists = [];
            for(var i=0,list; i<lists.length; i++) {
                list = lists[i];
                if(!(list instanceof ER_Profiles_List))
                    list = new ER_Profiles_List(list);
                v_lists.push(list);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_lists(db, deferred, v_lists);
            });

            return deferred.promise();
        },
        _push_lists : function(db, deferred, lists){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST);

            for(var i= 0; i<lists.length; i++) {
                objectStore.put(lists[i]);
            }

            transaction.oncomplete = function(event) {
                er_logger.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                er_logger.log("Transaction error.");
                er_logger.log(event);
            };
        },
        
        get_list : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_list(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_list : function(db, deferred, id) {
            er_logger.log('profiles_list_db->_get_list id=' + id);
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES_LIST]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var r = request.result;
                if(r)
                    r = new ER_Profiles_List(r);
                er_logger.log('profiles_list');
                er_logger.log(r);
                deferred.resolve(r);
            };
        },
        get_all_lists : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all_lists(db, deferred);
            });

            return deferred.promise();
        },
        _get_all_lists : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_PROFILES_LIST).objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    result.push(new ER_Profiles_List(cursor.value));
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
        delete_list : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._delete_list(db, deferred, id);
            });

            return deferred.promise();
        },
        _delete_list : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST);

            var request = objectStore.delete(id);

            request.onsuccess = function(event) {
                er_logger.log("Record has been deleted from your database.");
                deferred.resolve();
            };

            request.onerror = function(event) {
                er_logger.log("Unable to delete data");
                deferred.resolve('error'); // Все равно продолжаем нормальную работу
            };
        },
    };
/**
 * Created by erinsasha on 14/01/17.
 */
var er_profiles_list_of_list_db = window.er_profiles_list_of_list_db || {
        push_list : function(list) {
            var deferred = $.Deferred();

            if(!(list instanceof ER_Profiles_Mini_List))
                list = new ER_Profiles_Mini_List(list);

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_list(db, deferred, list);
            });

            return deferred.promise();
        },
        _push_list : function(db, deferred, list) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST);

            objectStore.put(list);

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                console.log("Transaction error.");
                console.log(event);
                deferred.reject();
            };
        },

        push_lists : function(lists) {
            var deferred = $.Deferred();

            var v_lists = [];
            for(var i=0,list; i<lists.length; i++) {
                list = lists[i];
                if(!(list instanceof ER_Profiles_Mini_List))
                    list = new ER_Profiles_Mini_List(list);
                v_lists.push(list);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_lists(db, deferred, v_lists);
            });

            return deferred.promise();
        },
        _push_lists : function(db, deferred, lists){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST);

            for(var i= 0; i<lists.length; i++) {
                objectStore.put(lists[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },
        
        get_list : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_list(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_list : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var r = request.result;
                if(r)
                    r = new ER_Profiles_Mini_List(r);

                deferred.resolve(r);
            };
        },
        get_all_lists : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all_lists(db, deferred);
            });

            return deferred.promise();
        },
        _get_all_lists : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST).objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    result.push(new ER_Profiles_Mini_List(cursor.value));
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
        delete_list : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._delete_list(db, deferred, id);
            });

            return deferred.promise();
        },
        _delete_list : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES_LIST_OF_LIST);

            var request = objectStore.delete(id);

            request.onsuccess = function(event) {
                console.log("Record has been deleted from your database.");
                deferred.resolve();
            };

            request.onerror = function(event) {
                console.log("Unable to delete data");
                deferred.resolve('error'); // Все равно продолжаем нормальную работу
            };
        },
    };
/**
 * Created by erinsasha on 11/01/17.
 */
var er_profilesdb = window.er_profilesdb || {
        push_profile : function(profile) {
            var deferred = $.Deferred();

            if(!(profile instanceof ER_Profile))
                profile = new ER_Profile(profile);

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_profile(db, deferred, profile);
            });

            return deferred.promise();
        },
        _push_profile : function(db, deferred, profile) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES);

            var d =  new Date();
            profile.t = d.getTime();
            objectStore.put(profile);

            transaction.oncomplete = function(event) {
                console.log("er_profilesdb._push_profile Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                console.log("er_profilesdb._push_profile Transaction error.");
                console.log(event);
                deferred.reject();
            };
        },

        push_profiles : function(profiles) {
            var deferred = $.Deferred();

            var v_profiles = [];
            for(var i=0,profile; i<profiles.length; i++) {
                profile = profiles[i];
                if(!(profile instanceof ER_Profile))
                    profile = new ER_Profile(profile);
                v_profiles.push(profile);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_profiles(db, deferred, v_profiles);
            });

            return deferred.promise();
        },
        _push_profiles : function(db, deferred, profiles){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES);

            for(var i= 0; i<profiles.length; i++) {
                objectStore.put(profiles[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },
        
        get_profile : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_profile(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_profile : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var profile = request.result;
                if (profile)
                    profile = new ER_Profile(profile);
                deferred.resolve(profile);
            };
        },
        get_profiles : function(ids) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                //that._get_profiles(db, deferred, ids);
                that._get_profiles_method2(db, deferred, ids);
            });

            return deferred.promise();
        },
        _get_profiles : function(db, deferred, ids) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_PROFILES).objectStore(er_indexeddb.CONST_TABLE_PROFILES);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    var profile = cursor.value;

                    if(ids.indexOf(profile.id) >= 0)
                        result.push(new ER_Profile(profile));
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
        _get_profiles_method2 : function(db, deferred, ids) {
            er_logger.log('er_profilesdb._get_profiles_method2 ids.length= '+ids.length);
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_PROFILES]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_PROFILES);

            var result = [];

            this._get_profiles_method2_recur(deferred, objectStore, result, ids, 0);
        },
        _get_profiles_method2_recur : function(deferred, objectStore, result, ids, i) {
            if(ids.length <= i) {
                //er_logger.log('er_profilesdb._get_profiles_method2_recur RESULT result.length= '+result.length);
                deferred.resolve(result);
                return;
            }

            var that = this;
            //console.log('i='+i+' id='+ids[i]);

            var id;
            --i;
            do {
                ++i;
                id = ids[i];
            } while(id === null);

            var request;
            try {
                request = objectStore.get(id);
            } catch (e) {
                console.error(e);
                console.log('id='+id);
                deferred.resolve(false);
                return;
            }

            request.onerror = function(event) {
                console.error('cannot extract profile');
                console.log(event);
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var profile = request.result;
                if (profile) {
                    profile = new ER_Profile(profile);
                    result.push(profile);
                } else {
                    er_logger.log('EMPTY PROFILE with ID='+id);
                }

                that._get_profiles_method2_recur(deferred, objectStore, result, ids, i+1);
            };

        },
        get_all_profiles : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all_profiles(db, deferred);
            });

            return deferred.promise();
        },
        _get_all_profiles : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_PROFILES).objectStore(er_indexeddb.CONST_TABLE_PROFILES);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    var profile = cursor.value;
                    if (profile)
                        profile = new ER_Profile(profile);
                    result.push(profile);
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
     };
/**
 * Created by erinsasha on 20/02/17.
 */
var er_sn_ids_map_db = window.er_sn_ids_map_db || {
        push_map : function(map) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_map(db, deferred, map);
            });

            return deferred.promise();
        },
        _push_map : function(db, deferred, map) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP);

            var d =  new Date();
            map.t = d.getTime();
            objectStore.put(map);

            transaction.oncomplete = function(event) {
                console.log("er_sn_ids_map._push_map Transaction completed.");
                deferred.resolve(map);
            };

            transaction.onerror = function(event) {
                console.log("er_sn_ids_map._push_map Transaction error.");
                console.log(event);
                deferred.reject(map);
            };
        },
        push_maps : function(maps) {
            var deferred = $.Deferred();

            var v_maps = [];
            for(var i=0,map; i<maps.length; i++) {
                map = maps[i];
                v_maps.push(map);
            }

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._push_maps(db, deferred, v_maps);
            });

            return deferred.promise();
        },
        _push_maps : function(db, deferred, maps){
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP], "readwrite");
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP);

            for(var i= 0; i<maps.length; i++) {
                objectStore.put(maps[i]);
            }

            transaction.oncomplete = function(event) {
                console.log("Transaction completed.");
                deferred.resolve();
            };

            transaction.onerror = function(event) {
                deferred.reject();
                console.log("Transaction error.");
                console.log(event);
            };
        },
        get_map : function(id) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_map(db, deferred, id);
            });

            return deferred.promise();
        },
        _get_map : function(db, deferred, id) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP);
            var request = objectStore.get(id);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var map = request.result;
                deferred.resolve(map);
            };
        },
        get_map_snid : function(snid) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_map_by_snid(db, deferred, snid);
            });

            return deferred.promise();
        },
        _get_map_by_snid : function(db, deferred, snid) {
            var transaction = db.transaction([er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP]);
            var objectStore = transaction.objectStore(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP);
            var index_snid = objectStore.index("snid");
            var request = index_snid.get(snid);
            request.onerror = function(event) {
                deferred.resolve(false);
            };
            request.onsuccess = function(event) {
                var map = request.result;
                deferred.resolve(map);
            };
        },
        get_maps : function(ids) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_maps(db, deferred, ids);
            });

            return deferred.promise();
        },
        _get_maps : function(db, deferred, ids) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP).objectStore(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    var map = cursor.value;

                    if(ids.indexOf(map.id) >= 0)
                        result.push(map);
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
        get_maps_by_snids : function(snids) {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_maps_by_snids(db, deferred, snids);
            });

            return deferred.promise();
        },
        _get_maps_by_snids : function(db, deferred, snids) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP).objectStore(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP);

            var index_snid = objectStore.index("snid");

            index_snid.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    var map = cursor.value;

                    if(snids.indexOf(map.snid) >= 0)
                        result.push(map);
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },
        get_all_maps : function() {
            var deferred = $.Deferred();

            var that = this;
            er_indexeddb.init_db().then(function(db) {
                that._get_all_maps(db, deferred);
            });

            return deferred.promise();
        },
        _get_all_maps : function(db, deferred) {
            var result = [];

            var objectStore = db.transaction(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP).objectStore(er_indexeddb.CONST_TABLE_SALES_NAV_ID_MAP);

            objectStore.openCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (cursor) {
                    var map = cursor.value;
                    result.push(map);
                    cursor.continue();
                } else {
                    deferred.resolve(result);
                }
            };
        },

        build_array_of_ids_from_maps : function(maps) {
            var result = [];

            for(var i=0; i<maps.length; i++) {
                result.push(maps[i].id);
            }

            return result;
        },
        build_array_of_snids_from_maps : function(maps) {
            var result = [];

            for(var i=0; i<maps.length; i++) {
                result.push(maps[i].snid);
            }

            return result;
        },
    };
/**
 * Created by erinsasha on 11/01/17.
 */
var er_debug = window.er_debug || {
        EVENT_LOG_UPDATED : 'ER_EVENT_LOG_UPDATED',

        is_inited : false,
        is_switched_on : false,
        is_persisted_on : false,
        original_log : null,
        original_error : null,
        log : [],
        max_log_length : 10000,
        max_persist_log_length : 500000,
        curr_pos : 0,

        init : function() {
            if(this.is_inited)
                return;

            var state = this.get_debug_state();
            if (state) {
                this.switch_on();
            }

            this.is_inited = true;
        },
        get_debug_state : function() {
            if (localStorage.er_debug == 'true')
                return true;
            else
                return false;
        },
        set_debug_state : function(value) {
            if (value) {
                localStorage.er_debug = 'true';
                this.switch_on();
            } else {
                localStorage.er_debug = 'false';
                this.switch_off();
            }
        },
        get_persist_state : function() {
            if (localStorage.er_persist_log_state == 'true')
                return true;
            else
                return false;
        },
        set_persist_state : function(value) {
            if (value) {
                localStorage.er_persist_log_state = 'true';
                this.switch_on();
            } else {
                localStorage.er_persist_log_state = 'false';
                this.switch_off();
            }
        },
        get_persist_log : function() {
            var l = localStorage.er_persist_log;
            l = l ? l : '';
            return l;
        },
        clear_persist_log : function() {
            localStorage.er_persist_log = '';
        },
        add_record_persist_log : function(str) {
            var log = this.get_persist_log();
            log = log + '\n' + str;
            if(log.length > this.max_persist_log_length) {
                log = log.substr(log.length - this.max_persist_log_length + 1);
            }
            localStorage.er_persist_log = log;
        },
        switch_on : function() {
            if (this.is_switched_on)
                return;

            var that = this;
            this.original_log = console.log;
            this.original_error = console.error;


            console.log = function(val) {
                that.add_to_log(val);
                that.original_log.apply(console, arguments);
            };

            console.error = function(val) {
                that.add_to_log(val);
                that.original_error.apply(console, arguments);
            };

            this.is_switched_on = true;
        },
        switch_off : function() {
            if (!this.is_switched_on)
                return;

            console.log = this.original_log;
            console.error = this.original_error;

            this.is_switched_on = false;
        },
        add_to_log : function(value) {
            try {
                var val_str = JSON.stringify(value);
                if(this.get_persist_state())
                    this.add_record_persist_log(val_str);
                this.log[this.curr_pos] = val_str;
                ++this.curr_pos;
                var delta = this.log.length - this.curr_pos - this.max_log_length;
                if(delta >= 0) {
                    delete this.log[delta];
                }

                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_LOG_UPDATED, true, true, value);
                window.dispatchEvent(evt);
            } catch(error) {
                this.original_log.apply(console, value);
            }
        },
        get_log_as_string : function() {
            var delta = this.log.length - this.curr_pos - this.max_log_length;
            if(delta >= 0) {
                delete this.log[delta];
            }
            delta = delta < 0 ? 0 : delta;
            var result = '';
            for(var i = delta; i<this.log.length; i++) {
                result += this.log[i] + '\n';
            }

            return result;
        },
        get_log : function() {
            if(this.get_persist_state())
                return this.get_persist_log();
            else
                return this.get_log_as_string();
        },

        export_log_as_file : function() {
            var name = 'LH_Log_' + er_utils.datetimeJSToServer(new Date) + '.log';
            er_utils_file.export_file(name, this.get_log(), 'text');
        },
    };
/**
 * Created by erinsasha on 11/01/17.
 */
var er_debug_view = window.er_debug_view || {
        type : 'er_debug_view',
        tittle : 'Debug',

        jq_main : null,

        init_main : function() {
            if (this.inited)
                return;

            this.jq_main = $(this._HTML_build_main());

            this.jq_select_mode = this.jq_main.find('.select_mode');
            this.jq_log = this.jq_main.find('.log');
            this.jq_eval_text = this.jq_main.find('.eval_text');
            this.jq_btn_eval = this.jq_main.find('.btn_eval');
            this.jq_btn_download = this.jq_main.find('.btn_download');

            this._add_handlers();
            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            html += this._HTML_build_mode_selector();
            html += '<textarea class="log"></textarea>';
            html += '<button class="btn_download">Download Log</button>';
            html += '<textarea class="eval_text"></textarea>';
            html += '<button class="btn_eval">Eval</button>';

            html += '</div>';
            return html;
        },
        _HTML_build_mode_selector : function() {
            var html = '<div class="mode_selector_cont er_label_input_cont">';

            html += '<span class="label">Debug mode</span>';

            html += '<select class="select_mode">';

            var selected_off = '', selected_on = '', selected_on_persistent = '';
            if(er_debug.get_debug_state()) {
                if(er_debug.get_persist_state()) {
                    selected_on_persistent = 'selected';
                } else {
                    selected_on = 'selected';
                }
            } else {
                selected_off = 'selected';
            }
            html += '<option value="off" '+selected_off+'>off</option>';
            html += '<option value="on" '+selected_on+'>on</option>';
            html += '<option value="on_persistent" '+selected_on_persistent+'>on persistent</option>';

            html += '</select>';

            html += '</div>';

            return html;
        },

        _add_handlers : function() {
            this.jq_select_mode.change(this._on_change_this_select_mode.bind(this));

            window.addEventListener(
                er_debug.EVENT_LOG_UPDATED,
                this._on_log_updated.bind(this),
                false);

            this.jq_btn_eval.click(this._on_btn_eval_click.bind(this));
            this.jq_btn_download.click(this._on_btn_download.bind(this));
        },

        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },

        _on_change_this_select_mode : function(event) {
            var jq_option = this.jq_select_mode.find('option:selected');
            var state = jq_option.attr('value');
            er_debug.set_persist_state(state == 'on_persistent');
            er_debug.set_debug_state(state == 'on' || state == 'on_persistent');
        },
        _on_log_updated : function() {
            this.jq_log.val(er_debug.get_log());
            this.jq_log.scrollTop(this.jq_log[0].scrollHeight - this.jq_log.height());
        },
        _on_btn_eval_click : function() {
            eval(this.jq_eval_text.val());
        },
        _on_btn_download : function() {
            er_debug.export_log_as_file();
        },
    };
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_debug_view._on_main_view_ready_for_sub_view() });
/**
 * Created by Alex on 15.03.2017.
 */
var er_logger = window.er_logger || {
        log : function() {
            if (er_debug.get_debug_state()) {
                console.log(er_utils.datetimeJSToServer(new Date()));
                console.log.apply(console, arguments);
            }
        }
    };
/**
 * Created by erinsasha on 01/03/17.
 */
if(!window.ER_Connect_List) {
    window.ER_Connect_List = function (obj) {
        for(key in obj)
            this[key] = obj[key];

        this.name = this.name ? this.name : this.id;
        this.id = this.id ? this.id : this.name;

        this.queue = this.queue ? this.queue : [];
        this.processed = this.processed ? this.processed : [];
        this.excluded = this.excluded ? this.excluded : [];
        this.visit_info = this.visit_info ? this.visit_info : {};

        this.message = this.message ? this.message : '';
        this.company = this.company ? this.company : 'your company';
        this.position = this.position ? this.position : 'your position';

        if(obj.t)
            this.t = obj.t;
        else {
            var d = new Date();
            this.t = d.getTime();
        }
    };
    ER_Connect_List.prototype = {
        save_to_db : function() {
            var d = new Date();
            this.u = d.getTime();

            return er_connect_list_db.push_list(this);
        },

        get_all_ids_in_queue : function() {
            return this.queue;
        },
        get_all_ids_in_processed : function() {
            return this.processed;
        },
        get_all_ids_in_excluded : function() {
            return this.excluded;
        },

        get_uniq : function(ids) {
            ids = er_utils.get_array_uniq(ids, this.excluded);
            ids = er_utils.get_array_uniq(ids, this.processed);
            return er_utils.get_array_uniq(ids, this.queue);
        },

        set_ids_in_queue : function(ids) {
            this.queue = ids;
        },
        set_ids_in_processed : function(ids) {
            this.processed = ids;
        },
        set_ids_in_excluded : function(ids) {
            this.excluded = ids;
        },

        add_ids_to_queue : function(ids) {
            ids = er_utils.get_array_uniq(ids, this.excluded);
            ids = er_utils.get_array_uniq(ids, this.processed);
            for(var i= 0; i<ids.length; i++) {
                this.queue = er_utils.get_array_merge(this.queue, ids);
            }
        },
        add_id_to_queue : function(id) {
            if(!this.is_id_in_excluded(id) && !this.is_id_in_processed(id) && !this.is_id_in_queue(id))
                this.queue.push(id);
        },
        add_id_to_processed : function(id) {
            if(!this.is_id_in_processed(id))
                this.processed.push(id);
        },
        add_id_to_excluded : function(id) {
            if(!this.is_id_in_excluded(id))
                this.excluded.push(id);
        },
        set_id_as_processed : function(id) {
            if(!this.is_id_in_processed(id))
                this.is_id_in_processed.push(id);

            this.delete_id_from_queue(id);
        },
        is_id_in_queue : function(id) {
            return this.queue.indexOf(id) >= 0;
        },
        is_id_in_processed : function(id) {
            return this.processed.indexOf(id) >= 0;
        },
        is_id_in_excluded : function(id) {
            return this.excluded.indexOf(id) >= 0;
        },
        delete_id_from_queue : function(id) {
            var id_pos = this.queue.indexOf(id);
            if(id_pos >= 0)
                this.queue.splice(id_pos, 1);
        },
        delete_ids_from_queue : function(ids) {
            this.queue = er_utils.get_array_uniq(this.queue, ids);
        },
        delete_ids_from_processed : function(ids) {
            this.processed = er_utils.get_array_uniq(this.processed, ids);
        },
        delete_ids_from_excluded : function(ids) {
            this.excluded = er_utils.get_array_uniq(this.excluded, ids);
        },
        move_ids_from_queue_to_processed : function(ids) {
            this.queue = er_utils.get_array_uniq(this.queue, ids);
            this.processed = er_utils.get_array_merge(this.processed, ids);
        },
        move_ids_from_processed_to_queue : function(ids) {
            this.processed = er_utils.get_array_uniq(this.processed, ids);
            this.queue = er_utils.get_array_merge(this.queue, ids);
        },
        move_ids_from_queue_to_excluded : function(ids) {
            this.queue = er_utils.get_array_uniq(this.queue, ids);
            this.excluded = er_utils.get_array_merge(this.excluded, ids);
        },
        move_ids_from_excluded_to_queue : function(ids) {
            this.excluded = er_utils.get_array_uniq(this.excluded, ids);
            this.queue = er_utils.get_array_merge(this.queue, ids);
        },
        move_ids_from_excluded_to_processed : function(ids) {
            this.excluded = er_utils.get_array_uniq(this.excluded, ids);
            this.processed = er_utils.get_array_merge(this.processed, ids);
        },
        move_ids_from_processed_to_excluded : function(ids) {
            this.processed = er_utils.get_array_uniq(this.processed, ids);
            this.excluded = er_utils.get_array_merge(this.excluded, ids);
        },
        get_first_queue_id : function() {
            if (this.queue.length == 0)
                return null;
            else {
                var id = this.queue[0];
                if (this.is_id_in_processed(id) || this.is_id_in_excluded(id)) {
                    this.delete_id_from_queue(id);
                    return this.get_first_queue_id();
                } else
                    return id;
            }

        },
        get_queue_length : function() {
            return this.queue.length;
        },
        get_processed_length : function() {
            return this.processed.length;
        },
        get_excluded_length : function() {
            return this.excluded.length;
        },
        move_first_queue_id_to_processed : function() {
            var id = this.get_first_queue_id();
            if(id) {
                this.delete_id_from_queue(id);
                this.add_id_to_processed(id);
            }
        },
        move_first_queue_id_to_excluded : function() {
            var id = this.get_first_queue_id();
            if(id) {
                this.delete_id_from_queue(id);
                this.add_id_to_excluded(id);
            }
        },

    };
    ER_Connect_List.static = {};

};
/**
 * Created by erinsasha on 01/03/17.
 */
function ER_Widget_Connect_Collect (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Connect_Collect.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Connect_Collect">';

        html += this._HTML_build_list_select_cont();
        html += this._HTML_build_btn_collect();
        html += this._HTML_build_list_stats();
        html += '<button class="view_collected"></button>';
        html += '<button class="btn_lists_manager">Open lists manager</button>';

        html += '</div>';
        return html;
    },
    _HTML_build_list_select_cont : function() {
        var html = '<div class="wrapper_list_select_cont">';

        html += '<span class="label"></span>';

        html += '</div>';

        return html;
    },
    _HTML_build_btn_collect : function() {
        var started = er_connect_selected_collector.get_mode_connector_collect() ? 'started' : '';
        return '<button class="collect '+started+'"></button>';
    },
    _HTML_build_list_stats : function() {
        var html = '<div class="list_stats_cont">';

        html += this._HTML_build_profiles_collected();

        html += '</div>';
        return html;
    },
    _HTML_build_profiles_collected : function() {
        return '<div class="stat_cont profiles_collected_cont"><span class="title label"></span><span class="er_count_new value">0</span></div>';
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.er_Widget_Connect_Selector = new ER_Widget_Connect_Selector({
            jq_parent : this.jq_main.find('.wrapper_list_select_cont')
        });

        new ER_Widget_Delete_Connect_List({
            jq_parent : this.jq_main
        });

        this.jq_btn_collect = this.jq_main.find('button.collect');
        this.jq_btn_collect.click(this._on_click_btn_collect.bind(this));

        this.jq_btn_view_collected = this.jq_main.find('button.view_collected');
        this.jq_btn_view_collected.click(this._on_click_btn_view_collected.bind(this));

        this.jq_main.find('.btn_lists_manager').click(this._on_click_btn_lists_manager.bind(this));

        this.jq_profiles_collected_value = this.jq_main.find('.profiles_collected_cont .value');

        window.addEventListener(
            er_connect_selected_collector.EVENT_CONNECTOR_COLLECT_MODE_SWITCHED_ON,
            this._set_btn_collect_as_started.bind(this),
            false);
        window.addEventListener(
            er_connect_selected_collector.EVENT_CONNECTOR_COLLECT_MODE_SWITCHED_OFF,
            this._set_btn_collect_as_not_started.bind(this),
            false);

        window.addEventListener(
            er_connect_selected_lists_control.EVENT_NEW_CONNECT_SELECTED_CREATED,
            this.on_EVENT_NEW_CONNECT_SELECTED_CREATED.bind(this),
            false);
        window.addEventListener(
            er_connect_selected_lists_control.EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED,
            this.on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_connect_selected_lists_control.EVENT_CONNECT_SELECTED_DELETED,
            this.on_EVENT_CONNECT_SELECTED_DELETED.bind(this),
            false);

        er_main_view._add_callback_on_click_mode_after_turn_on('er_connector_mode_collect', this._on_click_mode_after_collect_turn_on.bind(this));

        this.closure_refresh_using_connect_list = this._refresh_using_connect_list.bind(this);

        this._refresh();
    },

    _set_btn_collect_as_started : function() {
        this.jq_btn_collect.addClass('started');
    },
    _set_btn_collect_as_not_started : function() {
        this.jq_btn_collect.removeClass('started');
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _refresh : function(refresh_once_anyway) {
        if(this.is_widget_visible() || refresh_once_anyway) {
            this._refresh_button_collect_state();

            er_connect_selected_lists_control.get_active_list()
                .then(this.closure_refresh_using_connect_list);
        }

        if(!refresh_once_anyway) {
            this.closure_refresh = this.closure_refresh ? this.closure_refresh : this._refresh.bind(this);
            setTimeout(this.closure_refresh, ER_Widget_Connect_Collect.CONST_REFRESH_STAT_TIMEOUT);
        }
    },
    _refresh_using_connect_list : function(active_list) {
        this.jq_profiles_collected_value.text(active_list.get_queue_length());
    },
    _refresh_button_collect_state : function() {
        if(er_connect_selected_collector.get_mode_connector_collect())
            this._set_btn_collect_as_started();
        else
            this._set_btn_collect_as_not_started();
    },

    _on_click_btn_collect : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_collect.hasClass('started')) {
            er_connect_selected_collector.set_mode_connector_collect(false);
            this._set_btn_collect_as_not_started();
        } else {
            if(er_search_page_helper.is_search_page()) {
                er_connect_selected_collector.set_mode_on_and_tab_active();
                er_connect_selected_collector.process();
                this._set_btn_collect_as_started();
            } else {
                new ER_W_Go_To_Page({
                    add_go_to_2nd_and_3rd : true,
                    add_go_to_2nd_and_3rd_sn : true
                });
                er_main_view._info_popup_show(er_translator.get_text('ER_Widget_Connect_Collect', 'messages', 'go_to_search_page', er_gen_settings.get_current_language_id()));
            }
        }
    },
    _on_click_btn_view_collected : function() {
        var er_Widget_Connect_Queue_Proc_Excl =
            new ER_Widget_Connect_Queue_Proc_Excl({
                jq_parent : this.jq_main
            });
    },
    _on_click_btn_lists_manager : function() {
        new ER_W_List_Manager({
            jq_parent : this.jq_main,
            current_source_function_id : 'profiles_auto_visitor',
            current_target_function_id : 'collect_select_invite_2nd_3rd',
        })
    },

    _on_click_mode_after_collect_turn_on : function() {
        this._on_click_btn_collect(null, true);
    },
    on_EVENT_NEW_CONNECT_SELECTED_CREATED : function(event) {
        //this._refresh(true);
    },
    on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED : function(event) {
        this._refresh(true);
    },
    on_EVENT_CONNECT_SELECTED_DELETED : function(event) {
        //this._refresh(true);
    },
};
ER_Widget_Connect_Collect.CONST_REFRESH_STAT_TIMEOUT = 5000;
/**
 * Created by erinsasha on 01/03/17.
 */
function ER_Widget_Connect_Export (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Connect_Export.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Connect_Export">';

        html += this._HTML_build_delimiter_selector();
        html += '<button class="btn_export_file"></button>';
        html += '<a class="help er_blog" target="_blank" href="https://medium.com/linked-helper/how-to-import-csv-file-into-ms-excel-b4aee2f30375?source=---------1">Read How to Import CSV file into MS Excel</a>';

        html += '</div>';
        return html;
    },
    _HTML_build_delimiter_selector : function() {
        var html = '<div class="delimiter_selector_cont er_label_input_cont">';

        html += '<span class="label"></span>';

        html += '<select class="select_delimiter">';

        html += '<option value="," selected>, - Google Sheets</option>';
        html += '<option value=";">; - Microsoft Excel</option>';

        html += '</select>';

        html += '</div>';

        return html;
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_btn_export_file = this.jq_main.find('.btn_export_file');
        this.jq_btn_export_file.click(this._on_btn_export_file_click.bind(this));

        this.jq_select_delimiter = this.jq_main.find('.select_delimiter');
    },



    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _on_btn_export_file_click : function() {
        if(this.jq_btn_export_file.hasClass('started'))
            return;

        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that.jq_btn_export_file.addClass('started');

                    var jq_option = that.jq_select_delimiter.find('option:selected');
                    var delimiter = jq_option.attr('value');

                    er_connect_selected_lists_control.get_active_list()
                        .then(function(active_list) {
                            er_profiles_common_csv.delimiter = delimiter;
                            er_profiles_common_csv.generate_csv_file_for_ids(active_list.get_all_ids_in_processed())
                                .then(function() {
                                    that.jq_btn_export_file.removeClass('started');
                                });
                        });

                } else {
                    //that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);


    },

};
/**
 * Created by erinsasha on 01/03/17.
 */
function ER_Widget_Connect_Invite (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Connect_Invite.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_Connect_Invite">';

        html += '<p class="warning message separate_window"></p>';
        html += this._HTML_build_btn_begin_inviting();
        html += this._HTML_build_in_queue();
        html += this._HTML_build_invited_total();
        html += this._HTML_build_current_period_state();
        html += this._HTML_build_invited_in_current_period();
        html += this._HTML_build_next_period_start();
        html += this._HTML_build_invite_limit();
        html += this._HTML_build_invite_period();
        html += this._HTML_build_btn_timeout_settings();

        html += '</div>';
        return html;
    },
    _HTML_build_btn_begin_inviting : function() {
        var started = er_connect_selected_inviter.get_mode_connect_inviter() ? 'started' : '';
        return '<button class="begin_inviting '+started+'"></button>';
    },
    _HTML_build_btn_timeout_settings : function() {
        return '<button class="er_timeout_settings">Timeout Settings</button>';
    },

    _HTML_build_current_period_state : function() {
        var state = er_connect_selected_inviter.get_current_period_state();

        return '<div class="stat_cont current_period_state"><span class="title label"></span><span class="er_current_period_state value">'+state+'</span></div>';
    },
    _HTML_build_in_queue : function() {
        return '<div class="stat_cont in_queue"><span class="title label"></span><span class="er_in_queue value">0</span></div>';
    },
    _HTML_build_invited_total : function() {
        return '<div class="stat_cont invited_total"><span class="title label"></span><span class="er_invited_total value">0</span></div>';
    },
    _HTML_build_invited_in_current_period : function() {
        var count_sent = er_connect_selected_inviter.get_invited_in_current_period();

        return '<div class="stat_cont invited_in_current_period"><span class="title label"></span><span class="er_invited_in_current_period value">'+count_sent+'</span></div>';
    },
    _HTML_build_next_period_start : function() {
        var date = er_connect_selected_inviter.get_next_period_start();
        var hidden = 'hidden';

        if (date != null) {
            hidden = '';
            date = er_utils.datetimeJSToUser(date);
        }
        return '<div class="stat_cont next_period_start '+hidden+'"><span class="title label"></span><span class="er_next_period_start value">'+date+'</span></div>';
    },
    _HTML_build_invite_limit : function() {
        var html = '<div class="invite_limit_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var limit = er_connect_selected_inviter.get_invite_limit_per_period();

        html += '<input class="invite_limit" type="number" value="'+limit+'">';
        html += '</div>';
        return html;
    },
    _HTML_build_invite_period : function() {
        var html = '<div class="invite_period_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var period = er_connect_selected_inviter.get_period_hours();

        html += '<input class="invite_period" type="number" value="'+period+'">';
        html += '</div>';
        return html;
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_btn_begin_inviting = this.jq_main.find('button.begin_inviting');
        this.jq_btn_begin_inviting.click(this._on_click_btn_begin_inviting.bind(this));

        this.jq_main.find('button.er_timeout_settings').click(this._on_click_btn_timeout_settings.bind(this));

        this.jq_input_invite_limit = this.jq_main.find('input.invite_limit');
        this.jq_input_invite_limit.change(this._on_input_invite_limit.bind(this));

        this.jq_input_invite_period = this.jq_main.find('input.invite_period');
        this.jq_input_invite_period.change(this._on_input_invite_period.bind(this));

        this.jq_in_queue = this.jq_main.find('.er_in_queue');
        this.jq_invited_total = this.jq_main.find('.er_invited_total');

        this.jq_invited_in_current_period = this.jq_main.find('.er_invited_in_current_period');

        this.jq_current_period_state = this.jq_main.find('.er_current_period_state');

        this.jq_next_period_start_cont = this.jq_main.find('.stat_cont.next_period_start');
        this.jq_next_period_start = this.jq_next_period_start_cont.find('.er_next_period_start');

        window.addEventListener(
            er_connect_selected_inviter.EVENT_CONNECT_INVITER_MODE_SWITCHED_ON,
            this._set_btn_begin_inviting_as_started.bind(this),
            false);
        window.addEventListener(
            er_connect_selected_inviter.EVENT_CONNECT_INVITER_MODE_SWITCHED_OFF,
            this._set_btn_begin_inviting_as_not_started.bind(this),
            false);

        window.addEventListener(
            er_license_limit.EVENT_INVITES_LIMIT,
            this._on_EVENT_INVITES_LIMIT.bind(this),
            false);

        window.addEventListener(
            er_connect_selected_lists_control.EVENT_NEW_CONNECT_SELECTED_CREATED,
            this.on_EVENT_NEW_CONNECT_SELECTED_CREATED.bind(this),
            false);
        window.addEventListener(
            er_connect_selected_lists_control.EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED,
            this.on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_connect_selected_lists_control.EVENT_CONNECT_SELECTED_DELETED,
            this.on_EVENT_CONNECT_SELECTED_DELETED.bind(this),
            false);

        er_main_view._add_callback_on_click_mode_after_turn_on('er_connect_inviter_mode', this._on_click_mode_after_invite_turn_on.bind(this));

        this.closure_refresh_using_connect_list = this._refresh_using_connect_list.bind(this);
        this._refresh();

        if(er_license_limit.when_can_continue_invites() > 0 && er_connect_selected_inviter.is_mode_on_and_tab_active())
            this._show_message_reached_day_limit();
    },

    _set_btn_begin_inviting_as_started : function() {
        this.jq_btn_begin_inviting.addClass('started');
    },
    _set_btn_begin_inviting_as_not_started : function() {
        this.jq_btn_begin_inviting.removeClass('started');
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _refresh : function(refresh_once_anyway) {
        if(this.is_widget_visible() || refresh_once_anyway) {
            this._refresh_button_begin_inviting_state();
            this._refresh_invited_in_current_period();
            this._refresh_current_period_state();
            this._refresh_next_period_start();

            er_connect_selected_lists_control.get_active_list()
                .then(this.closure_refresh_using_connect_list);
        }

        if(!refresh_once_anyway) {
            this.closure_refresh = this.closure_refresh ? this.closure_refresh : this._refresh.bind(this);
            setTimeout(this.closure_refresh, ER_Widget_Connect_Invite.CONST_REFRESH_STAT_TIMEOUT);
        }
    },
    _refresh_using_connect_list : function(active_list) {
        this.jq_in_queue.text(active_list.get_queue_length());
        this.jq_invited_total.text(active_list.get_processed_length());
    },
    _refresh_button_begin_inviting_state : function() {
        if(er_connect_selected_inviter.get_mode_connect_inviter())
            this._set_btn_begin_inviting_as_started();
        else
            this._set_btn_begin_inviting_as_not_started();
    },
    _refresh_invited_in_current_period : function() {
        var invited = er_connect_selected_inviter.get_invited_in_current_period();
        this.jq_invited_in_current_period.text(invited);
    },
    _refresh_current_period_state : function() {
        var state = er_connect_selected_inviter.get_current_period_state();
        this.jq_current_period_state.text(state);
    },
    _refresh_next_period_start : function() {
        var date = er_connect_selected_inviter.get_next_period_start();
        if (date) {
            this.jq_next_period_start_cont.removeClass('hidden');
            this.jq_next_period_start.text(er_utils.datetimeJSToUser(date));
        } else {
            this.jq_next_period_start_cont.addClass('hidden');
        }
    },

    _check_limits_and_warn : function() {
        if(er_connect_selected_inviter.is_limits_are_safe()) {
            this.jq_input_invite_limit.removeClass('warning');
            this.jq_input_invite_period.removeClass('warning');
        } else {
            this.jq_input_invite_limit.addClass('warning');
            this.jq_input_invite_period.addClass('warning');

            er_main_view._info_popup_show(er_translator.get_text('ER_Widget_Connect_Invite', 'messages', 'limits_warning', er_gen_settings.get_current_language_id()));
        }
    },

    _show_message_reached_day_limit : function() {
        var message = 'You have reached day limit for connecting new contacts according your license plan.';

        new ER_Buy_Unlimited_Control({
            show_any_way : true,
            additional_message : message
        });

        //er_main_view._info_popup_show(er_translator.get_text('er_connect_in_search', 'messages', 'reached_today_limit', er_gen_settings.get_current_language_id()));
    },

    _on_click_btn_begin_inviting : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_begin_inviting.hasClass('started')) {
            er_connect_selected_inviter.set_mode_connect_inviter(false);
            this._set_btn_begin_inviting_as_not_started();
        } else {
            if(er_license_limit.when_can_continue_invites() > 0)
                this._show_message_reached_day_limit();

            er_connect_selected_inviter.set_mode_on_and_tab_active();
            er_connect_selected_inviter.begin_process();
            this._set_btn_begin_inviting_as_started();
        }
    },
    _on_click_btn_timeout_settings : function() {
        new ER_W_Connect_Selected_Timeout_Settings({  });
    },

    _on_input_invite_limit : function() {
        er_connect_selected_inviter.set_invite_limit_per_period(this.jq_input_invite_limit.val());
        this._check_limits_and_warn();
    },
    _on_input_invite_period : function() {
        er_connect_selected_inviter.set_period_hours(this.jq_input_invite_period.val());
        this._check_limits_and_warn();
    },

    on_EVENT_NEW_CONNECT_SELECTED_CREATED : function(event) {
        // this._refresh(true);
    },
    on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED : function(event) {
        this._refresh(true);
    },
    on_EVENT_CONNECT_SELECTED_DELETED : function(event) {
        // this._refresh(true);
    },

    _on_EVENT_INVITES_LIMIT : function() {
        this._show_message_reached_day_limit();
    },

    _on_click_mode_after_invite_turn_on : function() {
        this._on_click_btn_begin_inviting(null, true);
    },
};
ER_Widget_Connect_Invite.CONST_REFRESH_STAT_TIMEOUT = 5000;
/**
 * Created by erinsasha on 01/03/17.
 */
function ER_Widget_Connect_Queue_Proc_Excl (options) {
    if(!options)
        options = {};
    this.options = options;
    this.jq_parent = options.jq_parent;

    var that = this;

    this.closure_on_click_btn_show_inv_message = this._on_click_btn_show_inv_message.bind(this);

    er_connect_selected_lists_control.get_active_list()
        .then(function(active_list) {
            that.active_list = active_list;
            that._build_widget();
        });
};

ER_Widget_Connect_Queue_Proc_Excl.prototype = {
    listname_tech_to_user : {
        'queue' : 'Inviting Queue',
        'processed' : 'Invited',
        'excluded' : 'Excluded',
    },
    _build_widget : function() {
        this.er_Widget_Queue_Proc_Excl = new ER_Widget_Queue_Proc_Excl({
            jq_parent : this.jq_parent,
            html_additional_main_class : 'ER_Widget_Connect_Queue_Proc_Excl',

            callback_custom_fields_builder : this.callback_custom_fields_builder.bind(this),
            callback_on_add_handlers_for_profile_item : this.callback_on_add_handlers_for_profile_item.bind(this),

            is_processed_enabled : true,
            is_excluded_enabled : true,

            callback_get_queue_deferred : this.callback_get_queue_deferred.bind(this),
            callback_get_processed_deferred : this.callback_get_processed_deferred.bind(this),
            callback_get_excluded_deferred : this.callback_get_excluded_deferred.bind(this),

            callback_move_ids_from_queue_to_excluded_deferred : this.callback_move_ids_from_queue_to_excluded_deferred.bind(this),
            callback_move_ids_from_excluded_to_queue_deferred : this.callback_move_ids_from_excluded_to_queue_deferred.bind(this),
            callback_move_ids_from_queue_to_processed_deferred : this.callback_move_ids_from_queue_to_processed_deferred.bind(this),
            callback_move_ids_from_processed_to_queue_deferred : this.callback_move_ids_from_processed_to_queue_deferred.bind(this),
            callback_move_ids_from_processed_to_excluded_deferred : this.callback_move_ids_from_processed_to_excluded_deferred.bind(this),
            callback_move_ids_from_excluded_to_processed_deferred : this.callback_move_ids_from_excluded_to_processed_deferred.bind(this),

            callback_get_dialog_message_move_from_queue_to_excluded : this.callback_get_dialog_message_move_from_queue_to_excluded.bind(this),
            callback_get_dialog_message_move_from_excluded_to_queue : this.callback_get_dialog_message_move_from_excluded_to_queue.bind(this),
            callback_get_dialog_message_move_from_queue_to_processed : this.callback_get_dialog_message_move_from_queue_to_processed.bind(this),
            callback_get_dialog_message_move_from_processed_to_queue : this.callback_get_dialog_message_move_from_processed_to_queue.bind(this),
            callback_get_dialog_message_move_from_processed_to_excluded : this.callback_get_dialog_message_move_from_processed_to_excluded.bind(this),
            callback_get_dialog_message_move_from_excluded_to_processed : this.callback_get_dialog_message_move_from_excluded_to_processed.bind(this),

            callback_get_dialog_message_delete_selected : this.callback_get_dialog_message_delete_selected.bind(this),
            callback_delete_selected_deferred : this.callback_delete_selected_deferred.bind(this),
        });
    },

    callback_custom_fields_builder : function(mini_profile, mode) {
        return this._build_HTML_td_show_message(mini_profile.id);
    },
    _build_HTML_td_show_message : function(profile_id) {
        return '<td class="td_show_message"><button class="show_inv_message" data-profile-id="'+profile_id+'"></button></td>';
    },

    callback_on_add_handlers_for_profile_item : function(jq_item, mode) {
        jq_item.find('button.show_inv_message').click(this.closure_on_click_btn_show_inv_message);
    },

    show_invitation_message : function(profile_id) {
        var mini_profile = this.er_Widget_Queue_Proc_Excl.get_cached_profile(profile_id);
        var message = er_connect_selected_inviter.generate_message_text(mini_profile, this.active_list);

        var er_Textbox_Preview = new ER_Textbox_Preview({jq_parent : this.er_Widget_Queue_Proc_Excl.jq_main});
        er_Textbox_Preview.show('Invitation Message Preview', message);
    },

    callback_get_queue_deferred : function() {
        var deferred = $.Deferred();

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                deferred.resolve(active_list.get_all_ids_in_queue())
            });

        return deferred.promise();
    },
    callback_get_processed_deferred : function() {
        var deferred = $.Deferred();

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                deferred.resolve(active_list.get_all_ids_in_processed())
            });

        return deferred.promise();
    },
    callback_get_excluded_deferred : function() {
        var deferred = $.Deferred();

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                deferred.resolve(active_list.get_all_ids_in_excluded())
            });

        return deferred.promise();
    },

    callback_move_ids_from_queue_to_excluded_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_queue_to_excluded(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_move_ids_from_excluded_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_excluded_to_queue(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_move_ids_from_queue_to_processed_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_queue_to_processed(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_move_ids_from_excluded_to_processed_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_excluded_to_processed(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_move_ids_from_processed_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_processed_to_queue(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_move_ids_from_processed_to_excluded_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.move_ids_from_processed_to_excluded(ids);
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },

    callback_get_dialog_message_move_from_queue_to_excluded : function() {
        return er_translator.get_text(
            'ER_Widget_Connect_Queue_Proc_Excl',
            'messages',
            'move_from_queue_to_excluded_dialog',
            er_gen_settings.get_current_language_id())
    },
    callback_get_dialog_message_move_from_excluded_to_queue : function() {
        return er_translator.get_text(
            'ER_Widget_Connect_Queue_Proc_Excl',
            'messages',
            'move_from_excluded_to_queue_dialog',
            er_gen_settings.get_current_language_id())
    },
    callback_get_dialog_message_move_from_queue_to_processed : function() {
        return er_translator.get_text(
            'ER_Widget_Connect_Queue_Proc_Excl',
            'messages',
            'move_from_queue_to_processed_dialog',
            er_gen_settings.get_current_language_id())
    },
    callback_get_dialog_message_move_from_processed_to_queue : function() {
        return er_translator.get_text(
            'ER_Widget_Connect_Queue_Proc_Excl',
            'messages',
            'move_from_processed_to_queue_dialog',
            er_gen_settings.get_current_language_id())
    },
    callback_get_dialog_message_move_from_excluded_to_processed : function() {
        return er_translator.get_text(
            'ER_Widget_Connect_Queue_Proc_Excl',
            'messages',
            'move_from_excluded_to_processed_dialog',
            er_gen_settings.get_current_language_id())
    },
    callback_get_dialog_message_move_from_processed_to_excluded : function() {
        return er_translator.get_text(
            'ER_Widget_Connect_Queue_Proc_Excl',
            'messages',
            'move_from_processed_to_excluded_dialog',
            er_gen_settings.get_current_language_id())
    },

    _on_click_btn_show_inv_message : function(event) {
        var jq_btn = $(event.currentTarget);
        var profile_id = jq_btn.attr('data-profile-id');
        this.show_invitation_message(profile_id);
    },

    callback_get_dialog_message_delete_selected : function(listname, count) {
        var user_listname = this.listname_tech_to_user[listname];

        if(count <= 0)
            return 'Nothing selected';
        var message = 'Delete '+count+' selected contact';
        if(count > 1)
            message += 's';
        message += ' from '+user_listname+' ?';
        return message;
    },
    callback_delete_selected_deferred : function(listname, ids) {
        if(listname == 'queue') {
            this.active_list.delete_ids_from_queue(ids);
        } else if(listname == 'processed') {
            this.active_list.delete_ids_from_processed(ids);
        } else if(listname == 'excluded') {
            this.active_list.delete_ids_from_excluded(ids);
        }

        return this.active_list.save_to_db();
    }
};
/**
 * Created by erinsasha on 01/03/17.
 */
function ER_Widget_Connect_Selector(options) {
    options = options || {};
    this.options = options;

    this.jq_parent = options.jq_parent;
    this.build_main_view();
};

ER_Widget_Connect_Selector.prototype = {
    _HTML_build_main_view : function() {
        var html = '<span class="ER_Widget_Connect_Selector">';

        html += '<select class="select_connect_list">';

        html += '<option value="'+ER_Widget_Connect_Selector.const.CONST_SELECTION_CREATE_MEW_ID+'">'+er_translator.get_text('ER_Widget_Connect_Selector', 'select_connect_list', 'create_new', er_gen_settings.get_current_language_id())+'</option>';


        var active_list_id = er_connect_selected_lists_control.get_active_list_id();
        var list = er_connect_selected_lists_control.get_all_lists_ids();

        for(var i=0, current_list_id; i < list.length; i++) {
            current_list_id = list[i];
            html += this._HTML_build_select_option(current_list_id, active_list_id == current_list_id);
        }

        html += '</select>';

        html += '</span>';

        return html;
    },
    _HTML_build_select_option : function(id, is_selected) {
        var selected = is_selected ? 'selected' : '';
        return '<option value="'+id.replace(/"/g,'&quot;')+'" '+selected+'>'+id.replace(/"/g,'&quot;')+'</option>';
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_select = this.jq_main.find('.select_connect_list');
        this.jq_select.change(this._on_change_select_connect_list.bind(this));

        window.addEventListener(
            er_connect_selected_lists_control.EVENT_NEW_CONNECT_SELECTED_CREATED,
            this.on_EVENT_NEW_CONNECT_SELECTED_CREATED.bind(this),
            false);
        window.addEventListener(
            er_connect_selected_lists_control.EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED,
            this.on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_connect_selected_lists_control.EVENT_CONNECT_SELECTED_DELETED,
            this.on_EVENT_CONNECT_SELECTED_DELETED.bind(this),
            false);
    },

    _add_new_list_to_selector : function(id) {
        if (this._is_select_option_created(id))
            return;

        var is_selected = er_connect_selected_lists_control.get_active_list_id() == id;

        var option = this._HTML_build_select_option(id, is_selected);
        this.jq_select.append($(option));
    },

    _set_selected_list : function(id) {
        if(!this._is_select_option_created(id)) {
            this._add_new_list_to_selector(id);
        }

        this.jq_select.val(id);
    },
    _get_select_option : function(id) {
        return this.jq_select.find('option[value="'+id.replace(/"/g,'\\\"')+'"]');
    },
    _is_select_option_created : function(id) {
        return this._get_select_option(id).length == 1;
    },
    _delete_select_option : function(id) {
        this._get_select_option(id).remove();
    },

    _show_create_list_dialog : function() {
        var er_Widget_New_Connect_List = new ER_Widget_New_Connect_List({
            jq_parent : this.jq_main
        });
    },
    _on_change_select_connect_list : function(event) {
        var jq_option = this.jq_select.find('option:selected');
        var list_id = jq_option.attr('value');
        if (list_id == ER_Widget_Connect_Selector.const.CONST_SELECTION_CREATE_MEW_ID) {
            this._show_create_list_dialog();
            this.jq_select.val(er_connect_selected_lists_control.get_active_list_id());
        } else {
            er_connect_selected_lists_control.set_active_list_id(list_id);
        }
    },
    on_EVENT_NEW_CONNECT_SELECTED_CREATED : function(event) {
        var id = event.detail.id;
        this._add_new_list_to_selector(id);
    },
    on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED : function(event) {
        var id = event.detail;
        this._set_selected_list(id);
    },
    on_EVENT_CONNECT_SELECTED_DELETED : function(event) {
        var id = event.detail;
        this._delete_select_option(id);
    },
};
ER_Widget_Connect_Selector.const = {};
ER_Widget_Connect_Selector.const.CONST_SELECTION_CREATE_MEW_ID = '__create_new_connect_list__';
/**
 * Created by Alex on 12.03.2017.
 */
//ER_Widget_Delete_Connect_List
function ER_Widget_Delete_Connect_List(options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Delete_Connect_List.prototype = {
    _HTML_build_main_view : function() {
        var er_inactive = er_connect_selected_lists_control.is_default_list_active() ? 'er_inactive' : '';
        return '<button class="ER_Widget_Delete_Connect_List danger '+er_inactive+'"></button>';
    },
    _add_handlers : function() {
        window.addEventListener(
            er_connect_selected_lists_control.EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED,
            this.on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED.bind(this),
            false);

        this.jq_main.click(this.on_click_button.bind(this));
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    on_click_button : function() {
        if(this.jq_main.hasClass('er_inactive'))
            return;

        var message = er_translator.get_text('ER_Widget_Delete_Connect_List', 'messages', 'need_delete_list');
        message = message.replace(/{LIST_NAME}/g,er_connect_selected_lists_control.get_active_list_id());

        er_main_view.show_yes_no_dialog(
            message,
            this.on_click_yes_delete_list.bind(this)
        );
    },
    on_click_yes_delete_list : function() {
        er_connect_selected_lists_control.delete_list(er_connect_selected_lists_control.get_active_list_id());
    },
    on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED : function(event) {
        if(er_connect_selected_lists_control.is_default_list_active()) {
            this.jq_main.addClass('er_inactive');
        } else {
            this.jq_main.removeClass('er_inactive');
        }
    },
};

/**
 * Created by erinsasha on 03/03/17.
 */
function ER_Widget_Inv_Message_Template (options) {
    options = options || {};
    this.options = options;
    this.jq_parent = options.jq_parent;

    this.er_Widget_Message_Template = new ER_Widget_Message_Template({
        html_main_class : 'ER_Widget_Inv_Message_Template',
        jq_parent : this.jq_parent,

        message_template : '',
        message_placeholder : 'Hello {firstname}! Please, join my network!',
        message_maxlength : er_connect_in_search.CONST_INVITATION_MESSAGE_TMPL_MAXLENGTH,

        callback_on_message_template_save_deferred : this.callback_on_message_template_save_deferred.bind(this),
        callback_on_defaults_change : this.callback_on_defaults_change.bind(this),
    });

    this._add_handlers();
};

ER_Widget_Inv_Message_Template.prototype = {
    _add_handlers : function() {
        window.addEventListener(
            er_connect_selected_lists_control.EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED,
            this.on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED.bind(this),
            false);

        this.request_active_list_and_update_widget();
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    request_active_list_and_update_widget : function() {
        er_connect_selected_lists_control.get_active_list()
            .then(this.set_er_connect_list.bind(this));
    },

    set_er_connect_list : function(er_connect_list) {
        this.er_Widget_Message_Template.set_message_template(er_connect_list.message);
        this.er_Widget_Message_Template.set_defaults({
            company : er_connect_list.company,
            position : er_connect_list.position
        });
    },

    callback_on_message_template_save_deferred : function(message) {
        var deferred = $.Deferred();

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.message = message;
                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },
    callback_on_defaults_change : function(variables) {
        var deferred = $.Deferred();

        er_connect_selected_lists_control.get_active_list()
            .then(function(active_list) {
                active_list.company = variables.company;
                active_list.position = variables.position;

                active_list.save_to_db()
                    .then(deferred.resolve.bind(deferred));
            });

        return deferred.promise();
    },

    on_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED : function() {
        this.request_active_list_and_update_widget();
    },
};
/**
 * Created by erinsasha on 01/03/17.
 */
function ER_Widget_New_Connect_List (options) {
    this.options = options;

    this.er_Widget_New_Something = new ER_Widget_New_Something({
        callback_on_create : this.callback_on_create.bind(this),
        html_main_class : 'ER_Widget_New_Connect_List',
        input_placeholder : 'List name',
        jq_parent : options.jq_parent
    });

    this.er_Widget_New_Something.build_main_view();
};

ER_Widget_New_Connect_List.prototype = {
    callback_on_create : function(name) {
        if(er_connect_selected_lists_control.is_list_with_id_exists(name)) {
            this.er_Widget_New_Something.info_popup_show(er_translator.get_text('ER_Widget_New_Connect_List', 'messages', 'list_exists', er_gen_settings.get_current_language_id()));
        } else {
            var that = this;
            er_connect_selected_lists_control.create_new_list_as_active_with_id(name)
                .then(function() {
                    that.er_Widget_New_Something.close();
                });
        }
    },
};
/**
 * Created by erinsasha on 10/08/17.
 */
// W_Connect_Selected_Timeout_Settings

/**
 *
 * @param options
 * @param options.jq_parent
 * @constructor
 */
function ER_W_Connect_Selected_Timeout_Settings(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.options = options;

    this._process();
}

ER_W_Connect_Selected_Timeout_Settings.prototype = {
    _process : function() {
        this.w_timeout_settings = new ER_W_Timeout_Settings({
                header : 'Timeouts for Collect, Select & Invite 2nd & 3rd contacts',
                timeouts_names : er_connect_selected_timeouts.const_timeouts_names,
                timeouts : er_connect_selected_timeouts.get_timeouts(),
                fast_timeouts : er_connect_selected_timeouts.const_timeout_fast,
                safe_timeouts : er_connect_selected_timeouts.const_timeout_safe,
                add_message_mode_switcher : true,
                message_mode : er_connect_selected_timeouts.get_message_mode(),
                jq_parent : this.jq_parent,
                callback_save_settings : er_connect_selected_timeouts.save_timeouts_and_message_mode.bind(er_connect_selected_timeouts)
        });
    },
};
/**
 * Created by Alex on 18.03.2017.
 */
// er_connect_selected_backup_export
var er_connect_selected_backup_export = window.er_connect_selected_backup_export || {
        build_object : function() {
            var deferred = $.Deferred();
            var obj = {};
            obj.lc = this._build_lc();

            this._build_db()
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },
        _build_lc : function() {
            var lc = {};

            lc.er_connect_selected_extract_mode = localStorage.er_connect_selected_extract_mode;
            lc.er_connect_selected_invite_limit_per_period = localStorage.er_connect_selected_invite_limit_per_period;
            lc.er_connect_selected_period_hours = localStorage.er_connect_selected_period_hours;
            lc.er_connect_selected_list_active_id = localStorage.er_connect_selected_list_active_id;
            lc.er_connect_lists_ids = localStorage.er_connect_lists_ids;

            return lc;
        },
        _build_db : function() {
            var deferred = $.Deferred();
            var db = {};

            er_connect_list_db.get_all_lists()
                .then(function(connect_lists) {
                    db.connect_lists = connect_lists;
                    deferred.resolve(db);
                });

            return deferred.promise();
        },
    };
/**
 * Created by Alex on 18.03.2017.
 */
//er_connect_selected_backup_import
var er_connect_selected_backup_import = window.er_connect_selected_backup_import || {
        import : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj) {
                er_logger.log('SKIPS : Connect Selected data missing');
                deferred.resolve(true);
                return deferred.promise();
            }

            this._import_db(obj.db)
                .then(function() {
                    that._import_lc(obj.lc);
                    deferred.resolve(true);
                });

            return deferred.promise();
        },

        _import_db : function(db) {
            var deferred = $.Deferred();

            er_connect_list_db.push_lists(db.connect_lists)
                .then(deferred.resolve.bind(deferred));

            return deferred.promise();
        },

        _import_lc : function(lc) {
            if(lc.er_connect_selected_extract_mode)
                localStorage.er_connect_selected_extract_mode = lc.er_connect_selected_extract_mode;
            else
                delete localStorage.er_connect_selected_extract_mode;

            if(lc.er_connect_selected_invite_limit_per_period)
                localStorage.er_connect_selected_invite_limit_per_period = lc.er_connect_selected_invite_limit_per_period;
            else
                delete localStorage.er_connect_selected_invite_limit_per_period;

            if(lc.er_connect_selected_period_hours)
                localStorage.er_connect_selected_period_hours = lc.er_connect_selected_period_hours;
            else
                delete localStorage.er_connect_selected_period_hours;

            if(lc.er_connect_selected_list_active_id)
                localStorage.er_connect_selected_list_active_id = lc.er_connect_selected_list_active_id;
            else
                delete localStorage.er_connect_selected_list_active_id;

            if(lc.er_connect_lists_ids)
                localStorage.er_connect_lists_ids = lc.er_connect_lists_ids;
            else
                delete localStorage.er_connect_lists_ids;
        },
    };
/**
 * Created by erinsasha on 01/03/17.
 */
var er_connect_selected_collector = window.er_connect_selected_collector || {
        EVENT_CONNECTOR_COLLECT_MODE_SWITCHED_ON : 'ER_EVENT_CONNECTOR_COLLECT_MODE_SWITCHED_ON',
        EVENT_CONNECTOR_COLLECT_MODE_SWITCHED_OFF : 'ER_EVENT_CONNECTOR_COLLECT_MODE_SWITCHED_OFF',

        get_mode_connector_collect : function() {
            return localStorage.er_connector_mode_collect == 'true';
        },
        set_mode_connector_collect : function(value) {
            var evt_name;
            if(value === true || value == 'true' || value == 'TRUE') {
                localStorage.er_connector_mode_collect = 'true';
                evt_name = this.EVENT_CONNECTOR_COLLECT_MODE_SWITCHED_ON;
            } else {
                localStorage.er_connector_mode_collect = 'false';
                this.tab_delete_mode();
                evt_name = this.EVENT_CONNECTOR_COLLECT_MODE_SWITCHED_OFF;
            }
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(evt_name, true, true, null);
            window.dispatchEvent(evt);
        },

        tab_add_mode : function() {
            er_tabs_control.add_active_mode('er_connector_mode_collect');
        },
        tab_delete_mode : function() {
            er_tabs_control.delete_active_mode('er_connector_mode_collect');
        },
        tab_is_active_in : function() {
            return er_tabs_control.is_mode_active('er_connector_mode_collect');
        },

        is_mode_on_and_tab_active : function() {
            return this.get_mode_connector_collect() && this.tab_is_active_in();
        },
        set_mode_on_and_tab_active : function() {
            this.set_mode_connector_collect(true);
            this.tab_add_mode();
        },

        process : function() {
            if (!this.is_mode_on_and_tab_active())
                return;

            this.process_single_page()
                .then(this._after_single_page_processed.bind(this));
        },

        process_single_page : function() {
            var deferred = $.Deferred();

            if(!this.is_mode_on_and_tab_active()) {
                deferred.reject();
                return deferred.promise();
            }

            er_search_page_helper.wait_people_card_load_and_extract_single_page()
                .then(function(mini_profiles) {
                    er_connect_selected_lists_control.init()
                        .then(er_connect_selected_lists_control.get_active_list.bind(er_connect_selected_lists_control))
                        .then(function(active_list) {
                            var ids = ER_Profile_Mini.static.get_profiles_ids_from_profiles_arr(
                                mini_profiles,
                                {
                                    dists : [2,3,10],
                                    skip_invite_sent : true
                                }
                            );

                            active_list.add_ids_to_queue(ids);
                            active_list.save_to_db()
                                .then(function() {
                                    deferred.resolve();
                                });
                        });
                });

            return deferred.promise();
        },

        _after_single_page_processed : function() {
            if (!this.is_mode_on_and_tab_active())
                return;
            var that = this;
            er_search_page_helper.ns_sn_old_load_next_page_deferred()
                .then(function(result) {
                    if (result) {
                        if (er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page())
                            that.process();
                    } else
                        that.set_mode_connector_collect(false);
                });
        },
    };
/**
 * Created by erinsasha on 01/03/17.
 */
var er_connect_selected_inviter = window.er_connect_selected_inviter || {
        EVENT_CONNECT_INVITER_MODE_SWITCHED_ON : 'ER_EVENT_CONNECT_INVITER_MODE_SWITCHED_ON',
        EVENT_CONNECT_INVITER_MODE_SWITCHED_OFF : 'ER_EVENT_CONNECT_INVITER_MODE_SWITCHED_OFF',

        WARNING_THRESHOLD_LIMIT : 180,
        DEFAULT_INVITE_LIMIT_PER_PERIOD : 180,
        DEFAULT_PERIOD_HOURS : 24,
        CONST_CURRENT_PERIOD_STARTED : 'STARTED',
        CONST_CURRENT_PERIOD_FINISHED : 'FINISHED',

        get_mode_connect_inviter : function() {
            return localStorage.er_connect_inviter_mode == 'true';
        },
        set_mode_connect_inviter : function(value) {
            var evt_name;
            if(value === true || value == 'true' || value == 'TRUE') {
                localStorage.er_connect_inviter_mode = 'true';
                evt_name = this.EVENT_CONNECT_INVITER_MODE_SWITCHED_ON;
            } else {
                localStorage.er_connect_inviter_mode = 'false';
                this.tab_delete_mode();
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_FINISHED);
                evt_name = this.EVENT_CONNECT_INVITER_MODE_SWITCHED_OFF;
            }
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(evt_name, true, true, null);
            window.dispatchEvent(evt);
        },

        tab_add_mode : function() {
            er_tabs_control.add_active_mode('er_connect_inviter_mode');
        },
        tab_delete_mode : function() {
            er_tabs_control.delete_active_mode('er_connect_inviter_mode');
        },
        tab_is_active_in : function() {
            return er_tabs_control.is_mode_active('er_connect_inviter_mode');
        },

        is_mode_on_and_tab_active : function() {
            return this.get_mode_connect_inviter() && this.tab_is_active_in();
        },
        set_mode_on_and_tab_active : function() {
            this.set_mode_connect_inviter(true);
            this.tab_add_mode();
        },

        is_need_to_extract_profile : function() {
            var value = localStorage.er_connect_selected_extract_mode;
            if (value == 'true' || value == 'false')
                return value == 'true';

            if(er_utils.is_new_style_page())
                value = true;
            else
                value = false;

            localStorage.er_connect_selected_extract_mode = value;

            return value;
        },

        get_invite_limit_per_period : function() {
            var limit = Number(localStorage.er_connect_selected_invite_limit_per_period);
            if (isNaN(limit)) {
                localStorage.er_connect_selected_invite_limit_per_period = this.DEFAULT_INVITE_LIMIT_PER_PERIOD;
                limit = this.DEFAULT_INVITE_LIMIT_PER_PERIOD;
            }
            return limit;
        },
        set_invite_limit_per_period : function(value) {
            var limit = Number(value);
            if (isNaN(limit) || limit <= 0) {
                return false;
            }
            localStorage.er_connect_selected_invite_limit_per_period = limit;
        },

        get_period_hours : function() {
            var limit = Number(localStorage.er_connect_selected_period_hours);
            if (isNaN(limit)) {
                localStorage.er_connect_selected_period_hours = this.DEFAULT_PERIOD_HOURS;
                limit = this.DEFAULT_PERIOD_HOURS;
            }
            return limit;
        },
        set_period_hours : function(value) {
            var limit = Number(value);
            if (isNaN(limit) || limit <= 0) {
                return false;
            }
            localStorage.er_connect_selected_period_hours = limit;
        },

        is_limits_are_safe : function() {
            var x = 24 * this.get_invite_limit_per_period() / this.get_period_hours();
            return x <= this.WARNING_THRESHOLD_LIMIT;
        },

        is_get_current_period_state_STARTED : function() {
            return this.CONST_CURRENT_PERIOD_STARTED = this.get_current_period_state();
        },
        get_current_period_state : function() {
            if (!this.get_mode_connect_inviter())
                return this.CONST_CURRENT_PERIOD_FINISHED;

            var current_period_state = localStorage.er_connect_selected_period_state;
            if (current_period_state == this.CONST_CURRENT_PERIOD_STARTED
                && this.get_mode_connect_inviter()
            ) {
                return this.CONST_CURRENT_PERIOD_STARTED;
            } else {
                return this.CONST_CURRENT_PERIOD_FINISHED;
            }
        },
        set_current_period_state : function(value) {
            if (value == this.CONST_CURRENT_PERIOD_STARTED || value === true) {
                localStorage.er_connect_selected_period_state = this.CONST_CURRENT_PERIOD_STARTED;
            } else {
                localStorage.er_connect_selected_period_state =  this.CONST_CURRENT_PERIOD_FINISHED;
            }
        },

        get_invited_in_current_period : function() {
            var value = Number(localStorage.er_connect_selected_invited_in_current_period);
            if (isNaN(value)) {
                value = 0;
            }
            return value;
        },
        set_invited_in_current_period : function(value) {
            value = Number(value);
            if (isNaN(value))
                return;
            localStorage.er_connect_selected_invited_in_current_period = value;
        },
        increase_invited_in_current_period : function(delta) {
            localStorage.er_connect_selected_invited_in_current_period = delta + this.get_invited_in_current_period();
        },

        /**
         * Возвращает дату начала следующего периода
         * @returns {*}
         */
        get_next_period_start : function() {
            var date = localStorage.er_connect_selected_next_starts_at;

            if (date != null && date != '')
                date = new Date(JSON.parse(date));

            if (date instanceof Date && !isNaN(date.getHours()) && new Date < date) {
                return date;
            } else {
                return null;
            }
        },
        /**
         * Задает через сколько должен запуститься следующий период от текущего момента
         * @returns {number}
         */
        set_next_period_start : function() {
            var date = new Date();
            // Количество миллисекунд до следующего запуска
            var wait_milli_seconds = 3600000*this.get_period_hours();
            date.setTime(date.getTime() + wait_milli_seconds);
            localStorage.er_connect_selected_next_starts_at = JSON.stringify(date);

            return wait_milli_seconds;
        },
        /**
         * Возвращает количество миллисекунд между текущем временем и временем следующего запуска
         */
        get_diff_between_now_and_next_period_start : function() {
            var nextStartDate = this.get_next_period_start();
            if (nextStartDate == null) {
                return 0;
            } else {
                var currDate = new Date();
                return nextStartDate.getTime() - currDate.getTime();
            }
        },

        reset_current_period : function() {
            this.set_invited_in_current_period(0);
            delete localStorage.er_connect_selected_next_starts_at;
        },
        check_should_continue_work : function(is_need_setup_waiter) {
            if(!this.is_mode_on_and_tab_active())
                return false;
            var wait = er_license_limit.when_can_continue_invites();
            if(wait > 0) {
                if (is_need_setup_waiter) {
                    setTimeout(this.process.bind(this), diff);
                    new ER_W_Timeout_Clock({
                        timeout : diff,
                        techname : 'collect_invite_next_period',
                        description : 'Start next iteration of inviting'
                    });
                }
                return false;
            }
            if(this.get_invited_in_current_period() < this.get_invite_limit_per_period())
                return true;
            else
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_FINISHED);

            var diff = this.get_diff_between_now_and_next_period_start();
            if (diff <= 0) {
                this.reset_current_period();
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_STARTED);
                return true;
            } else {
                if (is_need_setup_waiter) {
                    setTimeout(this.process.bind(this), diff);
                    new ER_W_Timeout_Clock({
                        timeout : diff,
                        techname : 'collect_invite_next_period',
                        description : 'Start next iteration of inviting'
                    });
                }
                return false;
            }
        },

        begin_process : function() {
            var that = this;

            var evtPK = document.createEvent("CustomEvent");
            evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                function(result) {
                    if (result) {
                        that.reset_current_period();
                        that.set_current_period_state(true);
                        that._go_to_next_profile();
                    } else {
                        that._on_license_not_valid();
                    }
                }
            );
            window.dispatchEvent(evtPK);
        },

        process : function() {
            if(!this.check_should_continue_work(true))
                return;

            var that = this;

            var evtPK = document.createEvent("CustomEvent");
            evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                function(result) {
                    if (result) {
                        that._process();
                    } else {
                        that._on_license_not_valid();
                    }
                }
            );
            window.dispatchEvent(evtPK);
        },

        _process : function() {
            var that = this;
            this._process_single_page()
                .then(function() {
                    setTimeout(
                        that._on_process_single_page_finished.bind(that),
                        //er_utils.getRandomInt(3000, 8000)
                        er_connect_selected_timeouts.get_random_timeout('go_to_next_contact')
                    )
                })
        },
        _on_process_single_page_finished : function() {
            if(this.get_invited_in_current_period() >= this.get_invite_limit_per_period()) {
                this.set_next_period_start();
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_FINISHED);
            }

            if(this.check_should_continue_work(false)) {
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_STARTED);
                this._go_to_next_profile();
            } else {
                var diff = this.get_diff_between_now_and_next_period_start();
                if (diff > 0) {
                    setTimeout(this.begin_process.bind(this), diff);
                    new ER_W_Timeout_Clock({
                        timeout : diff,
                        techname : 'collect_invite_next_period',
                        description : 'Start next iteration of inviting'
                    });
                }
            }
        },

        _process_single_page : function() {
            var deferred = $.Deferred();

            var  that = this;

            if(er_utils.is_current_page_deleted_profile()) {
                this._move_first_to_excluded()
                    .then(function() {
                        that.increase_invited_in_current_period(1);
                        deferred.resolve();
                    });
            } else {
                this._pre_process_page()
                    .then(this._write_invitation.bind(this))
                    .then(this._mark_first_as_processed.bind(this))
                    .then(function() {
                        that.increase_invited_in_current_period(1);
                        er_license_limit._increase_invites_counter(1);
                        //setTimeout(deferred.resolve.bind(deferred), er_utils.getRandomInt(3000, 8000));
                        deferred.resolve();
                    });
            }

            return deferred.promise();
        },

        _pre_process_page : function() {
            var deferred = $.Deferred();
            er_logger.log('START : _pre_process_page');

            var that = this;

            if (er_utils.is_new_style_page()) {
                er_logger.log('_pre_process_page : GENERAL LINKEDIN');

                if(that.is_need_to_extract_profile()) {
                    er_profile_extractor.process_single_page()
                        .then(deferred.resolve.bind(deferred));
                } else {
                    deferred.resolve();
                }
            } else if (er_utils.is_sales_navigator_profile_page()) {
                er_logger.log('_pre_process_page : SALES NAVIGATOR');

                er_sn_profile_helper._export_to_db_current_profile_page()
                    .then(function() {
                        er_sn_profile_helper.extract_and_store_profile_id_map_to_snid()
                            .then(deferred.resolve.bind(deferred));
                    });
            }

            /*er_utils.scroll_page_down_by_screens()
                .then(function() {
                    er_logger.log('SCROLL FINISHED : _pre_process_page ');

                    if (er_utils.is_new_style_page()) {
                        er_logger.log('_pre_process_page : GENERAL LINKEDIN');

                        if(that.is_need_to_extract_profile()) {
                            er_profile_extractor.process_single_page()
                                .then(deferred.resolve.bind(deferred));
                        } else {
                            deferred.resolve();
                        }
                    } else if (er_utils.is_sales_navigator_profile_page()) {
                        er_logger.log('_pre_process_page : SALES NAVIGATOR');

                        er_sn_profile_helper._export_to_db_current_profile_page()
                            .then(function() {
                                er_sn_profile_helper.extract_and_store_profile_id_map_to_snid()
                                    .then(deferred.resolve.bind(deferred));
                            });
                    }
                });*/

            return deferred.promise();
        },

        _write_invitation : function() {
            er_logger.log('START _write_invitation');
            var deferred = $.Deferred();

            var that = this;

            this._open_invitation_popup_deferred()
                .then(function(result) {
                    er_logger.log('open_invitation_popup_ result = '+result);
                    if (result) {
                        er_utils.wait_promise(500)
                            .then(er_connect_selected_lists_control.get_active_list.bind(er_connect_selected_lists_control))
                            .then(function(er_Connect_List) {
                                var url = er_utils.escape_url(window.location.href);
                                var profile_id = er_utils.get_profile_id_from_url_profile_page(url);

                                er_mini_profiles_db.get_profile(profile_id)
                                    .then(function(mini_profile) {
                                        that.insert_email_if_need(mini_profile.firstname, mini_profile.lastname);
                                        that._make_jq_btn_send_invite_enabled();

                                        if(er_Connect_List.message == null || er_Connect_List.message == '') {
                                            er_logger.log('EMPTY INVITATION MESSAGE TEMPLATE ');

                                            setTimeout(function() {
                                                that._click_and_close_deferred()
                                                    .then(deferred.resolve.bind(deferred));
                                            }, er_connect_selected_timeouts.get_random_timeout('click_send'));
                                        } else {
                                            er_logger.log('INVITATION MESSAGE TEMPLATE is SET');

                                            that._open_textarea_invitation_popup_deferred()
                                                .then(that._insert_invitation_message.bind(that))
                                                .then(function() {
                                                    setTimeout(function() {
                                                        that._click_and_close_deferred()
                                                            .then(deferred.resolve.bind(deferred));
                                                    }, er_connect_selected_timeouts.get_random_timeout('click_send'));
                                                })
                                        }
                                    });
                            });
                    } else {
                        er_logger.log('RESOLVE AS FALSE _write_invitation');
                        deferred.resolve(false);
                    }
                });

            return deferred.promise();
        },

        _open_invitation_popup_deferred : function(){
            er_logger.log('START _open_invitation_popup_deferred');
            var deferred = $.Deferred();

            var that = this;

            setTimeout(function() {
                that._click_open_invitation_popup_promise()
                    .then(function(result) {
                        if(result) {
                            that._wait_invitation_popup_open()
                                .then(deferred.resolve.bind(deferred));
                        } else {
                            deferred.resolve(null);
                        }
                    });
            }, er_connect_selected_timeouts.get_random_timeout('click_connect'));

            return deferred.promise();

            /*if (this._click_open_invitation_popup()) {
                return this._wait_invitation_popup_open();
            } else {
                var deferred = $.Deferred();
                deferred.resolve(null);
                return deferred.promise();
            }*/
        },
        _wait_invitation_popup_open : function(deferred) {
            if(!deferred)
                deferred = $.Deferred();

            if(this._is_invitation_popup_open()) {
                deferred.resolve(true);
            } else {
                var that = this;
                setTimeout(function(){ that._wait_invitation_popup_open(deferred); },100);
            }

            return deferred.promise();
        },
        _wait_invitation_popup_close : function(deferred, attempt) {
            if(!deferred)
                deferred = $.Deferred();
            if(attempt == null)
                attempt = 40;

            if(!this._is_invitation_popup_open()) {
                deferred.resolve(true);
            } else {
                if (er_utils.is_sales_navigator_profile_page() && attempt <= 0) {
                    deferred.resolve(false);
                } else {
                    var that = this;
                    --attempt;
                    setTimeout(function(){ that._wait_invitation_popup_close(deferred, attempt); },100);
                }
            }

            return deferred.promise();
        },
        _get_jq_invitation_popup : function() {
            if(er_utils.is_new_style_page()) {
                return $('#li-modal-container').children('.send-invite');
            } else {
                return $('#dialog');
            }
        },
        _is_invitation_popup_open : function() {
            var jq_popup = this._get_jq_invitation_popup();
            if (er_utils.is_new_style_page()) {
                return jq_popup.length == 1;
            } else {
                var jq_textarea = this._get_invitation_popup_textarea();
                return jq_textarea.length == 1;
            }
        },
        _get_invitation_popup_textarea : function() {
            if (er_utils.is_new_style_page()) {
                return $('#custom-message');
            } else {
                return $('#connect-message-content');
            }
        },
        _click_open_invitation_popup : function() {
            var jq_btn_connect;
            if(er_utils.is_new_style_page()) {
                jq_btn_connect = $('#profile-content').find('button.connect');
            } if (er_utils.is_sales_navigator_profile_page()) {
                jq_btn_connect = $('#topcard').find('button.connect-button');
            }
            if (jq_btn_connect.length == 0) {
                return false;
            } else {
                jq_btn_connect.click();
                return true;
            }
        },
        _click_open_invitation_popup_promise : function() {
            var deferred = $.Deferred();
            er_logger.log('START _click_open_invitation_popup_promise');

            this.get_jq_connect_button_promise()
                .then(function(jq_btn_connect) {
                    if (jq_btn_connect.length == 0) {
                        er_logger.log('CONNECT BUTTON NOT FOUND');
                        deferred.resolve(false);
                    } else {
                        er_logger.log('CONNECT BUTTON FOUND');
                        jq_btn_connect.click();
                        deferred.resolve(true);
                    }
                });

            return deferred.promise();
        },
        _get_jq_btn_send_invite : function(jq_popup) {
            jq_popup = jq_popup ? jq_popup : this._get_jq_invitation_popup();

            var jq_btn_send;
            if(er_utils.is_new_style_page()) {
                jq_btn_send = jq_popup.find('button.button-primary-large');
            } if (er_utils.is_sales_navigator_profile_page()) {
                jq_btn_send = jq_popup.find('button.submit-button');
            }
            return jq_btn_send;
        },
        _make_jq_btn_send_invite_enabled : function() {
            var jq_btn_send = this._get_jq_btn_send_invite();
            var disabled = jq_btn_send.is(":disabled");
            if(disabled) {
                jq_btn_send.prop('disabled', false);
            }
        },
        _click_btn_send_invite : function() {
            var jq_popup = this._get_jq_invitation_popup();
            var jq_btn_send = this._get_jq_btn_send_invite(jq_popup);

            if (jq_btn_send.length == 0) {
                return false;
            } else {
                var disabled = jq_btn_send.is(":disabled");
                if(disabled) {
                    jq_btn_send.prop('disabled', false);
                }
                jq_btn_send.click();
                return !disabled;
            }
        },
        _click_btn_add_note : function() {
            var jq_popup = this._get_jq_invitation_popup();
            var jq_btn_add_note = jq_popup.find('button.button-secondary-large');

            if (jq_btn_add_note.length == 0) {
                return false;
            } else {
                jq_btn_add_note.click();
                return true;
            }
        },
        _click_and_close_deferred : function() {
            if(this._click_btn_send_invite()) {
                return this._wait_invitation_popup_close();
            } else {
                var deferred = $.Deferred();
                deferred.resolve(false);
                return deferred.promise();
            }
        },
        _open_textarea_invitation_popup_deferred : function() {

            if(er_utils.is_sales_navigator_profile_page()) {
                var deferred = $.Deferred();
                deferred.resolve(true);
                return deferred.promise();
            }

            var that = this;

            setTimeout(function(){
                that._click_btn_add_note();
            } , er_connect_selected_timeouts.get_random_timeout('click_add_note'));

            return this._wait_textarea_invitation_popup_appears_deferred();
        },
        _wait_textarea_invitation_popup_appears_deferred : function(deferred) {
            if(!deferred)
                deferred = $.Deferred();

            var jq_textarea = this._get_invitation_popup_textarea();
            if(jq_textarea.length == 0) {
                var that = this;

                setTimeout(function() {
                    that._wait_textarea_invitation_popup_appears_deferred(deferred);
                },100);
            } else {
                deferred.resolve();
            }

            return deferred.promise();
        },

        _insert_invitation_message : function() {
            var deferred = $.Deferred();

            var that = this;

            var url = er_utils.escape_url(window.location.href);

            var profile_id = er_utils.get_profile_id_from_url_profile_page(url);

            this._make_jq_btn_send_invite_enabled();

            this.generate_message_text_using_profile_id_deferred(profile_id)
                .then(function(message) {
                    var jq_textarea = that._get_invitation_popup_textarea();
                    jq_textarea.focus().focusout().keyup().change();
                    jq_textarea.val('');
                    jq_textarea.focus().focusout().keyup().change();

                    setTimeout(function() {
                            var jq_textarea = that._get_invitation_popup_textarea();

                            er_utils.insert_or_imitate_writing(
                                message,
                                jq_textarea,
                                er_connect_selected_timeouts.get_message_mode(),
                                function() {
                                    //jq_textarea.val(message);
                                    jq_textarea.focusout().keyup().change();
                                    deferred.resolve();
                                }
                            );
                            //setTimeout(deferred.resolve.bind(deferred), er_utils.getRandomInt(2000, 3000));
                        },
                        er_connect_selected_timeouts.get_random_timeout('insert_message'));
                });

            return deferred.promise();
        },


        _mark_first_as_processed : function() {
            var deferred = $.Deferred();

            er_connect_selected_lists_control.init()
                .then(er_connect_selected_lists_control.get_active_list.bind(er_connect_selected_lists_control))
                .then(function(connect_list) {
                    connect_list.move_first_queue_id_to_processed();
                    connect_list.save_to_db()
                        .then(deferred.resolve.bind(deferred));
                });

            return deferred.promise();
        },
        _move_first_to_excluded : function() {
            var deferred = $.Deferred();

            er_connect_selected_lists_control.init()
                .then(er_connect_selected_lists_control.get_active_list.bind(er_connect_selected_lists_control))
                .then(function(connect_list) {
                    connect_list.move_first_queue_id_to_excluded();
                    connect_list.save_to_db()
                        .then(deferred.resolve.bind(deferred));
                });

            return deferred.promise();
        },

        _go_to_next_profile : function() {
            var that = this;

            er_connect_selected_lists_control.init()
                .then(er_connect_selected_lists_control.get_active_list.bind(er_connect_selected_lists_control))
                .then(function(connect_list) {
                    var id = connect_list.get_first_queue_id();
                    if(id) {
                        er_universal_profile_helper.go_to_profile(id);
                    }

                });
        },


        generate_message_text_using_profile_id_deferred : function(id) {
            var deferred = $.Deferred();

            var that = this;

            er_mini_profiles_db.get_profile(id)
                .then(function(mini_profile) {
                    that.insert_email_if_need(mini_profile.firstname, mini_profile.lastname);

                    er_connect_selected_lists_control.get_active_list()
                        .then(function(er_Connect_List) {
                            var message = that.generate_message_text(mini_profile, er_Connect_List);
                            deferred.resolve(message);
                        });
                });

            return deferred.promise();
        },
        generate_message_text : function(mini_profile, er_Connect_List) {
            var defaults = {
                position : er_Connect_List.position,
                company : er_Connect_List.company
            };

            return er_utils.message_generator(
                er_Connect_List.message,
                mini_profile,
                defaults);
        },

        insert_email_if_need : function(firstname, lastname) {
            var jq_email = this.get_jq_email_input();
            if(jq_email.length > 0 && jq_email.val() == '') {
                jq_email.val(er_utils.generate_fake_email(firstname, lastname));
                jq_email.focus().keydown().keyup().change().focusout();

                var e = jQuery.Event("keydown");
                e.which = 13; // Enter
                jq_email.trigger(e);
            }
        },
        get_jq_email_input : function() {
            if(er_utils.is_new_style_page()) {
                return $('#email');
            } else if(er_utils.is_sales_navigator_profile_page()) {
                return $('#connect-email-input');
            }
        },

        get_jq_connect_button_promise : function() {
            er_logger.log('START get_jq_connect_button_promise');
            var deferred = $.Deferred();

            var jq_btn_connect;
            if(er_utils.is_new_style_page()) {
                jq_btn_connect = $('#profile-content').find('button.connect');
                if(jq_btn_connect.length > 0) {
                    deferred.resolve(jq_btn_connect);
                } else {
                    this.open_3dots_buttons_popup()
                        .then(function(jq_3dots_buttons_popup) {
                            if(!jq_3dots_buttons_popup) {
                                deferred.resolve(jq_btn_connect);
                            } else {
                                jq_btn_connect = jq_3dots_buttons_popup.find('.action.connect');
                                deferred.resolve(jq_btn_connect);
                            }
                        });
                }

            } if (er_utils.is_sales_navigator_profile_page()) {
                jq_btn_connect = $('#topcard').find('button.connect-button');
                deferred.resolve(jq_btn_connect);
            }

            return deferred.promise();
        },
        open_3dots_buttons_popup : function() {
            var jq_3dots_btn = $('.pv-top-card-overflow__trigger');
            if(jq_3dots_btn.length == 0) {
                var deferred = $.Deferred();
                deferred.resolve(null);
                return deferred.promise();
            }
            jq_3dots_btn.click();

            return this._3dots_buttons_popup_open_waiter();
        },
        _3dots_buttons_popup_open_waiter : function(deferred, current_attempt) {
            if(!deferred)
                deferred = $.Deferred();

            if(!current_attempt)
                current_attempt = 0;

            var jq_popup = $('.pv-top-card-overflow__options');
            if(jq_popup.length > 0) {
                deferred.resolve(jq_popup);
            } else {
                if(current_attempt >= 20) {
                    deferred.resolve(null);
                } else {
                    var new_attempt;
                    if (document.webkitHidden || document.hidden) {
                        new_attempt = current_attempt;
                    } else {
                        new_attempt = current_attempt + 1;
                    }
                    var that = this;
                    setTimeout(function() {
                        that._3dots_buttons_popup_open_waiter(deferred, new_attempt);
                    }, 100);
                }
            }


            return deferred.promise();
        },


        _on_license_not_valid : function() {
            this.set_mode_connect_inviter(false);
        },
    };
/**
 * Created by erinsasha on 01/03/17.
 */
var er_connect_selected_lists_control = window.er_connect_selected_lists_control || {
        EVENT_NEW_CONNECT_SELECTED_CREATED : 'ER_EVENT_NEW_CONNECT_SELECTED_CREATED',
        EVENT_CONNECT_SELECTED_DELETED : 'ER_EVENT_CONNECT_SELECTED_DELETED',
        EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED : 'ER_EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED',


        DEFAULT_CONNECT_SELECTED_ID : 'DEFAULT_LIST',

        init : function() {
            var deferred = $.Deferred();

            if(this.inited) {
                deferred.resolve();
                return deferred.promise();
            }

            var that = this;
            this._init_create_default_list()
                .then(function() {
                    that.inited = true;
                    deferred.resolve();
                });

            return deferred.promise();
        },
        _init_create_default_list : function() {
            var deferred = $.Deferred();
            if (localStorage.er_connect_selected_list_active_id != null && localStorage.er_connect_selected_list_active_id != '') {
                deferred.resolve();
                return deferred.promise();
            }

            var that = this;

            var connect_list = new ER_Connect_List({ id : this.DEFAULT_CONNECT_SELECTED_ID });
            connect_list.save_to_db()
                .then(function() {
                    that._add_list_id_to_list(that.DEFAULT_CONNECT_SELECTED_ID);
                    localStorage.er_connect_selected_list_active_id = that.DEFAULT_CONNECT_SELECTED_ID;

                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_NEW_CONNECT_SELECTED_CREATED, true, true, connect_list);
                    window.dispatchEvent(evt);

                    evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED, true, true, that.DEFAULT_CONNECT_SELECTED_ID);
                    window.dispatchEvent(evt);

                    deferred.resolve();
                });

            return deferred.promise();
        },

        get_active_list_id : function() {
            return localStorage.er_connect_selected_list_active_id;
        },
        set_active_list_id : function(id) {
            if (localStorage.er_connect_selected_list_active_id == id)
                return;

            localStorage.er_connect_selected_list_active_id = id;

            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_ACTIVE_CONNECT_SELECTED_SWITCHED, true, true, id);
            window.dispatchEvent(evt);
        },
        is_default_list_active : function() {
            return this.DEFAULT_CONNECT_SELECTED_ID == this.get_active_list_id();
        },


        get_active_list : function() {
            return er_connect_list_db.get_list(this.get_active_list_id());
        },
        create_new_list_with_id : function(id) {
            if(this.is_list_with_id_exists(id))
                return er_connect_list_db.get_list(id);

            var deferred = $.Deferred();

            var that = this;

            var connect_list = new ER_Connect_List({ id : id });
            connect_list.save_to_db()
                .then(function() {
                    that._add_list_id_to_list(id);

                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_NEW_CONNECT_SELECTED_CREATED, true, true, connect_list);
                    window.dispatchEvent(evt);

                    deferred.resolve(connect_list);
                });

            return deferred.promise();
        },
        create_new_list_as_active_with_id : function(id) {
            var deferred = $.Deferred();

            var that = this;
            this.create_new_list_with_id(id)
                .then(function(list) {
                    if(list) {
                        that.set_active_list_id(id);
                        deferred.resolve(list);
                    }
                });

            return deferred.promise();
        },

        get_all_lists_ids : function() {
            var list = localStorage.er_connect_lists_ids;
            if (!list || list == '') {
                list = [];
                localStorage.er_connect_lists_ids = JSON.stringify(list);
            } else {
                list = JSON.parse(list);
            }
            return list;
        },
        is_list_with_id_exists : function(id) {
            var list = this.get_all_lists_ids();
            return list.indexOf(id) >= 0;
        },
        _add_list_id_to_list : function(id) {
            var list = this.get_all_lists_ids();
            if(list.indexOf(id) < 0) {
                list.push(id);
                localStorage.er_connect_lists_ids = JSON.stringify(list);
            }
        },
        delete_list : function(id) {
            var deferred = $.Deferred();

            var list = this.get_all_lists_ids();
            var id_pos = list.indexOf(id);
            if (id_pos < 0 || id == this.DEFAULT_CONNECT_SELECTED_ID) {
                deferred.resolve(false);
                return deferred.promise();
            }

            if(id == this.get_active_list_id()) {
                this.set_active_list_id(this.DEFAULT_CONNECT_SELECTED_ID);
            }

            list.splice(id_pos, 1);
            localStorage.er_connect_lists_ids = JSON.stringify(list);

            var that = this;

            er_connect_list_db.delete_list(id)
                .then(function() {
                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_CONNECT_SELECTED_DELETED, true, true, id);
                    window.dispatchEvent(evt);

                    deferred.resolve(true);
                });

            return deferred.promise();
        },
    };
/**
 * Created by erinsasha on 28/08/17.
 */

var er_connect_selected_lm_callbacks = window.er_connect_selected_lm_callbacks || {
        get_callbacks : function() {
            return {
                get_lists_deferred : this.get_lists_deferred.bind(this), // get_lists_deferred () // return ({id : id, name : name}, error_message)
                get_sublists : this.get_sublists.bind(this), // get_sublists() // return {id : id, name : name}
                get_sublists_counters_deferred : this.get_sublists_counters_deferred.bind(this), // get_sublists_counters_deferred (list_id) // ({id : sublist_id, counter : counter }, error_message)
                get_create_new_deferred : this.get_create_new_deferred.bind(this), // get_create_new_deferred (list_name) // return (list_id, list_name, error_message)
                get_current_list_id : this.get_current_list_id.bind(this), // get_current_list_id () // return list_id
                get_ids_deferred : this.get_ids_deferred.bind(this), // get_ids_deferred (list_id, sublist_id) // return ids
                perform_action_return_counter_deferred : this.perform_action_return_counter_deferred.bind(this), // perform_action_return_counter_deferred (list_id, sublist_id, action, ids) // return counter of target
            }
        },

        get_lists_deferred : function() {
            var deferred = $.Deferred();
            var lists = er_connect_selected_lists_control.get_all_lists_ids();
            var result = [];
            for(var i= 0, list_id; i<lists.length; i++) {
                list_id = lists[i];
                result.push({id : list_id, name : list_id});
            }
            deferred.resolve(result);
            return deferred.promise();
        },
        get_sublists : function() {
            return [
                {id : 'queue', name : 'Inviting Queue'},
                {id : 'processed', name : 'Invited'},
                {id : 'excluded', name : 'Excluded'},
            ];
        },
        get_sublists_counters_deferred : function(list_id) {
            var deferred = $.Deferred();
            er_connect_list_db.get_list(list_id)
                .then(function(connect_list){
                    var result = [
                        {id : 'queue', counter : connect_list.get_queue_length()},
                        {id : 'processed', counter : connect_list.get_processed_length()},
                        {id : 'excluded', counter : connect_list.get_excluded_length()}
                    ];
                    deferred.resolve(result);
                });
            return deferred.promise();
        },
        get_create_new_deferred : function(list_name) {
            var deferred = $.Deferred();
            if(er_connect_selected_lists_control.is_list_with_id_exists(list_name)) {
                deferred.resolve(null, null, 'List already exists');
            } else {
                er_connect_selected_lists_control.create_new_list_with_id(list_name)
                    .then(function(connect_selected_list) {
                        deferred.resolve(connect_selected_list.id, connect_selected_list.name);
                    });
            }

            return deferred.promise();
        },
        get_current_list_id : function() {
            return er_connect_selected_lists_control.get_active_list_id();
        },
        get_ids_deferred : function(list_id, sublist_id) {
            var deferred = $.Deferred();
            er_connect_list_db.get_list(list_id)
                .then(function(connect_list){
                    var result;
                    switch (sublist_id) {
                        case  'queue' : result = connect_list.get_all_ids_in_queue(); break;
                        case  'processed' : result = connect_list.get_all_ids_in_processed(); break;
                        case  'excluded' : result = connect_list.get_all_ids_in_excluded(); break;
                    }

                    deferred.resolve(result);
                });
            return deferred.promise();
        },
        perform_action_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();
            er_connect_list_db.get_list(list_id)
                .then(function(connect_list){

                    var target_ids;

                    switch (sublist_id) {
                        case  'queue' : target_ids = connect_list.get_all_ids_in_queue(); break;
                        case  'processed' : target_ids = connect_list.get_all_ids_in_processed(); break;
                        case  'excluded' : target_ids = connect_list.get_all_ids_in_excluded(); break;
                    }

                    switch (action) {
                        case 'add' : target_ids = er_utils.get_array_merge(target_ids, connect_list.get_uniq(ids)); break;
                        case 'keep_the_same' : target_ids = er_utils.get_array_intersection(target_ids, ids); break;
                        case 'delete_the_same' : target_ids = er_utils.get_array_uniq(target_ids, ids); break;
                        case 'replace' : target_ids = ids; break;
                        case 'add_all' : target_ids = er_utils.get_array_merge(target_ids, ids); break;
                    }

                    switch (sublist_id) {
                        case  'queue' : connect_list.set_ids_in_queue(target_ids); break;
                        case  'processed' : connect_list.set_ids_in_processed(target_ids); break;
                        case  'excluded' : connect_list.set_ids_in_excluded(target_ids); break;
                    }

                    connect_list.save_to_db()
                        .then(deferred.resolve.bind(deferred));
                });
            return deferred.promise();
        },
        perform_action_return_counter_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();

            this.perform_action_deferred(list_id, sublist_id, action, ids)
                .then(function(connect_list) {
                    var new_counter;

                    switch (sublist_id) {
                        case  'queue' : new_counter = connect_list.get_queue_length(); break;
                        case  'processed' : new_counter = connect_list.get_processed_length(); break;
                        case  'excluded' : new_counter = connect_list.get_excluded_length(); break;
                    }

                    deferred.resolve(new_counter);
                });

            return deferred.promise();
        },
    };

/**
 * Created by erinsasha on 09/08/17.
 */

var er_connect_selected_timeouts = window.er_connect_selected_timeouts || {
        const_timeouts_names : {
            click_connect : 'Click "Connect" after loading profile page',
            click_add_note : 'Click "Add note" after invitation popup opening',
            insert_message : 'Insert message after clicking "Add note"',
            click_send : 'Click "Send" after inserting message',
            go_to_next_contact : 'Go to next contact',

        },
        const_timeout_fast : {
            click_connect : {min : 1000, max : 3000},
            click_add_note : {min : 1000, max : 3000},
            insert_message : {min : 1000, max : 3000},
            click_send : {min : 1000, max : 3000},
            go_to_next_contact : {min : 10000, max : 20000}
        },
        const_timeout_safe : {
            click_connect : {min : 5000, max : 120000},
            click_add_note : {min : 5000, max : 120000},
            insert_message : {min : 5000, max : 120000},
            click_send : {min : 5000, max : 60000},
            go_to_next_contact : {min : 30000, max : 600000}
        },
        const_message_mode_type_write : 1,
        const_message_mode_insert : 2,

        init : function() {
            if(this.started)
                return;
            this.started = true;
            this._init_timeouts_from_local_storage();
            this._init_message_mode_from_local_storage();
        },
        _init_timeouts_from_local_storage : function() {
            if(this.current_timeouts)
                return;

            var current_timeouts = localStorage.er_connect_selected_timeouts;
            if(current_timeouts && current_timeouts != '') {
                this.current_timeouts = JSON.parse(current_timeouts);
                this.restore_missed_values();
            } else
                this.save_timeouts_from_object(this.const_timeout_fast);
        },
        _init_message_mode_from_local_storage : function() {
            if(this.message_mode)
                return;

            var message_mode = localStorage.er_connect_selected_message_mode;
            if(message_mode && message_mode != '') {
                this.message_mode = JSON.parse(message_mode);
            } else
                this.message_mode = this.const_message_mode_type_write;
        },
        restore_missed_values : function() {
            var timeouts_tech_names = Object.keys(this.const_timeout_fast);

            var tech_name;

            for(var i=0; i<timeouts_tech_names.length; i++) {
                tech_name = timeouts_tech_names[i];
                if(!this.current_timeouts[tech_name])
                    this.current_timeouts[tech_name] = this.const_timeout_fast[tech_name];
            }
        },
        save_timeouts_from_object : function(obj) {
            this.current_timeouts = er_utils.get_object_copy(obj);
            this.save_current_timeouts_to_local_storage();
        },
        save_current_timeouts_to_local_storage : function() {
            localStorage.er_connect_selected_timeouts = JSON.stringify(this.current_timeouts);
        },
        save_timeouts_and_message_mode : function(timeouts, message_mode) {
            this.save_timeouts_from_object(timeouts);
            this.set_message_mode(message_mode);
        },
        get_timeouts : function() {
            this.init();
            return this.current_timeouts;
        },
        get_random_timeout : function(timeout_name, dont_show_clock) {
            this.init();
            var timeout = this.current_timeouts[timeout_name];
            var rt = er_utils.getRandomInt(timeout.min, timeout.max);

            if(!dont_show_clock) {
                new ER_W_Timeout_Clock({
                    timeout : rt,
                    techname : timeout_name,
                    description : this.const_timeouts_names[timeout_name]
                })
            }

            return rt;
        },
        get_message_mode : function() {
            this.init();
            return this.message_mode;
        },
        set_message_mode : function(val) {
            this.message_mode = val;
            localStorage.er_connect_selected_message_mode = JSON.stringify(val);
        },
    };
/**
 * Created by erinsasha on 01/03/17.
 */
var er_connect_selected_view = window.er_connect_selected_view || {
        type : 'er_connect_selected_view',
        tittle : 'Connect 2nd / 3rd contacts',

        init_main : function() {
            if (this.inited
               // || (!er_utils.is_new_style_page() && !er_utils.is_sales_navigator_page())
            )
                return;

            this.jq_main = $(this._HTML_build_main());

            this._add_handlers();

            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);


            if (
                (er_search_page_helper.is_search_page()
                    && er_connect_selected_collector.is_mode_on_and_tab_active()
                )
                || (er_utils.is_profile_page()
                    &&  er_connect_selected_inviter.is_mode_on_and_tab_active()
                )
            )
                er_main_view.show_settings(this.type);

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            html += this._HTML_build_tabs_pannel();

            html += this._HTML_build_content_collect();
            html += this._HTML_build_content_message();
            html += this._HTML_build_content_invite();
            html += this._HTML_build_content_export();

            html += '</div>';
            return html;
        },
        _HTML_build_tabs_pannel : function() {
            var html = '<div class="tabs_pannel">';
            var collect_set = 'set', invite_set = '';

            if (!er_connect_selected_collector.is_mode_on_and_tab_active()
                && er_connect_selected_inviter.is_mode_on_and_tab_active()) {
                collect_set = '';
                invite_set = 'set';
            }

            html += '<span class="tab '+collect_set+'" data-tab="collect"></span>';
            html += '<span class="tab" data-tab="message"></span>';
            html += '<span class="tab '+invite_set+'" data-tab="invite"></span>';

            html += '<span class="tab" data-tab="export"></span>';

            html += '</div>';

            return html;
        },

        _HTML_build_content_collect : function() {
            var collect_set = 'set';

            if (!er_connect_selected_collector.is_mode_on_and_tab_active()
                && er_connect_selected_inviter.is_mode_on_and_tab_active()) {
                collect_set = '';
            }

            var html = '<div class="content '+collect_set+'" data-type="collect">';
            html += '</div>';
            return html;
        },
        _HTML_build_content_message : function() {
            var html = '<div class="content" data-type="message">';
            html += '</div>';
            return html;
        },
        _HTML_build_content_invite : function() {
            var invite_set = '';

            if (!er_connect_selected_collector.is_mode_on_and_tab_active()
                && er_connect_selected_inviter.is_mode_on_and_tab_active()) {
                invite_set = 'set';
            }

            var html = '<div class="content '+invite_set+'" data-type="invite">';

            html += '</div>';
            return html;
        },
        _HTML_build_content_export : function() {
            var html = '<div class="content" data-type="export">';
            html += '</div>';
            return html;
        },

        _add_handlers : function() {
            new ER_Widget_How_To({
                jq_parent : this.jq_main,
                links : [ER_Widget_How_To.links.er_connect_selected_view]
            });

            this.jq_main.children('.tabs_pannel').children('.tab').click(this._on_click_tab.bind(this));

            var jq_content_collect = this.jq_main.find('.content[data-type=collect]');
            var jq_content_message = this.jq_main.find('.content[data-type=message]');
            var jq_content_invite = this.jq_main.find('.content[data-type=invite]');
            var jq_content_export = this.jq_main.find('.content[data-type=export]');

            this.er_Widget_Connect_Collect = new ER_Widget_Connect_Collect({
                jq_parent : jq_content_collect
            });

            this.er_Widget_Inv_Message_Template = new ER_Widget_Inv_Message_Template({
                jq_parent : jq_content_message
            });

            this.er_Widget_Connect_Invite = new ER_Widget_Connect_Invite({
                jq_parent : jq_content_invite
            });

            this.er_Widget_Connect_Export = new ER_Widget_Connect_Export({
                jq_parent : jq_content_export
            });
        },

        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },
        _on_click_tab : function(event) {
            var jq_tab = $(event.target);
            if(jq_tab.hasClass('set'))
                return;

            jq_tab.siblings('.tab.set').removeClass('set');
            this.jq_main.children('.content.set').removeClass('set');

            jq_tab.addClass('set');
            this.jq_main.children('.content[data-type='+jq_tab.attr('data-tab')+']').addClass('set');
        },
    };
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_connect_selected_view._on_main_view_ready_for_sub_view() });
/**
 * Created by erinsasha on 17/05/17.
 */

function ER_W_Endorse_Clear (options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_W_Endorse_Clear.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_W_Endorse_Clear">';

        html += '<button class="delete_collected danger">Delete collected</button>';
        html += '<button class="delete_endorsed danger">Delete endorsed</button>';

        html += '</div>';
        return html;
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_main.find('.delete_collected').click(this._on_click_btn_delete_collected.bind(this));
        this.jq_main.find('.delete_endorsed').click(this._on_click_btn_delete_endorsed.bind(this));
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _on_click_btn_delete_collected : function() {
        var that = this;

        er_main_view.show_yes_no_dialog(
            'Do you want to delete all collected contacts for endorsement?',
            function() {
                that._on_click_btn_delete_collected_yes(null, true)
            }
        );
    },
    _on_click_btn_delete_collected_yes : function() {
        er_endorse.delete_contacts_for_endorse();
        er_main_view._info_popup_show('Deleted!', {close_timeout : 2000})
    },
    _on_click_btn_delete_endorsed : function() {
        var that = this;

        er_main_view.show_yes_no_dialog(
            'Do you want to delete all contacts from endorsed list to be able endorse them again?',
            function() {
                that._on_click_btn_delete_endorsed_yes(null, true)
            }
        );
    },
    _on_click_btn_delete_endorsed_yes : function() {
        er_endorsed_control.delete_all_endorsed();
        er_endorse.set_endorsed_counter(0);
        er_main_view._info_popup_show('Deleted!', {close_timeout : 2000})
    },
};
/**
 * Created by erinsasha on 21/08/17.
 */
if(!window.ER_Endorse) {
    window.ER_Endorse = function (obj) {
        for(key in obj)
            this[key] = obj[key];

        this.id = obj.id ? obj.id : obj.name;
        this.name = obj.name ? obj.name : obj.id;

        if (! this.queue)
            this.queue = [];
        if (! this.endorsed_ids)
            this.endorsed_ids = [];
        if (! this.excluded_ids)
            this.excluded_ids = [];
        if (! this.sn_ids)
            this.sn_ids = [];
        if (! this.error_ids)
            this.error_ids = [];
        if (! this.error_ids_to_codes)
            this.error_ids_to_codes = {};

        if(obj.t)
            this.t = obj.t;
        else {
            var d = new Date();
            this.t = d.getTime();
        }
    };
    ER_Endorse.prototype = {
        save_to_db : function() {
            var d = new Date();
            this.u = d.getTime();

            return er_endorse_db.push_endorse(this);
        },
        get_queue_length : function() {
            return this.queue.length;
        },
        get_endorsed_length : function() {
            return this.endorsed_ids.length;
        },
        get_excluded_length : function() {
            return this.excluded_ids.length;
        },

        get_all_ids_in_queue : function() {
            return this.queue;
        },
        get_all_ids_in_endorsed : function() {
            return this.endorsed_ids;
        },
        get_all_ids_in_excluded : function() {
            return this.excluded_ids;
        },

        get_uniq : function(ids) {
            ids = er_utils.get_array_uniq(ids, this.excluded_ids);
            ids = er_utils.get_array_uniq(ids, this.endorsed_ids);
            return er_utils.get_array_uniq(ids, this.queue);
        },

        set_ids_in_queue : function(ids) {
            this.queue = ids;
        },
        set_ids_in_endorsed : function(ids) {
            this.endorsed_ids = ids;
        },
        set_ids_in_excluded : function(ids) {
            this.excluded_ids = ids;
        },
    };
};
/**
 * Created by Alex on 30.08.2016.
 */
/*
var er_endorse = window.er_endorse || {
    WARNING_THRESHOLD_LIMIT : 60,
    DEFAULT_CONTACTS_ENDORSE_LIMIT_PER_PERIOD : 60,
    DEFAULT_CONTACTS_ENDORSE_LIMIT_UNSET_VALUE : 'UNSET',
    DEFAULT_PERIOD_HOURS : 24,
    DEFAULT_PERIOD_UNSET_VALUE : 'UNSET',

    CONST_CURRENT_PERIOD_STARTED : 'STARTED',
    CONST_CURRENT_PERIOD_FINISHED : 'FINISHED',

    CONST_COLLECT_LIMIT_BETWEEN_SAVES : 10, // Максимальное количество контактов в оперативной памяти со страницы списка контактов для добавления в массив для эндорса до записи в local storage
    CONST_ENDORSE_MODE_ALL : 1, // Режим эндорсмента - все навыки
    CONST_ENDORSE_MODE_SPECIFIED : 2, // Режим эндорсмента - только указанные навыки
    CONST_ENDORSE_MODE_FIRST : 3, // Режим эндорсмента - первые несколько (с указанным лимитом)


    //skill_for_endorse : ['PHP', 'JavaScript', 'Web Development', 'HTML5','HTML', 'JQuery', 'React.js', 'Redux', 'CSS3', 'AngularJS', 'Marketing', 'Management', 'Sales', 'Sales Management', 'Growth Hacking', 'Team Management', 'Project Management', 'Business Strategy', 'Business Process', 'Business Development', 'Start-ups', 'Strategy', 'Marketing Strategy', 'Leadership', 'Python', 'Ruby on rails', 'C#', 'Java', 'Swift', 'Object-C', 'MySQL', 'Git'],
    // Юзается в старой версии
    //endorsed_ids : null,


    // Юзается в старой версии
    endrose_temp : {
        last_people_length : 0,
        scroll_attempt : 0
    },

    contacts_for_endorse : null, // Array of object {i : 'id', a : 'authToken'}  Массив контактов для эндора
    unsaved_contacts_counter : 0, // Сколько контактов в оперативной памяти, которые не были сохранены в localStorage
    last_added_contact_num : -1, // Порядковый номер последнего контакта добавленного в массив для эндорса
    contact_list_scroll_attempt : 0, // Количество попыток скрола контакт листа до перезагрузки страницы

    endorsed_counter : 0, // Сколько уже всего человек заиндорсели
    endorse_mode : null, // Текущий режим эндорсмента
    skill_for_endorse : null, // Массив скиллов для эндорсмента
    max_endorse_skills_count : null, // Максиммальное Количество скиллов для эндорсмента, если включен соответствующий режим
    endorsed_skills_count : 0, // Количество заэндорсенных скилов

    current_period_state : null, // Запущен ли эндорсмент текущего периода
    endorsed_limit_per_period : null, // Максимально количество проифилей, которые могут быть заиндорсены в рамках одного периода
    endorsed_in_current_period : null, // Сколько контактов уже заиндорсили в текущем периоде
    endorse_period_hours_between : null, // Количество часов между периодами эндорсмента

    /!**
     * Инициализирует переменные из local Storage
     * @private
     *!/
    _new_init_from_local_storage : function() {
        // Массив контактов для послледующего эндорсмента
        this.contacts_for_endorse = er_endorse_queue.get_contacts_for_endorse();

        // Порядковый номер последнего контакта добавленного в массив для эндорса
        this.last_added_contact_num = this.get_last_added_contact_num();

        // Текущий режим эндорсмента
        this.endorse_mode = this.get_endorse_mode();

        // Массив скиллов для эндорсмента
        this.skill_for_endorse = this.get_skill_for_endorse();
        this.skill_for_endorse_lower_case = er_utils.getArrayOfStringsInLowerCase(this.skill_for_endorse);

        // Максиммальное Количество скиллов для эндорсмента, если включен соответствующий режим
        this.max_endorse_skills_count = this.get_max_endorse_skills_count();

        // Запущен ли эндорсмент текущего периода
        this.current_period_state = this.get_current_period_state();

        //  Сколько контактов уже заиндорсили в текущем периоде
        this.endorsed_in_current_period = this.get_endorsed_in_current_period();
    },
    

    revert_contacts_for_endorse : function() {
        console.log('Reverting Contacts for Endorsing');
        var arr = er_endorse_queue.get_contacts_for_endorse();
        arr = er_utils.get_array_reverted(arr);
        localStorage.er_contacts_for_endorse = JSON.stringify(arr);
        console.log('Contacts for endorsing REVERTED');
    },

    delete_contacts_for_endorse : function() {
        this.contacts_for_endorse = [];
        localStorage.er_contacts_for_endorse = JSON.stringify(this.contacts_for_endorse);

        this.last_added_contact_num = 0;
        localStorage.er_endorse_last_added_contact_num = 0;
    },
    /!**
     * Порядковый номер последнего контакта добавленного в массив для эндорса
     *!/
    get_last_added_contact_num : function() {
        // Порядковый номер последнего контакта добавленного в массив для эндорса
        var last_added_contact_num = localStorage.er_endorse_last_added_contact_num;
        if (last_added_contact_num && last_added_contact_num != '') {
            last_added_contact_num = Number(last_added_contact_num);
        } else {
            last_added_contact_num = -1;
        }

        return last_added_contact_num;
    },

    /!**
     * Текущий режим эндорсмента
     *!/
    get_endorse_mode : function() {
        endorse_mode = localStorage.er_endorse_mode;
        if (endorse_mode && endorse_mode != '') {
            max_endorse_skills_count = this.CONST_ENDORSE_MODE_FIRST;
        }
        return Number(endorse_mode);
    },
    /!**
     * Задает Текущий режим эндорсмента
     *!/
    set_endorse_mode : function(value) {
        localStorage.er_endorse_mode = value;
    },
    /!**
     * Массив скиллов для эндорсмента
     *!/
    get_skill_for_endorse : function() {
        var skill_for_endorse = localStorage.er_skill_for_endorse;
        if (!skill_for_endorse)
            skill_for_endorse = ['Management'];
        else
            skill_for_endorse = JSON.parse(skill_for_endorse);
        return skill_for_endorse;
    },
    /!**
     * Задает массив скиллов для эндорсмента
     * @param skills
     *!/
    set_skill_for_endorse : function(skills) {
        localStorage.er_skill_for_endorse = JSON.stringify(skills);
    },
    /!**
     * Максиммальное Количество скиллов для эндорсмента, если включен соответствующий режим
     *!/
    get_max_endorse_skills_count : function() {
        max_endorse_skills_count = localStorage.er_max_endorse_skills_count;
        if (max_endorse_skills_count && max_endorse_skills_count != '') {
            max_endorse_skills_count = Number(max_endorse_skills_count);
        } else {
            max_endorse_skills_count = 3;
        }
        return max_endorse_skills_count;
    },
    /!**
     * Задает Максиммальное Количество скиллов для эндорсмента, если включен соответствующий режим
     * @param value
     *!/
    set_max_endorse_skills_count : function(value) {
        var _val = Number(value);

        if (isNaN(_val) || _val == 0) {
            _val = 3;
        }
        localStorage.er_max_endorse_skills_count = _val;

        return _val;
    },
    /!**
     * Запущен ли эндорсмент текущего периода
     *!/
    get_current_period_state : function() {
        var current_period_state = localStorage.er_endorse_current_period_state;
        if (!current_period_state || current_period_state == '' || current_period_state == 'undefined') {
            current_period_state = this.CONST_CURRENT_PERIOD_FINISHED;
        }
        return current_period_state;
    },
    /!**
     * Сколько контактов уже заиндорсили в текущем периоде
     *!/
    get_endorsed_in_current_period : function() {
        var endorsed_in_current_period = localStorage.er_endorsed_in_current_period;
        if (endorsed_in_current_period && endorsed_in_current_period != '') {
            endorsed_in_current_period = Number(endorsed_in_current_period);
        } else {
            endorsed_in_current_period = 0;
        }

        return endorsed_in_current_period;
    },
    /!**
     * Увеличивает на единицу счеткичк уже заиндорсили в текущем периоде
     *!/
    increase_endorsed_in_current_period : function() {
        localStorage.er_endorsed_in_current_period = this.get_endorsed_in_current_period() + 1;
    },
    /!**
     * Задает значение счеткичку уже заиндорсиных в текущем периоде
     * @param value
     *!/
    set_endorsed_in_current_period : function(value) {
        localStorage.er_endorsed_in_current_period = value;
    },
    /!**
     * Возвращает дату начала следующего периода эндорсмента
     * @returns {*}
     *!/
    get_next_period_start : function() {
        var date = localStorage.er_endorse_next_starts_at;

        if (date != null && date != '')
            date = new Date(JSON.parse(date));

        if (date instanceof Date && !isNaN(date.getHours()) && new Date < date) {
            return date;
        } else {
            return null;
        }
    },
    /!**
     * Задает через сколько должен запуститься следующий период от текущего момента
     * @returns {number}
     *!/
    set_next_period_start : function() {
        var date = new Date();
        // Количество миллисекунд до следующего запуска
        var wait_milli_seconds = 3600000*this.get_endorse_period_hours_between();
        date.setTime(date.getTime() + wait_milli_seconds);
        localStorage.er_endorse_next_starts_at = JSON.stringify(date);

        return wait_milli_seconds;
    },
    /!**
     * Возвращает количество миллисекунд между текущем временем и временем следующего запуска
     *!/
    get_diff_between_now_and_next_period_start : function() {
        var nextStartDate = this.get_next_period_start();
        if (nextStartDate == null) {
            return 0;
        } else {
            var currDate = new Date();
            return nextStartDate.getTime() - currDate.getTime();
        }
    },

        tab_add_mode : function() {
            er_tabs_control.add_active_mode('er_new_endorse_mode');
        },
        tab_delete_mode : function() {
            er_tabs_control.delete_active_mode('er_new_endorse_mode');
        },
        tab_is_active_in : function() {
            return er_tabs_control.is_mode_active('er_new_endorse_mode');
        },

    /!**
     * Сколько всего контактов уже заиндорсели
     * @returns {*}
     *!/
    get_endorsed_counter : function() {
        var endorsed_counter = localStorage.er_endorsed_counter;
        if (endorsed_counter && endorsed_counter != '') {
            endorsed_counter = Number(endorsed_counter);
        } else {
            endorsed_counter = 0;
        }

        return endorsed_counter;
    },

    set_endorsed_counter : function(value) {
        localStorage.er_endorsed_counter = value;
    },
    /!**
     * Увеличивает на единицу счеткичк всего заиндорсенных контактов
     *!/
    increase_endorsed_counter : function() {
        localStorage.er_endorsed_counter = this.get_endorsed_counter() + 1;
    },

    /!**
     * Максимально количество проифилей, которые могут быть заиндорсены в рамках одного периода
     *!/
    get_endorsed_limit_per_period : function() {
        var endorsed_limit_per_period = localStorage.er_endorsed_limit_per_period;

        if (endorsed_limit_per_period && endorsed_limit_per_period != '') {
            if (endorsed_limit_per_period != this.DEFAULT_CONTACTS_ENDORSE_LIMIT_UNSET_VALUE)
                endorsed_limit_per_period = Number(endorsed_limit_per_period);
        } else {
            endorsed_limit_per_period = this.DEFAULT_CONTACTS_ENDORSE_LIMIT_PER_PERIOD;
        }

        return endorsed_limit_per_period;
    },
    /!**
     * Задает значение endorsed_limit_per_period
     * @param value
     * @returns {number}
     *!/
    set_endorsed_limit_per_period : function(value) {
        var _val = Number(value);

        if (isNaN(_val) || _val == 0) {
            _val = this.DEFAULT_CONTACTS_ENDORSE_LIMIT_UNSET_VALUE;
        }
        localStorage.er_endorsed_limit_per_period = _val;

        return _val;
    },
    /!**
     * Количество часов между периодами эндорсмента
     *!/
    get_endorse_period_hours_between : function() {
        var endorse_period_hours_between = localStorage.er_endorse_period_hours_between;

        if (endorse_period_hours_between && endorse_period_hours_between != '') {
            if (endorse_period_hours_between != this.DEFAULT_PERIOD_UNSET_VALUE)
                endorse_period_hours_between = Number(endorse_period_hours_between);
        } else {
            endorse_period_hours_between = this.DEFAULT_PERIOD_HOURS;
        }

        return endorse_period_hours_between;
    },
    /!**
     * Задает зКоличество часов между периодами эндорсмента
     * @param value
     * @returns {number}
     *!/
    set_endorse_period_hours_between : function(value) {
        var _val = Number(value);

        if (isNaN(_val) || _val == 0) {
            _val = this.DEFAULT_PERIOD_UNSET_VALUE;
        }
        localStorage.er_endorse_period_hours_between = _val;

        return _val;
    },

        is_limits_are_safe : function() {
            var limit = Number(this.get_endorsed_limit_per_period());
            var period = Number(this.get_endorse_period_hours_between());

            if (isNaN(limit) || isNaN(period))
                return false;

            var x = 24 * limit / period;
            return x <= this.WARNING_THRESHOLD_LIMIT;
        },

    /!**
     * Включает режим эндорсмента и начинате поиск контактов
     *!/
    begin_collect_ids_for_endorse : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    window.localStorage.er_new_endorse_mode = 'true';
                    localStorage.er_endorse_last_added_contact_num = 0;
                    that.tab_add_mode();
                    var href = window.location.href;
                    if (href.indexOf('linkedin.com/connected/') >= 0
                        || href.indexOf('linkedin.com/mynetwork/invite-connect/connections/') >= 0) {
                        that.collect_ids_for_endorse();
                    } else {
                        if(er_utils.is_new_style_page()) {
                            window.location.assign('https://www.linkedin.com/mynetwork/invite-connect/connections/');
                        } else {
                            window.location.assign('https://www.linkedin.com/connected/?filter=recent&trk=nav_responsive_sub_nav_network#?filter=recent&trk=nav_responsive_sub_nav_network&');
                        }
                    }
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },
    /!**
     * Публичный метод
     * Запускает поиск контактов на странице контактов для последующего эндорсмента
     *!/
    collect_ids_for_endorse : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that._new_init_from_local_storage();
                    that._grab_all_contacts();
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },

    /!**
     * Грабит контакты с момента последного граба
     *
     * @private
     *!/
    _grab_all_contacts : function() {
        if(localStorage.er_new_endorse_mode != 'true')
            return;

        var that = this;

        var jq_contact_item_view_s;
        if(er_utils.is_new_style_page())
            jq_contact_item_view_s = $('.mn-person-card');
        else
            jq_contact_item_view_s = $('.contact-item-view');

        if(jq_contact_item_view_s.length == 0) {
            setTimeout(function(){ that._grab_all_contacts() }, 100);
            return;
        }

        if (!this.last_added_contact_num || this.last_added_contact_num < jq_contact_item_view_s.length -1 ) {
            // На странице контактов больше, чем мы уже сграбили
            this.contact_list_scroll_attempt = 0;
        } else {
            // На стринце контактов НЕ более, чем мы уже сграбили - нужна догрзука
            this.contact_list_scroll_attempt++;
            if (this.contact_list_scroll_attempt > 3600) {
                // Не удается догрузить - превышено число попыток догрузки
                // Перегружаем страницу
                console.log('location.reload(true);');
                location.reload(true);
            } else {
                // Скролим страницу вниз
                er_utils.scroll_down(0);
                setTimeout(
                    function() { that._grab_all_contacts(); },
                    1000
                );
            }
            return;
        }
        // Грабим подгруженные контакты с момента последнего граба
        this._grab_from(jq_contact_item_view_s, this.last_added_contact_num+1);
        this._grab_all_contacts();
    },
    /!**
     * Грабит контакты с момента @star
     * @param jq_contact_item_view_s
     * @param start
     * @private
     *!/
    _grab_from : function(jq_contact_item_view_s, start) {
        for(var i=start; i<jq_contact_item_view_s.length; i++) {
            this._grab_id_from_contact_item_view($(jq_contact_item_view_s[i]));
        }
    },
    /!**
     * Грабит отдельно взятый контакт
     * @param jq_endorse_items
     * @private
     *!/
    _grab_id_from_contact_item_view : function(jq_endorse_items) {
        var href;
        var obj = {};

        if(er_utils.is_new_style_page()) {
            href = jq_endorse_items.find('a.mn-person-info__picture').attr('href');
            obj.i = er_utils.get_profile_fullname_from_url(href);
        } else {
            href = jq_endorse_items.find('a.image').attr('href');
            obj.i = er_utils.getParameterByName('id', href);
            obj.a = er_utils.getParameterByName('authToken', href);
        }

        this._store_for_endorse(obj);
    },
    /!**
     * Сохроняет контакт для последующего эндерсмента
     * @param obj
     * @private
     *!/
    _store_for_endorse : function(obj) {
        var is_endorsed = er_endorsed_control.is_id_endorsed(obj.i);

        if (!is_endorsed)
            this.contacts_for_endorse.push(obj);
        this.unsaved_contacts_counter++;
        this.last_added_contact_num++;
        if(this.unsaved_contacts_counter >= this.CONST_COLLECT_LIMIT_BETWEEN_SAVES) {
            localStorage.er_contacts_for_endorse = JSON.stringify(this.contacts_for_endorse);
            localStorage.er_endorse_last_added_contact_num = this.last_added_contact_num;
            this.unsaved_contacts_counter = 0;
        }
    },
    


    /!**
     * Переводит страницу к следующему контакту для эндорсмента
     * @private
     *!/
    _go_to_next_contact_to_endorse : function() {
        var first = er_endorse_queue.get_first_id_from_queue();
        if(first)
            er_universal_profile_helper.go_to_profile(first);
    },
    /!**
     * Строит URL страницы контакта для эндорсмента
     * @param obj
     * @returns {string}
     * @private
     *!/
    _build_profile_url : function(obj) {
        if(er_utils.is_new_style_page())
            return 'https://www.linkedin.com/in/'+obj.i+'/';
        else
            return 'https://www.linkedin.com/profile/view?id='+obj.i+'&authType=name&authToken='+obj.a+'&trk=contacts-contacts-list-contact_name-0';
    },

    /!**
     * Запускает режим эндорсмента контактов
     * И переводит на первый в списке профиль для эндорсмента
     *!/
    begin_endorse_all_contacts : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    localStorage.er_new_endorse_mode = 'true';
                    that.tab_add_mode();
                    that.begin_new_endorse_period();
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },
    begin_new_endorse_period : function () {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that.set_endorsed_in_current_period(0);
                    localStorage.er_endorse_current_period_state = that.CONST_CURRENT_PERIOD_STARTED;
                    delete localStorage.er_endorse_next_starts_at;

                    that._new_init_from_local_storage();

                    that._go_to_next_contact_to_endorse();
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },

    endorse_profile_new : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that._new_init_from_local_storage();

                    if(er_utils.is_current_page_deleted_profile()) {
                        that._on_current_profile_endorse_finished();
                        return;
                    }

                    if(er_utils.is_new_style_page()) {
                        var jq_profile_view_grid = $('.profile-view-grid');
                        if(jq_profile_view_grid.length == 0) {
                            setTimeout(function(){ that.endorse_profile_new() },
                                100);
                            return
                        }
                    }

                    er_utils.scroll_page_down_by_screens()
                        /!*.then(that._ns_skills_container_waiter(10))*!/
                        .then(that._ns_skills_container_waiter_full.bind(that))
                        .then(function() {
                            var jq_background_skills = that.get_jq_background_skills_cont();
                            /!*if(er_utils.is_new_style_page()) {
                                jq_background_skills = $('.pv-featured-skills-section').first();
                            } else {
                                jq_background_skills = $('#background-skills');
                            }*!/
                            er_utils.scroll_to_element_promise(jq_background_skills, 300)
                                .then(function() {
                                    if(er_utils.is_new_style_page()) {
                                        that._ns_open_all_skills_cont(jq_background_skills)
                                            .then(function(){
                                                var jq_endorse_items = jq_background_skills.find('.pv-skill-entity--featured');
                                                that._endorse_skill_recur_new(jq_endorse_items, 0);
                                            });
                                    } else {
                                        var jq_endorse_items = jq_background_skills.find('.endorse-item');
                                        that._endorse_skill_recur_new(jq_endorse_items, 0);
                                    }
                                });
                        });
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },

    get_jq_background_skills_cont : function() {
        if(er_utils.is_new_style_page()) {
            return $('.pv-featured-skills-section').first();
        } else {
            return $('#background-skills');
        }
    },

    _ns_skills_container_waiter_full : function() {
        return this._ns_skills_container_waiter(3);
    },

    _ns_skills_container_waiter : function(attempt, deferred) {
        if(!deferred) {
            deferred = $.Deferred();
            console.log('START _ns_skills_container_waiter attempt=' + attempt);
        } else {
            console.log('CONTINUE _ns_skills_container_waiter attempt=' + attempt);
        }

        if(er_utils.is_new_style_page()) {
            var jq_background_skills = $('.pv-featured-skills-section');
            if (jq_background_skills.length == 0) {
                if(attempt > 0) {
                    var that = this;
                    var new_attempt;

                    console.log('document.webkitHidden : ' + document.webkitHidden);
                    console.log('document.hidden : ' + document.hidden);

                    if (er_utils.is_tab_hidden()) {
                        new_attempt = attempt;
                        setTimeout(function () {
                            that._ns_skills_container_waiter(new_attempt, deferred)
                        }, 500);
                    } else {
                        new_attempt = attempt - 1;
                        er_utils.scroll_to_top_and_then_to_bottom_by_screens()
                            .then(function(){ that._ns_skills_container_waiter(new_attempt, deferred) });
                    }
                } else {
                    console.log('RESOLVE _ns_skills_container_waiter as FALSE');
                    deferred.resolve(false);
                }
            } else {
                console.log('RESOLVE _ns_skills_container_waiter as TRUE');
                deferred.resolve(true);
            }
        } else {
            console.log('RESOLVE _ns_skills_container_waiter as TRUE');
            deferred.resolve(true);
        }

        return deferred.promise();
    },

    _ns_open_all_skills_cont : function(jq_skills_cont, deferred) {
        if(!deferred)
            deferred = $.Deferred();

        var jq_btn_view_more = jq_skills_cont.find('.pv-skills-section__additional-skills');
        if(jq_btn_view_more.length == 0) {
            deferred.resolve();
        } else {
            jq_btn_view_more.click();
            this._ns_waiter_featured_skills_expanded()
                .then(function(){ deferred.resolve() });
        }

        return deferred.promise();
    },
    _ns_waiter_featured_skills_expanded : function(deferred) {
        if(!deferred)
            deferred = $.Deferred();

        var jq_featured_skills_expanded = $('#featured-skills-expanded');
        if (jq_featured_skills_expanded.length == 0) {
            var that = this;
            setTimeout(function(){
                that._ns_waiter_featured_skills_expanded(deferred);
            }, 100);
        } else {
            deferred.resolve();
            er_utils.scroll_to_element_promise(this.get_jq_background_skills_cont(), 300);
        }

        return deferred.promise();
    },

    /!**
     * Рекурсивно с таймоутом эндорсит скилы
     * @param jq_endorse_items
     * @param i - номер текущего скилла в jq_endorse_items
     * @private
     *!/
    _endorse_skill_recur_new : function(jq_endorse_items, i) {
        if (jq_endorse_items.length == i) {
            // Заиндорсили до конца профиль
            this._on_current_profile_endorse_finished();

            return;
        }
        var jq_endorse_item = $(jq_endorse_items[i]);
        if (this._process_endorse_item(jq_endorse_item)) {
            this._endorse_skill_recur_st_new(jq_endorse_items, i+1,
                //er_utils.getRandomInt(300,1000)
                er_endorse_timeouts.get_random_timeout('endorse_skill')
            );
        } else {
            this._endorse_skill_recur_new(jq_endorse_items, i+1);
        }
    },

    /!**
     * Ждет указанное время прежде чем запустить эндорс следующего навыка
     * @param jq_endorse_items
     * @param i
     * @param timeout
     * @private
     *!/
    _endorse_skill_recur_st_new : function(jq_endorse_items, i, timeout) {
        var that = this;
        setTimeout(function(){ that._endorse_skill_recur_new(jq_endorse_items, i) },
            timeout);
    },

    /!**
     * Энедорсит навык, если он соответствует критериям
     * @param jq_endorse_item
     * @returns {boolean} true - если навык заиндорсели
     * @private
     *!/
    _process_endorse_item : function(jq_endorse_item) {
        if (jq_endorse_item.hasClass('endorsed-by-viewer')
            || jq_endorse_item.find('button[data-control-name=unendorse]').length == 1
        ) {
            return false; // Уже ранее эндорсили
        }

        var skill = jq_endorse_item.attr('data-endorsed-item-name');
        if(er_utils.is_new_style_page()) {
            skill = jq_endorse_item.find('.pv-skill-entity__skill-name').text();
        } else {
            skill = jq_endorse_item.attr('data-endorsed-item-name');
        }

        var endorse_mode = this.get_endorse_mode();
        var isNeedClick = false;
        if(endorse_mode == this.CONST_ENDORSE_MODE_ALL) {
            isNeedClick = true;
        } else if (endorse_mode == this.CONST_ENDORSE_MODE_SPECIFIED) {
            if (skill != null && this.skill_for_endorse_lower_case.indexOf(skill.toLowerCase()) >= 0)
                isNeedClick = true;
        } else {
            if (this.endorsed_skills_count < this.max_endorse_skills_count)
                isNeedClick = true;
        }

        if (isNeedClick) {
            var jq_endorse_button;
            if(er_utils.is_new_style_page()) {
                jq_endorse_button = jq_endorse_item.find('.pv-skill-entity__featured-endorse-button-shared');
            } else {
                jq_endorse_button = jq_endorse_item.find('.endorse-button .endorse-plus');
            }
            jq_endorse_button.click();
            this.endorsed_skills_count++;

            console.log('endorse skill : '+skill);
            return true;
        } else {
            return false;
        }
    },

    /!**
     * Обрабатывает ситуацию, когда эндорсмент отдельного профиля завершен
     * @private
     *!/
    _on_current_profile_endorse_finished : function() {
        var that = this;
        
        this.increase_endorsed_in_current_period();
        this.increase_endorsed_counter();
        er_endorse_queue.delete_first_id_from_queue();

        var endorsed_in_current_period = this.get_endorsed_in_current_period();

        var endorsed_limit_per_period = this.get_endorsed_limit_per_period();
        var endorse_period_hours_between = this.get_endorse_period_hours_between();

        if (endorsed_limit_per_period != this.DEFAULT_CONTACTS_ENDORSE_LIMIT_UNSET_VALUE
            && endorse_period_hours_between != this.DEFAULT_PERIOD_UNSET_VALUE
            && endorsed_in_current_period >= endorsed_limit_per_period
        ) {
            if (this.get_current_period_state() == this.CONST_CURRENT_PERIOD_STARTED) {
                // Завершаем текущий период

                localStorage.er_endorse_current_period_state = this.CONST_CURRENT_PERIOD_FINISHED;

                // Устанавливаем дату следующего старта
                var wait_milli_seconds = this.set_next_period_start();
                new ER_W_Timeout_Clock({
                    timeout : wait_milli_seconds,
                    techname : 'endorse_next_contact',
                    description : 'Endorse next contact'
                });
                // Спим
                setTimeout(function() { that.begin_new_endorse_period() }, wait_milli_seconds);
            } else {
                var diff = this.get_diff_between_now_and_next_period_start();
                if (diff <= 0) {
                    that.begin_new_endorse_period();
                } else {
                    setTimeout(function() { that.begin_new_endorse_period() }, diff);
                }
            }
        } else {
            setTimeout(function() { that._go_to_next_contact_to_endorse() },
                er_endorse_timeouts.get_random_timeout('go_to_next_contact')
            );
        }
    },

    ////////////////////////////////////////////////////////////////////////////////////

    /!**
     * Инициализирует переменные
     *!/
    _init_from_local_storage : function() {
        /!*if (window.localStorage.er_endorsed_ids != null) {
            this.endorsed_ids = JSON.parse(window.localStorage.er_endorsed_ids);
        } else {
            this.endorsed_ids = [];
        }*!/
    },
    /!**
     * Запускает процесс эндорсмента, если находимся на странице контактов
     *!/
    endorse_all_connections : function() {
        this._init_from_local_storage();
        window.localStorage.er_endorse_mode = 'true';
        var jq_contact_item_view_s = $('.contact-item-view');
        if (!window.localStorage.er_last_endorse_id || window.localStorage.er_last_endorse_id == "undefined") {
            this._init_single_endorse($(jq_contact_item_view_s[0]), 0);
        } else {
            this._find_next_for_endorse();
        }
    },

    /!**
     * На странице контактов находит слелующего пользователя для эндорсмента
     * @private
     *!/
    _find_next_for_endorse : function() {
        jq_contact_item_view_s = $('.contact-item-view');
        if (this.endrose_temp.last_people_length != jq_contact_item_view_s.length) {
            this.endrose_temp.last_people_length = jq_contact_item_view_s.length;
            this.endrose_temp.scroll_attempt = 0;
        } else {
            this.endrose_temp.scroll_attempt++;
            if (this.endrose_temp.scroll_attempt > 5) {
                location.reload(true);
            }
        }

        console.log('_find_next_for_endorse');
        console.log('jq_contact_item_view_s.length = '+jq_contact_item_view_s.length);
        console.log('window.localStorage.er_last_endorse_id = '+window.localStorage.er_last_endorse_id);

        var last_endorsed_id = Number(window.localStorage.er_last_endorse_id);
        if (isNaN(last_endorsed_id)) {
            console.log('isNaN(last_endorsed_id) == true');
            return
        }
        console.log('last_endorsed_id = '+last_endorsed_id);

        if (last_endorsed_id+1 < jq_contact_item_view_s.length) {
            this._init_single_endorse($(jq_contact_item_view_s[last_endorsed_id+1]), last_endorsed_id+1);
        } else {
            er_utils.scroll_down(0);
            var that = this;
            setTimeout(
                function() { that._find_next_for_endorse(); },
                1000
            );
        }
    },
    /!**
     * Запускает эндорс для указанной карточки контактов со страницы списка контактов
     * @param jq_contact_item_view
     * @param psevdo_id
     * @private
     *!/
    _init_single_endorse : function(jq_contact_item_view, psevdo_id) {
        if (!psevdo_id) {
            console.error('_init_single_endorse psevdo_id is undefined')
        }
        var url = er_utils.get_profile_url_from(jq_contact_item_view);
        //var id = er_utils.get_profile_id_from_url(url);
        window.localStorage.er_curr_endorse_id = JSON.stringify(psevdo_id);
        setTimeout(function() { window.location.assign(url) }, 1000);
        //window.location.assign(url);
    },
    /!**
     * Если открыт профиль контакта, то эта функция запускает эндорс его навыков
     *!/
    endorse_skills : function() {
        this._init_from_local_storage();
        var jq_background_skills = $('#background-skills');
        var jq_endorse_items = jq_background_skills.find('.endorse-item');

        console.log('window.localStorage.er_curr_endorse_id = '+window.localStorage.er_curr_endorse_id);

        this._endorse_skill_recur(jq_endorse_items, 0);
    },

    /!**
     * Рекурсивно с таймоутом эндорсит скилы
     * @param jq_endorse_items
     * @param i - номер текущего скилла в jq_endorse_items
     * @private
     *!/
    _endorse_skill_recur : function(jq_endorse_items, i) {
        if (jq_endorse_items.length == i) {
            er_endorsed_control.add_id_to_endorsed(window.localStorage.er_curr_endorse_id);
            /!*this.endorsed_ids.push(window.localStorage.er_curr_endorse_id);


            window.localStorage.er_endorsed_ids = JSON.stringify(this.endorsed_ids);*!/
            window.localStorage.er_last_endorse_id = window.localStorage.er_curr_endorse_id;
            //delete window.localStorage.er_curr_endorse_id;

            setTimeout(function() { window.history.back() }, 1000);
            //window.history.back();
            return;
        }
        var jq_endorse_item = $(jq_endorse_items[i]);
        var skill = jq_endorse_item.attr('data-endorsed-item-name');
        if (this.skill_for_endorse.indexOf(skill) >= 0 && !jq_endorse_item.hasClass('endorsed-by-viewer')) {
            jq_endorse_item.find('.endorse-button .endorse-plus').click();
            console.log('endorse skill : '+skill);
            this._endorse_skill_recur_st(jq_endorse_items, i+1, er_utils.getRandomInt(300,1000));
        } else {
            this._endorse_skill_recur(jq_endorse_items, i+1);
        }
    },

    _endorse_skill_recur_st : function(jq_endorse_items, i, timeout) {
        var that = this;
        setTimeout(function(){ that._endorse_skill_recur(jq_endorse_items, i) }, timeout)
    },

    _on_license_not_valid : function() {
        localStorage.er_new_endorse_mode = 'false';
        localStorage.er_endorse_current_period_state = this.CONST_CURRENT_PERIOD_FINISHED;
        this.tab_delete_mode();
    },
};*/

/**
 * Created by Alex on 18.03.2017.
 */
//er_endorse_backup_export
var er_endorse_backup_export = window.er_endorse_backup_export || {
        build_object : function() {
            var deferred = $.Deferred();
            var obj = {};
            obj.lc = this._build_lc();

            this._build_db()
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },
        _build_lc : function() {
            var lc = {};

            lc.er_contacts_for_endorse = localStorage.er_contacts_for_endorse;
            lc.er_endorsed_ids = localStorage.er_endorsed_ids;
            lc.er_endorse_excluded_ids = localStorage.er_endorse_excluded_ids;
            lc.er_endorse_error_ids = localStorage.er_endorse_error_ids;
            lc.er_endorse_sn_ids = localStorage.er_endorse_sn_ids;
            lc.er_endorse_map_error_ids_to_codes = localStorage.er_endorse_map_error_ids_to_codes;
            lc.er_endorse_last_added_contact_num = localStorage.er_endorse_last_added_contact_num;
            lc.er_last_endorse_id = localStorage.er_last_endorse_id;
            lc.er_curr_endorse_id = localStorage.er_curr_endorse_id;
            lc.er_endorse_mode = localStorage.er_endorse_mode;
            lc.er_skill_for_endorse = localStorage.er_skill_for_endorse;
            lc.er_max_endorse_skills_count = localStorage.er_max_endorse_skills_count;
            lc.er_endorsed_counter = localStorage.er_endorsed_counter;
            lc.er_endorsed_limit_per_period = localStorage.er_endorsed_limit_per_period;
            lc.er_endorse_period_hours_between = localStorage.er_endorse_period_hours_between;
            lc.er_endorse_timeouts = localStorage.er_endorse_timeouts;
            lc.er_endorses_list = localStorage.er_endorses_list;


            return lc;
        },
        _build_db : function() {
            var deferred = $.Deferred();
            var db = {};

            er_endorse_db.get_all()
                .then(function(endorses) {
                    db.endorses = endorses;
                    deferred.resolve(db);
                });


            return deferred.promise();
        },
    };
/**
 * Created by Alex on 18.03.2017.
 */
//er_endorse_backup_import
var er_endorse_backup_import = window.er_endorse_backup_import || {
        import : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj) {
                er_logger.log('SKIPS : Endorse data missing');
                deferred.resolve(true);
                return deferred.promise();
            }

            this._import_db(obj.db)
                .then(function() {
                    that._import_lc(obj.lc);
                    deferred.resolve(true);
                });

            return deferred.promise();
        },

        _import_db : function(db) {
            var deferred = $.Deferred();

            if(db.endorses)
                er_endorse_db.push_endorses(db.endorses)
                    .then(deferred.resolve.bind(deferred));
            else
                deferred.resolve();

            return deferred.promise();
        },

        _import_lc : function(lc) {
            if(lc.er_contacts_for_endorse)
                localStorage.er_contacts_for_endorse = lc.er_contacts_for_endorse;
            else
                delete localStorage.er_contacts_for_endorse;

            if(lc.er_endorsed_ids)
                localStorage.er_endorsed_ids = lc.er_endorsed_ids;
            else
                delete localStorage.er_endorsed_ids;

            if(lc.er_endorse_excluded_ids)
                localStorage.er_endorse_excluded_ids = lc.er_endorse_excluded_ids;
            else
                delete localStorage.er_endorse_excluded_ids;

            if(lc.er_endorse_error_ids)
                localStorage.er_endorse_error_ids = lc.er_endorse_error_ids;
            else
                delete localStorage.er_endorse_error_ids;

            if(lc.er_endorse_sn_ids)
                localStorage.er_endorse_sn_ids = lc.er_endorse_sn_ids;
            else
                delete localStorage.er_endorse_sn_ids;

            if(lc.er_endorse_map_error_ids_to_codes)
                localStorage.er_endorse_map_error_ids_to_codes = lc.er_endorse_map_error_ids_to_codes;
            else
                delete localStorage.er_endorse_map_error_ids_to_codes;

            if(lc.er_endorse_last_added_contact_num)
                localStorage.er_endorse_last_added_contact_num = lc.er_endorse_last_added_contact_num;
            else
                delete localStorage.er_endorse_last_added_contact_num;

            if(lc.er_last_endorse_id)
                localStorage.er_last_endorse_id = lc.er_last_endorse_id;
            else
                delete localStorage.er_last_endorse_id;

            if(lc.er_curr_endorse_id)
                localStorage.er_curr_endorse_id = lc.er_curr_endorse_id;
            else
                delete localStorage.er_curr_endorse_id;

            if(lc.er_endorse_mode)
                localStorage.er_endorse_mode = lc.er_endorse_mode;
            else
                delete localStorage.er_endorse_mode;

            if(lc.er_skill_for_endorse)
                localStorage.er_skill_for_endorse = lc.er_skill_for_endorse;
            else
                delete localStorage.er_skill_for_endorse;

            if(lc.er_max_endorse_skills_count)
                localStorage.er_max_endorse_skills_count = lc.er_max_endorse_skills_count;
            else
                delete localStorage.er_max_endorse_skills_count;

            if(lc.er_endorsed_counter)
                localStorage.er_endorsed_counter = lc.er_endorsed_counter;
            else
                delete localStorage.er_endorsed_counter;

            if(lc.er_endorsed_limit_per_period)
                localStorage.er_endorsed_limit_per_period = lc.er_endorsed_limit_per_period;
            else
                delete localStorage.er_endorsed_limit_per_period;

            if(lc.er_endorse_period_hours_between)
                localStorage.er_endorse_period_hours_between = lc.er_endorse_period_hours_between;
            else
                delete localStorage.er_endorse_period_hours_between;

            if(lc.er_endorse_timeouts)
                localStorage.er_endorse_timeouts = lc.er_endorse_timeouts;
            else
                delete localStorage.er_endorse_timeouts;

            if(lc.er_endorses_list)
                localStorage.er_endorses_list = lc.er_endorses_list;
            else
                delete localStorage.er_endorses_list;
        },
    };
/**
 * Created by erinsasha on 21/08/17.
 */
var er_endorse_collector = window.er_endorse_collector || {
        EVENT_ENDORSE_COLLECT_MODE_SWITCHED_ON : 'ER_EVENT_ENDORSE_COLLECT_MODE_SWITCHED_ON',
        EVENT_ENDORSE_COLLECT_MODE_SWITCHED_OFF : 'ER_EVENT_ENDORSE_COLLECT_MODE_SWITCHED_OFF',

        get_mode_endorse_collect : function() {
            return localStorage.er_endorse_mode_collect == 'true';
        },
        set_mode_endorse_collect : function(value) {
            var evt_name;
            if(value === true || value == 'true' || value == 'TRUE') {
                localStorage.er_endorse_mode_collect = 'true';
                evt_name = this.EVENT_ENDORSE_COLLECT_MODE_SWITCHED_ON;
            } else {
                localStorage.er_endorse_mode_collect = 'false';
                this.tab_delete_mode();
                evt_name = this.EVENT_ENDORSE_COLLECT_MODE_SWITCHED_OFF;
            }
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(evt_name, true, true, null);
            window.dispatchEvent(evt);
        },

        tab_add_mode : function() {
            er_tabs_control.add_active_mode('er_endorse_mode_collect');
        },
        tab_delete_mode : function() {
            er_tabs_control.delete_active_mode('er_endorse_mode_collect');
        },
        tab_is_active_in : function() {
            return er_tabs_control.is_mode_active('er_endorse_mode_collect');
        },

        is_mode_on_and_tab_active : function() {
            return this.get_mode_endorse_collect() && this.tab_is_active_in();
        },
        set_mode_on_and_tab_active : function() {
            this.set_mode_endorse_collect(true);
            this.tab_add_mode();
        },

        process : function() {
            if (!this.is_mode_on_and_tab_active())
                return;

            if(er_utils.is_my_connections_page()) {
                er_endorse_my_connections_collector.collect();
            } else {
                this.process_single_page()
                    .then(this._after_single_page_processed.bind(this));
            }
        },

        process_single_page : function() {
            var deferred = $.Deferred();

            if(!this.is_mode_on_and_tab_active()) {
                deferred.reject();
                return deferred.promise();
            }

            er_search_page_helper.wait_people_card_load_and_extract_single_page()
                .then(function(mini_profiles) {
                    var ids = ER_Profile_Mini.static.get_profiles_ids_from_profiles_arr(
                        mini_profiles,
                        { dists : [1, 10] }
                    );
                    er_endorse_queue.add_ids_to_queue(ids);
                    deferred.resolve();
                });

            return deferred.promise();
        },

        _after_single_page_processed : function() {
            if (!this.is_mode_on_and_tab_active())
                return;
            var that = this;
            er_search_page_helper.ns_sn_old_load_next_page_deferred()
                .then(function(result) {
                    if (result) {
                        if (er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page())
                            that.process();
                    } else
                        that.set_mode_endorse_collect(false);
                });
        },
    };
/**
 * Created by erinsasha on 21/08/17.
 */
var er_endorse_control = window.er_endorse_control || {
        EVENT_NEW_ENDORSE_CREATED : 'ER_EVENT_NEW_ENDORSE_CREATED',
        EVENT_ENDORSE_DELETED : 'ER_EVENT_ENDORSE_DELETED',
        EVENT_ACTIVE_ENDORSE_SWITCHED : 'ER_EVENT_ACTIVE_ENDORSE_SWITCHED',

        CONST_ACTION_ADD_TO : 'add_to',
        CONST_ACTION_REPLACE_TO : 'replace_to',
        CONST_ACTION_REMOVE_THE_SAME : 'remove_the_same',

        CONST_ARRAY_NAME_QUEUE : 'queue',
        CONST_ARRAY_NAME_ENDORSED : 'endorsed',
        CONST_ARRAY_NAME_EXCLUDED : 'excluded',
        CONST_ARRAY_NAME_ERROR : 'error',

        DEFAULT_ENDORSE_ID : 'DEFAULT_ENDORSE',

        init : function() {
            var deferred = $.Deferred();

            var that = this;

            this._init_default_endorse()
                .then(function() {
                    that._init_endorses_list();
                    deferred.resolve();
                });

            return deferred.promise();
        },

        _init_default_endorse : function() {
            var deferred = $.Deferred();
            var id = localStorage.er_endorse_list_id;

            if (id != null && id != '') {
                deferred.resolve();
                return deferred.promise();
            }

            localStorage.er_endorse_list_name = this.DEFAULT_ENDORSE_ID;
            var endorse = this._create_endorse_object_from_current_state(this.DEFAULT_ENDORSE_ID, this.DEFAULT_ENDORSE_ID);

            var that = this;
            endorse.save_to_db()
                .then(function() {
                    localStorage.er_endorse_list_id = that.DEFAULT_ENDORSE_ID;
                    deferred.resolve();
                });

            return deferred.promise();
        },
        _init_endorses_list : function() {
            var list = localStorage.er_endorses_list;
            if (list == null || list == '') {
                list = [];
                list.push(this.DEFAULT_ENDORSE_ID);
                localStorage.er_endorses_list = JSON.stringify(list);
            }
            return list;
        },

        get_active_list_id : function() {
            var id = localStorage.er_endorse_list_id;
            if (id == null || id == '') {
                id = this.DEFAULT_ENDORSE_ID;
                localStorage.er_endorse_list_id = id;
            }
            return id;
        },
        is_default_endorse_active : function() {
            return this.DEFAULT_ENDORSE_ID == this.get_active_list_id();
        },

        set_active_endorse : function(id) {
            var deferred = $.Deferred();

            if (id == this.get_active_list_id()) {
                deferred.resolve();
                return deferred.promise();
            }

            er_endorse_endorser.set_endorser_switched_off();
            er_endorse_collector.set_mode_endorse_collect(false);

            var that = this;

            this._store_endorse_from_localStorage_to_DB()
                .then(function() {
                    er_endorse_db.get_endorse(id)
                        .then(function(endorse) {
                            that._update_localStorage_by_endorse_object(endorse);
                            deferred.resolve();

                            var evt = document.createEvent("CustomEvent");
                            evt.initCustomEvent(that.EVENT_ACTIVE_ENDORSE_SWITCHED, true, true, endorse);
                            window.dispatchEvent(evt);
                        })
                });

            return deferred.promise();
        },
        set_active_list_id : function(id) {
            return this.set_active_endorse(id);
        },
        get_all_lists_ids : function() {
            var list = localStorage.er_endorses_list;
            if (list == null || list == '') {
                list = this._init_endorses_list();
            } else {
                list = JSON.parse(list);
            }
            return list;
        },
        is_endorse_exists : function(id) {
            var list = this.get_all_lists_ids();
            return list.indexOf(id) >= 0;
        },
        is_list_with_id_exists : function(id) {
            return this.is_endorse_exists();
        },
        create_new_endorse : function(id) {
            if (this.is_endorse_exists(id)) {
                return er_endorse_db.get_endorse(id);
            } else {
                var deferred = $.Deferred();

                var that = this;

                var endorse = new ER_Endorse({ id : id });
                endorse.save_to_db()
                    .then(function() {
                        var list = that.get_all_lists_ids();
                        list.push(id);
                        localStorage.er_endorses_list = JSON.stringify(list);

                        deferred.resolve(endorse);

                        var evt = document.createEvent("CustomEvent");
                        evt.initCustomEvent(that.EVENT_NEW_ENDORSE_CREATED, true, true, endorse);
                        window.dispatchEvent(evt);
                    });

                return deferred.promise();
            }
        },
        create_new_endorse_as_active : function(id) {
            var deferred = $.Deferred();

            var that = this;

            this.create_new_endorse(id)
                .then(function(endorse) {
                    that.set_active_endorse(id)
                        .then(function () {
                            deferred.resolve(endorse);
                        });
                });

            return deferred.promise();
        },

        get_endorse : function(id) {
            if(id == this.get_active_list_id()) {
                return this._store_endorse_from_localStorage_to_DB();
            } else {
                return er_endorse_db.get_endorse(id);
            }
        },
        save_endorse : function(endorse) {
            var that = this;

            var deferred = $.Deferred();
            endorse.save_to_db()
                .then(function() {
                    if(endorse.id == that.get_active_list_id()) {
                        that._update_localStorage_by_endorse_object(endorse);
                    }

                    deferred.resolve(endorse);
                });

            return deferred.promise();
        },

        _store_endorse_from_localStorage_to_DB : function() {
            var deferred = $.Deferred();

            var that = this;

            var id = this.get_active_list_id();
            er_endorse_db.get_endorse(id)
                .then(function(endorse) {
                    that._update_endorse_object_by_values_from_localStorage(endorse);
                    endorse.save_to_db()
                        .then(function() {
                            deferred.resolve(endorse);
                        });
                });

            return deferred;
        },

        _create_endorse_object_from_current_state : function(id, name) {
            var endorse = new ER_Endorse ({
                id : id,
                name : name,
            });
            this._update_endorse_object_by_values_from_localStorage(endorse);

            return endorse;
        },
        _update_endorse_object_by_values_from_localStorage : function(endorse) {
            
            endorse.queue = er_endorse_queue.get_contacts_for_endorse();
            endorse.endorsed_ids = er_endorsed_control.get_endorsed_ids();
            endorse.excluded_ids = er_endorse_excluded.get_excluded_ids();
            endorse.sn_ids = er_endorse_sn.get_sn_ids();
            endorse.error_ids = er_endorse_error.get_error_ids();
            endorse.error_ids_to_codes = er_endorse_error.get_error_map_error_ids_to_codes();
        },
        _update_localStorage_by_endorse_object : function(endorse) {
            er_endorse_queue.replace_all_queue_by_array(endorse.queue);
            er_endorsed_control.replace_all_endorsed_by_array(endorse.endorsed_ids);
            er_endorse_excluded.replace_all_excluded_by_array(endorse.excluded_ids);
            er_endorse_sn.replace_all_sn_by_array(endorse.sn_ids);
            er_endorse_error.replace_all_error_contacts_by_array(endorse.error_ids);
            er_endorse_error.replace_all_map_error_ids_to_codes(endorse.error_ids_to_codes);

            localStorage.er_endorse_list_name = endorse.name;
            localStorage.er_endorse_list_id = endorse.id;
        },

        action : function(source_id, source_array_name, target_id, target_array_name, action) {
            var deferred = $.Deferred();

            if (target_id == this.get_active_list_id()) {
                er_endorse_endorser.set_endorser_switched_off();
                er_endorse_collector.set_mode_endorse_collect(false);
            }

            var that = this;

            this._store_endorse_from_localStorage_to_DB()
                .then(function() {
                    $.when( er_endorse_db.get_endorse(source_id), er_endorse_db.get_endorse(target_id) )
                        .then(function(source_endorse, target_endorse) {
                            that._action(source_endorse, source_array_name, target_endorse, target_array_name, action)
                                .then(function(target_endorse) {
                                    deferred.resolve(target_endorse);
                                })
                        });
                });


            return deferred.promise();
        },
        _action : function(source_endorse, source_array_name, target_endorse, target_array_name, action) {
            var deferred = $.Deferred();

            var source_arr;
            switch (source_array_name) {
                case this.CONST_ARRAY_NAME_QUEUE :
                    source_arr = source_endorse.queue;
                    break;
                case this.CONST_ARRAY_NAME_ENDORSED :
                    source_arr = source_endorse.endorsed_ids;
                    break;
                case this.CONST_ARRAY_NAME_EXCLUDED :
                    source_arr = source_endorse.excluded_ids;
                    break;
                case this.CONST_ARRAY_NAME_ERROR :
                    source_arr = source_endorse.error_ids;
                    break;
            }

            var target_arr;
            switch (target_array_name) {
                case this.CONST_ARRAY_NAME_QUEUE :
                    target_arr = target_endorse.queue;
                    break;
                case this.CONST_ARRAY_NAME_ENDORSED :
                    target_arr = target_endorse.endorsed_ids;
                    break;
                case this.CONST_ARRAY_NAME_EXCLUDED :
                    target_arr = target_endorse.excluded_ids;
                    break;
                case this.CONST_ARRAY_NAME_ERROR :
                    target_arr = target_endorse.error_ids;
                    break;
            }

            switch (action) {
                case this.CONST_ACTION_ADD_TO :
                    target_arr = er_utils.get_array_merge(target_arr, source_arr);
                    break;
                case this.CONST_ACTION_REPLACE_TO :
                    target_arr = er_utils.get_array_merge(source_arr, []);
                    break;
                case this.CONST_ACTION_REMOVE_THE_SAME :
                    target_arr = er_utils.get_array_uniq(target_arr, source_arr);
                    break;
            }

            switch (target_array_name) {
                case this.CONST_ARRAY_NAME_QUEUE :
                    target_endorse.queue = target_arr;
                    break;
                case this.CONST_ARRAY_NAME_ENDORSED :
                    target_endorse.endorsed_ids = target_arr;
                    break;
                case this.CONST_ARRAY_NAME_EXCLUDED :
                    target_endorse.excluded_ids = target_arr;
                    break;
                case this.CONST_ARRAY_NAME_ERROR :
                    target_endorse.error_ids = target_arr;
                    break;
            }

            var that = this;

            target_endorse.save_to_db()
                .then(function() {
                    if (target_endorse.id == that.get_active_list_id()) {
                        that._update_localStorage_by_endorse_object(target_endorse);
                    }

                    deferred.resolve(target_endorse);
                });

            return deferred.promise();
        },

        delete_endorse : function(id) {
            var deferred = $.Deferred();

            if (id == this.DEFAULT_ENDORSE_ID){
                deferred.resolve(false);
                return deferred.promise();
            }

            if (id == this.get_active_list_id()) {
                var that = this;
                this.set_active_endorse(this.DEFAULT_ENDORSE_ID)
                    .then(function() {
                        that._delete_endorse_id_from_list(id);
                        deferred.resolve(true);
                    });
            } else {
                this._delete_endorse_id_from_list(id);
                deferred.resolve(true);
            }

            return deferred.promise();
        },
        delete_list : function(id) {
            return this.delete_endorse(id);
        },
        _delete_endorse_id_from_list : function(id) {
            var list = this.get_all_lists_ids();
            var pos = list.indexOf(id);
            if(pos >= 0) {
                list.splice(pos,1);
                localStorage.er_endorses_list = JSON.stringify(list);
                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_ENDORSE_DELETED, true, true, id);
                window.dispatchEvent(evt);
            }
        },
    };
/**
 * Created by erinsasha on 21/08/17.
 */
var er_endorse_endorser = window.er_endorse_endorser || {
        WARNING_THRESHOLD_LIMIT : 60,
        DEFAULT_CONTACTS_ENDORSE_LIMIT_PER_PERIOD : 60,
        DEFAULT_CONTACTS_ENDORSE_LIMIT_UNSET_VALUE : 'UNSET',
        DEFAULT_PERIOD_HOURS : 24,
        DEFAULT_PERIOD_UNSET_VALUE : 'UNSET',

        CONST_ENDORSE_MODE_ALL : 1, // Режим эндорсмента - все навыки
        CONST_ENDORSE_MODE_SPECIFIED : 2, // Режим эндорсмента - только указанные навыки
        CONST_ENDORSE_MODE_FIRST : 3, // Режим эндорсмента - первые несколько (с указанным лимитом)

        CONST_CURRENT_PERIOD_STARTED : 'STARTED',
        CONST_CURRENT_PERIOD_FINISHED : 'FINISHED',

        endorse_mode : null, // Текущий режим эндорсмента
        skill_for_endorse : null, // Массив скиллов для эндорсмента
        max_endorse_skills_count : null, // Максиммальное Количество скиллов для эндорсмента, если включен соответствующий режим
        endorsed_skills_count : 0, // Количество заэндорсенных скилов

        current_period_state : null, // Запущен ли эндорсмент текущего периода
        endorsed_limit_per_period : null, // Максимально количество проифилей, которые могут быть заиндорсены в рамках одного периода
        endorsed_in_current_period : null, // Сколько контактов уже заиндорсили в текущем периоде
        endorse_period_hours_between : null, // Количество часов между периодами эндорсмента

            /**
             * Инициализирует переменные из local Storage
             * @private
             */
            _new_init_from_local_storage : function() {
                    // Массив контактов для послледующего эндорсмента
                    this.contacts_for_endorse = er_endorse_queue.get_contacts_for_endorse();

                    // Порядковый номер последнего контакта добавленного в массив для эндорса
                    this.last_added_contact_num = this.get_last_added_contact_num();

                    // Текущий режим эндорсмента
                    this.endorse_mode = this.get_endorse_mode();

                    // Массив скиллов для эндорсмента
                    this.skill_for_endorse = this.get_skill_for_endorse();
                    this.skill_for_endorse_lower_case = er_utils.getArrayOfStringsInLowerCase(this.skill_for_endorse);

                    // Максиммальное Количество скиллов для эндорсмента, если включен соответствующий режим
                    this.max_endorse_skills_count = this.get_max_endorse_skills_count();

                    // Запущен ли эндорсмент текущего периода
                    this.current_period_state = this.get_current_period_state();

                    //  Сколько контактов уже заиндорсили в текущем периоде
                    this.endorsed_in_current_period = this.get_endorsed_in_current_period();
            },
            /**
             * Порядковый номер последнего контакта добавленного в массив для эндорса
             */
            get_last_added_contact_num : function() {
                    // Порядковый номер последнего контакта добавленного в массив для эндорса
                    var last_added_contact_num = localStorage.er_endorse_last_added_contact_num;
                    if (last_added_contact_num && last_added_contact_num != '') {
                            last_added_contact_num = Number(last_added_contact_num);
                    } else {
                            last_added_contact_num = -1;
                    }

                    return last_added_contact_num;
            },

            /**
             * Текущий режим эндорсмента
             */
            get_endorse_mode : function() {
                    endorse_mode = localStorage.er_endorse_mode;
                    if (!endorse_mode || endorse_mode == '') {
                        localStorage.er_endorse_mode = this.CONST_ENDORSE_MODE_FIRST;
                        endorse_mode = this.CONST_ENDORSE_MODE_FIRST;
                    }
                    return Number(endorse_mode);
            },
            /**
             * Задает Текущий режим эндорсмента
             */
            set_endorse_mode : function(value) {
                    localStorage.er_endorse_mode = value;
            },
            /**
             * Массив скиллов для эндорсмента
             */
            get_skill_for_endorse : function() {
                    var skill_for_endorse = localStorage.er_skill_for_endorse;
                    if (!skill_for_endorse)
                            skill_for_endorse = ['Management'];
                    else
                            skill_for_endorse = JSON.parse(skill_for_endorse);
                    return skill_for_endorse;
            },
            /**
             * Задает массив скиллов для эндорсмента
             * @param skills
             */
            set_skill_for_endorse : function(skills) {
                    localStorage.er_skill_for_endorse = JSON.stringify(skills);
            },
            /**
             * Максиммальное Количество скиллов для эндорсмента, если включен соответствующий режим
             */
            get_max_endorse_skills_count : function() {
                    max_endorse_skills_count = localStorage.er_max_endorse_skills_count;
                    if (max_endorse_skills_count && max_endorse_skills_count != '') {
                            max_endorse_skills_count = Number(max_endorse_skills_count);
                    } else {
                            max_endorse_skills_count = 3;
                    }
                    return max_endorse_skills_count;
            },
            /**
             * Задает Максиммальное Количество скиллов для эндорсмента, если включен соответствующий режим
             * @param value
             */
            set_max_endorse_skills_count : function(value) {
                    var _val = Number(value);

                    if (isNaN(_val) || _val == 0) {
                            _val = 3;
                    }
                    localStorage.er_max_endorse_skills_count = _val;

                    return _val;
            },
            /**
             * Запущен ли эндорсмент текущего периода
             */
            get_current_period_state : function() {
                    var current_period_state = localStorage.er_endorse_current_period_state;
                    if (!current_period_state || current_period_state == '' || current_period_state == 'undefined') {
                            current_period_state = this.CONST_CURRENT_PERIOD_FINISHED;
                    }
                    return current_period_state;
            },
            /**
             * Сколько контактов уже заиндорсили в текущем периоде
             */
            get_endorsed_in_current_period : function() {
                    var endorsed_in_current_period = localStorage.er_endorsed_in_current_period;
                    if (endorsed_in_current_period && endorsed_in_current_period != '') {
                            endorsed_in_current_period = Number(endorsed_in_current_period);
                    } else {
                            endorsed_in_current_period = 0;
                    }

                    return endorsed_in_current_period;
            },
            /**
             * Увеличивает на единицу счеткичк уже заиндорсили в текущем периоде
             */
            increase_endorsed_in_current_period : function() {
                    localStorage.er_endorsed_in_current_period = this.get_endorsed_in_current_period() + 1;
            },
            /**
             * Задает значение счеткичку уже заиндорсиных в текущем периоде
             * @param value
             */
            set_endorsed_in_current_period : function(value) {
                    localStorage.er_endorsed_in_current_period = value;
            },
            /**
             * Возвращает дату начала следующего периода эндорсмента
             * @returns {*}
             */
            get_next_period_start : function() {
                    var date = localStorage.er_endorse_next_starts_at;

                    if (date != null && date != '')
                            date = new Date(JSON.parse(date));

                    if (date instanceof Date && !isNaN(date.getHours()) && new Date < date) {
                            return date;
                    } else {
                            return null;
                    }
            },
            /**
             * Задает через сколько должен запуститься следующий период от текущего момента
             * @returns {number}
             */
            set_next_period_start : function() {
                    var date = new Date();
                    // Количество миллисекунд до следующего запуска
                    var wait_milli_seconds = 3600000*this.get_endorse_period_hours_between();
                    date.setTime(date.getTime() + wait_milli_seconds);
                    localStorage.er_endorse_next_starts_at = JSON.stringify(date);

                    return wait_milli_seconds;
            },
            /**
             * Возвращает количество миллисекунд между текущем временем и временем следующего запуска
             */
            get_diff_between_now_and_next_period_start : function() {
                    var nextStartDate = this.get_next_period_start();
                    if (nextStartDate == null) {
                            return 0;
                    } else {
                            var currDate = new Date();
                            return nextStartDate.getTime() - currDate.getTime();
                    }
            },

            is_endorser_switched_on : function() {
                return window.localStorage.er_new_endorse_mode == 'true';
            },
            set_endorser_switched_off : function() {
                return window.localStorage.er_new_endorse_mode = 'false';
            },
            set_endorser_switched_on : function() {
                return window.localStorage.er_new_endorse_mode = 'true';
            },

            tab_add_mode : function() {
                    er_tabs_control.add_active_mode('er_new_endorse_mode');
            },
            tab_delete_mode : function() {
                    er_tabs_control.delete_active_mode('er_new_endorse_mode');
            },
            tab_is_active_in : function() {
                    return er_tabs_control.is_mode_active('er_new_endorse_mode');
            },

            is_mode_on_and_tab_active : function() {
                return this.is_endorser_switched_on() && this.tab_is_active_in();
            },

            /**
             * Сколько всего контактов уже заиндорсели
             * @returns {*}
             */
            get_endorsed_counter : function() {
                return er_endorsed_control.get_endorsed_counter();
            },

            /**
             * Увеличивает на единицу счеткичк всего заиндорсенных контактов
             */
            increase_endorsed_counter : function() {
                    localStorage.er_endorsed_counter = this.get_endorsed_counter() + 1;
            },

            /**
             * Максимально количество проифилей, которые могут быть заиндорсены в рамках одного периода
             */
            get_endorsed_limit_per_period : function() {
                    var endorsed_limit_per_period = localStorage.er_endorsed_limit_per_period;

                    if (endorsed_limit_per_period && endorsed_limit_per_period != '') {
                            if (endorsed_limit_per_period != this.DEFAULT_CONTACTS_ENDORSE_LIMIT_UNSET_VALUE)
                                    endorsed_limit_per_period = Number(endorsed_limit_per_period);
                    } else {
                            endorsed_limit_per_period = this.DEFAULT_CONTACTS_ENDORSE_LIMIT_PER_PERIOD;
                    }

                    return endorsed_limit_per_period;
            },
            /**
             * Задает значение endorsed_limit_per_period
             * @param value
             * @returns {number}
             */
            set_endorsed_limit_per_period : function(value) {
                    var _val = Number(value);

                    if (isNaN(_val) || _val == 0) {
                            _val = this.DEFAULT_CONTACTS_ENDORSE_LIMIT_UNSET_VALUE;
                    }
                    localStorage.er_endorsed_limit_per_period = _val;

                    return _val;
            },
            /**
             * Количество часов между периодами эндорсмента
             */
            get_endorse_period_hours_between : function() {
                    var endorse_period_hours_between = localStorage.er_endorse_period_hours_between;

                    if (endorse_period_hours_between && endorse_period_hours_between != '') {
                            if (endorse_period_hours_between != this.DEFAULT_PERIOD_UNSET_VALUE)
                                    endorse_period_hours_between = Number(endorse_period_hours_between);
                    } else {
                            endorse_period_hours_between = this.DEFAULT_PERIOD_HOURS;
                    }

                    return endorse_period_hours_between;
            },
            /**
             * Задает зКоличество часов между периодами эндорсмента
             * @param value
             * @returns {number}
             */
            set_endorse_period_hours_between : function(value) {
                    var _val = Number(value);

                    if (isNaN(_val) || _val == 0) {
                            _val = this.DEFAULT_PERIOD_UNSET_VALUE;
                    }
                    localStorage.er_endorse_period_hours_between = _val;

                    return _val;
            },

            is_limits_are_safe : function() {
                    var limit = Number(this.get_endorsed_limit_per_period());
                    var period = Number(this.get_endorse_period_hours_between());

                    if (isNaN(limit) || isNaN(period))
                            return false;

                    var x = 24 * limit / period;
                    return x <= this.WARNING_THRESHOLD_LIMIT;
            },

            /**
             * Переводит страницу к следующему контакту для эндорсмента
             * @private
             */
            _go_to_next_contact_to_endorse : function() {
                    var first = er_endorse_queue.get_first_id_from_queue();
                    if(first)
                            er_universal_profile_helper.go_to_profile(first);
            },

            /**
             * Запускает режим эндорсмента контактов
             * И переводит на первый в списке профиль для эндорсмента
             */
            begin_endorse_all_contacts : function() {
                    var that = this;

                    var evtPK = document.createEvent("CustomEvent");
                    evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                        function(result) {
                                if (result) {
                                        localStorage.er_new_endorse_mode = 'true';
                                        that.tab_add_mode();
                                        that.begin_new_endorse_period();
                                } else {
                                        that._on_license_not_valid();
                                }
                        }
                    );
                    window.dispatchEvent(evtPK);
            },
            begin_new_endorse_period : function () {
                    var that = this;

                    var evtPK = document.createEvent("CustomEvent");
                    evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                        function(result) {
                                if (result) {
                                        that.set_endorsed_in_current_period(0);
                                        localStorage.er_endorse_current_period_state = that.CONST_CURRENT_PERIOD_STARTED;
                                        delete localStorage.er_endorse_next_starts_at;

                                        that._new_init_from_local_storage();

                                        that._go_to_next_contact_to_endorse();
                                } else {
                                        that._on_license_not_valid();
                                }
                        }
                    );
                    window.dispatchEvent(evtPK);
            },
            endorse_profile_new : function() {
                    var that = this;

                    var evtPK = document.createEvent("CustomEvent");
                    evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                        function(result) {
                                if (result) {
                                        that._new_init_from_local_storage();

                                        if(er_utils.is_current_page_deleted_profile()) {
                                                that._on_current_profile_endorse_finished({error_code : er_endorse_error.error_codes.profile_not_found});
                                                return;
                                        }

                                        if(er_utils.is_new_style_page()) {
                                                var jq_profile_view_grid = $('.profile-view-grid');
                                                if(jq_profile_view_grid.length == 0) {
                                                        setTimeout(function(){ that.endorse_profile_new() },
                                                            100);
                                                        return;
                                                } else {
                                                    that._endorse_new_style_page();
                                                }
                                        } else if(er_utils.is_sales_navigator_profile_page()) {
                                            that._process_sales_navigator_profile();
                                        }

                                        /*er_utils.scroll_page_down_by_screens()
                                                /!*.then(that._ns_skills_container_waiter(10))*!/
                                            .then(that._ns_skills_container_waiter_full.bind(that))
                                            .then(function() {
                                                    var jq_background_skills = that.get_jq_background_skills_cont();
                                                    /!*if(er_utils.is_new_style_page()) {
                                                     jq_background_skills = $('.pv-featured-skills-section').first();
                                                     } else {
                                                     jq_background_skills = $('#background-skills');
                                                     }*!/
                                                    er_utils.scroll_to_element_promise(jq_background_skills, 300)
                                                        .then(function() {
                                                                if(er_utils.is_new_style_page()) {
                                                                        that._ns_open_all_skills_cont(jq_background_skills)
                                                                            .then(function(){
                                                                                    var jq_endorse_items = jq_background_skills.find('.pv-skill-entity--featured');
                                                                                    that._endorse_skill_recur_new(jq_endorse_items, 0);
                                                                            });
                                                                } else {
                                                                        var jq_endorse_items = jq_background_skills.find('.endorse-item');
                                                                        that._endorse_skill_recur_new(jq_endorse_items, 0);
                                                                }
                                                        });
                                            });*/
                                } else {
                                        that._on_license_not_valid();
                                }
                        }
                    );
                    window.dispatchEvent(evtPK);
            },

            _process_sales_navigator_profile : function() {
                var that = this;

                er_sn_profile_helper.extract_and_store_profile_id_map_to_snid()
                    .then(function(map) {

                        er_logger.log('map');
                        er_logger.log(map);

                        er_endorse_mover.replace_snid_by_id(map.id, map.snid);
                        that._on_current_profile_endorse_finished({is_sn : true});
                    });
            },

            _endorse_new_style_page : function() {
                var that = this;

                er_profile_extractor.process_single_page()
                    .then(function() {
                        var jq_background_skills = that.get_jq_background_skills_cont();
                        er_utils.scroll_to_element_promise(jq_background_skills, 300)
                            .then(function() {
                                var jq_endorse_items;
                                if(er_utils.is_new_style_page()) {
                                    jq_endorse_items = jq_background_skills.find('.pv-skill-entity--featured');
                                    that._endorse_skill_recur_new(jq_endorse_items, 0);
                                } else {
                                    jq_endorse_items = jq_background_skills.find('.endorse-item');
                                    that._endorse_skill_recur_new(jq_endorse_items, 0);
                                }
                            });
                    });
            },

            get_jq_background_skills_cont : function() {
                    if(er_utils.is_new_style_page()) {
                            return $('.pv-featured-skills-section').first();
                    } else {
                            return $('#background-skills');
                    }
            },

            _ns_skills_container_waiter_full : function() {
                    return this._ns_skills_container_waiter(3);
            },

            _ns_skills_container_waiter : function(attempt, deferred) {
                    if(!deferred) {
                            deferred = $.Deferred();
                            console.log('START _ns_skills_container_waiter attempt=' + attempt);
                    } else {
                            console.log('CONTINUE _ns_skills_container_waiter attempt=' + attempt);
                    }

                    if(er_utils.is_new_style_page()) {
                            var jq_background_skills = $('.pv-featured-skills-section');
                            if (jq_background_skills.length == 0) {
                                    if(attempt > 0) {
                                            var that = this;
                                            var new_attempt;

                                            console.log('document.webkitHidden : ' + document.webkitHidden);
                                            console.log('document.hidden : ' + document.hidden);

                                            if (er_utils.is_tab_hidden()) {
                                                    new_attempt = attempt;
                                                    setTimeout(function () {
                                                            that._ns_skills_container_waiter(new_attempt, deferred)
                                                    }, 500);
                                            } else {
                                                    new_attempt = attempt - 1;
                                                    er_utils.scroll_to_top_and_then_to_bottom_by_screens()
                                                        .then(function(){ that._ns_skills_container_waiter(new_attempt, deferred) });
                                            }
                                    } else {
                                            console.log('RESOLVE _ns_skills_container_waiter as FALSE');
                                            deferred.resolve(false);
                                    }
                            } else {
                                    console.log('RESOLVE _ns_skills_container_waiter as TRUE');
                                    deferred.resolve(true);
                            }
                    } else {
                            console.log('RESOLVE _ns_skills_container_waiter as TRUE');
                            deferred.resolve(true);
                    }

                    return deferred.promise();
            },

            _ns_open_all_skills_cont : function(jq_skills_cont, deferred) {
                    if(!deferred)
                            deferred = $.Deferred();

                    var jq_btn_view_more = jq_skills_cont.find('.pv-skills-section__additional-skills');
                    if(jq_btn_view_more.length == 0) {
                            deferred.resolve();
                    } else {
                            jq_btn_view_more.click();
                            this._ns_waiter_featured_skills_expanded()
                                .then(function(){ deferred.resolve() });
                    }

                    return deferred.promise();
            },
            _ns_waiter_featured_skills_expanded : function(deferred) {
                    if(!deferred)
                            deferred = $.Deferred();

                    var jq_featured_skills_expanded = $('#featured-skills-expanded');
                    if (jq_featured_skills_expanded.length == 0) {
                            var that = this;
                            setTimeout(function(){
                                    that._ns_waiter_featured_skills_expanded(deferred);
                            }, 100);
                    } else {
                            deferred.resolve();
                            er_utils.scroll_to_element_promise(this.get_jq_background_skills_cont(), 300);
                    }

                    return deferred.promise();
            },

            _on_license_not_valid : function() {
                    localStorage.er_new_endorse_mode = 'false';
                    localStorage.er_endorse_current_period_state = this.CONST_CURRENT_PERIOD_FINISHED;
                    this.tab_delete_mode();
            },

            /**
             * Рекурсивно с таймоутом эндорсит скилы
             * @param jq_endorse_items
             * @param i - номер текущего скилла в jq_endorse_items
             * @private
             */
            _endorse_skill_recur_new : function(jq_endorse_items, i) {
                    if (jq_endorse_items.length == i) {
                            // Заиндорсили до конца профиль
                            this._on_current_profile_endorse_finished();

                            return;
                    }
                    var jq_endorse_item = $(jq_endorse_items[i]);
                    if (this._process_endorse_item(jq_endorse_item)) {
                            this._endorse_skill_recur_st_new(jq_endorse_items, i+1,
                                //er_utils.getRandomInt(300,1000)
                                er_endorse_timeouts.get_random_timeout('endorse_skill')
                            );
                    } else {
                            this._endorse_skill_recur_new(jq_endorse_items, i+1);
                    }
            },

            /**
             * Ждет указанное время прежде чем запустить эндорс следующего навыка
             * @param jq_endorse_items
             * @param i
             * @param timeout
             * @private
             */
            _endorse_skill_recur_st_new : function(jq_endorse_items, i, timeout) {
                    var that = this;
                    setTimeout(function(){ that._endorse_skill_recur_new(jq_endorse_items, i) },
                        timeout);
            },

            /**
             * Энедорсит навык, если он соответствует критериям
             * @param jq_endorse_item
             * @returns {boolean} true - если навык заиндорсели
             * @private
             */
            _process_endorse_item : function(jq_endorse_item) {
                    if (jq_endorse_item.hasClass('endorsed-by-viewer')
                        || jq_endorse_item.find('button[data-control-name=unendorse]').length == 1
                    ) {
                            return false; // Уже ранее эндорсили
                    }

                    var skill = jq_endorse_item.attr('data-endorsed-item-name');
                    if(er_utils.is_new_style_page()) {
                            skill = jq_endorse_item.find('.pv-skill-entity__skill-name').text();
                    } else {
                            skill = jq_endorse_item.attr('data-endorsed-item-name');
                    }

                    var endorse_mode = this.get_endorse_mode();
                    var isNeedClick = false;
                    if(endorse_mode == this.CONST_ENDORSE_MODE_ALL) {
                            isNeedClick = true;
                    } else if (endorse_mode == this.CONST_ENDORSE_MODE_SPECIFIED) {
                            if (skill != null && this.skill_for_endorse_lower_case.indexOf(skill.toLowerCase()) >= 0)
                                    isNeedClick = true;
                    } else {
                            if (this.endorsed_skills_count < this.max_endorse_skills_count)
                                    isNeedClick = true;
                    }

                    if (isNeedClick) {
                            var jq_endorse_button;
                            if(er_utils.is_new_style_page()) {
                                    jq_endorse_button = jq_endorse_item.find('.pv-skill-entity__featured-endorse-button-shared');
                            } else {
                                    jq_endorse_button = jq_endorse_item.find('.endorse-button .endorse-plus');
                            }
                            jq_endorse_button.click();
                            this.endorsed_skills_count++;

                            console.log('endorse skill : '+skill);
                            return true;
                    } else {
                            return false;
                    }
            },

            /**
             * Обрабатывает ситуацию, когда эндорсмент отдельного профиля завершен
             * @private
             */
            _on_current_profile_endorse_finished : function(options) {
                options = options ? options : {};
                var that = this;

                if(!options.is_sn) {
                    if(options.is_error) {
                        er_endorse_mover.move_first_id_from_queue_to_error(options.error_code);
                    } else {
                        er_endorse_mover.move_first_id_from_queue_to_endorsed();
                        this.increase_endorsed_in_current_period();
                    }
                }

                var endorsed_in_current_period = this.get_endorsed_in_current_period();

                var endorsed_limit_per_period = this.get_endorsed_limit_per_period();
                var endorse_period_hours_between = this.get_endorse_period_hours_between();

                if (endorsed_limit_per_period != this.DEFAULT_CONTACTS_ENDORSE_LIMIT_UNSET_VALUE
                    && endorse_period_hours_between != this.DEFAULT_PERIOD_UNSET_VALUE
                    && endorsed_in_current_period >= endorsed_limit_per_period
                ) {
                    if (this.get_current_period_state() == this.CONST_CURRENT_PERIOD_STARTED) {
                        // Завершаем текущий период

                        localStorage.er_endorse_current_period_state = this.CONST_CURRENT_PERIOD_FINISHED;

                        // Устанавливаем дату следующего старта
                        var wait_milli_seconds = this.set_next_period_start();
                        new ER_W_Timeout_Clock({
                                timeout : wait_milli_seconds,
                                techname : 'endorse_next_contact',
                                description : 'Endorse next contact'
                        });
                        // Спим
                        setTimeout(function() { that.begin_new_endorse_period() }, wait_milli_seconds);
                    } else {
                        var diff = this.get_diff_between_now_and_next_period_start();
                        if (diff <= 0) {
                                that.begin_new_endorse_period();
                        } else {
                                setTimeout(function() { that.begin_new_endorse_period() }, diff);
                        }
                    }
                } else {
                    setTimeout(function() { that._go_to_next_contact_to_endorse() },
                        er_endorse_timeouts.get_random_timeout('go_to_next_contact')
                    );
                }
            },
    };
/**
 * Created by erinsasha on 21/08/17.
 */

var er_endorse_error = window.er_endorse_error || {
        get_error_ids : function() {
            /*if (this.error_ids)
             return this.error_ids;*/

            this.error_ids = localStorage.er_endorse_error_ids;
            if(this.error_ids == null || this.error_ids == '') {
                this.error_ids = [];
                localStorage.er_endorse_error_ids = JSON.stringify(this.error_ids);
            } else {
                this.error_ids = JSON.parse(localStorage.er_endorse_error_ids);
            }
            return this.error_ids;
        },
        get_error_mini_profiles : function(callback) {
            var error_ids = this.get_error_ids();
            er_mini_profiles_db.get_profiles(error_ids)
                .then(function(mini_profiles) {
                    callback(mini_profiles);
                });
        },
        set_ids_as_error : function(ids) {
            var error_ids = this.get_error_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (error_ids.indexOf(id) < 0) {
                    error_ids.push(id);
                }
            }
            this.error_ids = error_ids;
            localStorage.er_endorse_error_ids = JSON.stringify(this.error_ids);
        },
        remove_ids_from_error_ids : function(ids) {
            var error_ids = this.get_error_ids();
            this.error_ids = er_utils.get_array_uniq(error_ids, ids);
            localStorage.er_endorse_error_ids = JSON.stringify(this.error_ids);
        },
        delete_ids : function(ids) {
            return this.remove_ids_from_error_ids(ids);
        },
        add_id : function(id) {
            error_ids = this.get_error_ids();
            if (er_utils.my_index_of(error_ids, id) < 0) {
                error_ids.push(id);
                localStorage.er_endorse_error_ids = JSON.stringify(error_ids);
            }
        },
        is_id_error : function(id) {
            var error_ids = this.get_error_ids();
            return er_utils.my_index_of(error_ids, id) >= 0;
        },
        replace_all_error_contacts_by_array : function(ids) {
            this.error_ids = ids;
            localStorage.er_endorse_error_ids = JSON.stringify(this.error_ids);
        },
        get_error_map_error_ids_to_codes : function() {
            this.map_error_ids_to_codes = localStorage.er_endorse_map_error_ids_to_codes;
            if(this.map_error_ids_to_codes == null || this.map_error_ids_to_codes == '') {
                this.map_error_ids_to_codes = {};
                localStorage.er_endorse_map_error_ids_to_codes = JSON.stringify(this.map_error_ids_to_codes);
            } else {
                this.map_error_ids_to_codes = JSON.parse(localStorage.er_endorse_map_error_ids_to_codes);
            }
            return this.map_error_ids_to_codes;
        },
        save_error_map_error_ids_to_codes_to_local_storage : function() {
            localStorage.er_endorse_map_error_ids_to_codes = JSON.stringify(this.map_error_ids_to_codes);
        },
        replace_all_map_error_ids_to_codes : function(map) {
            this.map_error_ids_to_codes = map;
            this.save_error_map_error_ids_to_codes_to_local_storage();
        },
        set_id_as_error_with_code : function(id, code) {
            var map_error_ids_to_codes = this.get_error_map_error_ids_to_codes();
            map_error_ids_to_codes[id] = code;
            this.save_error_map_error_ids_to_codes_to_local_storage();
            this.add_id(id);
        },
        get_err_code_for_id : function(id) {
            var map_error_ids_to_codes = this.get_error_map_error_ids_to_codes();
            return map_error_ids_to_codes[id];
        },
        get_err_description_for_id : function(id) {
            var code = this.get_err_code_for_id(id);
            if(code) {
                var descr = er_endorse_error.error_description[code];
                if(descr)
                    return descr;
                else
                    return '';
            } else {
                return '';
            }
        }
    };
er_endorse_error.error_codes = {};
er_endorse_error.error_codes.profile_not_found = 1;
er_endorse_error.error_codes.myself_or_not_first = 2;

er_endorse_error.error_description = {};
er_endorse_error.error_description[er_endorse_error.error_codes.profile_not_found] = 'LinkedIn can\'t load page for this contact';
er_endorse_error.error_description[er_endorse_error.error_codes.myself_or_not_first] = 'This was not your 1st connection at the moment of sending (2nd, 3rd or yourself)';
/**
 * Created by erinsasha on 20/08/17.
 */
var er_endorse_excluded = window.er_endorse_excluded || {
        get_excluded_ids : function() {
            /*if (this.excluded_ids)
             return this.excluded_ids;*/

            this.excluded_ids = localStorage.er_endorse_excluded_ids;
            if(this.excluded_ids == null || this.excluded_ids == '') {
                this.excluded_ids = [];
                localStorage.er_endorse_excluded_ids = JSON.stringify(this.excluded_ids);
            } else {
                this.excluded_ids = JSON.parse(localStorage.er_endorse_excluded_ids);
            }
            return this.excluded_ids;
        },
        get_excluded_mini_profiles : function(callback) {
            var excluded_ids = this.get_excluded_ids();
            er_mini_profiles_db.get_profiles(excluded_ids)
                .then(function(mini_profiles) {
                    callback(mini_profiles);
                });
        },
        set_ids_as_excluded : function(ids) {
            var excluded_ids = this.get_excluded_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (excluded_ids.indexOf(id) < 0) {
                    excluded_ids.push(id);
                }
            }
            this.excluded_ids = excluded_ids;
            localStorage.er_endorse_excluded_ids = JSON.stringify(this.excluded_ids);
        },
        remove_ids_from_excluded_ids : function(ids) {
            var excluded_ids = this.get_excluded_ids();
            this.excluded_ids = er_utils.get_array_uniq(excluded_ids, ids);
            localStorage.er_endorse_excluded_ids = JSON.stringify(this.excluded_ids);
        },
        delete_ids : function(ids) {
            return this.remove_ids_from_excluded_ids(ids);
        },
        is_id_excluded : function(id) {
            var excluded_ids = this.get_excluded_ids();
            return er_utils.my_index_of(excluded_ids, id) >= 0;
        },
        replace_all_excluded_by_array : function(ids) {
            this.excluded_ids = ids;
            localStorage.er_endorse_excluded_ids = JSON.stringify(this.excluded_ids);
        },
    };
/**
 * Created by erinsasha on 28/08/17.
 */
// er_endorse_lm_callbacks
var er_endorse_lm_callbacks = window.er_endorse_lm_callbacks || {
        get_callbacks : function() {
            return {
                get_lists_deferred : this.get_lists_deferred.bind(this), // get_lists_deferred () // return ({id : id, name : name}, error_message)
                get_sublists : this.get_sublists.bind(this), // get_sublists() // return {id : id, name : name}
                get_sublists_counters_deferred : this.get_sublists_counters_deferred.bind(this), // get_sublists_counters_deferred (list_id) // ({id : sublist_id, counter : counter }, error_message)
                get_create_new_deferred : this.get_create_new_deferred.bind(this), // get_create_new_deferred (list_name) // return (list_id, list_name, error_message)
                get_current_list_id : this.get_current_list_id.bind(this), // get_current_list_id () // return list_id
                get_ids_deferred : this.get_ids_deferred.bind(this), // get_ids_deferred (list_id, sublist_id) // return ids
                perform_action_return_counter_deferred : this.perform_action_return_counter_deferred.bind(this), // perform_action_return_counter_deferred (list_id, sublist_id, action, ids) // return counter of target
            }
        },

        get_lists_deferred : function() {
            var deferred = $.Deferred();
            var lists = er_endorse_control.get_all_lists_ids();
            var result = [];
            for(var i= 0, list_id; i<lists.length; i++) {
                list_id = lists[i];
                result.push({id : list_id, name : list_id});
            }
            deferred.resolve(result);
            return deferred.promise();
        },
        get_sublists : function() {
            return [
                {id : 'queue', name : 'Queue'},
                {id : 'endorsed', name : 'Endorsed'},
                {id : 'excluded', name : 'Excluded'},
            ];
        },
        get_sublists_counters_deferred : function(list_id) {
            var deferred = $.Deferred();
            er_endorse_control.get_endorse(list_id)
                .then(function(endorse_list){
                    var result = [
                        {id : 'queue', counter : endorse_list.get_queue_length()},
                        {id : 'endorsed', counter : endorse_list.get_endorsed_length()},
                        {id : 'excluded', counter : endorse_list.get_excluded_length()}
                    ];
                    deferred.resolve(result);
                });
            return deferred.promise();
        },
        get_create_new_deferred : function(list_name) {
            var deferred = $.Deferred();
            if(er_endorse_control.is_list_with_id_exists(list_name)) {
                deferred.resolve(null, null, 'List already exists');
            } else {
                er_endorse_control.create_new_endorse(list_name)
                    .then(function(endorse_list) {
                        deferred.resolve(endorse_list.id, endorse_list.name);
                    });
            }

            return deferred.promise();
        },
        get_current_list_id : function() {
            return er_endorse_control.get_active_list_id();
        },
        get_ids_deferred : function(list_id, sublist_id) {
            var deferred = $.Deferred();
            er_endorse_control.get_endorse(list_id)
                .then(function(endorse_list){
                    var result;
                    switch (sublist_id) {
                        case  'queue' : result = endorse_list.get_all_ids_in_queue(); break;
                        case  'endorsed' : result = endorse_list.get_all_ids_in_endorsed(); break;
                        case  'excluded' : result = endorse_list.get_all_ids_in_excluded(); break;
                    }

                    deferred.resolve(result);
                });
            return deferred.promise();
        },
        perform_action_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();
            er_endorse_control.get_endorse(list_id)
                .then(function(endorse_list){

                    var target_ids;

                    switch (sublist_id) {
                        case  'queue' : target_ids = endorse_list.get_all_ids_in_queue(); break;
                        case  'endorsed' : target_ids = endorse_list.get_all_ids_in_endorsed(); break;
                        case  'excluded' : target_ids = endorse_list.get_all_ids_in_excluded(); break;
                    }

                    switch (action) {
                        case 'add' : target_ids = er_utils.get_array_merge(target_ids, endorse_list.get_uniq(ids)); break;
                        case 'keep_the_same' : target_ids = er_utils.get_array_intersection(target_ids, ids); break;
                        case 'delete_the_same' : target_ids = er_utils.get_array_uniq(target_ids, ids); break;
                        case 'replace' : target_ids = ids; break;
                        case 'add_all' : target_ids = er_utils.get_array_merge(target_ids, ids); break;
                    }

                    switch (sublist_id) {
                        case  'queue' : endorse_list.set_ids_in_queue(target_ids); break;
                        case  'endorsed' : endorse_list.set_ids_in_endorsed(target_ids); break;
                        case  'excluded' : endorse_list.set_ids_in_excluded(target_ids); break;
                    }

                    er_endorse_control.save_endorse(endorse_list)
                        .then(deferred.resolve.bind(deferred));
                });
            return deferred.promise();
        },
        perform_action_return_counter_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();

            this.perform_action_deferred(list_id, sublist_id, action, ids)
                .then(function(endorse_list) {
                    var new_counter;

                    switch (sublist_id) {
                        case  'queue' : new_counter = endorse_list.get_queue_length(); break;
                        case  'endorsed' : new_counter = endorse_list.get_endorsed_length(); break;
                        case  'excluded' : new_counter = endorse_list.get_excluded_length(); break;
                    }

                    deferred.resolve(new_counter);
                });

            return deferred.promise();
        },
    };
/**
 * Created by erinsasha on 22/08/17.
 */
var er_endorse_mover = window.er_endorse_mover || {
        move_ids_from_queue_to_excluded : function(ids) {
            er_endorse_queue.delete_ids(ids);
            er_endorse_excluded.set_ids_as_excluded(ids);
        },
        move_ids_from_excluded_to_queue : function(ids) {
            er_endorse_excluded.delete_ids(ids);
            er_endorse_queue.add_ids_to_queue_ids_without_check(ids);
        },
        move_ids_from_queue_to_endorsed : function(ids) {
            er_endorse_queue.delete_ids(ids);
            er_endorsed_control.add_ids_to_endorsed(ids);
        },
        move_ids_from_excluded_to_endorsed : function(ids) {
            er_endorse_excluded.delete_ids(ids);
            er_endorsed_control.add_ids_to_endorsed(ids);
        },
        move_ids_from_endorsed_to_queue : function(ids) {
            er_endorsed_control.delete_ids(ids);
            er_endorse_queue.add_ids_to_queue_ids_without_check(ids);
        },
        move_ids_from_endorsed_to_excluded : function(ids) {
            er_endorsed_control.delete_ids(ids);
            er_endorse_excluded.set_ids_as_excluded(ids);
        },
        move_ids_from_error_to_queue : function(ids) {
            er_endorse_error.delete_ids(ids);
            er_endorse_queue.add_ids_to_queue(ids);
        },
        move_first_id_from_queue_to_endorsed : function() {
            var first_id = er_endorse_queue.get_first_id_from_queue();
            if(first_id) {
                er_endorse_queue.delete_first_id_from_queue();
                er_endorsed_control.add_id_to_endorsed(first_id);
            }
        },
        move_first_id_from_queue_to_error : function(error_code) {
            var first_id = er_endorse_queue.get_first_id_from_queue();
            if(first_id) {
                er_endorse_queue.delete_first_id_from_queue();
                er_endorse_error.set_id_as_error_with_code(first_id, error_code);
            }
        },
        replace_snid_by_id : function(id, snid) {
            er_endorse_queue.add_profile_id_to_queue(id, true);
            er_endorse_queue.delete_ids([snid]);
            er_endorse_sn.add_id(snid);
        },
    };
/**
 * Created by erinsasha on 19/08/17.
 */
var er_endorse_my_connections_collector = window.er_endorse_my_connections_collector || {
        collect : function() {
            this.scrapper = new ER_My_Connections_Scrapper({
                stop_ids : [],
                callback : this._on_scrapped.bind(this)
            });
            this.scrapper.begin();
        },
        _on_scrapped : function(results, is_finished, callback_to_continue) {
            var ids = [];
            for(var i=0; i<results.profiles.length; i++) {
                ids.push(results.profiles[i].id);
            }
            er_endorse_queue.add_ids_to_queue(ids);
            if(!is_finished && er_endorse_collector.is_mode_on_and_tab_active())
                callback_to_continue();
        }
    };
/**
 * Created by erinsasha on 17/08/17.
 */
var er_endorse_queue = window.er_endorse_queue || {
        /**
         * Массив контактов для послледующего эндорсмента
         * @returns {*}
         */
        get_contacts_for_endorse : function() {
            return this.get_contacts_ids();
        },
        get_contacts_ids : function() {
            // Массив контактов для послледующего эндорсмента
            var contacts_for_endorse = localStorage.er_contacts_for_endorse;
            if (!contacts_for_endorse)
                contacts_for_endorse = [];
            else {
                contacts_for_endorse = JSON.parse(contacts_for_endorse);
                /*contacts_for_endorse = this._delete_duplicates(contacts_for_endorse);
                 contacts_for_endorse = this._get_only_not_endorsed(contacts_for_endorse);*/
                if(contacts_for_endorse.length > 0) {
                    var first = contacts_for_endorse[0];
                    if(first && first.i)
                        contacts_for_endorse = this._one_time_conversion_to_simple_ids_arr(contacts_for_endorse);
                }
            }

            return contacts_for_endorse;
        },
        get_queue_length : function() {
            return this.get_contacts_ids().length;
        },
        _one_time_conversion_to_simple_ids_arr : function(obj_arr) {
            var arr = [];
            for(var i= 0, obj; i<obj_arr.length; i++) {
                obj = obj_arr[i];
                if(obj && obj.i && obj.i != '') {
                    arr.push(obj.i);
                }
            }
            localStorage.er_contacts_for_endorse = JSON.stringify(arr);
            return arr;
        },
        _delete_duplicates : function(contacts_for_endorse) {
            var ids = [];
            var result = [];

            for(var i= 0, obj; i<contacts_for_endorse.length; i++) {
                obj = contacts_for_endorse[i];
                if(ids.indexOf(obj.i) < 0) {
                    result.push(obj);
                    ids.push(obj.i);
                }
            }

            return result;
        },
        _get_only_not_endorsed : function(contacts_for_endorse) {
            var result = [];

            for(var i= 0, obj; i<contacts_for_endorse.length; i++) {
                obj = contacts_for_endorse[i];
                if(! er_endorsed_control.is_id_endorsed(obj.i)) {
                    result.push(obj)
                }
            }

            return result;
        },
        is_in_queue : function(id) {
            return this.get_contacts_ids().indexOf(id) >= 0;
        },
        add_profile_id_to_queue : function(id, add_to_start) {
            var queue_ids = this.get_contacts_ids();
            if (id != null && id != ''
                && queue_ids.indexOf(id) < 0
                && !er_endorsed_control.is_id_endorsed(id)
                && !er_endorse_excluded.is_id_excluded(id)
                && !er_endorse_sn.is_id_sn(id)
            )
                if(add_to_start)
                    queue_ids.unshift(id);
                else
                    queue_ids.push(id);
            this.replace_all_queue_by_array(queue_ids);
            return queue_ids;
        },
        add_ids_to_queue : function(new_ids) {
            var endorsed_ids = er_endorsed_control.get_endorsed_ids();
            new_ids = er_utils.get_array_uniq(new_ids, endorsed_ids);
            var excluded_ids = er_endorse_excluded.get_excluded_ids();
            new_ids = er_utils.get_array_uniq(new_ids, excluded_ids);
            var sn_ids = er_endorse_sn.get_sn_ids();
            new_ids = er_utils.get_array_uniq(new_ids, sn_ids);

            merged_ids = er_utils.get_array_merge(new_ids, this.get_contacts_ids());
            localStorage.er_contacts_for_endorse = JSON.stringify(merged_ids);

            return new_ids;
        },
        add_ids_to_queue_ids_without_check : function(ids) {
            var contacts_ids = this.get_contacts_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (contacts_ids.indexOf(id) < 0) {
                    contacts_ids.push(id);
                }
            }
            localStorage.er_contacts_for_endorse = JSON.stringify(contacts_ids);
        },
        /**
         * Возвращает в callback ассоциативный массив мини-профилей получателей рассылки
         * @param callback_result
         * @private
         */
        get_queue_mini_profiles : function(callback_result) {
            var collected_ids = this.get_contacts_ids();
            er_mini_profiles_db.get_profiles(collected_ids)
                .then(function(mini_profiles) {
                    callback_result(mini_profiles);
                });
        },
        get_first_id_from_queue : function() {
            var ids = this.get_contacts_ids();
            if(ids.length > 0)
                return ids[0];
            else
                return null;
        },
        delete_first_id_from_queue : function() {
            var ids = this.get_contacts_ids();
            ids.splice(0, 1);
            localStorage.er_contacts_for_endorse = JSON.stringify(ids);
            return ids;
        },
        delete_all : function() {
            localStorage.er_contacts_for_endorse = JSON.stringify([]);
        },
        delete_ids : function(ids) {
            var ids_queue = this.get_contacts_ids();
            ids_queue = er_utils.get_array_uniq(ids_queue, ids);
            localStorage.er_contacts_for_endorse = JSON.stringify(ids_queue);
        },
        replace_all_queue_by_array : function(ids) {
            localStorage.er_contacts_for_endorse = JSON.stringify(ids);
        },
    };
/**
 * Created by erinsasha on 23/08/17.
 */
var er_endorse_sn = window.er_endorse_sn || {
        get_sn_ids : function() {
            /*if (this.sn_ids)
             return this.sn_ids;*/

            this.sn_ids = localStorage.er_endorse_sn_ids;
            if(this.sn_ids == null || this.sn_ids == '') {
                this.sn_ids = [];
                localStorage.er_endorse_sn_ids = JSON.stringify(this.sn_ids);
            } else {
                this.sn_ids = JSON.parse(localStorage.er_endorse_sn_ids);
            }
            return this.sn_ids;
        },
        get_sn_mini_profiles : function(callback) {
            var sn_ids = this.get_sn_ids();
            er_mini_profiles_db.get_profiles(sn_ids)
                .then(function(mini_profiles) {
                    callback(mini_profiles);
                });
        },
        add_id : function(id) {
            var sn_ids = this.get_sn_ids();
            if (sn_ids.indexOf(id) < 0) {
                sn_ids.push(id);
            }
            this.sn_ids = sn_ids;
            localStorage.er_endorse_sn_ids = JSON.stringify(this.sn_ids);
        },
        set_ids_as_sn : function(ids) {
            var sn_ids = this.get_sn_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (sn_ids.indexOf(id) < 0) {
                    sn_ids.push(id);
                }
            }
            this.sn_ids = sn_ids;
            localStorage.er_endorse_sn_ids = JSON.stringify(this.sn_ids);
        },
        remove_ids_from_sn_ids : function(ids) {
            var sn_ids = this.get_sn_ids();
            this.sn_ids = er_utils.get_array_uniq(sn_ids, ids);
            localStorage.er_endorse_sn_ids = JSON.stringify(this.sn_ids);
        },
        delete_ids : function(ids) {
            return this.remove_ids_from_sn_ids(ids);
        },
        is_id_sn : function(id) {
            var sn_ids = this.get_sn_ids();
            return er_utils.my_index_of(sn_ids, id) >= 0;
        },
        replace_all_sn_by_array : function(ids) {
            this.sn_ids = ids;
            localStorage.er_endorse_sn_ids = JSON.stringify(this.sn_ids);
        },
    };
/**
 * Created by erinsasha on 11/08/17.
 */

var er_endorse_timeouts = window.er_endorse_timeouts || {
        const_timeouts_names : {
            endorse_skill : 'Endorse single skill',
            go_to_next_contact : 'Go to next contact',

        },
        const_timeout_fast : {
            endorse_skill : {min : 1000, max : 5000},
            go_to_next_contact : {min : 10000, max : 20000}
        },
        const_timeout_safe : {
            endorse_skill : {min : 3000, max : 20000},
            go_to_next_contact : {min : 30000, max : 600000}
        },

        init : function() {
            if(this.started)
                return;
            this.started = true;
            this._init_from_local_storage();
        },
        _init_from_local_storage : function() {
            if(this.current_timeouts)
                return;

            var current_timeouts = localStorage.er_endorse_timeouts;
            if(current_timeouts && current_timeouts != '') {
                this.current_timeouts = JSON.parse(current_timeouts);
                this.restore_missed_values();
            } else
                this.save_timeouts_from_object(this.const_timeout_fast);
        },
        restore_missed_values : function() {
            var timeouts_tech_names = Object.keys(this.const_timeout_fast);

            var tech_name;

            for(var i=0; i<timeouts_tech_names.length; i++) {
                tech_name = timeouts_tech_names[i];
                if(!this.current_timeouts[tech_name])
                    this.current_timeouts[tech_name] = this.const_timeout_fast[tech_name];
            }
        },
        save_timeouts_from_object : function(obj) {
            this.current_timeouts = er_utils.get_object_copy(obj);
            this.save_current_timeouts_to_local_storage();
        },
        save_current_timeouts_to_local_storage : function() {
            localStorage.er_endorse_timeouts = JSON.stringify(this.current_timeouts);
        },
        get_timeouts : function() {
            this.init();
            return this.current_timeouts;
        },
        get_random_timeout : function(timeout_name, dont_show_clock) {
            this.init();
            var timeout = this.current_timeouts[timeout_name];
            var rt = er_utils.getRandomInt(timeout.min, timeout.max);

            if(!dont_show_clock) {
                new ER_W_Timeout_Clock({
                    timeout : rt,
                    techname : timeout_name,
                    description : this.const_timeouts_names[timeout_name]
                })
            }

            return rt;
        },
    };
/**
 * Created by Alex on 20.10.2016.
 */
/*
old_er_endorse_view = window.old_er_endorse_view || {
    CONST_REFRESH_STAT_TIMEOUT : 10000,

    type : 'er_endorse',
    tittle : 'Endorse my contacts',

    jq_main : null,

    jq_contacts_for_endorse : null, // Осталось заэндорсить
    jq_endorsed_total : null, // Сколько всего заэндорсили
    jq_endorsed_in_current_period : null, // Сколько заэндорсили за текущий период
    jq_current_period_state : null, // Состояние ткущего периода
    jq_next_period_start_cont : null, // Контейнер с датой следующего периода
    jq_next_period_start : null, // Дата следующего периода
    jq_endorse_mode_toggle : null, // Переключатель режима эндорсмента скиллов
    jq_endorse_mode_first_cont : null, // Контейнер задания количества первых скиллов для эндорсмента
    jq_endorse_skills_cont : null, // Контейнер выбора скиллов для эндорсмента

    init_main : function() {
        if (this.inited)
            return;

        this.jq_main = $(this._HTML_build_main());

        this.jq_contacts_for_endorse = this.jq_main.find('.er_contacts_for_endorse');
        this.jq_endorsed_total = this.jq_main.find('.er_endorsed_total');
        this.jq_endorsed_in_current_period = this.jq_main.find('.er_endorsed_in_current_period');
        this.jq_current_period_state = this.jq_main.find('.er_current_period_state');
        this.jq_next_period_start_cont = this.jq_main.find('.stat_cont.next_period_start');
        this.jq_next_period_start = this.jq_next_period_start_cont.find('.er_next_period_start');

        this.jq_endorse_mode_toggle = this.jq_main.find('.endorse_mode_toggle');
        this.jq_endorse_mode_first_cont = this.jq_main.find('.endorse_mode_first_cont');
        this.jq_endorse_skills_cont = this.jq_main.find('.endorse_skills_cont');

        this.jq_btn_collect = this.jq_main.find('.btn_collect');
        this.jq_btn_begin_endorse = this.jq_main.find('.btn_begin_endorse');

        this.jq_input_endorse_period = this.jq_main.find('.endorse_period');
        this.jq_input_endorse_limit = this.jq_main.find('.endorse_limit');

        this._add_handlers();
        er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

        er_main_view._add_callback_on_click_mode_after_turn_on('er_new_endorse_mode', this._on_click_mode_after_turn_on.bind(this));

        this.closure_refresh = this._refresh.bind(this);
        setTimeout(this.closure_refresh, this.CONST_REFRESH_STAT_TIMEOUT);

        var href = window.location.href;
        if (localStorage.er_new_endorse_mode == 'true'
            && (href.indexOf('linkedin.com/in/') >= 0
            || href.indexOf('linkedin.com/connected/') >= 0
            || href.indexOf('linkedin.com/mynetwork/invite-connect/connections/') >= 0)
        )
            er_main_view.show_settings(this.type);

        this.inited = true;
    },
    _HTML_build_main : function() {
        var html = '<div class="er_sub_view '+this.type+'">';

        html += this._HTML_build_tabs_pannel();

        html += this._HTML_build_content_main();
        html += this._HTML_build_content_clear();

        html += '</div>';
        return html;
    },

        _HTML_build_tabs_pannel : function() {
            var html = '<div class="tabs_pannel">';

            html += '<span class="tab set" data-tab="main">Main</span>';
            html += '<span class="tab" data-tab="clear">Clear</span>';

            html += '</div>';

            return html;
        },
        _HTML_build_content_main : function() {
            var html = '<div class="content set" data-type="main">';

            html += '<p class="warning message separate_window"></p>';
            html += this._HTML_build_contacts_for_endorse();

            var btn_collect_started = '', btn_begin_endorse_started = '';
            if (window.localStorage.er_new_endorse_mode == 'true') {
                if(er_utils.is_my_contacts_page()  && er_endorse.tab_is_active_in()){
                    btn_collect_started = 'started';
                } else {
                    btn_begin_endorse_started = 'started';
                }
            }

            html += '<button class="btn_collect '+btn_collect_started+'"></button>';

            html += this._HTML_build_endorsed_total();
            html += this._HTML_build_endorsed_in_current_period();
            html += this._HTML_build_current_period_state();
            html += this._HTML_build_next_period_start();


            html += this._HTML_build_endorse_period();
            html += this._HTML_build_endorse_limit();

            html += this._HTML_build_endorse_mode_cont();

            html += '<button class="btn_begin_endorse '+btn_begin_endorse_started+'"></button>';
            html += '<button class="btn_timeout_settings">Timeout settings</button>';

            html += '</div>';
            return html;
        },
        _HTML_build_content_clear : function() {
            var html = '<div class="content" data-type="clear">';
            html += '</div>';
            return html;
        },


    _HTML_build_contacts_for_endorse : function() {
        //var endorsed_counter = er_endorse.get_endorsed_counter();
        //var total_contacts = er_endorse.get_last_added_contact_num()+1;
        var value = (er_endorse.get_contacts_for_endorse()).length;

        return '<div class="stat_cont contacts_for_endorse"><span class="title label"></span><span class="er_contacts_for_endorse value">'+value+'</span></div>';
    },
    _HTML_build_endorsed_total : function() {
        var count_sent = er_endorse.get_endorsed_counter();

        return '<div class="stat_cont endorsed_total"><span class="title label"></span><span class="er_endorsed_total value">'+count_sent+'</span></div>';
    },
    _HTML_build_endorsed_in_current_period : function() {
        var count_sent = er_endorse.get_endorsed_in_current_period();

        return '<div class="stat_cont endorsed_in_current_period"><span class="title label"></span><span class="er_endorsed_in_current_period value">'+count_sent+'</span></div>';
    },
    _HTML_build_current_period_state : function() {
        var state = er_endorse.get_current_period_state();

        return '<div class="stat_cont current_period_state"><span class="title label"></span><span class="er_current_period_state value">'+state+'</span></div>';
    },
    _HTML_build_next_period_start : function() {
        var date = er_endorse.get_next_period_start();
        var hidden = 'hidden';

        if (date != null) {
            hidden = '';
            date = er_utils.datetimeJSToUser(date);
        }
        return '<div class="stat_cont next_period_start '+hidden+'"><span class="title label"></span><span class="er_next_period_start value">'+date+'</span></div>';
    },


    _HTML_build_endorse_limit : function() {
        var html = '<div class="endorse_limit_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var limit = er_endorse.get_endorsed_limit_per_period();

        html += '<input class="endorse_limit" type="text" value="'+limit+'">';
        html += '</div>';
        return html;
    },
    _HTML_build_endorse_period : function() {
        var html = '<div class="endorse_period_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var period = er_endorse.get_endorse_period_hours_between();

        html += '<input class="endorse_period" type="text" value="'+period+'">';
        html += '</div>';
        return html;
    },

    _HTML_build_endorse_mode_cont : function() {
        var html = '<div class="endorse_mode_cont">';

        html += this._HTML_build_endorse_mode_toggle();

        html += '<div class="prefs_cont">';
        html += this._HTML_build_endorse_mode_specified();
        html += this._HTML_build_endorse_mode_first();
        html += '</div>';

        html += '</div>';
        return html;
    },
    _HTML_build_endorse_mode_toggle : function() {
        var setAll = '', setFirst = '', setSpecified ='';

        var endorse_mode = er_endorse.get_endorse_mode();

        switch (endorse_mode) {
            case er_endorse.CONST_ENDORSE_MODE_ALL          : setAll = 'set'; break;
            case er_endorse.CONST_ENDORSE_MODE_FIRST        : setFirst = 'set'; break;
            case er_endorse.CONST_ENDORSE_MODE_SPECIFIED    : setSpecified = 'set'; break;
        }

        var html = '<div class="b2ctoggle endorse_mode_toggle">';
        html += '<span class="label"></span>';
        html += '<span class="values">' +
            '<span class="togglevalue all left '+setAll+'" data-val="all"></span>' +
            '<span class="togglevalue first '+setFirst+'" data-val="first"></span>' +
            '<span class="togglevalue specified right '+setSpecified+'" data-val="specified"></span>' +
            '</span>';
        html += '</div>';

        return html;
    },
    _HTML_build_endorse_mode_specified : function() {
        var hidden = '';
        if (er_endorse.get_endorse_mode() != er_endorse.CONST_ENDORSE_MODE_SPECIFIED)
            hidden = 'hidden';

        return '<div class="tags_cont endorse_skills_cont '+hidden+'"></div>';
    },
    _HTML_build_endorse_mode_first : function() {
        var hidden = '';
        if (er_endorse.get_endorse_mode() != er_endorse.CONST_ENDORSE_MODE_FIRST)
            hidden = 'hidden';

        var html = '<div class="endorse_mode_first_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var limit = er_endorse.get_max_endorse_skills_count();

        html += '<input class="endorse_mode_first_limit" type="text" value="'+limit+'">';
        html += '</div>';
        return html;
    },

    _add_handlers : function() {
        new ER_Widget_How_To({
            jq_parent : this.jq_main,
            links : [ER_Widget_How_To.links.er_endorse_view]
        });

        this.jq_main.children('.tabs_pannel').children('.tab').click(this._on_click_tab.bind(this));

        var jq_content_clear = this.jq_main.find('.content[data-type=clear]');

        this.er_W_Endorse_Clear = new ER_W_Endorse_Clear({
            jq_parent : jq_content_clear
        });

        this.jq_input_endorse_period.change(this._on_change_input_endorse_period.bind(this));
        this.jq_input_endorse_limit.change(this._on_change_input_endorse_limit.bind(this));
        this.jq_main.find('.endorse_mode_first_limit').change(this._on_change_input_endorse_mode_first_limit.bind(this));

        this.jq_btn_collect.click(this._on_click_btn_collect.bind(this));
        this.jq_btn_begin_endorse.click(this._on_click_btn_begin_endorse.bind(this));
        this.jq_main.find('button.btn_timeout_settings').click(this._on_click_btn_timeout_settings.bind(this));

        this.jq_main.find('.endorse_mode_toggle').b2ctoggle({
            multiMode : false,
            onValueChange : this._on_endorse_mode_toggle_state_change.bind(this)
        });

        this._add_handlers_endorse_skills_cont();
    },
    _add_handlers_endorse_skills_cont : function() {
        var skills = er_endorse.get_skill_for_endorse();
        this.jq_endorse_skills_cont.b2ctags({
            tags : skills,
            placeholder : 'Input skill and press Enter',
            unsetAllEnabled : false,
            onChanged : this._on_endorse_skills_cont_changed.bind(this)
        });
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _refresh : function() {
        if(this.is_widget_visible()) {
            this._refresh_contacts_for_endorse();
            this.jq_endorsed_total.text(er_endorse.get_endorsed_counter());
            this.jq_endorsed_in_current_period.text(er_endorse.get_endorsed_in_current_period());
            this.jq_current_period_state.text(er_endorse.get_current_period_state());
            this._refresh_next_period_start();
            this._refresh_btn_collect_and_btn_begin_endorse();
        }

        setTimeout(this.closure_refresh, this.CONST_REFRESH_STAT_TIMEOUT);
    },
    _refresh_contacts_for_endorse : function() {
        /!*var endorsed_counter = er_endorse.get_endorsed_counter();
        var total_contacts = er_endorse.get_last_added_contact_num()+1;
        value = total_contacts - endorsed_counter;*!/
        var value = (er_endorse.get_contacts_for_endorse()).length;

        this.jq_contacts_for_endorse.text(value);
    },
    _refresh_next_period_start : function() {
        var date = er_endorse.get_next_period_start();
        if (date) {
            this.jq_next_period_start_cont.removeClass('hidden');
            this.jq_next_period_start.text(er_utils.datetimeJSToUser(date));
        } else {
            this.jq_next_period_start_cont.addClass('hidden');
        }
    },
    _refresh_btn_collect_and_btn_begin_endorse : function() {
        if (window.localStorage.er_new_endorse_mode == 'true') {
            if(er_utils.is_my_contacts_page()  && er_endorse.tab_is_active_in()){
                this.jq_btn_collect.addClass('started');
                this.jq_btn_begin_endorse.removeClass('started');
            } else {
                this.jq_btn_collect.removeClass('started');
                this.jq_btn_begin_endorse.addClass('started');
            }
        } else {
            this.jq_btn_collect.removeClass('started');
            this.jq_btn_begin_endorse.removeClass('started');
        }
    },

    _check_limits_and_warn : function() {
        if(er_endorse.is_limits_are_safe()) {
            this.jq_input_endorse_period.removeClass('warning');
            this.jq_input_endorse_limit.removeClass('warning');
        } else {
            this.jq_input_endorse_period.addClass('warning');
            this.jq_input_endorse_limit.addClass('warning');

            er_main_view._info_popup_show(er_translator.get_text('er_endorse_view', 'messages', 'limits_warning', er_gen_settings.get_current_language_id()));
        }
    },

    _on_main_view_ready_for_sub_view : function() {
        this.init_main();
    },
    _on_click_tab : function(event) {
        var jq_tab = $(event.target);
        if(jq_tab.hasClass('set'))
            return;

        jq_tab.siblings('.tab.set').removeClass('set');
        this.jq_main.children('.content.set').removeClass('set');

        jq_tab.addClass('set');
        this.jq_main.children('.content[data-type='+jq_tab.attr('data-tab')+']').addClass('set');
    },


    _on_change_input_endorse_period : function(event) {
        var jqInput = $(event.target);
        jqInput.val(er_endorse.set_endorse_period_hours_between(jqInput.val()));
        this._check_limits_and_warn();
    },
    _on_change_input_endorse_limit : function(event) {
        var jqInput = $(event.target);
        jqInput.val(er_endorse.set_endorsed_limit_per_period(jqInput.val()));
        this._check_limits_and_warn();
    },
    _on_change_input_endorse_mode_first_limit : function(event) {
        var jqInput = $(event.target);
        jqInput.val(er_endorse.set_max_endorse_skills_count(jqInput.val()));
    },
    _on_click_btn_collect : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_collect.hasClass('started')) {
            localStorage.er_new_endorse_mode = 'false';
            er_endorse.tab_delete_mode();
            this.jq_btn_collect.removeClass('started');
        } else {
            this.jq_btn_collect.addClass('started');
            er_endorse.tab_add_mode();
            er_endorse.begin_collect_ids_for_endorse();
        }
    },
    _on_click_btn_begin_endorse : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_begin_endorse.hasClass('started')) {
            localStorage.er_new_endorse_mode = 'false';
            er_endorse.tab_delete_mode();
            this.jq_btn_begin_endorse.removeClass('started');
        } else {
            this.jq_btn_begin_endorse.addClass('started');
            er_endorse.tab_add_mode();
            er_endorse.begin_endorse_all_contacts();
        }
    },
    _on_click_btn_timeout_settings : function() {
        new ER_W_Endorse_Timeout_Settings({});
    },
    _on_endorse_mode_toggle_state_change : function(states) {
        if(this.jq_endorse_mode_toggle.b2ctoggle('isset', 'all')) {
            this.jq_endorse_mode_first_cont.addClass('hidden');
            this.jq_endorse_skills_cont.addClass('hidden');
            er_endorse.set_endorse_mode(er_endorse.CONST_ENDORSE_MODE_ALL);
        } else if (this.jq_endorse_mode_toggle.b2ctoggle('isset', 'first')) {
            this.jq_endorse_mode_first_cont.removeClass('hidden');
            this.jq_endorse_skills_cont.addClass('hidden');
            er_endorse.set_endorse_mode(er_endorse.CONST_ENDORSE_MODE_FIRST);
        } else if (this.jq_endorse_mode_toggle.b2ctoggle('isset', 'specified')) {
            this.jq_endorse_mode_first_cont.addClass('hidden');
            this.jq_endorse_skills_cont.removeClass('hidden');
            er_endorse.set_endorse_mode(er_endorse.CONST_ENDORSE_MODE_SPECIFIED);
        }
    },
    _on_endorse_skills_cont_changed : function(skills) {
        er_endorse.set_skill_for_endorse(skills);
    },
    _on_click_mode_after_turn_on : function() {
        var endorsed_counter = er_endorse.get_endorsed_counter();
        var total_contacts = er_endorse.get_last_added_contact_num()+1;
        var contacts_for_endorse = total_contacts - endorsed_counter;

        var that = this;

        if (contacts_for_endorse > 0) {
            er_main_view.show_yes_no_dialog(
                er_translator.get_text('er_endorse_view', 'messages', 'need_begin_endorse', er_gen_settings.get_current_language_id()),
                function() {
                    that._on_click_btn_begin_endorse(null, true);
                }
            );
        } else {
            er_main_view.show_yes_no_dialog(
                er_translator.get_text('er_endorse_view', 'messages', 'need_begin_collect_for_endorse', er_gen_settings.get_current_language_id()),
                function() {
                    that._on_click_btn_collect(null, true);
                }
            );
        }
    },
};
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_endorse_view._on_main_view_ready_for_sub_view() });
*/

/**
 * Created by erinsasha on 15/02/17.
 */
var er_endorsed_control = window.er_endorsed_control || {
        get_endorsed_ids : function() {
            var ids = localStorage.er_endorsed_ids;
            if(ids == null || ids == '') {
                ids = [];
                localStorage.er_endorsed_ids = JSON.stringify(ids);
            } else {
                ids = JSON.parse(ids);
            }

            return ids;
        },
        get_endorsed_counter : function() {
            return this.get_endorsed_ids().length;
        },
        add_id_to_endorsed : function(id) {
            var ids = this.get_endorsed_ids();
            if (ids.indexOf(id) < 0) {
                ids.push(id);
                localStorage.er_endorsed_ids = JSON.stringify(ids);
            }
        },
        add_ids_to_endorsed : function(ids) {
            var endorsed_ids = this.get_endorsed_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (endorsed_ids.indexOf(id) < 0) {
                    endorsed_ids.push(id);
                }
            }
            localStorage.er_endorsed_ids = JSON.stringify(endorsed_ids);
        },
        is_id_endorsed : function(id) {
            var ids = this.get_endorsed_ids();
            return ids.indexOf(id) >= 0;
        },
        get_only_not_endorsed_ids : function(ids_for_check) {
            var ids = this.get_endorsed_ids();
            return er_utils.get_array_uniq(ids_for_check, ids);
        },
        delete_ids : function(ids) {
            var endorsed_ids = this.get_endorsed_ids();
            endorsed_ids = er_utils.get_array_uniq(endorsed_ids, ids);
            localStorage.er_endorsed_ids = JSON.stringify(endorsed_ids);

            return endorsed_ids;
        },
        delete_all_endorsed : function() {
            ids = [];
            localStorage.er_endorsed_ids = JSON.stringify(ids);
        },
        replace_all_endorsed_by_array : function(ids) {
            localStorage.er_endorsed_ids = JSON.stringify(ids);
        },
    };
/**
 * Created by erinsasha on 08/08/17.
 */
var er_install_lh_connector = window.er_install_lh_connector || {
        init : function() {
            if(this.started)
                return;
            this.started = true;

            if(this.is_need_to_be_checked())
                this.check();
        },
        ping : function(timeout, callback) {
            (function() {
                var is_finished = false;

                erlh_server.send(
                    erlh_server.url.ping.ping,
                    {},
                    function(err, result) {
                        if(is_finished)
                            return;
                        is_finished = true;

                        if(err)
                            callback(false);
                        else
                            callback(true);
                    }
                );

                setTimeout(function() {
                    if(is_finished)
                        return;
                    is_finished = true;

                    callback(false);
                },timeout);
            })();
        },
        is_need_to_be_checked : function() {
            return !er_tabs_control.is_any_mode_active();
        },
        check : function() {
            this.ping(20000, this._on_ping_result.bind(this));
        },
        _on_ping_result : function(result) {
            if(!result)
                this._show_message_install_lh_connector();
        },
        _on_main_view_ready_for_sub_view : function() {
            this.init();
        },
        _show_message_install_lh_connector : function() {
            er_install_lh_connector_view.init_main();
        }
    };
//document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_install_lh_connector._on_main_view_ready_for_sub_view() });
/**
 * Created by erinsasha on 08/08/17.
 */
//install_lh_connector_view

er_install_lh_connector_view = window.er_install_lh_connector_view || {
        type : 'er_install_lh_connector_view',
        tittle : 'Install LH Connector add-on',

        jq_main : null,
        
        init_main : function() {
            if (this.inited)
                return;

            this.jq_main = $(this._HTML_build_main());

            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

            er_main_view.show_settings(this.type);

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            html += '<p class="er_better_experience">To get better experience with Linked Helper please install our free add-on :</p>';
            html += '<p class="lh_connector_link"><a target="_blank" href="https://chrome.google.com/webstore/detail/lh-connector/ooicjhkkfdijjlnfopfakboefcmifdlh">LH Connector</a></p>';

                html += '</div>';
            return html;
        },


        _html_build_blog_item : function(item, pos) {
            return '<a class="help er_blog" target="_blank" href="'+item.link+'">'+pos+' : '+item.name+'</a>';
        },


        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },

    };

//document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_install_lh_connector_view._on_main_view_ready_for_sub_view() });
/**
 * Created by Alex on 21.10.2016.
 */
var er_gen_settings = window.er_gen_settings || {
    EVENT_LANGUAGE_CHANGED : 'EVENT_LANGUAGE_CHANGED',

    language_id_to_label : {
        'en' : 'English',
        'ru' : 'Русский',
        /*'de' : 'Deutsch',*/
    },

    get_language_id_to_label : function() {
        return this.language_id_to_label;
    },

    get_current_language_id : function() {
        var id = localStorage.er_language_id;
        if (!id || id == '') {
            id = 'en';
            localStorage.er_language_id = id;
        }

        if (id == 'de') {
            id = 'en';
            localStorage.er_language_id = id;
        }

        return id;
    },
    set_current_language_id : function(value) {
        localStorage.er_language_id = value;
        document.dispatchEvent(new Event(this.EVENT_LANGUAGE_CHANGED));
        er.add_lang_mark_to_body();
    },
    get_language_label : function(language_id) {
        return this.language_id_to_label[language_id];
    },

    set_collapse_mode_minified : function(is_minified) {
        if(is_minified === true || is_minified == 'true')
            localStorage.er_main_view_use_minified_mode = 'true';
        else
            localStorage.er_main_view_use_minified_mode = 'false';
    },
    is_collapse_mode_minified : function() {
        return localStorage.er_main_view_use_minified_mode == 'true';
    },

    get_show_avatars_in_profiles_list : function() {
        if (typeof this.show_avatars_in_profiles_list === "undefined") {
            this.show_avatars_in_profiles_list = localStorage.er_show_avatars_in_profiles_list != 'false';
        }
        return this.show_avatars_in_profiles_list;
    },
    set_show_avatars_in_profiles_list : function(is_show) {
        if(is_show === true || is_show == 'true') {
            this.show_avatars_in_profiles_list = true;
            localStorage.er_show_avatars_in_profiles_list = 'true';
        } else {
            this.show_avatars_in_profiles_list = false;
            localStorage.er_show_avatars_in_profiles_list = 'false';
        }
    },
};
/**
 * Created by Alex on 21.10.2016.
 */
er_gen_settings_view = window.er_gen_settings_view || {
    type : 'er_gen_settings',
    tittle : 'General settings',

    jq_main : null,

    jq_select_language : null, // Селектор выбора языка

    init_main : function() {
        if (this.inited)
            return;

        this.jq_main = $(this._HTML_build_main());

        this.jq_select_language = this.jq_main.find('.select_language');
        this.jq_select_collapse_mode = this.jq_main.find('.select_collapse_mode');
        this.jq_select_show_avatars = this.jq_main.find('.select_show_avatars');

        this._add_handlers();
        er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

        this.inited = true;
    },
    _HTML_build_main : function() {
        var html = '<div class="er_sub_view '+this.type+'">';

        html += this._HTML_build_language_selector();
        html += this._HTML_build_collapse_mode_selector();
        html += this._HTML_build_show_avatars_selector();

        html += '</div>';
        return html;
    },
    _HTML_build_language_selector : function() {
        var html = '<div class="language_selector_cont er_label_input_cont">';

        html += '<span class="label">Language</span>';

        html += '<select class="select_language">';

        var curr_lang_id = er_gen_settings.get_current_language_id();
        var selected;

        var lang_id_to_label = er_gen_settings.get_language_id_to_label();
        for(var id in lang_id_to_label) {
            selected = curr_lang_id == id ? 'selected' : '';
            html += '<option value="'+id+'" '+selected+'>'+lang_id_to_label[id]+'</option>';
        }

        html += '</select>';

        html += '</div>';

        return html;
    },
    _HTML_build_collapse_mode_selector : function() {
        var html = '<div class="collapse_mode_selector_cont er_label_input_cont">';

        html += '<span class="label">Collapse mode</span>';

        html += '<select class="select_collapse_mode">';

        var selected_normal_mode, selected_minified_mode;
        if (er_gen_settings.is_collapse_mode_minified()) {
            selected_normal_mode = '';
            selected_minified_mode = 'selected';
        } else {
            selected_normal_mode = 'selected';
            selected_minified_mode = '';
        }

        html += '<option value="normal" '+selected_normal_mode+'>normal</option>';
        html += '<option value="minified" '+selected_minified_mode+'>minified</option>';

        html += '</select>';

        html += '</div>';

        return html;
    },
    _HTML_build_show_avatars_selector : function() {
        var html = '<div class="show_avatars_selector_cont er_label_input_cont">';

        html += '<span class="label">Show avatars in profiles list</span>';

        html += '<select class="select_show_avatars">';

        var selected_yes, selected_no;
        if(er_gen_settings.get_show_avatars_in_profiles_list()) {
            selected_yes = 'selected';
            selected_no = '';
        } else {
            selected_yes = '';
            selected_no = 'selected';
        }

        html += '<option value="yes" '+selected_yes+'>Yes</option>';
        html += '<option value="no" '+selected_no+'>No</option>';

        html += '</select>';

        html += '</div>';

        return html;
    },


    _add_handlers : function() {
        this.jq_select_language.change(this._on_change_this_select_language.bind(this));
        this.jq_select_collapse_mode.change(this._on_change_this_select_collapse_mode.bind(this));
        this.jq_select_show_avatars.change(this._on_change_this_select_show_avatars.bind(this));
    },

    _on_main_view_ready_for_sub_view : function() {
        this.init_main();
    },

    _on_change_this_select_language : function(event) {
        var jq_option = this.jq_select_language.find('option:selected');
        var lang_id = jq_option.attr('value');
        er_gen_settings.set_current_language_id(lang_id);
    },
    _on_change_this_select_collapse_mode : function(event) {
        var jq_option = this.jq_select_collapse_mode.find('option:selected');
        var mode = jq_option.attr('value');
        er_gen_settings.set_collapse_mode_minified(mode == 'minified');
    },
    _on_change_this_select_show_avatars : function(event) {
        var jq_option = this.jq_select_show_avatars.find('option:selected');
        var val = jq_option.attr('value');
        er_gen_settings.set_show_avatars_in_profiles_list(val == 'yes');
    },
};
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_gen_settings_view._on_main_view_ready_for_sub_view() });

/**
 * Created by erinsasha on 15/06/17.
 */
/**
 *
 * @param options
 * @param options.show_any_way
 * @param options.additional_message
 * @constructor
 */
function ER_Buy_Unlimited_Control(options) {
    options = options ? options : {};
    this.options = options;

    this.additional_message = options.additional_message;

    this.process();
}

ER_Buy_Unlimited_Control.prototype = {
    process : function() {
        this._request_trial_license_info();
    },
    _request_trial_license_info : function() {
        var evtL = document.createEvent("CustomEvent");
        evtL.initCustomEvent('EVENT_GET_LK_INFO', true, true,
            this._on_get_trial_license_info.bind(this));
        window.dispatchEvent(evtL);
    },

    _show_dialog_buy_new_license_or_continue_using_trial : function() {
        var message = 'Do you want to buy unlimited license? Click "No" to continue using your trial license.';
        if(this.additional_message)
            message = this.additional_message + '\n' + message;

        new ERLH_W_Dialog_Yes_No({
            message : message,
            on_yes : this._show_buy_new_license.bind(this),
            on_no : this._on_user_chose_continue_trial.bind(this)
        });
    },
    _show_buy_new_license : function() {
        erlh_main.show();
    },

    _on_get_trial_license_info : function(result) {
        if(result.is_still_valid) {
            if(result.type == 'p') {
                this._on_still_has_trial_license();
            }
        } else {
            this._on_no_even_trial_license();
        }
    },
    _on_no_even_trial_license : function() {
        this._show_buy_new_license();
    },
    _on_still_has_trial_license : function() {
        this._show_dialog_buy_new_license_or_continue_using_trial();
    },
    _on_user_chose_continue_trial : function() {
        localStorage.er_continue_trial = 'true';
    }
};
/**
 * Created by Alex on 22.10.2016.
 */
var er_mars = window.er_mars || {
    init : function() {
        var er_lk = {
            CONST_FREE_TIME_AFTER_INSTAL : 1209600000,
            //CONST_FREE_TIME_AFTER_INSTAL : 604800000,
            //CONST_FREE_TIME_AFTER_INSTAL : 600000,

            rejected_grv_gdc : {
                6833416842094437 : 1484298761751,
                2076953885472171 : 1483378548496,
                4434883712340281 : 1484646186647,
                340135661978351 : 1486715380143,
                99236332468681 : 1486722424290,
                3088138856410105 : 1484845140543,
                8224311265244599 : 1484251902347,
                2595328989294213 : 1484951282048,
                2864566569505889 : 1487609057908,
                1824054995676145 : 1485478709368,
                1169978690813633 : 1485478794222,
                8761531964569021 : 1485478833691,
                4792948719875951 : 1485972367594,
                3255763918802673 : 1485734178935,
                2705329508274041 : 1487151332393,
                357382423174199 : 1487076485181,
                5998550262095637 : 1486891949752,
                3928995826550933 : 1485883866464,
                8744754518527761 : 1485946562929,
                3581660611698089 : 1486508797290,
                7382195397091543 : 1486402750246,
                2151865836864571 : 1487184677078,
                4258394747976421 : 1485959354537,
                8071078240187393 : 1487486497614,
                3054401665036163 : 1486795526101,
                4164028047735361 : 1488222118821,
                4057641473003297 : 1488096556361,
                2354215678504071 : 1487932278619,
                5827127822015833 : 1488495840663,
                2386612550380848 : 1487255184606,
                5160449709465105 : 1487761510481,
                2727960979965741 : 1483613667264,
                8911955375166257 : 1487547125117,
                8170215400104147 : 1488405265577,
                6908242320598057 : 1487557180787,
                7820183315021967 : 1489086483308,
                3755974940996165 : 1488312109645,
                2764046239711233 : 1488975204045,
                3448655687187039 : 1489173545288,
                3046906175862939 : 1485484308820,
                6170759003597935 : 1489227116436,
                7180223230365628 : 1485597902246,
                3685439886205971 : 1489385402635,
                669282841776549 : 1489080194912,
                5790648989967909 : 1488800828840,
                8722808744375559 : 1487698110466,
                6192227194709627 : 1489106324410,
                1263105330804469 : 1488109103617,
                3050642766586025 : 1489663255014,
                6202121226216535 : 1489510113894,
                3845899729246423 : 1488264924709,
                2926884516189883 : 1489054899034,
                7271975838308539 : 1489940181188,
                545427216518127 : 1489730617738,
                7579036506511405 : 1488710257077,
                5786727592382675 : 1490010956266,
                8304287736611061 : 1488490777610,
                2540971556343137 : 1490163208258,
                3262232706409577 : 1490022372976,
                6242864336639659 : 1490366670919,
                6648994368825363 : 1489155373871,
                2110485997475417 : 1489822294315,
                5950461977808959 : 1488556195950,
                6448229145392965 : 1490228230642,
                4004517997748057 : 1490626271921,
                6232228188946374 : 1490452549211,
                7176746276836573 : 1490652318394,
                519130595379543 : 1490173157163,
                4362972314967675 : 1485713085337,
                5754997396858871 : 1489156328447,
                5284560412558553 : 1490792284142,
                2678755184476519 : 1490792322600,
                3460666891517625 : 1489512559504,
                1358859809943905 : 1490795654132,
                4695502703803991 : 1488757212508,
                1912057016686953 : 1490807791463,
                4914013443125573 : 1489669845874,
                4052427191859441 : 1490790762175,
                7605684731171461 : 1490960455247,
                5006147966445089 : 1489507633585,
                8507014558706611 : 1490371126236,
                311003141369737 : 1490981322391,
                6732537543214435 : 1491227757035,
                4519118941297393 : 1490927328631,
                7401001375941367 : 1490385561506,
                864143540775913 : 1490369025154,
                3208407163781591 : 1491310127087,
                2551362821215989 : 1490006579054,
                5223954526204853 : 1490898014509,
                7375679920458777 : 1491322495432,
                119376432880361 : 1490251729442,
                3985551816135289 : 1490784075388,
                2388404369453855 : 1490804128814,
                7694567841849533 : 1489834063905,
                8610969526635767 : 1491570054533,
                6813401653076135 : 1487145874093,
                6859346913803059 : 1491651246439,
                3717387636226107 : 1491488817345,
                6283568958125191 : 1490618333645,
                3929690052457783 : 1491980137419,
                3202438041685623 : 1488208490053,
                3457536047742421 : 1489425841560,
                5554106856026141 : 1490256971140,
                2281607910830667 : 1489506784564,
                283849174188551 : 1490648372635,
                5454576672509993 : 1491926641426,
                547126897812183 : 1491978493838,
                6114302924153825 : 1492089826569,
                573521449573537 : 1492191663178,
                898450620642403 : 1492198735291,
                4876430083301369 : 1492321337647,
                20136974673139 : 1492111326801,
                2955591402115781 : 1492445234986,
                8638069459267107 : 1491904622330,
                4361387523638037 : 1492500763197,
                2642288663455401 : 1489585593465,
                7054455864126597 : 1488915445057,
                4933477566809847 : 1491914620901,
                1923613540153617 : 1491462782559,
                980974165985833 : 1492594469797,
                1535357995465847 : 1492561412312,
                4310838043543343 : 1492027380020,
                1533389929735871 : 1492166667054,
                1135356742492235 : 1491367668340,
                2214231558723311 : 1492602472010,
                8702322316757333 : 1492680611108,
                1403593190542373 : 1492701921347,
                5561418424655267 : 1491492144829,
                5851671332558449 : 1491583397406,
                5174929129553545 : 1492702835742,
                346915963425361 : 1492599522521,
                2449853367161573 : 1492598712410,
                6434723204005361 : 1492780978424,
                368219425422855 : 1492556041057,
                4770121255774177 : 1492789555616,
                2512273447173477 : 1492669024920,
                5155650060828497 : 1492885705005,
                7406077725398931 : 1492290174305,
                4347154686803199 : 1492157154656,
                6929113905281439 : 1491654849661,
                3679113533661929 : 1488898847232,
                2131585435142819 : 1491938296821,
                640002533815379 : 1492688131116,
                7673441623960795 : 1490713264429,
                292159769407183 : 1491338303774,
                1912021543017189 : 1493065717557,
                736147365339461 : 1491371634281,
                8467025469603651 : 1492763467088,
                5304582617882241 : 1491810489210,
                2627703766076461 : 1493191668698,
                3567231574339361 : 1492427294198,
                776091651895649 : 1493295583814,
                8121732435930069 : 1493298366569,
                8669291999213305 : 1493214434739,
                870025216829391 : 1492793808970,
                229876573434109 : 1490227888856,
                1301731766993979 : 1492808779951,
                1443854184132131 : 1493324589739,
                1385075981554793 : 1492188563307,
                838056986959291 : 1493032800207,
                8332802919148291 : 1493295755424,
                1568168394341253 : 1493019139405,
                4520794676796875 : 1493629706579,
                7186186733769909 : 1493512358911,
                6705384589879909 : 1492849775903,
                402128837357697 : 1493785650145,
                4849299205792057 : 1492064683140,
                1695380768394849 : 1493626786082,
                5141065220924831 : 1492936755300,
                6609889538949765 : 1490976398972,
                3984722758025199 : 1490392498425,
                5004967210958071 : 1492946030984,
                6986276212578079 : 1492518990050,
                5956049188515095 : 1490954969184,
                5203169702287415 : 1493644759878,
                7297688064986111 : 1493847172891,
                470686226785073 : 1493848416007,
                6883168863678911 : 1488713519167,
                5926406018693381 : 1492672107342,
                221522623898707 : 1493839647498,
                3586492951905045 : 1493882645099,
                2276855525138775 : 1493853486440,
                6471845495347645 : 1493392409599,
                1090825138200891 : 1490635992830,
                7329301770132123 : 1493650482935,
                3083158090887203 : 1489397225864,
                5226245898123807 : 1489096224996,
                6494447860566181 : 1494011057494,
                6921883210387275 : 1494175019806,
                2061197360346965 : 1493725520557,
                3978805183031151 : 1492589324635,
                8984452727364951 : 1494251998478,
                1061673652637421 : 1494240624400,
                6526097065228761 : 1494025913539,
                8352618774494863 : 1494267666001,
                2137917975033707 : 1491851717137,
                2655200320582095 : 1493731346203,
                8770868487473717 : 1494000877402,
                5215068245496603 : 1492509553901,
                5676969547563591 : 1492509646817,
                2410053137378425 : 1494421985476,
                8420239295645223 : 1494424281911,
                8935109829539583 : 1494427382188,
                1038963201802097 : 1490809456834,
                3466386924013765 : 1494366874295,
                1367526841011277 : 1494497625045,
                1462505417133283 : 1494445204977,
                8852121188737701 : 1494401079912,
                5583519349105909 : 1494401037492,
                6467742104661973 : 1494585607524,
                5870523115114115 : 1494577087946,
                3570956177894249 : 1494590472945,
                8044821839352423 : 1492616385614,
                3720788507882523 : 1492543165239,
                4995939498324609 : 1494615743673,
                1713480346825419 : 1492239135676,
                8743142340425033 : 1493298426831,
                5918591777422475 : 1494678077563,
                132293983379809 : 1488911204468,
                4859292798161529 : 1488659230912,
                659717123528087 : 1494366696845,
                8211864794727477 : 1494366783567,
                8182201708901219 : 1494366737162,
                5117668012992507 : 1493539904465,
                2686678885977865 : 1494619251418,
                1007917485558829 : 1494830647261,
                7102942599757705 : 1493892297702,
                4818323442482333 : 1493804541047,
                6131186285440875 : 1492088753586,
                4618788055924663 : 1494273675899,
                5307442444415281 : 1494257549931,
                1632468593993485 : 1494926638136,
                2066760616088163 : 1494955921825,
                2032402131790437 : 1494917451614,
                7266805673526949 : 1494939713699,
                2366356523933605 : 1491483159437,
                3768203998034837 : 1488050041865,
                3916929530967325 : 1494509857761,
                3365389300361589 : 1494510008821,
                5565676413006873 : 1494510046292,
                2741082599744597 : 1494510084812,
                7834662129071947 : 1494510120187,
                2343804603310007 : 1494510160435,
                2088941794126649 : 1494510192483,
                7718124300637875 : 1494510255094,
                8369882598934411 : 1494510298512,
                8460469476452041 : 1494335509711,
                1364487948392603 : 1495033328111,
                4005987975794191 : 1494660327137,
                1224073310816601 : 1489106544207,
                7606282796245765 : 1494951041377,
                4436796274026671 : 1495057588568,
                3767173829014527 : 1494917731182,
                6886371352454447 : 1495142808124,
                3937784666340581 : 1493029968472,
                961136744487699 : 1495111337687,
                3751565379832709 : 1495009780097,
                3512426326570573 : 1494590187251,
                3073975689269687 : 1494419038445,
                8251206134113679 : 1494238480352,
                1825769552090615 : 1492733490457,
                2920305740752193 : 1495193935745,
                6044358227111815 : 1495351480490,
                4487150313308563 : 1494933611621,
                9003006026938949 : 1494663864365,
                6758900133710755 : 1495377005932,
                4170158375730917 : 1493135858253,
                5823738568823171 : 1495377883340,
                7823855203381733 : 1495410068263,
                550673143711025 : 1495042670185,
                3332977771793851 : 1494689059686,
                1844271937297201 : 1494508130960,
                4112557246689509 : 1495211324427,
                5033252843443755 : 1493820078206,
                5738799611208595 : 1495474421583,
                8479635329459497 : 1495489220156,
                3658751644581733 : 1495474830011,
                193030646397409 : 1488473900163,
                6067567693650331 : 1494839534950,
                6457195574878811 : 1494512314647,
                8544302270212487 : 1493915581530,
                6703638675532411 : 1495476673270,
                3886274072147803 : 1494261688405,
                7844303590729783 : 1495389643716,
                5239234460306845 : 1495484107283,
                2810361940062395 : 1495618378198,
                5580671420451601 : 1490297498984,
                3924390240012359 : 1495613394032,
                1653161805974895 : 1495644149395,
                2253726407379767 : 1495410578960,
                3949708214409125 : 1494876103568,
                7365750993580203 : 1494433164179,
                7540093743442635 : 1495042787968,
                4197347697229847 : 1495022091557,
                4490713860594577 : 1495734199154,
                218716945820125 : 1492150247901,
                3438423532135493 : 1495139650977,
                1804733532501013 : 1494679341809,
                734288858980889 : 1495740430188,
                5689477312848243 : 1493841012826,
                6919066209642587 : 1495958511944,
                8627257192197685 : 1493754055986,
                290158718540035 : 1491816282313,
                6844118059282573 : 1495218882883,
                1679348794455297 : 1494499695222,
                1886419984922379 : 1486769110070,
                6765390787992881 : 1496122708956,
                2911252455172703 : 1490766818865,
                5045182288586839 : 1495444032004,
                4709797533404081 : 1495017955189,
                5673232107828731 : 1496265101925,
                7919291254480587 : 1494684816447,
                3180408284835801 : 1495553933416,
                3835832719157981 : 1485973638651,
                600223588467275 : 1490638456288,
                4913101670379105 : 1496419965306,
                1432230739441283 : 1495555492525,
                2530437124526715 : 1496337505253,
                5109675027596787 : 1496518599433,
                8214214528642641 : 1496347225069,
                6765781786313821 : 1495614737033,
                2803750246195775 : 1496251981667,
                5342380823325691 : 1494780068837,
                6194058398688975 : 1496400630660,
                1967717856887821 : 1496650518755,
                7282073563452053 : 1495724523961,
                4386102311901639 : 1496151213880,
                3176290872935427 : 1496242446371,
                5893235024291441 : 1494012098285,
                2197698335563043 : 1496237314259,
                1392423696526199 : 1490009197048,
                5970028422029703 : 1494949640194,
                7488545399264343 : 1493852794512,
                2013575025321971 : 1496137377958,
                1054866782755665 : 1494512636119,
                3211923502276705 : 1494616785124,
                7066588247802757 : 1496753841488,
                5780847088088839 : 1493707464569,
                228007687139877 : 1492973290524,
                7096038464002527 : 1495736157880,
                5125641700749855 : 1495034457712,
                1186838009880159 : 1493099613257,
                373540492836825 : 1496155710039,
                7479696155530333 : 1496819810345,
                7573422895484019 : 1495467322272,
                7009744213186253 : 1496265023707,
                8260338407041309 : 1495977915414,
                4447386058932931 : 1496870709195,
                7608545826629579 : 1496665780835,
                6256360216374395 : 1496913739060,
                6441819552273859 : 1495182740415,
                2915694181735073 : 1495660672562,
                3431133363499863 : 1496821677692,
                729938449941637 : 1495453420574,
                4342071350088671 : 1496936588711,
                5619777689423957 : 1496300274487,
                3948022515054851 : 1496836973542,
                4796306814965925 : 1496998468782,
                2636962412841675 : 1497017394217,
                2708425380873733 : 1496990165607,
                8495342895348195 : 1497021642533,
                7168286890642429 : 1495460826561,
                1037964601534241 : 1496672071426,
                5151613170906751 : 1497089071037,
                4677139664739495 : 1497022999646,
                8862978890223463 : 1497126143961,
                6304019097392137 : 1495535530333,
                944949103961523 : 1497079991836,
                8984547321016863 : 1497126969558,
                2118666058903067 : 1497027662147,
                1341041709498975 : 1497010717815,
                7289097647531847 : 1496744822510,
                8666170504355593 : 1492879032002,
                7760114080569325 : 1493463233024,
                2885583659490851 : 1493653272722,
                152906018276535 : 1493658763731,
                8241021887551943 : 1495040815978,
                8702986233121837 : 1495040943364,
                1036084433265751 : 1496840623008,
                1051635563005181 : 1496840681323,
                4738156325430617 : 1496840692307,
                5904941839489809 : 1494444359802,
                5616299152002969 : 1493879755585,
                1490907131078767 : 1496683529305,
                7739738648368765 : 1496938145463,
                8043349526827647 : 1495176106719,
                4608326144462555 : 1497239340107,
                7290639925700329 : 1496666694851,
                5159338657954983 : 1497117727391,
                4766080625085985 : 1493300378422,
                2199009828805669 : 1492004836083,
                2926948499794653 : 1497240650976,
                7567610191445385 : 1496830927492,
                426100165925523 : 1493963307115,
                8200695804322757 : 1496121296487,
                4330740544578297 : 1497439748782,
                5406862949116547 : 1496518918062,
                656276130826063 : 1497022624563,
                1980606512258539 : 1493372422192,
                6449718514261157 : 1497530495238,
                1468100524815851 : 1487224757642,
                4744426235962391 : 1496244637056,
                4530714068182941 : 1497459868458,
                2436326384010617 : 1496678611639,
                8324454361106097 : 1495478330369,
                8569501156635783 : 1497543416662,
                836907941733041 : 1496948893859,
                647370212107993 : 1497551299960,
                8042580776496749 : 1496601386948,
                5820515431365271 : 1495301081443,
                4867419150887623 : 1496857337955,
                7762267177651717 : 1494940157368,
                751988208727555 : 1491850390809,
                8810128703113861 : 1497627475741,
                8926849121571543 : 1497546357629,
                3062247318911447 : 1497645484539,

            },

            public_key : null,
            public_key_obj : null,
            lk_key_object : null,

            _CONST_PK_PREF : '_____________________________________________________________________',
            EVENT_PUBLIC_KEY_GENERATED : 'EVENT_PUBLIC_KEY_GENERATED',
            EVENT_PUBLIC_KEY_REGISTERED : 'EVENT_PUBLIC_KEY_REGISTERED',
            EVENT_LICENSE_KEY_REGISTERED : 'EVENT_PUBLIC_KEY_REGISTERED', // на сервере
            EVENT_GET_PUBLIC_KEY : 'EVENT_GET_PUBLIC_KEY',
            EVENT_CHK_INS_LK : 'EVENT_CHK_INS_LK',
            EVENT_LK_INSERTED : 'EVENT_LK_INSERTED',
            EVENT_IS_LK_VALID : 'EVENT_IS_LK_VALID',
            EVENT_LK_INVALID : 'EVENT_LK_INVALID',
            EVENT_LK_REJECTED : 'EVENT_LK_REJECTED',
            EVENT_ALL_LICENSES_USED : 'ER_EVENT_ALL_LICENSES_USED',
            EVENT_NO_VALID_LICENSES : 'ER_EVENT_NO_VALID_LICENSES',
            EVENT_GET_LK_VALID_UNTIL : 'EVENT_GET_LK_VALID_UNTIL',
            EVENT_GET_LK_INFO : 'EVENT_GET_LK_INFO',
            EVENT_GET_INSTALL_ID : 'ER_EVENT_GET_INSTALL_ID',

            init : function() {
                this.init_public_key();
                this.init_license();
                this.register_install_and_licenses_key();
                this._server_getstatus()
                    .then(this._server_get_new_lk.bind(this));

                window.addEventListener(
                    this.EVENT_GET_PUBLIC_KEY,
                    this._on_EVENT_GET_PUBLIC_KEY.bind(this),
                    false);

                window.addEventListener(
                    this.EVENT_CHK_INS_LK,
                    this._on_EVENT_CHK_INS_LK.bind(this),
                    false);

                window.addEventListener(
                    this.EVENT_IS_LK_VALID,
                    this._on_EVENT_IS_LK_VALID.bind(this),
                    false);

                window.addEventListener(
                    this.EVENT_GET_LK_VALID_UNTIL,
                    this._on_EVENT_GET_LK_VALID_UNTIL.bind(this),
                    false);

                window.addEventListener(
                    this.EVENT_GET_LK_INFO,
                    this._on_EVENT_GET_LK_INFO.bind(this),
                    false);

                window.addEventListener(
                    this.EVENT_GET_INSTALL_ID,
                    this._on_EVENT_GET_INSTALL_ID.bind(this),
                    false);

                window.addEventListener(
                    erlh_curr_user.EVENT_USER_LOGGED_IN,
                    this._on_EVENT_USER_LOGGED_IN.bind(this),
                    false);

                window.addEventListener(
                    ERLH_License.EVENTS.LICENSE_ATTACHED,
                    this._on_EVENT_LICENSE_ATTACHED_TO_SOME_INSTALL.bind(this),
                    false);
            },

            init_public_key : function() {
                if (!localStorage.er_pk || localStorage.er_pk == '') {
                    this.generate_public_key();
                } else {
                    this.public_key = this._get_nude_from_local_storage();

                }
                this.public_key_obj = this._get_public_key_object();
                if(window.ga) {
                    ga('set', 'dimension1', this.public_key_obj.rv);
                    ga('set', 'dimension2', this.public_key_obj.dc);
                }
            },

            generate_public_key : function() {
                var key = this._generate_nude_str();
                this._save_nude(key);
                this.public_key = key;

                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_PUBLIC_KEY_GENERATED, true, true, key);
                window.dispatchEvent(evt);
            },

            register_public_key : function() {
                var deferred = $.Deferred();

                if(!this.public_key) {
                    deferred.resolve(false);
                    return deferred.promise();
                }

                if(localStorage.er_installhash
                    && (
                        !erlh_curr_user.is_logged_in()
                        || localStorage.er_install_registered_under
                    )
                ) {
                    deferred.resolve(true);
                    return deferred.promise();
                }


                var request = {
                    secret_key : this.public_key
                };

                var that = this;
                erlh_server.send(erlh_server.url.install.register, request, function(err, response) {
                    if(err) {
                        er_logger.log('Can\'t register installation');
                        er_logger.log(err);

                        deferred.resolve(false);
                    } else {
                        localStorage.er_installhash = response.installhash;
                        if(erlh_curr_user.is_logged_in()) {
                            localStorage.er_install_registered_under = erlh_curr_user.user.id;
                        }

                        er_logger.log('Installation registered : '+response.installhash);

                        var evt = document.createEvent("CustomEvent");
                        evt.initCustomEvent(that.EVENT_PUBLIC_KEY_REGISTERED, true, true, response.installhash);
                        window.dispatchEvent(evt);

                        deferred.resolve(true);
                    }
                });

                return deferred.promise();
            },

            init_license : function() {
                var license_key = localStorage.er_license;
                if(license_key && license_key != '') {
                    this.lk_key_object = this._decode_str_to_object(license_key);
                    if (
                        ((this.rejected_grv_gdc[this.lk_key_object.grv]
                        && this.rejected_grv_gdc[this.lk_key_object.grv] == this.lk_key_object.gdc))
                        ||
                        (this.lk_key_object.udc < (new Date().getTime()))
                    ) {

                        this._delete_license_key();
                    }
                } else {
                    if ((this.public_key_obj.dc + this.CONST_FREE_TIME_AFTER_INSTAL) >= (new Date).getTime()) {
                        this.is_trial = true;
                    }
                }
                if(window.ga) {
                    ga('set', 'dimension3', this.lk_key_object ? this.lk_key_object.grv : -1);
                    ga('set', 'dimension4', this.lk_key_object ? this.lk_key_object.gdc : -1);
                }
            },

            register_license_key : function() {
                var deferred = $.Deferred();

                var registered_grv = localStorage.er_xlkgrv;

                if(!this.lk_key_object || !localStorage.er_license || this.lk_key_object.udc < (new Date()).getTime()) {
                    deferred.resolve(false);
                    return deferred.promise();
                }

                if(this.lk_key_object.grv == registered_grv
                    && (
                        !erlh_curr_user.is_logged_in()
                        || localStorage.er_xlk_reg_under
                    )
                ) {
                    deferred.resolve(true);
                    return deferred.promise();
                }

                var request = {
                    key : localStorage.er_license
                };

                var that = this;

                erlh_server.send(erlh_server.url.license_key.registerclient, request, function(err, response) {
                    if(err) {
                        er_logger.log('Can\'t register client license key');
                        er_logger.log(err);

                        deferred.resolve(false);
                    } else {
                        //license_key : {id : license_key.id, status : license_key.status},
                        //license : license ? license.getClientObject() : null

                        if(response.license_key.status < 0) {
                            that._delete_license_key();
                            er_logger.log('Bad license key');

                            deferred.resolve(false);
                        } else {

                            that._save_registration_info(response);

                            er_logger.log('License key registered');

                            deferred.resolve(true);
                        }
                    }
                });

                return deferred.promise();
            },

            register_install_and_licenses_key : function() {
                var deferred = $.Deferred();

                var that = this;

                this.register_public_key()
                    .then(function(install_registration_status) {
                        if(install_registration_status) {
                            that.register_license_key()
                                .then(deferred.resolve.bind(deferred));
                        }
                    });

                return deferred.promise();
            },
            re_register_install_and_licenses_key : function() {
                this._delete_registration_info();
                return this.register_install_and_licenses_key();
            },

            _delete_registration_info : function() {
                this._delete_secret_key_registration_info();
                this._delete_license_key_registration_info();
            },
            _delete_secret_key_registration_info : function() {
                delete localStorage.er_installhash;
                delete localStorage.er_install_registered_under;
            },
            _delete_license_key_registration_info : function() {
                delete localStorage.er_xlkgrv;
                delete localStorage.er_xlk_reg;
                delete localStorage.er_xlk_reg_under;
            },
            _delete_license_key : function() {
                er_logger.log('START delete_license_key');
                delete this.lk_key_object;
                delete localStorage.er_xlkgrv;
                delete localStorage.er_xlk_reg;
                delete localStorage.er_xlk_reg_under;
                delete localStorage.er_license;
            },

            _get_installhash_as_object : function() {
                var installhash = localStorage.er_installhash;
                if(installhash && installhash != '') {
                    return JSON.parse(atob(installhash));
                } else {
                    return null;
                }
            },
            _get_install_id : function() {
                var is_h = this._get_installhash_as_object();
                if(is_h)
                    return is_h.id;
                else
                    return null;
            },

            _save_attached_license : function(server_data) {
                var license_key_str = server_data.license_key.key;
                localStorage.er_license = license_key_str;

                this.init_license();
                this._send_EVENT_LK_INSERTED();

                this._save_registration_info(server_data);
            },
            _save_registration_info : function(server_data) {
                localStorage.er_xlkgrv = this.lk_key_object.grv;
                localStorage.er_xlk_reg = JSON.stringify(server_data);
                if(erlh_curr_user.is_logged_in()) {
                    localStorage.er_xlk_reg_under = erlh_curr_user.user.id;
                }

                this._send_EVENT_LICENSE_KEY_REGISTERED();
            },

            _server_getstatus : function() {
                var deferred = $.Deferred();

                if(!this.lk_key_object) {
                    deferred.resolve({ status : -100});
                    return deferred.promise();
                }

                if(!this._is_need_to_check_server_lk() && this.lk_key_object && this.lk_key_object.udc >= (new Date()).getTime()) {
                    deferred.resolve({status : 1000});
                    return deferred.promise();
                }

                var request = {
                    gdc : this.lk_key_object.gdc,
                    grv : this.lk_key_object.grv
                };

                var that = this;

                erlh_server.send(erlh_server.url.license_key.getstatus, request, function(err, response) {
                    if(err) {
                        er_logger.log('Can\'t get license key status');
                        er_logger.log(err);

                        deferred.resolve({ status : -500});
                    } else {
                        er_logger.log('License key status = '+response.status);
                        if(response.status < 0) {
                            that._on_server_license_key_rejected();
                        } else {
                            that._set_server_lk_last_status_check();
                        }
                        deferred.resolve(true);
                    }
                });

                return deferred.promise();
            },
            _get_server_lk_last_status_check : function() {
                var last_check = localStorage.er_lk_ltcheck;
                if(last_check && last_check != '' && last_check != "undefined")
                    return Number(last_check);
                else
                    return null;
            },
            _set_server_lk_last_status_check : function() {
                localStorage.er_lk_ltcheck = (new Date()).getTime();
            },
            _is_need_to_check_server_lk : function() {
                var last = this._get_server_lk_last_status_check();
                if(!last)
                    return true;
                return (new Date()).getTime() - last > 600000
            },

            _server_get_new_lk : function() {
                var deferred = $.Deferred();
                var promise = deferred.promise();

                if(!erlh_curr_user.is_logged_in()) {
                    deferred.resolve({status : -401});
                    return promise;
                }

                if(this.lk_key_object && this.lk_key_object.udc >= (new Date()).getTime()) {
                    deferred.resolve({status : 1000});
                    return promise;
                }

                var request = {
                    installhash : localStorage.er_installhash
                };

                var that = this;

                erlh_server.send(erlh_server.url.license_key.getnewkey, request, function(err, response) {
                    if(err) {
                        er_logger.log('Can\'t get new license key');
                        er_logger.log(err);

                        deferred.resolve({status : -500});
                    } else {

                        if(response.license_key) {
                            er_logger.log('Got new license from server');

                            that._check_and_save_lk_key_str(response.license_key.key);
                            localStorage.er_xlkgrv = that.lk_key_object.grv;
                            localStorage.er_xlk_reg = JSON.stringify({
                                install : response.install,
                                license : response.license
                            });
                            if(erlh_curr_user.is_logged_in()) {
                                localStorage.er_xlk_reg_under = erlh_curr_user.user.id;
                            }

                            that._send_EVENT_LK_INSERTED();
                        } else if (response.used_info) {
                            er_logger.log('All user\' licenses are used');
                            that._send_EVENT_NO_VALID_LICENSES(response.used_info);
                            that._show_reattach_license_to_current_pc();
                        } else {
                            er_logger.log('User doesn\'t have valid licenses');
                            that._send_EVENT_NO_VALID_LICENSES();
                            that._show_buy_unlimited_license();
                        }

                        deferred.resolve(response);
                    }
                });

                return promise;
            },

            _show_reattach_license_to_current_pc : function() {
                var install_id = this._get_install_id();
                if(!install_id)
                    return;

                var reattach_control = new Reattach_License_To_Current_PC({
                    install_id : install_id,
                    //on_attached : this._on_server_license_attached_to_current_install.bind(this)
                });
            },

            _show_buy_unlimited_license : function() {
                
            },

            _generate_nude_str : function() {
                var obj = {};
                obj.dc = (new Date).getTime();
                obj.ua = navigator.userAgent;
                obj.rv = er_utils.getRandomInt(0, Number.MAX_SAFE_INTEGER);

                return this._encode_object(obj);
            },

            _encode_object : function(obj) {
                var obj_str = JSON.stringify(obj);

                var base64 = btoa(obj_str);

                var func_revers = function(str) {
                    var revers = '';
                    for(var i=str.length-1; i>=0; i--) {
                        revers += str[i];
                    }

                    return revers;
                };

                base64 = btoa(func_revers(base64));

                base64 = base64.substring(0, 10) + 'X' + base64.substring(10);

                return base64;
            },

            _decode_str_to_object : function(nude_str) {
                nude_str = er_utils.getLongestWord(nude_str);
                base64 = nude_str.substring(0, 10) + nude_str.substring(11);

                base64 = atob(base64);

                var func_revers = function(str) {
                    var revers = '';
                    for(var i=str.length-1; i>=0; i--) {
                        revers += str[i];
                    }

                    return revers;
                };

                base64 = func_revers(base64);
                obj_str = atob(base64);
                obj = JSON.parse(obj_str);

                return obj;
            },

            _save_nude : function(str) {
                localStorage.__version_hash_pers = this._CONST_PK_PREF + str.substring(0, 10);
                localStorage.er_pk = str.substring(10);
            },

            _get_nude_from_local_storage : function() {
                var key = localStorage.__version_hash_pers;
                key = key.substr(this._CONST_PK_PREF.length) + localStorage.er_pk;

                return key;
            },

            _get_public_key_object : function() {
                if (this.public_key)
                    return this._decode_str_to_object(this.public_key);
                else
                    return null;
            },

            _check_lk_key_str : function(lk_key_str) {
                var lk_key;
                try {
                    lk_key = this._decode_str_to_object(lk_key_str);

                    var public_key_object = this._get_public_key_object();
                    if(lk_key.dc == public_key_object.dc && lk_key.rv == public_key_object.rv && lk_key.gdc
                        && !(this.rejected_grv_gdc[lk_key.grv]
                            && this.rejected_grv_gdc[lk_key.grv] == lk_key.gdc)
                    ) {
                        return lk_key;
                    } else {
                        return false;
                    }

                } catch (error) {
                    return false;
                }
            },

            _save_lk_key_to_local_storage : function(lk_key_str) {
                localStorage.er_license = lk_key_str;
            },

            _check_and_save_lk_key_str : function(lk_key_str) {
                var lk_key = this._check_lk_key_str(lk_key_str);
                if (lk_key) {
                    this._save_lk_key_to_local_storage(lk_key_str);
                    this.lk_key_object = lk_key;
                    return true;
                } else {
                    return false;
                }
            },

            _send_EVENT_LK_INSERTED : function() {
                var info = {
                    valid_until : this.lk_key_object.udc,
                    type : this.lk_key_object.t
                };

                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_LK_INSERTED, true, true, info);
                window.dispatchEvent(evt);
            },
            _send_EVENT_ALL_LICENSES_USED : function(info) {
                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_ALL_LICENSES_USED, true, true, info);
                window.dispatchEvent(evt);
            },
            _send_EVENT_NO_VALID_LICENSES : function() {
                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_NO_VALID_LICENSES, true, true, null);
                window.dispatchEvent(evt);
            },
            _send_EVENT_LICENSE_KEY_REGISTERED : function() {
                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_LICENSE_KEY_REGISTERED, true, true, null);
                window.dispatchEvent(evt);
            },

            _on_server_license_key_rejected : function() {
                this._delete_license_key();
                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_LK_REJECTED, true, true, null);
                window.dispatchEvent(evt);

                //this._server_get_new_lk();
            },

            _on_server_license_attached_to_current_install : function(result) {
                this._save_attached_license(result);
            },

            _on_EVENT_GET_PUBLIC_KEY : function(event) {
                var public_key = this.public_key;
                setTimeout(function() {event.detail(public_key) }, 0);
            },

            _on_EVENT_CHK_INS_LK : function(event) {
                var request = event.detail;
                if(this._check_and_save_lk_key_str(request.license)) {
                    this._send_EVENT_LK_INSERTED();

                    try {
                        setTimeout(function() {request.callback(info)} , 0);
                    } catch (error) {

                    }
                } else {
                    try {
                        setTimeout(function() {request.callback(false)} , 0);
                    } catch (error) {

                    }
                }
            },

            _on_EVENT_IS_LK_VALID : function(event) {
                var result = false;

                //var public_key_obj = this._get_public_key_object();

                if (window.er_p
                    || this.lk_key_object && this.lk_key_object.udc >= (new Date).getTime()
                    //|| (public_key_obj.dc + 3*24*3600*1000) >= (new Date).getTime()
                    || (this.public_key_obj.dc + this.CONST_FREE_TIME_AFTER_INSTAL) >= (new Date).getTime()
                )
                    result = true;

                try {
                    setTimeout(function() {event.detail(result)} , 0);
                } catch (error) {

                }

                if(!result) {
                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(this.EVENT_LK_INVALID, true, true, null);
                    window.dispatchEvent(evt);
                }
            },

            _on_EVENT_GET_LK_VALID_UNTIL : function(event) {
                var udc = this.lk_key_object ? this.lk_key_object.udc : null;
                if (!udc) {
                    if ((this.public_key_obj.dc + this.CONST_FREE_TIME_AFTER_INSTAL) >= (new Date).getTime())
                        udc = this.public_key_obj.dc + this.CONST_FREE_TIME_AFTER_INSTAL;
                }

                try {
                    setTimeout(function() {event.detail(udc)} , 0);
                } catch (error) {

                }
            },

            _on_EVENT_GET_LK_INFO : function(event) {
                var result = {};

                current_js_time = (new Date).getTime();

                if (this.lk_key_object) {
                    result.valid_until = this.lk_key_object.udc;
                    result.type = this.lk_key_object.t;
                } else if ((this.public_key_obj.dc + this.CONST_FREE_TIME_AFTER_INSTAL) >= current_js_time) {
                    result.valid_until = this.public_key_obj.dc + this.CONST_FREE_TIME_AFTER_INSTAL;
                    result.type = 'p';
                }
                result.is_still_valid = result.valid_until && result.valid_until > current_js_time;

                try {
                    setTimeout(function() {event.detail(result)} , 0);
                } catch (error) {

                }
            },

            _on_EVENT_GET_INSTALL_ID : function(event) {
                event.detail(this._get_install_id());
            },

            _on_EVENT_USER_LOGGED_IN : function(event) {
                this.re_register_install_and_licenses_key()
                    .then(this._server_get_new_lk.bind(this));
            },

            _on_EVENT_LICENSE_ATTACHED_TO_SOME_INSTALL : function(event) {
                var server_data = event.detail;
                var current_install_id = this._get_install_id();
                if(!server_data.install || server_data.install.id != current_install_id) {
                    return;
                }
                this._save_attached_license(server_data);
            }
        };

        er_lk.init();
    },
};
/**
 * Created by erinsasha on 28/12/16.
 */
er_license_limit = window.er_license_limit || {
        EVENT_INVITES_LIMIT : 'ER_EVENT_INVITES_LIMIT',
        EVENT_MESSAGES_LIMIT : 'ER_EVENT_MESSAGES_LIMIT',

        inited : false,
        CONST_INVITES_PRIVATE_LIMIT : 60,
        CONST_MESSAGES_PRIVATE_LIMIT : 60,
        license_type : null,
        current_day_num : null,
        today_invites : 0,
        today_messages : 0,

        init : function() {
            var deferred = $.Deferred();
            if(this.inited) {
                deferred.resolve();
                return deferred.promise();
            }

            var that = this;

            window.addEventListener(
                'EVENT_LK_INSERTED',
                this._on_EVENT_LK_INSERTED.bind(this),
                false);

            var evtL = document.createEvent("CustomEvent");
            evtL.initCustomEvent('EVENT_GET_LK_INFO', true, true,
                function(license_info) {
                    that.license_type = license_info.type;
                    that.inited = true;
                    deferred.resolve();
                });
            window.dispatchEvent(evtL);

            var obj = this._get_local_storage_state();
            var curr_day_num = (new Date()).getDate();

            if(obj.current_day_num != curr_day_num) {
                this._reset_counters_and_day_num();
            } else {
                this.current_day_num = curr_day_num;
                this.today_invites = obj.today_invites;
                this.today_messages = obj.today_messages;
            }

            return deferred.promise();
        },
        _reinit_dynamic_vars : function() {
            this.init();
            var curr_day_num = (new Date()).getDate();
            if (this.current_day_num != curr_day_num)
                this._reset_counters_and_day_num();
        },
        _get_local_storage_state : function() {
            var obj = {
                current_day_num : Number(localStorage.er_ll_cdn),
                today_invites :  Number(localStorage.er_ll_ti),
                today_messages :  Number(localStorage.er_ll_tm)
            };
            if(isNaN(obj.current_day_num)) {
                obj.current_day_num = null;
            }
            if(isNaN(obj.today_invites)) {
                obj.today_invites = 0;
            }
            if(isNaN(obj.today_messages)) {
                obj.today_messages = 0;
            }

            return obj;
        },
        _save_to_local_storage : function() {
            localStorage.er_ll_cdn = this.current_day_num;
            localStorage.er_ll_ti = this.today_invites ? this.today_invites : 0;
            localStorage.er_ll_tm = this.today_messages ? this.today_messages : 0;
        },
        _reset_counters_and_day_num : function() {
            this.current_day_num = (new Date()).getDate();
            this.today_invites = 0;
            this.today_messages = 0;
        },
        _increase_invites_counter : function(add_amount) {
            this._reinit_dynamic_vars();
            add_amount = Number(add_amount);
            if(!isNaN(add_amount))
                this.today_invites += add_amount;
            this._save_to_local_storage();

            if(this.today_invites >= this.CONST_INVITES_PRIVATE_LIMIT
                && this.when_can_continue_invites() > 0) {
                this.send_EVENT_INVITES_LIMIT();
            }
        },
        send_EVENT_INVITES_LIMIT : function() {
            var evtL = document.createEvent("CustomEvent");
            evtL.initCustomEvent(this.EVENT_INVITES_LIMIT, true, true,
                {});
            window.dispatchEvent(evtL);
        },
        _increase_messages_counter : function(add_amount) {
            this._reinit_dynamic_vars();
            add_amount = Number(add_amount);
            if(!isNaN(add_amount))
                this.today_messages += add_amount;
            this._save_to_local_storage();

            if(this.today_invites >= this.CONST_MESSAGES_PRIVATE_LIMIT
                && this.when_can_continue_messages() > 0) {
                this.send_EVENT_MESSAGES_LIMIT();
            }
        },
        send_EVENT_MESSAGES_LIMIT : function() {
            var evtL = document.createEvent("CustomEvent");
            evtL.initCustomEvent(this.EVENT_MESSAGES_LIMIT, true, true,
                {});
            window.dispatchEvent(evtL);
        },
        get_limits : function() {
            var deferred = $.Deferred();
            var that = this;

            this.init().then(function() {
                var result = {};
                if (that.license_type == 'p') {
                    result.invites = that.CONST_INVITES_PRIVATE_LIMIT;
                    result.messages = that.CONST_MESSAGES_PRIVATE_LIMIT;
                }
                deferred.resolve(result);
            });

            return deferred.promise();
        },
        _on_EVENT_LK_INSERTED : function(event) {
            var license_info = event.detail;
            if (license_info)
                this.license_type = license_info.type;
        },
        when_can_continue_invites : function() {
            this._reinit_dynamic_vars();
            if(this.license_type != 'p' || this.today_invites < this.CONST_INVITES_PRIVATE_LIMIT) {
                return 0;
            } else {
                var cur_day = new Date();
                var next_day = new Date();
                next_day.setDate(next_day.getDate()+1);
                next_day.setHours(0);
                next_day.setMinutes(0);
                next_day.setSeconds(1);

                return next_day - cur_day;
            }
        },
        when_can_continue_messages : function() {
            this._reinit_dynamic_vars();
            if(this.license_type != 'p' || this.today_messages < this.CONST_MESSAGES_PRIVATE_LIMIT) {
                return 0;
            } else {
                var cur_day = new Date();
                var next_day = new Date();
                next_day.setDate(next_day.getDate()+1);
                next_day.setHours(0);
                next_day.setMinutes(0);
                next_day.setSeconds(1);

                return next_day - cur_day;
            }
        },
};
/**
 * Created by Alex on 23.10.2016.
 */
var er_license_view = window.er_license_view || {
    type : 'er_license_view',
    tittle : 'Licence',

    jq_main : null,

    jq_licence_valid_until_cont : null,

    init_main : function() {
        if (this.inited)
            return;

        var deferred_public_key = $.Deferred();
        //var deferred_licence_valid_until = $.Deferred();
        var deferred_licence_info = $.Deferred();

        //$.when( deferred_public_key, deferred_licence_valid_until )
        $.when( deferred_public_key, deferred_licence_info )
            .then(this._init_main.bind(this));

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_GET_PUBLIC_KEY', true, true,
            function(key) { deferred_public_key.resolve(key) });
        window.dispatchEvent(evtPK);

        /*var evtL = document.createEvent("CustomEvent");
        evtL.initCustomEvent('EVENT_GET_LK_VALID_UNTIL', true, true,
            function(key) { deferred_licence_valid_until.resolve(key) });
        window.dispatchEvent(evtL);*/

        var evtL = document.createEvent("CustomEvent");
        evtL.initCustomEvent('EVENT_GET_LK_INFO', true, true,
            function(key) { deferred_licence_info.resolve(key) });
        window.dispatchEvent(evtL);

        window.addEventListener(
            'EVENT_LK_INSERTED',
            this._on_EVENT_LK_INSERTED.bind(this),
            false);

        window.addEventListener(
            'EVENT_LK_INVALID',
            this._on_EVENT_LK_INVALID.bind(this),
            false);


        this.inited = true;
    },
    _init_main : function(public_key, licence_info) {
        this.jq_main = $(this._HTML_build_main(public_key, licence_info.valid_until, licence_info.type));

        this._add_handlers();
        er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

        /*var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {}
        );
        window.dispatchEvent(evtPK);*/
    },
    _HTML_build_main : function(public_key, licence_valid_until, licence_type) {
        var html = '<div class="er_sub_view '+this.type+'">';

        html += '<button class="er_buy_new_license">Buy new license</button>';
        html += this._HTML_build_public_key(public_key);
        html += this._HTML_build_licence_valid_until(licence_valid_until);
        html += this._HTML_build_licence_type(licence_type);
        html += this._HTML_build_licence_input_cont();

        html += '<div class="buy"><span class="label"></span><a href="mailto:info@linkedhelper.ch" class="jim-sm-bsale">info@linkedhelper.ch</a><a href="mailto:info@linkedhelper.com" class="jim-sm-default">info@linkedhelper.com</a></div>';

        html += '</div>';
        return html;
    },
    _HTML_build_public_key : function(public_key) {
        var html = '<div class="public_key_cont">';

        html += '<span class="label"></span>';

        html += '<textarea class="public_key" disabled>'+public_key+'</textarea>';
        html += '<button class="copy_public_key">Copy secret key</button>';

        html += '</div>';

        return html;
    },
    _HTML_build_licence_valid_until : function(licence_valid_until) {
        var HTML_Class_hidden, HTML_Class_state, valid_until_str;

        if (!licence_valid_until)
            HTML_Class_hidden = 'hidden';
        else {
            HTML_Class_hidden = '';
            if(licence_valid_until < (new Date).getTime()) {
                HTML_Class_state = 'expired';
            } else {
                HTML_Class_state = 'valid';
                valid_until_str = er_utils.datetimeJSToUser(new Date(licence_valid_until), { needSeconds : false });
            }
        }

        return '<div class="licence_valid_until_cont '+HTML_Class_hidden+' '+HTML_Class_state+' "><span class="label"></span><span class="value">'+valid_until_str+'</span></div>';
    },
    _HTML_build_licence_type : function(type) {
        var HTML_Class_hidden;
        if (!type) {
            HTML_Class_hidden = 'hidden';
        } else {
            HTML_Class_hidden = '';
        }

        return '<div class="licence_type '+HTML_Class_hidden+'" data-license-type="'+type+'"><span class="label"></span><span class="value"></span></div>';
    },
    _HTML_build_licence_input_cont : function() {
        var html = '<div class="licence_input_cont">';

        html += '<p class="label"></p>';
        html += '<textarea class="er_licence_input" placeholder="Please, insert license key here"></textarea>';
        html += '<button class="save"></button>';
        html += '</div>';
        return html;
    },

    _update_licence_valid_until : function(licence_valid_until) {
        var jq_licence_valid_until_cont = this.jq_main.find('.licence_valid_until_cont');
        var jq_value = jq_licence_valid_until_cont.find('.value');

        if(licence_valid_until) {
            jq_licence_valid_until_cont.removeClass('hidden');
            if(licence_valid_until < (new Date).getTime()) {
                jq_licence_valid_until_cont.removeClass('valid');
                jq_licence_valid_until_cont.addClass('expired');
            } else {
                jq_licence_valid_until_cont.addClass('valid');
                jq_licence_valid_until_cont.removeClass('expired');
            }
            jq_value.text(er_utils.datetimeJSToUser(new Date(licence_valid_until), { needSeconds : false }));
        } else {
            jq_licence_valid_until_cont.addClass('hidden');
        }
    },

    _add_handlers : function() {
        this.jq_main.find('.save').click(this._on_click_save.bind(this));
        this.jq_main.find('.copy_public_key').click(this._on_click_copy_public_key.bind(this));
        this.jq_main.find('.er_buy_new_license').click(this._on_click_buy_new_license.bind(this));
    },

    _on_main_view_ready_for_sub_view : function() {
        this.init_main();
    },

    _on_EVENT_LK_INSERTED : function(event) {
        var jq_licence_valid_until_cont = this.jq_main.find('.licence_valid_until_cont');
        var jq_value = jq_licence_valid_until_cont.find('.value');
        var license_info = event.detail;
        //var valid_time = event.detail;

        jq_licence_valid_until_cont.removeClass('hidden');
        if (license_info.valid_until < (new Date).getTime()){
            jq_licence_valid_until_cont.removeClass('valid');
            jq_licence_valid_until_cont.addClass('expired');
        } else {
            jq_licence_valid_until_cont.addClass('valid');
            jq_licence_valid_until_cont.removeClass('expired');
        }

        valid_until_str = er_utils.datetimeJSToUser(new Date(license_info.valid_until), { needSeconds : false });
        jq_value.text(valid_until_str);

        var jq_licence_type = this.jq_main.find('.licence_type');
        if(license_info.type) {
            jq_licence_type.removeClass('hidden');
            jq_licence_type.attr('data-license-type', license_info.type);
        } else {
            jq_licence_type.addClass('hidden');
            jq_licence_type.attr('data-license-type', '');
        }

        er_main_view._info_popup_show('The license has been successfully activated! Thank you!');
    },

    _on_EVENT_LK_INVALID : function(event) {
        er_main_view.show_settings(this.type);
        //er_main_view._info_popup_show(er_translator.get_text('er_license_view','messages','need_license', er_gen_settings.get_current_language_id()));
        new ER_Buy_Unlimited_Control({
            show_any_way : true
        });
    },

    _on_click_save : function() {
        var license = this.jq_main.find('.er_licence_input').val().trim();

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_CHK_INS_LK', true, true,
            {
                license : license,
                callback : this._on_license_save_result.bind(this)
            });
        window.dispatchEvent(evtPK);
    },
    _on_click_copy_public_key : function() {
        var jq_secret_key = this.jq_main.find('.public_key');
        var el_secret_key = jq_secret_key[0];

        jq_secret_key.prop('disabled', false);

        el_secret_key.focus();
        el_secret_key.setSelectionRange(0, el_secret_key.value.length);

        // copy the selection
        var succeed;
        try {
            succeed = document.execCommand("copy");
            er_main_view._info_popup_show('Copied!', {close_timeout : 1000})
        } catch(e) {
            succeed = false;
            er_main_view._info_popup_show('Error!', {close_timeout : 1000})
        }

        jq_secret_key.prop('disabled', true);
    },
    _on_click_buy_new_license : function() {
        erlh_main.show({show_login_first : false});
    },
    _on_license_save_result : function(license_info) {
        if(license_info && license_info.valid_until) {
            this._update_licence_valid_until(license_info.valid_until);
        } else {
            er_main_view._info_popup_show(er_translator.get_text('er_license_view','messages','license_key_incorrect', er_gen_settings.get_current_language_id()))
        }
    },

};
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_license_view._on_main_view_ready_for_sub_view() });
/**
 * Created by erinsasha on 12/06/17.
 */

/**
 *
 * @param options
 * @param options.install
 * @param options.install_id
 * @param options.install_name
 * @param options.show_anyway
 * @param options.on_attached
 * @constructor
 */
function Reattach_License_To_Current_PC(options) {
    this.options = options;
    this.install = options.install;
    if(this.install) {
        this.install_id = this.install.id;
        this.install_name = this.install.name;
    } else {
        this.install_id = options.install_id;
        this.install_name = options.install_name;
    }

    this.process();
}

Reattach_License_To_Current_PC.prototype = {
    process : function() {
        if(!this._is_must_be_shown())
            return;

        this._show_attach_install_to_license();
    },
    _show_attach_install_to_license : function() {
        this.w_install_attach_license = new ERLH_W_Install_Attach_License({
            install : null,
            install_id : this.install_id,
            install_name : this.install_name,
            user_id : erlh_curr_user.user.id,
            is_current_installation : true,
            on_cancel : this._on_user_canceled.bind(this),
            on_attached : this._on_license_attached_on_server.bind(this)
        });
    },
    _is_must_be_shown : function() {
        if(this.options.show_anyway)
            return true;
        var er_license_switch_canceled = localStorage.er_license_switch_canceled;
        if(!er_license_switch_canceled || er_license_switch_canceled == '')
            return true;
        return false;
    },

    _on_license_attached_on_server : function(result) {
        if(this.options.on_attached)
            this.options.on_attached(result);
    },
    _on_user_canceled : function() {
        localStorage.er_license_switch_canceled = (new Date()).getTime();

        new ERLH_W_Message({message : 'You can go to "My Account" settings to switch license between installations'});
    }
};
/**
 * Created by erinsasha on 15/08/17.
 */

/**
 *
 * @param options
 * @param options.jq_parent
 * @constructor
 */
function ER_W_Login_Status(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;
    
    this._process();
}

ER_W_Login_Status.prototype = {
    _process : function() {
        this._build();
        if(erlh_curr_user.is_logged_in())
            this._request_current_install_id();
    },

    _build_HTML : function() {
        var status_html;
        if(erlh_curr_user.is_logged_in())
            status_html = 'er_logged_in';
        else
            status_html = 'er_logged_out';

        var html = '<div class="ER_W_Login_Status '+status_html+'">';
        html += this._build_HTML_logged_in_as();
        html += this._build_HTML_login_create_account();
        html += '</div>';

        return html;
    },
    _build_HTML_logged_in_as : function() {
        var email;
        if(erlh_curr_user.is_logged_in())
            email = erlh_curr_user.user.email;
        else
            email = '';

        return '<span class="er_logged_in_as">'+email+'</span>';
    },
    _build_HTML_login_create_account : function() {
        return '<span class="er_login_create_account"><span class="er_login">Login</span> | <span class="er_create_account">Create account</span></span>';
    },
    _build_HTML_installation_id : function(id) {
        return '<span class="er_installation_id_cont"> | Inst. ID : <span class="er_inst_id">'+id+'</span></span>';
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },
    create_installation_id : function(id) {
        if((!id || id == "") || this.jq_main.find('.er_installation_id_cont').length > 0)
            return;

        this.jq_main.append(this._build_HTML_installation_id(id));
    },

    _add_handlers : function() {
        this.jq_main.find('.er_logged_in_as').click(this._on_click_logged_in_as.bind(this));
        var jq_login_create_account = this.jq_main.children('.er_login_create_account');
        jq_login_create_account.find('.er_login').click(this._on_click_login.bind(this));
        jq_login_create_account.find('.er_create_account').click(this._on_click_create_account.bind(this));

        window.addEventListener(
            erlh_curr_user.EVENT_USER_LOGGED_IN,
            this._on_EVENT_USER_LOGGED_IN.bind(this),
            false);

        window.addEventListener(
            erlh_curr_user.EVENT_USER_LOGGED_OFF,
            this._on_EVENT_USER_LOGGED_OFF.bind(this),
            false);

        window.addEventListener(
            'EVENT_PUBLIC_KEY_REGISTERED',
            this._on_EVENT_PUBLIC_KEY_REGISTERED.bind(this),
            false);
    },
    _request_current_install_id : function() {
        var evtL = document.createEvent("CustomEvent");
        evtL.initCustomEvent('ER_EVENT_GET_INSTALL_ID', true, true,
            this._callback_on_get_current_install_id.bind(this));
        window.dispatchEvent(evtL);
    },

    remove : function() {
        this.jq_main.remove();
    },
    _on_change : function() {

    },
    _on_EVENT_USER_LOGGED_IN : function() {
        this.jq_main.find('.er_logged_in_as').text(erlh_curr_user.user.email);
        this.jq_main.removeClass('er_logged_out');
        this.jq_main.addClass('er_logged_in');

        this._request_current_install_id();
    },
    _on_EVENT_USER_LOGGED_OFF : function() {
        this.jq_main.find('.er_logged_in_as').text('');
        this.jq_main.addClass('er_logged_out');
        this.jq_main.removeClass('er_logged_in');
    },
    _on_EVENT_PUBLIC_KEY_REGISTERED : function() {
        this._request_current_install_id();
    },
    _on_click_logged_in_as : function(event) {
        erlh_main.show();
        event.stopPropagation();
    },
    _on_click_login : function(event) {
        erlh_main.show({show_login_first : true});
        event.stopPropagation();
    },
    _on_click_create_account : function(event) {
        erlh_main.show({show_login_first : false});
        event.stopPropagation();
    },
    _callback_on_get_current_install_id : function(id) {
        this.create_installation_id(id);
    },
};
/**
 * Created by erinsasha on 11/05/17.
 */

function ER_W_Broadcast_Source_Chooser(options) {
    this.options = options;
    this.jq_parent = options.jq_parent;


}

ER_W_Broadcast_Source_Chooser.prototype = {

};
/**
 * Created by erinsasha on 24/08/17.
 */
//ER_Widget_Broadcast_Message_Template
function ER_Widget_Broadcast_Message_Template (options) {
    options = options || {};
    this.options = options;
    this.jq_parent = options.jq_parent;

    this.er_Widget_Message_Template = new ER_Widget_Message_Template({
        html_main_class : 'ER_Widget_Broadcast_Message_Template',
        jq_parent : this.jq_parent,

        message_template : '',
        message_placeholder : 'Hello {firstname}! Please, join my network!',

        callback_on_message_template_save_deferred : this.callback_on_message_template_save_deferred.bind(this),
        callback_on_defaults_change : this.callback_on_defaults_change.bind(this),
    });

    this._add_handlers();
};

ER_Widget_Broadcast_Message_Template.prototype = {
    _add_handlers : function() {
        window.addEventListener(
            er_broadcast_control.EVENT_ACTIVE_BROADCAST_SWITCHED,
            this.on_EVENT_ACTIVE_BROADCAST_SWITCHED.bind(this),
            false);

        this.update_info();
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    update_info : function() {
        this.er_Widget_Message_Template.set_message_template(localStorage.er_message_template);
        this.er_Widget_Message_Template.set_defaults({
            company : localStorage.er_message_company,
            position : localStorage.er_message_position
        });
    },

    callback_on_message_template_save_deferred : function(message) {
        var deferred = $.Deferred();
        localStorage.er_message_template = message;
        deferred.resolve();

        return deferred.promise();
    },
    callback_on_defaults_change : function(variables) {
        var deferred = $.Deferred();

        localStorage.er_message_company = variables.company;
        localStorage.er_message_position = variables.position;
        deferred.resolve();

        return deferred.promise();
    },

    on_EVENT_ACTIVE_BROADCAST_SWITCHED : function() {
        this.update_info();
    },
};
/**
 * Created by erinsasha on 05/08/17.
 */

//ER_Widget_Broadcast_Queue_Proc_Excl

function ER_Widget_Broadcast_Queue_Proc_Excl (options) {
    if(!options)
        options = {};
    this.options = options;
    this.jq_parent = options.jq_parent;

    this.closure_on_click_btn_show_broadcast_message = this._on_click_btn_show_broadcast_message.bind(this);

    this._build_widget();
};

ER_Widget_Broadcast_Queue_Proc_Excl.prototype = {
    listname_tech_to_user : {
        'queue' : 'Recipients Queue',
        'processed' : 'Processed Recipients',
        'excluded' : 'Excluded Recipients',
        'error' : 'Processed with Errors',
    },
    _build_widget : function() {
        this.er_Widget_Queue_Proc_Excl = new ER_Widget_Queue_Proc_Excl({
            jq_parent : this.jq_parent,
            html_additional_main_class : 'ER_Widget_Broadcast_Queue_Proc_Excl',

            callback_custom_fields_builder : this.callback_custom_fields_builder.bind(this),
            callback_custom_data_for_fullname_descr : this.callback_custom_data_for_fullname_descr.bind(this),
            callback_on_add_handlers_for_profile_item : this.callback_on_add_handlers_for_profile_item.bind(this),

            is_processed_enabled : true,
            is_excluded_enabled : true,
            is_error_enabled : true,

            callback_get_queue_deferred : this.callback_get_queue_deferred.bind(this),
            callback_get_processed_deferred : this.callback_get_processed_deferred.bind(this),
            callback_get_excluded_deferred : this.callback_get_excluded_deferred.bind(this),
            callback_get_error_deferred : this.callback_get_error_deferred.bind(this),

            callback_move_ids_from_queue_to_excluded_deferred : this.callback_move_ids_from_queue_to_excluded_deferred.bind(this),
            callback_move_ids_from_excluded_to_queue_deferred : this.callback_move_ids_from_excluded_to_queue_deferred.bind(this),
            callback_move_ids_from_queue_to_processed_deferred : this.callback_move_ids_from_queue_to_processed_deferred.bind(this),
            callback_move_ids_from_processed_to_queue_deferred : this.callback_move_ids_from_processed_to_queue_deferred.bind(this),
            callback_move_ids_from_processed_to_excluded_deferred : this.callback_move_ids_from_processed_to_excluded_deferred.bind(this),
            callback_move_ids_from_excluded_to_processed_deferred : this.callback_move_ids_from_excluded_to_processed_deferred.bind(this),
            callback_move_ids_from_error_to_queue_deferred : this.callback_move_ids_from_error_to_queue_deferred.bind(this),

            callback_get_dialog_message_move_from_queue_to_excluded : this.callback_get_dialog_message_move_from_queue_to_excluded.bind(this),
            callback_get_dialog_message_move_from_excluded_to_queue : this.callback_get_dialog_message_move_from_excluded_to_queue.bind(this),
            callback_get_dialog_message_move_from_queue_to_processed : this.callback_get_dialog_message_move_from_queue_to_processed.bind(this),
            callback_get_dialog_message_move_from_processed_to_queue : this.callback_get_dialog_message_move_from_processed_to_queue.bind(this),
            callback_get_dialog_message_move_from_processed_to_excluded : this.callback_get_dialog_message_move_from_processed_to_excluded.bind(this),
            callback_get_dialog_message_move_from_excluded_to_processed : this.callback_get_dialog_message_move_from_excluded_to_processed.bind(this),
            callback_get_dialog_message_move_from_error_to_queue : this.callback_get_dialog_message_move_from_error_to_queue.bind(this),

            callback_get_dialog_message_delete_selected : this.callback_get_dialog_message_delete_selected.bind(this),
            callback_delete_selected_deferred : this.callback_delete_selected_deferred.bind(this),
        });
    },

    callback_custom_fields_builder : function(mini_profile, mode) {
        return this._build_HTML_td_show_message(mini_profile.id);
    },
    _build_HTML_td_show_message : function(profile_id) {
        return '<td class="td_show_message"><button class="show_broadcast_message" data-profile-id="'+profile_id+'">Preview Message</button></td>';
    },
    callback_custom_data_for_fullname_descr : function(mini_profile, mode) {
        if(mode != ER_Widget_Queue_Proc_Excl.const.modes.error)
            return '';

        return '<div class="er_process_error_descr">Error : '+er_broadcast_error.get_err_description_for_id(mini_profile.id)+'</div>';
    },

    callback_on_add_handlers_for_profile_item : function(jq_item, mode) {
        jq_item.find('button.show_broadcast_message').click(this.closure_on_click_btn_show_broadcast_message);
    },

    show_broadcast_message : function(profile_id) {
        var mini_profile = this.er_Widget_Queue_Proc_Excl.get_cached_profile(profile_id);

        var message = er_message_broadcast._generate_message_text_from_mini_profile_object(mini_profile);

        var er_Textbox_Preview = new ER_Textbox_Preview({jq_parent : this.er_Widget_Queue_Proc_Excl.jq_main});
        er_Textbox_Preview.show('Message Preview', message);
    },

    callback_get_queue_deferred : function() {
        var deferred = $.Deferred();

        var ids = er_message_recipients.get_recipients_ids();
        deferred.resolve(ids);

        return deferred.promise();
    },
    callback_get_processed_deferred : function() {
        var deferred = $.Deferred();

        var ids = er_broadcasted_recipients.get_broadcasted_recipients_ids();
        deferred.resolve(ids);

        return deferred.promise();
    },
    callback_get_excluded_deferred : function() {
        var deferred = $.Deferred();

        var ids = er_broadcast_excluded.get_excluded_ids();
        deferred.resolve(ids);

        return deferred.promise();
    },
    callback_get_error_deferred : function() {
        var deferred = $.Deferred();

        var ids = er_broadcast_error.get_error_ids();
        deferred.resolve(ids);

        return deferred.promise();
    },

    callback_move_ids_from_queue_to_excluded_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_message_broadcast.move_ids_from_recipients_queue_to_excluded(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_excluded_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_message_broadcast.move_ids_from_excluded_to_recipients_queue(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_queue_to_processed_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_message_broadcast.move_ids_from_recipients_queue_to_processed(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_excluded_to_processed_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_message_broadcast.move_ids_from_excluded_to_processed(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_processed_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_message_broadcast.move_ids_from_processed_to_recipients_queue(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_processed_to_excluded_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_message_broadcast.move_ids_from_processed_to_excluded(ids);
        deferred.resolve();

        return deferred.promise();
    },
    callback_move_ids_from_error_to_queue_deferred : function(ids) {
        var deferred = $.Deferred();
        if (ids == null || ids.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        er_message_broadcast.move_ids_from_error_to_recipients_queue(ids);
        deferred.resolve();

        return deferred.promise();
    },

    _generate_move_dialog_message : function(source_tech_name, target_tech_name) {
        var selected = this.er_Widget_Queue_Proc_Excl.get_selected_count();

        var source_user_name = this.listname_tech_to_user[source_tech_name];
        var target_user_name = this.listname_tech_to_user[target_tech_name];

        var message = 'Do you want to move '+selected + ' contact';
        if(selected > 1)
            message += 's';
        message += ' from '+source_user_name+' to '+target_user_name;
        return message;
    },

    callback_get_dialog_message_move_from_queue_to_excluded : function() {
        return this._generate_move_dialog_message('queue', 'excluded');
    },
    callback_get_dialog_message_move_from_excluded_to_queue : function() {
        return this._generate_move_dialog_message('excluded', 'queue');
    },
    callback_get_dialog_message_move_from_queue_to_processed : function() {
        return this._generate_move_dialog_message('queue', 'processed');
    },
    callback_get_dialog_message_move_from_processed_to_queue : function() {
        return this._generate_move_dialog_message('processed', 'queue');
    },
    callback_get_dialog_message_move_from_excluded_to_processed : function() {
        return this._generate_move_dialog_message('excluded', 'processed');
    },
    callback_get_dialog_message_move_from_processed_to_excluded : function() {
        return this._generate_move_dialog_message('processed', 'excluded');
    },
    callback_get_dialog_message_move_from_error_to_queue : function() {
        return this._generate_move_dialog_message('error', 'queue');
    },

    _on_click_btn_show_broadcast_message : function(event) {
        var jq_btn = $(event.currentTarget);
        var profile_id = jq_btn.attr('data-profile-id');
        this.show_broadcast_message(profile_id);
    },

    callback_get_dialog_message_delete_selected : function(listname, count) {
        var user_listname = this.listname_tech_to_user[listname];

        if(count <= 0)
            return 'Nothing selected';
        var message = 'Delete '+count+' selected contact';
        if(count > 1)
            message += 's';
        message += ' from '+user_listname+' ?';
        return message;
    },
    callback_delete_selected_deferred : function(listname, ids) {
        if(listname == 'queue') {
            er_message_recipients.delete_ids(ids);
        } else if(listname == 'processed') {
            er_broadcasted_recipients.delete_ids(ids);
        } else if(listname == 'excluded') {
            er_broadcast_excluded.delete_ids(ids);
        } else if(listname == 'error') {
            er_broadcast_error.delete_ids(ids);
        }

        var deferred = $.Deferred();
        deferred.resolve();
        return deferred.promise();
    }
};
/**
 * Created by erinsasha on 11/02/17.
 */
if(!window.ER_Broadcast) {
    window.ER_Broadcast = function (obj) {
        for(key in obj)
            this[key] = obj[key];

        this.id = obj.id ? obj.id : obj.name;
        this.name = obj.name ? obj.name : obj.id;

        if (! this.message)
            this.message = '';
        if (! this.subject)
            this.subject = ER_Broadcast.static.DEFAULT_SUBJECT;
        if (! this.company)
            this.company = ER_Broadcast.static.DEFAULT_COMPANY;
        if (! this.position)
            this.position = ER_Broadcast.static.DEFAULT_POSITION;

        if (! this.recipients_ids)
            this.recipients_ids = [];
        if (! this.broadcasted_ids)
            this.broadcasted_ids = [];
        if (! this.excluded_ids)
            this.excluded_ids = [];
        if (! this.error_ids)
            this.error_ids = [];
        if (! this.error_ids_to_codes)
            this.error_ids_to_codes = {};

        if(obj.t)
            this.t = obj.t;
        else {
            var d = new Date();
            this.t = d.getTime();
        }
    };
    ER_Broadcast.prototype = {
        save_to_db : function() {
            var d = new Date();
            this.u = d.getTime();

            return er_broadcast_db.push_broadcast(this);
        },
        get_recipients_queue_length : function() {
            return this.recipients_ids.length;
        },
        get_broadcasted_length : function() {
            return this.broadcasted_ids.length;
        },
        get_processed_recipients_length : function() {
            return this.get_broadcasted_length();
        },
        get_excluded_length : function() {
            return this.excluded_ids.length;
        },

        get_all_ids_in_recipients_queue : function() {
            return this.recipients_ids;
        },
        get_all_ids_in_broadcasted : function() {
            return this.broadcasted_ids;
        },
        get_all_ids_in_processed_recipients : function() {
            return this.get_all_ids_in_broadcasted();
        },
        get_all_ids_in_excluded : function() {
            return this.excluded_ids;
        },
        get_uniq : function(ids) {
            ids = er_utils.get_array_uniq(ids, this.excluded_ids);
            ids = er_utils.get_array_uniq(ids, this.broadcasted_ids);
            return er_utils.get_array_uniq(ids, this.recipients_ids);
        },

        set_ids_in_recipients_queue : function(ids) {
            this.recipients_ids = ids;
        },
        set_ids_in_broadcasted : function(ids) {
            this.broadcasted_ids = ids;
        },
        set_ids_in_processed_recipients : function(ids) {
            this.set_ids_in_broadcasted(ids);
        },
        set_ids_in_excluded : function(ids) {
            this.excluded_ids = ids;
        },
    };
    ER_Broadcast.static = {};
    ER_Broadcast.static.DEFAULT_SUBJECT = '_';
    ER_Broadcast.static.DEFAULT_COMPANY = 'your company';
    ER_Broadcast.static.DEFAULT_POSITION = 'your position';

};
/**
 * Created by erinsasha on 12/08/17.
 */

//W_Message_Broadcast_Timeout_Settings

/**
 *
 * @param options
 * @param options.jq_parent
 * @constructor
 */
function W_Message_Broadcast_Timeout_Settings(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.options = options;

    this._process();
}

W_Message_Broadcast_Timeout_Settings.prototype = {
    _process : function() {
        this.w_timeout_settings = new ER_W_Timeout_Settings({
            header : 'Timeouts for Message broadcast to 1st connections',
            timeouts_names : er_message_broadcast_timeouts.const_timeouts_names,
            timeouts : er_message_broadcast_timeouts.get_timeouts(),
            fast_timeouts : er_message_broadcast_timeouts.const_timeout_fast,
            safe_timeouts : er_message_broadcast_timeouts.const_timeout_safe,
            add_message_mode_switcher : true,
            message_mode : er_message_broadcast_timeouts.get_message_mode(),
            jq_parent : this.jq_parent,
            callback_save_settings : er_message_broadcast_timeouts.save_timeouts_and_message_mode.bind(er_message_broadcast_timeouts)
        });
    },
};
/**
 * Created by Alex on 12.03.2017.
 */
var er_broadcast_backup_export = window.er_broadcast_backup_export || {
        build_object : function() {
            var deferred = $.Deferred();
            var obj = {};
            obj.lc = this._build_lc();

            this._build_db()
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },
        _build_lc : function() {
            var lc = {};

            lc.er_message_broadcast_id = localStorage.er_message_broadcast_id;
            lc.er_message_broadcast_limit = localStorage.er_message_broadcast_limit;
            lc.er_message_broadcast_name = localStorage.er_message_broadcast_name;
            lc.er_message_broadcast_period = localStorage.er_message_broadcast_period;
            lc.er_message_broadcasts_list = localStorage.er_message_broadcasts_list;

            lc.er_message_done_peoples_ids = localStorage.er_message_done_peoples_ids;
            lc.er_message_job_peoples_ids = localStorage.er_message_job_peoples_ids;
            lc.er_messages_excluded_ids = localStorage.er_messages_excluded_ids;
            lc.er_messages_error_ids = localStorage.er_messages_error_ids;
            lc.er_messages_map_error_ids_to_codes = localStorage.er_messages_map_error_ids_to_codes;

            lc.er_message_subject = localStorage.er_message_subject;
            lc.er_message_template = localStorage.er_message_template;

            lc.er_message_company = localStorage.er_message_company;
            lc.er_message_position = localStorage.er_message_position;


            return lc;
        },
        _build_db : function() {
            var deferred = $.Deferred();
            var db = {};

            er_broadcast_db.get_all()
                .then(function(broadcasts) {
                    db.broadcasts = broadcasts;
                    deferred.resolve(db);
                });


            return deferred.promise();
        },
    };
/**
 * Created by Alex on 12.03.2017.
 */
var er_broadcast_backup_import = window.er_broadcast_backup_import || {
        import : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj) {
                er_logger.log('SKIPS : Broadcast data missing');
                deferred.resolve(true);
                return deferred.promise();
            }

            this._import_db(obj.db)
                .then(function() {
                    that._import_lc(obj.lc);
                    deferred.resolve(true);
                });

            return deferred.promise();
        },

        _import_db : function(db) {
            var deferred = $.Deferred();

            er_broadcast_db.push_broadcasts(db.broadcasts)
                .then(deferred.resolve.bind(deferred));

            return deferred.promise();
        },

        _import_lc : function(lc) {
            if(lc.er_message_broadcast_id)
                localStorage.er_message_broadcast_id = lc.er_message_broadcast_id;
            else
                delete localStorage.er_message_broadcast_id;

            if(lc.er_message_broadcast_limit)
                localStorage.er_message_broadcast_limit = lc.er_message_broadcast_limit;
            else
                delete localStorage.er_message_broadcast_limit;

            if(lc.er_message_broadcast_name)
                localStorage.er_message_broadcast_name = lc.er_message_broadcast_name;
            else
                delete localStorage.er_message_broadcast_name;

            if(lc.er_message_broadcast_period)
                localStorage.er_message_broadcast_period = lc.er_message_broadcast_period;
            else
                delete localStorage.er_message_broadcast_period;

            if(lc.er_message_broadcasts_list)
                localStorage.er_message_broadcasts_list = lc.er_message_broadcasts_list;
            else
                delete localStorage.er_message_broadcasts_list;

            if(lc.er_message_done_peoples_ids)
                localStorage.er_message_done_peoples_ids = lc.er_message_done_peoples_ids;
            else
                delete localStorage.er_message_done_peoples_ids;

            if(lc.er_message_job_peoples_ids)
                localStorage.er_message_job_peoples_ids = lc.er_message_job_peoples_ids;
            else
                delete localStorage.er_message_job_peoples_ids;

            if(lc.er_messages_excluded_ids)
                localStorage.er_messages_excluded_ids = lc.er_messages_excluded_ids;
            else
                delete localStorage.er_messages_excluded_ids;

            if(lc.er_messages_error_ids)
                localStorage.er_messages_error_ids = lc.er_messages_error_ids;
            else
                delete localStorage.er_messages_error_ids;

            if(lc.er_messages_map_error_ids_to_codes)
                localStorage.er_messages_map_error_ids_to_codes = lc.er_messages_map_error_ids_to_codes;
            else
                delete localStorage.er_messages_map_error_ids_to_codes;

            if(lc.er_message_subject)
                localStorage.er_message_subject = lc.er_message_subject;
            else
                delete localStorage.er_message_subject;

            if(lc.er_message_template)
                localStorage.er_message_template = lc.er_message_template;
            else
                delete localStorage.er_message_template;

            if(lc.er_message_company)
                localStorage.er_message_company = lc.er_message_company;
            else
                delete localStorage.er_message_company;

            if(lc.er_message_position)
                localStorage.er_message_position = lc.er_message_position;
            else
                delete localStorage.er_message_position;
        },
    };
/**
 * Created by erinsasha on 12/02/17.
 */
var er_broadcast_control = window.er_broadcast_control || {
        EVENT_NEW_BROADCAST_CREATED : 'ER_EVENT_NEW_BROADCAST_CREATED',
        EVENT_BROADCAST_DELETED : 'ER_EVENT_BROADCAST_DELETED',
        EVENT_ACTIVE_BROADCAST_SWITCHED : 'ER_EVENT_ACTIVE_BROADCAST_SWITCHED',

        CONST_ACTION_ADD_TO : 'add_to',
        CONST_ACTION_REPLACE_TO : 'replace_to',
        CONST_ACTION_REMOVE_THE_SAME : 'remove_the_same',

        CONST_ARRAY_NAME_RECIPIENTS : 'recipients',
        CONST_ARRAY_NAME_PROCESSED : 'processed',
        CONST_ARRAY_NAME_EXCLUDED : 'excluded',
        CONST_ARRAY_NAME_ERROR : 'error',

        DEFAULT_BROADCAST_ID : 'DEFAULT_BROADCAST',

        init : function() {
            var deferred = $.Deferred();

            var that = this;

            this._init_default_broadcast()
                .then(function() {
                    that._init_broadcasts_list();
                    deferred.resolve();
                });

            return deferred.promise();
        },

        _init_default_broadcast : function() {
            var deferred = $.Deferred();
            var id = localStorage.er_message_broadcast_id;

            if (id != null && id != '') {
                deferred.resolve();
                return deferred.promise();
            }

            localStorage.er_message_broadcast_name = this.DEFAULT_BROADCAST_ID;
            var broadcast = this._create_broadcast_object_from_current_state(this.DEFAULT_BROADCAST_ID, this.DEFAULT_BROADCAST_ID);

            var that = this;
            broadcast.save_to_db()
                .then(function() {
                    localStorage.er_message_broadcast_id = that.DEFAULT_BROADCAST_ID;
                    deferred.resolve();
                });

            return deferred.promise();
        },
        _init_broadcasts_list : function() {
            var list = localStorage.er_message_broadcasts_list;
            if (list == null || list == '') {
                list = [];
                list.push(this.DEFAULT_BROADCAST_ID);
                localStorage.er_message_broadcasts_list = JSON.stringify(list);
            }
        },

        get_active_broadcast_id : function() {
            var id = localStorage.er_message_broadcast_id;
            if (id == null || id == '') {
                id = this.DEFAULT_BROADCAST_ID;
                localStorage.er_message_broadcast_id = id;
            }
            return id;
        },
        is_default_broadcast_active : function() {
            return this.DEFAULT_BROADCAST_ID == this.get_active_broadcast_id();
        },

        set_active_broadcast : function(id) {
            var deferred = $.Deferred();

            if (id == this.get_active_broadcast_id()) {
                deferred.resolve();
                return deferred.promise();
            }

            er_message_broadcast.set_message_broadcast_mode_off();
            er_message_broadcast.set_search_for_message_broadcast_mode_off();

            var that = this;

            this._store_broadcast_from_localStorage_to_DB()
                .then(function() {
                    er_broadcast_db.get_broadcast(id)
                        .then(function(broadcast) {
                        that._update_localStorage_by_broadcast_object(broadcast);
                        deferred.resolve();

                        var evt = document.createEvent("CustomEvent");
                        evt.initCustomEvent(that.EVENT_ACTIVE_BROADCAST_SWITCHED, true, true, broadcast);
                        window.dispatchEvent(evt);
                    })
                });

            return deferred.promise();
        },
        get_broadcasts_list : function() {
            var list = localStorage.er_message_broadcasts_list;
            if (list == null || list == '') {
                this._init_broadcasts_list();
            }
            return JSON.parse(list);
        },
        is_broadcast_exists : function(id) {
            var list = this.get_broadcasts_list();
            return list.indexOf(id) >= 0;
        },
        create_new_broadcast : function(id) {
            if (this.is_broadcast_exists(id)) {
                return er_broadcast_db.get_broadcast(id);
            } else {
                var deferred = $.Deferred();

                var that = this;

                var broadcast = new ER_Broadcast({ id : id });
                broadcast.save_to_db()
                    .then(function() {
                        var list = that.get_broadcasts_list();
                        list.push(id);
                        localStorage.er_message_broadcasts_list = JSON.stringify(list);

                        deferred.resolve(broadcast);

                        var evt = document.createEvent("CustomEvent");
                        evt.initCustomEvent(that.EVENT_NEW_BROADCAST_CREATED, true, true, broadcast);
                        window.dispatchEvent(evt);
                    });

                return deferred.promise();
            }
        },
        create_new_broadcast_as_active : function(id) {
            var deferred = $.Deferred();

            var that = this;

            this.create_new_broadcast(id)
                .then(function(broadcast) {
                    that.set_active_broadcast(id)
                        .then(function () {
                            deferred.resolve(broadcast);
                        });
                });

            return deferred.promise();
        },

        get_broadcast : function(id) {
            if(id == this.get_active_broadcast_id()) {
                return this._store_broadcast_from_localStorage_to_DB();
            } else {
                return er_broadcast_db.get_broadcast(id);
            }
        },
        save_broadcast : function(broadcast) {
            var deferred = $.Deferred();

            var that = this;
            broadcast.save_to_db()
                .then(function() {
                    if(that.get_active_broadcast_id() == broadcast.id) {
                        that._update_localStorage_by_broadcast_object(broadcast);
                    }
                    deferred.resolve(broadcast);
                });

            return deferred.promise();
        },

        _store_broadcast_from_localStorage_to_DB : function() {
            var deferred = $.Deferred();

            var that = this;

            var id = this.get_active_broadcast_id();
            er_broadcast_db.get_broadcast(id)
                .then(function(broadcast) {
                    that._update_broadcast_object_by_values_from_localStorage(broadcast);
                    broadcast.save_to_db()
                        .then(function() {
                            deferred.resolve(broadcast);
                        });
                });

            return deferred;
        },

        _create_broadcast_object_from_current_state : function(id, name) {
            var broadcast = new ER_Broadcast ({
                id : id,
                name : name,
            });
            this._update_broadcast_object_by_values_from_localStorage(broadcast);

            return broadcast;
        },
        _update_broadcast_object_by_values_from_localStorage : function(broadcast) {
            broadcast.message = localStorage.er_message_template;
            broadcast.subject = localStorage.er_message_subject;
            broadcast.company = localStorage.er_message_company;
            broadcast.position = localStorage.er_message_position;
            broadcast.recipients_ids = er_message_recipients.get_recipients_ids();
            broadcast.broadcasted_ids = er_broadcasted_recipients.get_broadcasted_recipients_ids();
            broadcast.excluded_ids = er_broadcast_excluded.get_excluded_ids();
            broadcast.error_ids = er_broadcast_error.get_error_ids();
            broadcast.error_ids_to_codes = er_broadcast_error.get_error_map_error_ids_to_codes();
        },
        _update_localStorage_by_broadcast_object : function(broadcast) {
            localStorage.er_message_template = broadcast.message;
            localStorage.er_message_subject = broadcast.subject;
            localStorage.er_message_company = broadcast.company;
            localStorage.er_message_position = broadcast.position;
            er_message_recipients.replace_all_recipients_by_array(broadcast.recipients_ids);
            er_broadcasted_recipients.replace_all_broadcasted_recipients_by_array(broadcast.broadcasted_ids);
            er_broadcast_excluded.replace_all_excluded_recipients_by_array(broadcast.excluded_ids);
            er_broadcast_error.replace_all_error_recipients_by_array(broadcast.error_ids);
            er_broadcast_error.replace_all_map_error_ids_to_codes(broadcast.error_ids_to_codes);

            localStorage.er_message_broadcast_name = broadcast.name;
            localStorage.er_message_broadcast_id = broadcast.id;
        },

        action : function(source_id, source_array_name, target_id, target_array_name, action) {
            var deferred = $.Deferred();

            if (target_id == this.get_active_broadcast_id()) {
                er_message_broadcast.set_message_broadcast_mode_off();
                er_message_broadcast.set_search_for_message_broadcast_mode_off();
            }

            var that = this;

            this._store_broadcast_from_localStorage_to_DB()
                .then(function() {
                    $.when( er_broadcast_db.get_broadcast(source_id), er_broadcast_db.get_broadcast(target_id) )
                        .then(function(source_broadcast, target_broadcast) {
                            that._action(source_broadcast, source_array_name, target_broadcast, target_array_name, action)
                                .then(function(target_broadcast) {
                                    deferred.resolve(target_broadcast);
                                })
                        });
                });


            return deferred.promise();
        },
        _action : function(source_broadcast, source_array_name, target_broadcast, target_array_name, action) {
            var deferred = $.Deferred();

            var source_arr;
            switch (source_array_name) {
                case this.CONST_ARRAY_NAME_RECIPIENTS :
                    source_arr = source_broadcast.recipients_ids;
                    break;
                case this.CONST_ARRAY_NAME_PROCESSED :
                    source_arr = source_broadcast.broadcasted_ids;
                    break;
                case this.CONST_ARRAY_NAME_EXCLUDED :
                    source_arr = source_broadcast.excluded_ids;
                    break;
                case this.CONST_ARRAY_NAME_ERROR :
                    source_arr = source_broadcast.error_ids;
                    break;
            }

            var target_arr;
            switch (target_array_name) {
                case this.CONST_ARRAY_NAME_RECIPIENTS :
                    target_arr = target_broadcast.recipients_ids;
                    break;
                case this.CONST_ARRAY_NAME_PROCESSED :
                    target_arr = target_broadcast.broadcasted_ids;
                    break;
                case this.CONST_ARRAY_NAME_EXCLUDED :
                    target_arr = target_broadcast.excluded_ids;
                    break;
                case this.CONST_ARRAY_NAME_ERROR :
                    target_arr = target_broadcast.error_ids;
                    break;
            }

            switch (action) {
                case this.CONST_ACTION_ADD_TO :
                    target_arr = er_utils.get_array_merge(target_arr, source_arr);
                    break;
                case this.CONST_ACTION_REPLACE_TO :
                    target_arr = er_utils.get_array_merge(source_arr, []);
                    break;
                case this.CONST_ACTION_REMOVE_THE_SAME :
                    target_arr = er_utils.get_array_uniq(target_arr, source_arr);
                    break;
            }

            switch (target_array_name) {
                case this.CONST_ARRAY_NAME_RECIPIENTS :
                    target_broadcast.recipients_ids = target_arr;
                    break;
                case this.CONST_ARRAY_NAME_PROCESSED :
                    target_broadcast.broadcasted_ids = target_arr;
                    break;
                case this.CONST_ARRAY_NAME_EXCLUDED :
                    target_broadcast.excluded_ids = target_arr;
                    break;
                case this.CONST_ARRAY_NAME_ERROR :
                    target_broadcast.error_ids = target_arr;
                    break;
            }

            var that = this;

            target_broadcast.save_to_db()
                .then(function() {
                    if (target_broadcast.id == that.get_active_broadcast_id()) {
                        that._update_localStorage_by_broadcast_object(target_broadcast);
                    }

                    deferred.resolve(target_broadcast);
                });

            return deferred.promise();
        },

        delete_broadcast : function(id) {
            var deferred = $.Deferred();

            if (id == this.DEFAULT_BROADCAST_ID){
                deferred.resolve(false);
                return deferred.promise();
            }

            if (id == this.get_active_broadcast_id()) {
                var that = this;
                this.set_active_broadcast(this.DEFAULT_BROADCAST_ID)
                    .then(function() {
                        that._delete_broadcast_id_from_list(id);
                        deferred.resolve(true);
                    });
            } else {
                this._delete_broadcast_id_from_list(id);
                deferred.resolve(true);
            }

            return deferred.promise();
        },
        _delete_broadcast_id_from_list : function(id) {
            var list = this.get_broadcasts_list();
            var pos = list.indexOf(id);
            if(pos >= 0) {
                list.splice(pos,1);
                localStorage.er_message_broadcasts_list = JSON.stringify(list);
                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(this.EVENT_BROADCAST_DELETED, true, true, id);
                window.dispatchEvent(evt);
            }
        },
    };
/**
 * Created by erinsasha on 12/02/17.
 */
function ER_Broadcast_Control_View (options) {
    options = options || {};
    this.options = options;

    this.jq_parent = options.jq_parent;
};

ER_Broadcast_Control_View.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Broadcast_Control_View">';
        html += '<div class="er_transparent_back"></div>';
        html += this._HTML_build_main_content();
        html += this._HTML_build_preloader();
        html += '</div>';
        return html;
    },
    _HTML_build_main_content : function() {
        var html = '<div class="content"><div class="internal_wrapper">';

        html += '<p class="title"></p>';
        html += this._HTML_build_main_sub_content();
        html += this._HTML_build_bottom_panel();

        html += '</div></div>';
        return html;
    },
    _HTML_build_main_sub_content : function() {
        var html = '<div class="main_sub_content">';

        html += this._HTML_build_big_selector_cont('left');
        html += this._HTML_build_actions_cont();
        html += this._HTML_build_big_selector_cont('right');

        html += '</div>';
        return html;
    },
    _HTML_build_big_selector_cont : function(additional_html_class) {
        return '<div class="big_selector_cont '+additional_html_class+'"></div>';
    },
    _HTML_build_actions_cont : function() {
        var html = '<div class="actions_cont">';

        html += '<button class="action" data-action-name="'+er_broadcast_control.CONST_ACTION_ADD_TO+'"></button>';
        html += '<button class="action" data-action-name="'+er_broadcast_control.CONST_ACTION_REPLACE_TO+'"></button>';
        html += '<button class="action" data-action-name="'+er_broadcast_control.CONST_ACTION_REMOVE_THE_SAME+'"></button>';

        html += '</div>';
        return html;
    },
    _HTML_build_bottom_panel : function() {
        var html = '<div class="bottom_panel">';

        html += '<button class="close"></button>';

        html += '</div>';
        return html;
    },
    _HTML_build_preloader : function() {
        return '<div class="preloader"><span class="img"></span></div>';
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_main.find('.er_transparent_back').click(this._on_click_er_transparent_back.bind(this));
        this.jq_main.find('button.close').click(this._on_click_btn_close.bind(this));

        this.jq_preloader = this.jq_main.find('.preloader');

        this.jq_main.find('button.action[data-action-name="'+er_broadcast_control.CONST_ACTION_ADD_TO+'"]').click(this._on_click_btn_action_add_to.bind(this));
        this.jq_main.find('button.action[data-action-name="'+er_broadcast_control.CONST_ACTION_REPLACE_TO+'"]').click(this._on_click_btn_action_replace_to.bind(this));
        this.jq_main.find('button.action[data-action-name="'+er_broadcast_control.CONST_ACTION_REMOVE_THE_SAME+'"]').click(this._on_click_btn_action_remove_the_same.bind(this));

        var jq_big_selector_cont_left = this.jq_main.find('.big_selector_cont.left');
        var jq_big_selector_cont_right = this.jq_main.find('.big_selector_cont.right');

        this.er_Widget_Broadcast_Array_Selector_source = new ER_Widget_Broadcast_Array_Selector({
            jq_parent : jq_big_selector_cont_left,
            optional_html_class : 'left',
            set_array_name : er_broadcast_control.CONST_ARRAY_NAME_PROCESSED,
        });
        this.er_Widget_Broadcast_Array_Selector_source.build_main_view();

        this.er_Widget_Broadcast_Array_Selector_target = new ER_Widget_Broadcast_Array_Selector({
            jq_parent : jq_big_selector_cont_right,
            optional_html_class : 'right',
            set_array_name : er_broadcast_control.CONST_ARRAY_NAME_RECIPIENTS,
        });
        this.er_Widget_Broadcast_Array_Selector_target.build_main_view();
    },

    close : function() {
        this.jq_main.remove();
    },
    /**
     * Показывает всплывающее окно с указанным сообщением
     *
     * @param message {string}
     * @private
     */
    _info_popup_show : function(message) {
        if (this.jqInfoPopup == null) {
            var that = this;
            this.jqInfoPopup = $('<div class="b2c_info_popup"></div>').appendTo(this.jq_main).b2cpopup({
                html_content : '<p class="message"></p>',
                lightMode : true
            });
            this.jqInfoPopup.b2cpopup('getUserCont').click(function(event) { that.jqInfoPopup.b2cpopup('close'); });
        }
        this.jqInfoPopup.b2cpopup('getUserCont').text(message);
        this.jqInfoPopup.b2cpopup('show');
    },
    /**
     * Показать диалог
     * @private
     */
    show_yes_no_dialog : function(message, onYes, onNo) {
        var jqDialog = $('<div class="delete_dialog"></div>').appendTo(this.jq_main);
        jqDialog.b2cpopupyesnodialog({
            message : message,
            onYes : onYes,
            onNo : onNo,
            onClose : function() { jqDialog.remove() }
        });
        jqDialog.b2cpopupyesnodialog('show');
    },
    _show_preloader : function() {
        this.jq_preloader.addClass('show');
    },
    _hide_preloader : function() {
        this.jq_preloader.removeClass('show');
    },

    _get_selected_states : function() {
        return {
            source_broadcast_id : this.er_Widget_Broadcast_Array_Selector_source.get_current_broadcast_id(),
            source_array_name : this.er_Widget_Broadcast_Array_Selector_source.get_current_array_name(),
            target_broadcast_id : this.er_Widget_Broadcast_Array_Selector_target.get_current_broadcast_id(),
            target_array_name : this.er_Widget_Broadcast_Array_Selector_target.get_current_array_name(),
        }
    },
    _generate_question_text : function(action) {
        var obj_selected_states = this._get_selected_states();

        var translated_source_array_name = this._get_translated_array_name(obj_selected_states.source_array_name);
        var translated_target_array_name = this._get_translated_array_name(obj_selected_states.target_array_name);


        var question_template = er_translator.get_text('ER_Broadcast_Control_View', 'messages', action, er_gen_settings.get_current_language_id());
        question_template = question_template.replace(/{source_array_name}/g,translated_source_array_name)
            .replace(/{target_array_name}/g,translated_target_array_name)
            .replace(/{source_broadcast_id}/g,obj_selected_states.source_broadcast_id)
            .replace(/{target_broadcast_id}/g,obj_selected_states.target_broadcast_id)

        return question_template;
    },

    _get_translated_array_name : function(array_name) {
        return er_translator.get_text('ER_Broadcast_Control_View', 'array_name', array_name, er_gen_settings.get_current_language_id());
    },
    _start_action : function(action) {
        var obj_selected_states = this._get_selected_states();

        this._show_preloader();

        er_broadcast_control.action(
            obj_selected_states.source_broadcast_id,
            obj_selected_states.source_array_name,
            obj_selected_states.target_broadcast_id,
            obj_selected_states.target_array_name,
            action
        ).then(this._on_action_completed.bind(this))
    },

    _on_click_btn_close : function() {
        this.close();
    },
    _on_click_er_transparent_back : function() {
        this.close();
    },
    _on_click_btn_action_add_to : function() {
        var message = this._generate_question_text(er_broadcast_control.CONST_ACTION_ADD_TO);

        this.show_yes_no_dialog(
            message,
            this._on_click_yes_action_add_to.bind(this)
        );
    },
    _on_click_yes_action_add_to : function() {
        this._start_action(er_broadcast_control.CONST_ACTION_ADD_TO);
    },
    _on_click_btn_action_replace_to : function() {
        var message = this._generate_question_text(er_broadcast_control.CONST_ACTION_REPLACE_TO);

        this.show_yes_no_dialog(
            message,
            this._on_click_yes_action_replace_to.bind(this)
        );
    },
    _on_click_yes_action_replace_to : function() {
        this._start_action(er_broadcast_control.CONST_ACTION_REPLACE_TO);
    },
    _on_click_btn_action_remove_the_same : function() {
        var message = this._generate_question_text(er_broadcast_control.CONST_ACTION_REMOVE_THE_SAME);

        this.show_yes_no_dialog(
            message,
            this._on_click_yes_action_remove_the_same.bind(this)
        );
    },
    _on_click_yes_action_remove_the_same : function() {
        this._start_action(er_broadcast_control.CONST_ACTION_REMOVE_THE_SAME);
    },
    _on_action_completed : function() {
        this.er_Widget_Broadcast_Array_Selector_target.refresh_select_array_cont();
        this._hide_preloader();
        this._info_popup_show('DONE!');
    },

};
/**
 * Created by erinsasha on 14/08/17.
 */

var er_broadcast_error = window.er_broadcast_error || {
        get_error_ids : function() {
            /*if (this.error_ids)
             return this.error_ids;*/

            this.error_ids = localStorage.er_messages_error_ids;
            if(this.error_ids == null || this.error_ids == '') {
                this.error_ids = [];
                localStorage.er_messages_error_ids = JSON.stringify(this.error_ids);
            } else {
                this.error_ids = JSON.parse(localStorage.er_messages_error_ids);
            }
            return this.error_ids;
        },
        get_error_mini_profiles : function(callback) {
            var error_ids = this.get_error_ids();
            er_mini_profiles_db.get_profiles(error_ids)
                .then(function(mini_profiles) {
                    callback(mini_profiles);
                });
        },
        set_ids_as_error : function(ids) {
            var error_ids = this.get_error_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (error_ids.indexOf(id) < 0) {
                    error_ids.push(id);
                }
            }
            this.error_ids = error_ids;
            localStorage.er_messages_error_ids = JSON.stringify(this.error_ids);
        },
        remove_ids_from_error_ids : function(ids) {
            var error_ids = this.get_error_ids();
            this.error_ids = er_utils.get_array_uniq(error_ids, ids);
            localStorage.er_messages_error_ids = JSON.stringify(this.error_ids);
        },
        delete_ids : function(ids) {
            return this.remove_ids_from_error_ids(ids);
        },
        add_id : function(id) {
            error_ids = this.get_error_ids();
            if (er_utils.my_index_of(error_ids, id) < 0) {
                error_ids.push(id);
                localStorage.er_messages_error_ids = JSON.stringify(error_ids);
            }
        },
        is_id_error : function(id) {
            var error_ids = this.get_error_ids();
            return er_utils.my_index_of(error_ids, id) >= 0;
        },
        replace_all_error_recipients_by_array : function(ids) {
            this.error_ids = ids;
            localStorage.er_messages_error_ids = JSON.stringify(this.error_ids);
        },
        get_error_map_error_ids_to_codes : function() {
            this.map_error_ids_to_codes = localStorage.er_messages_map_error_ids_to_codes;
            if(this.map_error_ids_to_codes == null || this.map_error_ids_to_codes == '') {
                this.map_error_ids_to_codes = {};
                localStorage.er_messages_map_error_ids_to_codes = JSON.stringify(this.map_error_ids_to_codes);
            } else {
                this.map_error_ids_to_codes = JSON.parse(localStorage.er_messages_map_error_ids_to_codes);
            }
            return this.map_error_ids_to_codes;
        },
        save_error_map_error_ids_to_codes_to_local_storage : function() {
            localStorage.er_messages_map_error_ids_to_codes = JSON.stringify(this.map_error_ids_to_codes);
        },
        replace_all_map_error_ids_to_codes : function(map) {
            this.map_error_ids_to_codes = map;
            this.save_error_map_error_ids_to_codes_to_local_storage();
        },
        set_id_as_error_with_code : function(id, code) {
            var map_error_ids_to_codes = this.get_error_map_error_ids_to_codes();
            map_error_ids_to_codes[id] = code;
            this.save_error_map_error_ids_to_codes_to_local_storage();
            this.add_id(id);
        },
        get_err_code_for_id : function(id) {
            var map_error_ids_to_codes = this.get_error_map_error_ids_to_codes();
            return map_error_ids_to_codes[id];
        },
        get_err_description_for_id : function(id) {
            var code = this.get_err_code_for_id(id);
            if(code) {
                var descr = er_broadcast_error.error_description[code];
                if(descr)
                    return descr;
                else
                    return '';
            } else {
                return '';
            }
        }
    };
er_broadcast_error.error_codes = {};
er_broadcast_error.error_codes.profile_not_found = 1;
er_broadcast_error.error_codes.myself_or_not_first = 2;

er_broadcast_error.error_description = {};
er_broadcast_error.error_description[er_broadcast_error.error_codes.profile_not_found] = 'LinkedIn can\'t load page for this contact';
er_broadcast_error.error_description[er_broadcast_error.error_codes.myself_or_not_first] = 'This was not your 1st connection at the moment of sending (2nd, 3rd or yourself)';

/**
 * Created by erinsasha on 10/02/17.
 */
var er_broadcast_excluded = window.er_broadcast_excluded || {
        get_excluded_ids : function() {
            /*if (this.excluded_ids)
                return this.excluded_ids;*/

            this.excluded_ids = localStorage.er_messages_excluded_ids;
            if(this.excluded_ids == null || this.excluded_ids == '') {
                this.excluded_ids = [];
                localStorage.er_messages_excluded_ids = JSON.stringify(this.excluded_ids);
            } else {
                this.excluded_ids = JSON.parse(localStorage.er_messages_excluded_ids);
            }
            return this.excluded_ids;
        },
        get_excluded_mini_profiles : function(callback) {
            var excluded_ids = this.get_excluded_ids();
            er_mini_profiles_db.get_profiles(excluded_ids)
                .then(function(mini_profiles) {
                    callback(mini_profiles);
                });
        },
        set_ids_as_excluded : function(ids) {
            var excluded_ids = this.get_excluded_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (excluded_ids.indexOf(id) < 0) {
                    excluded_ids.push(id);
                }
            }
            this.excluded_ids = excluded_ids;
            localStorage.er_messages_excluded_ids = JSON.stringify(this.excluded_ids);
        },
        remove_ids_from_excluded_ids : function(ids) {
            var excluded_ids = this.get_excluded_ids();
            this.excluded_ids = er_utils.get_array_uniq(excluded_ids, ids);
            localStorage.er_messages_excluded_ids = JSON.stringify(this.excluded_ids);
        },
        delete_ids : function(ids) {
            return this.remove_ids_from_excluded_ids(ids);
        },
        is_id_excluded : function(id) {
            var excluded_ids = this.get_excluded_ids();
            return er_utils.my_index_of(excluded_ids, id) >= 0;
        },
        replace_all_excluded_recipients_by_array : function(ids) {
            this.excluded_ids = ids;
            localStorage.er_messages_excluded_ids = JSON.stringify(this.excluded_ids);
        },
};
/**
 * Created by erinsasha on 29/08/17.
 */
// er_broadcast_lm_callbacks
var er_broadcast_lm_callbacks = window.er_broadcast_lm_callbacks || {
        get_callbacks : function() {
            return {
                get_lists_deferred : this.get_lists_deferred.bind(this), // get_lists_deferred () // return ({id : id, name : name}, error_message)
                get_sublists : this.get_sublists.bind(this), // get_sublists() // return {id : id, name : name}
                get_sublists_counters_deferred : this.get_sublists_counters_deferred.bind(this), // get_sublists_counters_deferred (list_id) // ({id : sublist_id, counter : counter }, error_message)
                get_create_new_deferred : this.get_create_new_deferred.bind(this), // get_create_new_deferred (list_name) // return (list_id, list_name, error_message)
                get_current_list_id : this.get_current_list_id.bind(this), // get_current_list_id () // return list_id
                get_ids_deferred : this.get_ids_deferred.bind(this), // get_ids_deferred (list_id, sublist_id) // return ids
                perform_action_return_counter_deferred : this.perform_action_return_counter_deferred.bind(this), // perform_action_return_counter_deferred (list_id, sublist_id, action, ids) // return counter of target
            }
        },

        get_lists_deferred : function() {
            var deferred = $.Deferred();
            var lists = er_broadcast_control.get_broadcasts_list();
            var result = [];
            for(var i= 0, list_id; i<lists.length; i++) {
                list_id = lists[i];
                result.push({id : list_id, name : list_id});
            }
            deferred.resolve(result);
            return deferred.promise();
        },
        get_sublists : function() {
            return [
                {id : 'recipients', name : 'Recipients Queue'},
                {id : 'processed', name : 'Processed Recipients'},
                {id : 'excluded', name : 'Excluded'},
            ];
        },
        get_sublists_counters_deferred : function(list_id) {
            var deferred = $.Deferred();
            er_broadcast_control.get_broadcast(list_id)
                .then(function(endorse_list){
                    var result = [
                        {id : 'recipients', counter : endorse_list.get_recipients_queue_length()},
                        {id : 'processed', counter : endorse_list.get_processed_recipients_length()},
                        {id : 'excluded', counter : endorse_list.get_excluded_length()}
                    ];
                    deferred.resolve(result);
                });
            return deferred.promise();
        },
        get_create_new_deferred : function(list_name) {
            var deferred = $.Deferred();
            if(er_broadcast_control.is_broadcast_exists(list_name)) {
                deferred.resolve(null, null, 'List already exists');
            } else {
                er_broadcast_control.create_new_broadcast(list_name)
                    .then(function(broadcast_list) {
                        deferred.resolve(broadcast_list.id, broadcast_list.name);
                    });
            }

            return deferred.promise();
        },
        get_current_list_id : function() {
            return er_broadcast_control.get_active_broadcast_id();
        },
        get_ids_deferred : function(list_id, sublist_id) {
            var deferred = $.Deferred();
            er_broadcast_control.get_broadcast(list_id)
                .then(function(broadcast_list){
                    var result;
                    switch (sublist_id) {
                        case  'recipients' : result = broadcast_list.get_all_ids_in_recipients_queue(); break;
                        case  'processed' : result = broadcast_list.get_all_ids_in_processed_recipients(); break;
                        case  'excluded' : result = broadcast_list.get_all_ids_in_excluded(); break;
                    }

                    deferred.resolve(result);
                });
            return deferred.promise();
        },
        perform_action_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();
            er_broadcast_control.get_broadcast(list_id)
                .then(function(broadcast_list){

                    var target_ids;

                    switch (sublist_id) {
                        case  'recipients' : target_ids = broadcast_list.get_all_ids_in_recipients_queue(); break;
                        case  'processed' : target_ids = broadcast_list.get_all_ids_in_processed_recipients(); break;
                        case  'excluded' : target_ids = broadcast_list.get_all_ids_in_excluded(); break;
                    }

                    switch (action) {
                        case 'add' : target_ids = er_utils.get_array_merge(target_ids, broadcast_list.get_uniq(ids)); break;
                        case 'keep_the_same' : target_ids = er_utils.get_array_intersection(target_ids, ids); break;
                        case 'delete_the_same' : target_ids = er_utils.get_array_uniq(target_ids, ids); break;
                        case 'replace' : target_ids = ids; break;
                        case 'add_all' : target_ids = er_utils.get_array_merge(target_ids, ids); break;
                    }

                    switch (sublist_id) {
                        case  'recipients' : broadcast_list.set_ids_in_recipients_queue(target_ids); break;
                        case  'processed' : broadcast_list.set_ids_in_processed_recipients(target_ids); break;
                        case  'excluded' : broadcast_list.set_ids_in_excluded(target_ids); break;
                    }

                    er_broadcast_control.save_broadcast(broadcast_list)
                        .then(deferred.resolve.bind(deferred));
                });
            return deferred.promise();
        },
        perform_action_return_counter_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();

            this.perform_action_deferred(list_id, sublist_id, action, ids)
                .then(function(broadcast_list) {
                    var new_counter;

                    switch (sublist_id) {
                        case  'recipients' : new_counter = broadcast_list.get_recipients_queue_length(); break;
                        case  'processed' : new_counter = broadcast_list.get_processed_recipients_length(); break;
                        case  'excluded' : new_counter = broadcast_list.get_excluded_length(); break;
                    }

                    deferred.resolve(new_counter);
                });

            return deferred.promise();
        },
    };
/**
 * Created by erinsasha on 10/05/17.
 */

var er_broadcast_my_connections_collector = window.er_broadcast_my_connections_collector || {
        collect : function() {
            this.scrapper = new ER_My_Connections_Scrapper({
                stop_ids : [],
                callback : this._on_scrapped.bind(this)
            });
            this.scrapper.begin();
        },
        _on_scrapped : function(results, is_finished, callback_to_continue) {
            var ids = [];
            for(var i=0; i<results.profiles.length; i++) {
                ids.push(results.profiles[i].id);
            }
            er_message_recipients.add_ids_to_recipients_ids(ids);
            if(!is_finished && er_message_broadcast.is_search_for_message_broadcast_mode_on())
                callback_to_continue();
        }
    };
/**
 * Created by erinsasha on 10/02/17.
 */
var er_broadcasted_recipients = window.er_broadcasted_recipients || {
        get_broadcasted_recipients_ids : function() {
            /*if(this.broadcasted_recipients_ids)
                return this.broadcasted_recipients_ids;*/

            this.broadcasted_recipients_ids = localStorage.er_message_done_peoples_ids;

            if (this.broadcasted_recipients_ids == null || this.broadcasted_recipients_ids == '') {
                this.broadcasted_recipients_ids = [];
                localStorage.er_message_done_peoples_ids = JSON.stringify(this.broadcasted_recipients_ids);
            } else {
                this.broadcasted_recipients_ids = JSON.parse(localStorage.er_message_done_peoples_ids);
            }

            return this.broadcasted_recipients_ids;
        },
        get_broadcasted_recipients_mini_profiles : function(callback) {
            var broadcasted_recipients_ids = this.get_broadcasted_recipients_ids();
            er_mini_profiles_db.get_profiles(broadcasted_recipients_ids)
                .then(function(mini_profiles) {
                    mini_profiles = ER_Profile_Mini.static.add_fake_mini_profiles_to_array(mini_profiles, broadcasted_recipients_ids);
                    callback(mini_profiles);
                });
        },
        add_id_to_broadcasted_recipients_ids : function(id) {
            broadcasted_ids = this.get_broadcasted_recipients_ids();
            if (er_utils.my_index_of(broadcasted_ids, id) < 0) {
                broadcasted_ids.push(id);
                localStorage.er_message_done_peoples_ids = JSON.stringify(broadcasted_ids);
            }
        },
        set_ids_as_broadcasted : function(ids) {
            var broadcasted_ids = this.get_broadcasted_recipients_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (broadcasted_ids.indexOf(id) < 0) {
                    broadcasted_ids.push(id);
                }
            }
            this.broadcasted_ids = broadcasted_ids;
            localStorage.er_message_done_peoples_ids = JSON.stringify(this.broadcasted_ids);
        },
        clear_broadcasted_recipients_ids : function() {
            this.broadcasted_recipients_ids = [];
            localStorage.er_message_done_peoples_ids = JSON.stringify(this.broadcasted_recipients_ids);
        },
        delete_ids : function(ids) {
            var broadcasted_recipients_ids = this.get_broadcasted_recipients_ids();
            this.broadcasted_recipients_ids = er_utils.get_array_uniq(broadcasted_recipients_ids, ids);
            localStorage.er_message_done_peoples_ids = JSON.stringify(this.broadcasted_recipients_ids);
        },
        is_id_broadcasted : function(id) {
            var broadcasted_recipients_ids = this.get_broadcasted_recipients_ids();
            return er_utils.my_index_of(broadcasted_recipients_ids, id) >= 0;
        },
        replace_all_broadcasted_recipients_by_array : function(ids) {
            this.broadcasted_recipients_ids = ids;
            localStorage.er_message_done_peoples_ids = JSON.stringify(this.broadcasted_recipients_ids);
        },
    };
/**
 * Created by Alex on 30.08.2016.
 */
er_message_broadcast = window.er_message_broadcast || {
    WARNING_THRESHOLD_LIMIT : 95,
    DEFAULT_SEND_LIMIT_PER_PERIOD : 95,
    DEFAULT_SEND_LIMIT_UNSET_VALUE : 'UNSET',
    DEFAULT_SEND_PERIOD_HOURS : 24,
    DEFAULT_SEND_PERIOD_UNSET_VALUE : 'UNSET',

    CONST_BROADCAST_STARTED : 'STARTED',
    CONST_BROADCAST_ENDED : 'FINISHED',
    CONST_TABLE_MINI_PROFILES : 'mbroadcast-profiles',

    EVENT_SEND_LIMIT_PER_PERIOD_CHANGED : 'EVENT_SEND_LIMIT_PER_PERIOD_CHANGED',
    EVENT_SEND_PERIOD_HOURS_CHANGED : 'EVENT_SEND_PERIOD_HOURS_CHANGED',
    EVENT_NEXT_BROADCAST_BUNCH_STARTED : 'EVENT_NEXT_BROADCAST_BUNCH_STARTED',

    send_limit_per_period : null,
    send_period_hours : null,

    recipients_ids : null,
    excluded_ids : null,
    broadcasted_recipients_ids : null,

    is_message_broadcast_mode_on : function() {
        return localStorage.er_message_broadcast == 'true';
    },
    set_message_broadcast_mode_on : function() {
        localStorage.er_message_broadcast = 'true';
    },
    set_message_broadcast_mode_off : function() {
        localStorage.er_message_broadcast = 'false';
        localStorage.er_message_broadcast_current_bunch = this.CONST_BROADCAST_ENDED;
        this.tab_delete_mode_broadcast();
    },

    is_search_for_message_broadcast_mode_on : function() {
        return localStorage.er_message_job_search_next == 'true';
    },
    set_search_for_message_broadcast_mode_on : function() {
        localStorage.er_message_job_search_next = 'true';
    },
    set_search_for_message_broadcast_mode_off : function() {
        localStorage.er_message_job_search_next = 'false';
        this.tab_delete_mode_collect();
    },

    tab_add_mode_collect : function() {
        er_tabs_control.add_active_mode('er_message_job_search_next');
    },
    tab_delete_mode_collect : function() {
        er_tabs_control.delete_active_mode('er_message_job_search_next');
    },
    tab_is_active_in_collect : function() {
        return er_tabs_control.is_mode_active('er_message_job_search_next');
    },
    tab_add_mode_broadcast : function() {
        er_tabs_control.add_active_mode('er_message_broadcast');
    },
    tab_delete_mode_broadcast : function() {
        er_tabs_control.delete_active_mode('er_message_broadcast');
    },
    tab_is_active_in_broadcast : function() {
        return er_tabs_control.is_mode_active('er_message_broadcast');
    },

    is_limits_are_safe : function() {
        var limit = Number(this.get_message_broadcast_limit());
        var period = Number(this.get_message_broadcast_period());

        if (isNaN(limit) || isNaN(period))
            return false;

        var x = 24 * limit / period;
        return x <= this.WARNING_THRESHOLD_LIMIT;
    },

        /**
     * Запускает сборку идентификаторов пользователей со страницы поиска
     * для составления очереди отправки
     */
    start_collect_user_ids : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    window.localStorage.er_message_job_search_next = 'true';
                    that.tab_add_mode_collect();
                    that.collect_user_ids();
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },

    /**
     * Запускает широковещательну отправку
     */
    start_send_messages : function() {
        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that.init_limits();
                    localStorage.er_message_broadcast_current_bunch = that.CONST_BROADCAST_STARTED;
                    localStorage.er_message_broadcast_sent_in_current_bunch = 0;

                    localStorage.er_message_broadcast = 'true';
                    that.tab_add_mode_broadcast();
                    that._wait_for_task();
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },

    /**
     * Инициализирует лимиты по отправке сообщений
     */
    init_limits : function() {
        // КОЛИЧЕСИТВО СООБЩЕНИЙ ДЛЯ ОТПРАВКИ ЗА ПЕРИОД
        /*if(localStorage.er_message_broadcast_limit == this.DEFAULT_SEND_LIMIT_UNSET_VALUE) {
            this.send_limit_per_period = this.DEFAULT_SEND_LIMIT_UNSET_VALUE;
        } else {
            this.send_limit_per_period = Number(localStorage.er_message_broadcast_limit);
            if (isNaN(this.send_limit_per_period) || this.send_limit_per_period == 0) {
                this.send_limit_per_period = this.DEFAULT_SEND_LIMIT_PER_PERIOD;
                localStorage.er_message_broadcast_limit = this.DEFAULT_SEND_LIMIT_PER_PERIOD;
            }
        }*/
        this.send_limit_per_period = this.get_message_broadcast_limit();

        // ПЕРЕРЫВ В ЧАСХ МЕЖДУ ОТПРАВКАМИ
        /*if(localStorage.er_message_broadcast_period == this.DEFAULT_SEND_PERIOD_UNSET_VALUE) {
            this.send_period_hours = this.DEFAULT_SEND_PERIOD_UNSET_VALUE;
        } else {
            this.send_period_hours = Number(localStorage.er_message_broadcast_period);
            if (isNaN(this.send_period_hours) || this.send_period_hours == 0) {
                this.send_period_hours = this.DEFAULT_SEND_PERIOD_HOURS;
                localStorage.er_message_broadcast_period = this.DEFAULT_SEND_PERIOD_HOURS;
            }
        }*/
        this.send_period_hours = this.get_message_broadcast_period();
    },

    get_message_broadcast_limit : function() {
        var result;
        if(localStorage.er_message_broadcast_limit == this.DEFAULT_SEND_LIMIT_UNSET_VALUE) {
            result = this.DEFAULT_SEND_LIMIT_UNSET_VALUE;
        } else {
            result = Number(localStorage.er_message_broadcast_limit);
            if (isNaN(result) || result == 0) {
                result = this.DEFAULT_SEND_LIMIT_PER_PERIOD;
                localStorage.er_message_broadcast_limit = this.DEFAULT_SEND_LIMIT_PER_PERIOD;
            }
        }

        return result;
    },
    set_message_broadcast_limit : function(newVal) {
        newVal = Number(newVal);
        if(isNaN(newVal) || newVal == 0) {
            localStorage.er_message_broadcast_limit = er_message_broadcast.DEFAULT_SEND_LIMIT_UNSET_VALUE;
            this.send_limit_per_period = er_message_broadcast.DEFAULT_SEND_LIMIT_UNSET_VALUE;
        } else {
            localStorage.er_message_broadcast_limit = newVal;
            this.send_limit_per_period = newVal;
        }
    },

    get_message_broadcast_period : function() {
        var result;
        if(localStorage.er_message_broadcast_period == this.DEFAULT_SEND_PERIOD_UNSET_VALUE) {
            result = this.DEFAULT_SEND_PERIOD_UNSET_VALUE;
        } else {
            result = Number(localStorage.er_message_broadcast_period);
            if (isNaN(result) || result == 0) {
                result = this.DEFAULT_SEND_PERIOD_HOURS;
                localStorage.er_message_broadcast_period = this.DEFAULT_SEND_PERIOD_HOURS;
            }
        }
        return result;
    },
    set_message_broadcast_period : function(newVal) {
        newVal = Number(newVal);
        if(isNaN(newVal) || newVal == 0) {
            localStorage.er_message_broadcast_period = er_message_broadcast.DEFAULT_SEND_PERIOD_UNSET_VALUE;
            this.send_period_hours = er_message_broadcast.DEFAULT_SEND_PERIOD_UNSET_VALUE;
        } else {
            localStorage.er_message_broadcast_period = newVal;
            this.send_period_hours = newVal;
        }
    },


/*
    /!**
     * Добавляет мини профиль в таблицу мини-профилей будующих получателей рассылки
     * @param profile
     * @private
     *!/
    _add_recipient_mini_profile_to_DB : function(profile) {
        return er_mini_profiles_db.push_profile(profile);

        /!*var deferred = $.Deferred();
        var transaction = this.er_indexedDB.transaction([this.CONST_TABLE_MINI_PROFILES], "readwrite");
        var objectStore = transaction.objectStore(this.CONST_TABLE_MINI_PROFILES);
        var request = objectStore.add(profile);

        transaction.oncomplete = function(event) {
            console.log("Transaction completed.");
            deferred.resolve();
        };

        return deferred.promise();*!/
    },*/

    _add_recipients_mini_profiles_to_DB_second : function(profiles, deferred) {
        return er_mini_profiles_db.push_profiles(profiles);
    },

    move_ids_from_recipients_queue_to_excluded : function(ids) {
        er_message_recipients.delete_ids(ids);
        er_broadcast_excluded.set_ids_as_excluded(ids);
    },
    move_ids_from_recipients_queue_to_processed : function(ids) {
        er_message_recipients.delete_ids(ids);
        er_broadcasted_recipients.set_ids_as_broadcasted(ids);
    },
    move_ids_from_processed_to_excluded : function(ids) {
        er_broadcasted_recipients.delete_ids(ids);
        er_broadcast_excluded.set_ids_as_excluded(ids);
    },
    move_ids_from_processed_to_recipients_queue : function(ids) {
        er_broadcasted_recipients.delete_ids(ids);
        er_message_recipients.add_ids_to_recipients_ids_without_check(ids);
    },
    move_ids_from_excluded_to_processed : function(ids) {
        er_broadcast_excluded.remove_ids_from_excluded_ids(ids);
        er_broadcasted_recipients.set_ids_as_broadcasted(ids);
    },
    move_ids_from_excluded_to_recipients_queue : function(ids) {
        er_broadcast_excluded.remove_ids_from_excluded_ids(ids);
        er_message_recipients.add_ids_to_recipients_ids_without_check(ids);
    },
    move_ids_from_recipients_queue_to_error : function(ids) {
        er_message_recipients.delete_ids(ids);
        er_broadcast_error.set_ids_as_error(ids);
    },
    move_ids_from_error_to_recipients_queue : function(ids) {
        er_broadcast_error.remove_ids_from_error_ids(ids);
        er_message_recipients.add_ids_to_recipients_ids_without_check(ids);
    },

    /**
     * Удаляет получателей из очереди на рассылку
     * @param ids
     * @param callback
     */
    delete_recipients_by_ids : function(ids, callback) {
        er_message_recipients.delete_ids(ids);
        if (callback)
            callback();
        return;
    },

/**
     * Собирает идентификаторы всех контактов в поисковом запросе
     */
    collect_user_ids : function() {
        var that = this;

        if(!this.is_search_for_message_broadcast_mode_on())
            return;

        if(er_utils.is_my_connections_page()) {
            er_broadcast_my_connections_collector.collect();
        } else {
            that._collect_user_ids_single_page()
                .then(function() {
                    if(er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page()) {
                        er_search_page_helper._ns_sn_load_next_page()
                            .then(function(is_not_last_page) {
                                if(is_not_last_page)
                                    setTimeout(that.collect_user_ids.bind(that), 300);
                                else {
                                    localStorage.er_message_job_search_next = 'false';
                                    that.tab_delete_mode_collect();
                                }
                            });
                    } else {
                        that._in_search_load_next_page();
                    }
                });
        }

        /*var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that._collect_user_ids_single_page()
                        .then(function() {
                            if(er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page()) {
                                er_search_page_helper._ns_sn_load_next_page()
                                    .then(function(is_not_last_page) {
                                        if(is_not_last_page)
                                            setTimeout(that.collect_user_ids.bind(that), 300);
                                        else {
                                            localStorage.er_message_job_search_next = 'false';
                                            that.tab_delete_mode_collect();
                                        }
                                    });
                            } else {
                                that._in_search_load_next_page();
                            }
                        });
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);*/
    },

    /**
     * Собирает идентификаторы всех найденных контактов на странице
     * @private
     */
    _collect_user_ids_single_page : function(deferred) {
        console.log('_collect_user_ids_single_page : START');
        var that = this;
        if(!deferred)
            deferred = $.Deferred();

        if(!this.is_search_for_message_broadcast_mode_on()) {
            console.log('_collect_user_ids_single_page : REJECT - search_for_message_broadcast_mode is OFF');
            deferred.reject();
            return deferred.promise();
        }

        er_search_page_helper.wait_people_card_load_and_extract_single_page()
            .then(function(mini_profiles) {
                var ids = ER_Profile_Mini.static.get_profiles_ids_from_profiles_arr(
                    mini_profiles,
                    { dists : [1, 10] }
                );
                er_message_recipients.add_ids_to_recipients_ids(ids);
                console.log('_collect_user_ids_single_page : DONE');
                deferred.resolve();
            });

        var jq_peoples = er_search_page_helper.get_jq_mini_profiles();

        if(jq_peoples.length == 0) {
            console.log('_collect_user_ids_single_page : WAIT FOR CONTACTS');
            setTimeout(function() { that._collect_user_ids_single_page(deferred) }, 100);
            return deferred.promise();
        }

        //this._ns_scroll_through_profiles(jq_peoples)
        /*er_utils.scroll_page_down_by_screens()
            .then(function() {
                var jq_peoples = er_search_page_helper.get_jq_mini_profiles();

                er_search_page_helper.scroll_through_profiles(jq_peoples)
                    /!*.then(this._init_recipients_mini_profiles_DB())*!/
                    .then(function(){
                        var ids = [], profiles = [];

                        // Вытягиваем объекты мини-профилей
                        for(var i= 0, jq_people, profile, id; i<jq_peoples.length; i++) {
                            jq_people = $(jq_peoples[i]);
                            profile = er_search_page_helper._extract_mini_profile(jq_people);
                            //id = jq_people.attr('data-li-entity-id');
                            if (profile.id != null) {
                                //ids.push(Number(profile.id));
                                ids.push(profile.id);
                                profiles.push(profile);
                            }
                        }

                        er_message_recipients.add_ids_to_recipients_ids(ids);

                        that._add_recipients_mini_profiles_to_DB_second(profiles)
                            .then(function() {
                                deferred.resolve();
                                console.log('_collect_user_ids_single_page : DONE');
                            });

                    });
            });
*/

        return deferred.promise();
    },
    /*_ns_scroll_through_profiles : function(jq_peoples) {
        var deferred = $.Deferred();

        if(!er_utils.is_new_style_page() && !er_utils.is_sales_navigator_search_page()) {
            deferred.resolve();
            return deferred.promise();
        }

        var promise = $.when();
        var that = this;

        jq_peoples.each(function(index) {
            var jq_people = $(this);
            promise = promise.then(function() {
                return er_utils.scroll_to_element_promise(jq_people, 200);
            });
        });
        promise.then(er_utils.wait_promise(300))
            .then(function() {
                deferred.resolve();
            });

        return deferred.promise();
    },*/

    /**
     * Заугружает следующую страницу результатов поиска
     * @private
     */
    _in_search_load_next_page : function() {
        var jq_btn_next = $('.next .page-link');
        if (jq_btn_next.length > 0) {
            console.log('_in_search_load_next_page : going to next page');
            jq_btn_next.click();
            var href = jq_btn_next.attr('href');
            window.location.assign(href);
        } else {
            console.log('_in_search_load_next_page : next page not found');
            window.localStorage.er_message_job_search_next = 'false';
            this.tab_delete_mode_collect();
        }
    },
    /**
     * Загружает следующую страницу результатов поиска
     * если она есть, то вернет true
     * @returns {boolean}
     * @private
     */
    /*_ns_load_next_page : function() {
        var deferred = $.Deferred();
        var old_num = this._ns_get_current_page_number();

        var jq_btn_next = $('.results-paginator button.next');
        if (jq_btn_next.length > 0) {
            jq_btn_next.click();
            return true;
        } else {
            window.localStorage.er_message_job_search_next = 'false';
            return false;
        }
    },*/

    insert_message_to_message_field_deferred : function() {
        var deferred = $.Deferred();

        var that = this;

        var id = this._get_current_user_id_from_page();
        er_mini_profiles_db.get_profile(id)
            .then(function(mini_profile) {
                if(!mini_profile)
                    mini_profile = that.build_mini_profile_from_page();

                var message = that._generate_message_text_from_mini_profile_object(mini_profile);
                var jq_textarea = that._get_message_textarea();
                er_utils.insert_or_imitate_writing(
                    message,
                    jq_textarea,
                    er_message_broadcast_timeouts.get_message_mode(),
                    function() {
                        //jq_textarea.val(message);
                        jq_textarea.focusout().keyup().change();
                        er_logger.log('Message set');
                        deferred.resolve();
                    }
                );
            });

        return deferred.promise();
    },
    build_mini_profile_from_page : function() {
        var jq_pillbox_container = this.get_jq_pillbox_container();

        var rez = this._get_user_firstname_lastname(jq_pillbox_container);

        var mini_profile = new ER_Profile_Mini(rez);
        return mini_profile;
    },

    /**
     * Генерирует и Вставляет сообщение в поле ввода сообщения
     */
    insert_message_to_message_field : function() {
        var jq_pillbox_container = this.get_jq_pillbox_container();
        /*if(er_utils.is_new_style_page())
            jq_pillbox_container = $('.msg-compose-container__to-field');
        else
            jq_pillbox_container = $('#pillbox-container');*/

        /*var firstname = this._get_user_firstname(jq_pillbox_container);*/
        var rez = this._get_user_firstname_lastname(jq_pillbox_container);
        var message = this._generate_message_text(rez.firstname, rez.lastname);
        this._put_message_text(message);
    },

    get_jq_pillbox_container : function() {
        var jq_pillbox_container;
        if(er_utils.is_new_style_page())
            jq_pillbox_container = $('.msg-compose-container__to-field');
        else
            jq_pillbox_container = $('#pillbox-container');

        return jq_pillbox_container;
    },

    write_message_and_send : function() {
        if (! this._on_before_message_send())
            return;

        var that = this;

        var evtPK = document.createEvent("CustomEvent");
        evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
            function(result) {
                if (result) {
                    that._write_message_and_send_license_ok();
                } else {
                    that._on_license_not_valid();
                }
            }
        );
        window.dispatchEvent(evtPK);
    },

    _write_message_and_send_license_ok : function() {
        if (! this._on_before_message_send())
            return;

        var that = this;

        this._check_id_before_sending()
            .then(function() {
                if(that._check_page_before_sending()) {
                    that._write_message_and_send_after_checks();
                }
            })
    },

    _write_message_and_send_after_checks : function() {
        var that = this;

        var jq_pillbox_container = this.get_jq_pillbox_container();
        /*if(er_utils.is_new_style_page())
         jq_pillbox_container = $('.msg-compose-container__to-field');
         else
         jq_pillbox_container = $('#pillbox-container');*/

        var jq_textarea = this._get_message_textarea();

        if( (jq_pillbox_container.length == 0 || jq_textarea.length == 0)
            && !er_utils.is_sales_navigator_profile_page()
        ) {
            setTimeout(function(){ that._write_message_and_send_after_checks() }, 100);
            return;
        }
        if (er_utils.is_sales_navigator_profile_page()) {
            if (jq_textarea.length == 0) {
                setTimeout(function() {
                    er_sn_profile_helper.open_message_popup_deferred()
                        .then(that._write_message_and_send_after_checks.bind(that));
                }, er_message_broadcast_timeouts.get_random_timeout('click_message'));
                return;
            }
        }

        var id = this._get_user_id_from_url();
        if (id == null)
            id = this._get_user_id_from_pillbox_container(jq_pillbox_container);
        //this.insert_message_to_message_field();

        if(!this._check_page_before_sending())
            return;

        setTimeout(function() {
            that.insert_message_to_message_field_deferred()
                .then(function() {
                    setTimeout(function(){
                        that._click_send()
                            .then(function(){
                                // Удаляем текущий идентификатор пользователя из массвива на отправку
                                er_message_recipients.delete_first_id_from_queue();
                                er_broadcasted_recipients.add_id_to_broadcasted_recipients_ids(id);

                                that._on_message_sent();
                            });
                    }, er_message_broadcast_timeouts.get_random_timeout('click_send'));
                });
        }, er_message_broadcast_timeouts.get_random_timeout('insert_message'));

    },

    _check_id_before_sending : function() {
        var deferred = $.Deferred();

        var id = this._get_user_id_from_url();
        if (id == null) {
            deferred.resolve(true);
        } else {
            var next_id = this._get_next_user_id();
            if (next_id != id) {
                this._wait_for_task();
                return deferred.promise();
            } else {
                if(er_utils.is_sales_navigator_profile_page()) {
                    var that = this;
                    this._sn_check_id_before_sending()
                        .then(function(rez) {
                            if(rez)
                                deferred.resolve(true);
                            else {
                                that._wait_for_task();
                            }
                        })
                } else {
                    deferred.resolve(true);
                }
            }
        }

        return deferred.promise();
    },
    _sn_check_id_before_sending : function() {
        var deferred = $.Deferred();

        var id = this._get_user_id_from_url();
        var that = this;

        er_sn_profile_helper._export_to_db_current_profile_page()
            .then(er_sn_profile_helper.extract_and_store_profile_id_map_to_snid.bind(er_sn_profile_helper))
            .then(function() {
                that._get_next_user_id_sn_check_deferred()
                    .then(function(next_id) {
                        if(id == next_id)
                            deferred.resolve(true);
                        else
                            deferred.resolve(false);
                    });
            });


        return deferred.promise();
    },

    _check_page_before_sending : function() {
        var is_deleted_profile = this._is_deleted_profile();
        var is_not_1st_connection = this._not_1st_connection();

        if(is_deleted_profile || is_not_1st_connection) {
            var next_id = this._get_next_user_id();

            if(next_id != null) {
                var error_code;
                if(is_deleted_profile) {
                    er_logger.log('Deleted profile ID='+next_id);
                    new ERLH_W_Message({ message : 'Skipping...' });
                    error_code = er_broadcast_error.error_codes.profile_not_found;
                } else if(is_not_1st_connection) {
                    er_logger.log('Not a first connection ID='+next_id);
                    new ERLH_W_Message({ message : 'Skipping... This contact is not your first connection!' });
                    error_code = er_broadcast_error.error_codes.myself_or_not_first;
                }

                er_broadcast_error.set_id_as_error_with_code(next_id, error_code);
                this.move_ids_from_recipients_queue_to_error([next_id]);
                this._wait_for_task();
                return false;
            }
        }
        return true;
    },

    /**
     * Обрабатывает перед отправкой сообщения
     * @returns {boolean}
     * @private
     */
    _on_before_message_send : function() {
        var wait = er_license_limit.when_can_continue_messages();
        if (wait > 0) {
            setTimeout(this.write_message_and_send.bind(this), wait);
            return false;
        }

        this.init_limits();

        if(this.send_limit_per_period != this.DEFAULT_SEND_LIMIT_UNSET_VALUE
            && this.send_period_hours != this.DEFAULT_SEND_PERIOD_UNSET_VALUE
            && localStorage.er_message_broadcast_current_bunch == this.CONST_BROADCAST_ENDED) {
            // Отправка текущего периода завершена

            var currDate = new Date();
            var nextStartDate = localStorage.er_message_broadcast_next_bunch_starts_at;
            if (nextStartDate == null || nextStartDate == '') {
                this._start_next_broadcast_period();
            } else {
                nextStartDate = new Date(JSON.parse(nextStartDate));
                var diff = nextStartDate.getTime() - currDate.getTime();
                if (diff <= 0) {
                    this._start_next_broadcast_period();
                } else {
                    // СПИМ ДО НАЧААЛА СЛЕДУЮЩЕГО ПЕРИОДА
                    setTimeout(this._start_next_broadcast_period.bind(this), diff);
                }
            }
            // Сейчас еще рано отрпавлять
            return false;
        }
        // Надо отправлять дальше
        return true;
    },

    /**
     * Выполяенеят обработку после того, как сообщение было отправлено
     * @private
     */
    _on_message_sent : function() {
        er_license_limit._increase_messages_counter();
        var er_message_broadcast_sent_in_current_bunch = Number(localStorage.er_message_broadcast_sent_in_current_bunch);
        if (isNaN(er_message_broadcast_sent_in_current_bunch))
            er_message_broadcast_sent_in_current_bunch = 0;
        er_message_broadcast_sent_in_current_bunch++;

        localStorage.er_message_broadcast_sent_in_current_bunch = er_message_broadcast_sent_in_current_bunch;

        if(this.send_limit_per_period != this.DEFAULT_SEND_LIMIT_UNSET_VALUE
            && this.send_period_hours != this.DEFAULT_SEND_PERIOD_UNSET_VALUE
            && er_message_broadcast_sent_in_current_bunch >= this.send_limit_per_period) {
            // Отправили сообщений согласно лимиту на текущую рассылку

            // Указываем, что рассылка на теущий период завершена
            localStorage.er_message_broadcast_current_bunch = this.CONST_BROADCAST_ENDED;
            // Вычисляем дату, когда должны заново запуститься
            var date = new Date();
            var wait_milli_seconds = 3600000*this.send_period_hours;
            date.setTime(date.getTime() + wait_milli_seconds);
            // КОГДА ДОЛЖНА ЗАПУСТИТЬСЯ СЛЕДУЮЩАЯ ОТПРАВКА
            localStorage.er_message_broadcast_next_bunch_starts_at = JSON.stringify(date);

            // СПИМ ДО НАЧААЛА СЛЕДУЮЩЕГО ПЕРИОДА
            setTimeout(this._start_next_broadcast_period.bind(this), wait_milli_seconds);
            new ER_W_Timeout_Clock({
                timeout : wait_milli_seconds,
                techname : 'broadcast_next_period',
                description : 'Start next iteration of broadcast'
            });
        } else {
            setTimeout(this._wait_for_task.bind(this), er_message_broadcast_timeouts.get_random_timeout('go_to_next_contact'));
        }
    },

    /**
     * Запускает следующий период отпраки сообщений
     * @private
     */
    _start_next_broadcast_period : function() {
        // Сбарсываем счетчик отправлений
        localStorage.er_message_broadcast_sent_in_current_bunch = 0;
        // Указываем, что рассылка на теущий период завершена
        localStorage.er_message_broadcast_current_bunch = this.CONST_BROADCAST_STARTED;

        this._wait_for_task();

        $(document).trigger(this.EVENT_NEXT_BROADCAST_BUNCH_STARTED);
    },

    /**
     * Запускает отправку следюущему пользователю, если есть запись в очереди
     * иначе ждет пополнения очереди
     *
     * @private
     */
    _wait_for_task : function() {
        var that = this;
        this._get_next_user_id_sn_check_deferred()
            .then(function(next_user_id) {
                if (next_user_id)
                    setTimeout(function(){ that._go_to_user_message_page(next_user_id) }, er_utils.getRandomInt(100,300));
                else
                    setTimeout(function(){ that._wait_for_task() }, 10000);
            });
        /*var next_user_id = this._get_next_user_id();*/
    },
    /**
     * Возвращает ID следующего пользователя для получения сообщения
     *
     * @returns {*}
     * @private
     */
    _get_next_user_id : function() {
        var ids_for_send = er_message_recipients.get_recipients_ids();
        if (ids_for_send.length == 0)
            return null;

        var next_id = ids_for_send[0];

        if (this._check_is_id_processed_or_excluded(next_id)) {
            er_message_recipients.delete_first_id_from_queue();

            return this._get_next_user_id();
        } else {
            return next_id;
        }
    },
    _get_next_user_id_sn_check_deferred : function(deferred) {
        if(!deferred)
            deferred = $.Deferred();

        var next_id = this._get_next_user_id();
        if (next_id == null) {
            deferred.resolve(null);
            return deferred.promise();
        }

        var that = this;

        var is_sale_navigator_user_id = er_utils.is_sales_navigator_profile_id(next_id);
        if(is_sale_navigator_user_id) {
            er_sn_ids_map_db.get_map_snid(next_id)
                .then(function(map) {
                    if(map) {
                        var is_id_processed_or_excluded = that._check_is_id_processed_or_excluded(map.id);
                        if (is_id_processed_or_excluded) {
                            er_message_recipients.delete_first_id_from_queue();
                            that._get_next_user_id_sn_check_deferred(deferred);
                        } else {
                            deferred.resolve(next_id);
                        }
                    } else {
                        deferred.resolve(next_id);
                    }

                });
        } else {
            er_sn_ids_map_db.get_map(next_id)
                .then(function(map) {
                    if(map) {
                        var is_id_processed_or_excluded = that._check_is_id_processed_or_excluded(map.snid);
                        if (is_id_processed_or_excluded) {
                            er_message_recipients.delete_first_id_from_queue();
                            that._get_next_user_id_sn_check_deferred(deferred);
                        } else {
                            deferred.resolve(next_id);
                        }
                    } else {
                        deferred.resolve(next_id);
                    }

                });
        }

        return deferred.promise();
    },
    _check_is_id_processed_or_excluded : function(id) {
        return er_broadcasted_recipients.is_id_broadcasted(id)
            || er_broadcast_excluded.is_id_excluded(id)
    },

    /**
     * Возврашает id пользователя, которому отправляем сообщение
     *
     * @returns {*}
     * @private
     */
    _get_user_id_from_url : function() {
        var href = er_utils.escape_url(window.location.href);

        if (er_utils.is_sales_navigator_profile_page()) {
            return er_utils.get_profile_id_from_url_profile_page(href);
        }

        var connId;
        if(er_utils.is_new_style_page())
            connId = 'recipient=';
        else
            connId = 'connId=';

        var id_begin = href.indexOf(connId);
        if (id_begin < 0)
            return null;

        id_begin += connId.length;

        var id_end = href.indexOf('&', id_begin+1);
        var id;
        if (id_end < 0) {
            id = href.substr(id_begin);
        } else {
            id = href.substr(id_begin, id_end - id_begin);
        }
        if(er_utils.is_new_style_page())
            return id;
        else
            //return Number(id);
            return id;
    },
    _get_user_id_from_pillbox_container : function(jq_pillbox_container) {
        var jq_pill = jq_pillbox_container.find('.pill');
        //return Number(jq_pill.attr('data-member-id'));
        return jq_pill.attr('data-member-id');
    },

    _get_current_user_id_from_page : function() {
        var jq_pillbox_container = this.get_jq_pillbox_container();

        var id = this._get_user_id_from_url();
        if (id == null)
            id = this._get_user_id_from_pillbox_container(jq_pillbox_container);

        return id;
    },

    _get_user_firstname_from_pillbox_container : function(jq_pillbox_container) {
        var jq_pill_name;
        if(er_utils.is_new_style_page())
            jq_pill_name = jq_pillbox_container.find('.msg-connections-lookup__recipient-name');
        else
            jq_pill_name = jq_pillbox_container.find('.pill-name');

        var text = jq_pill_name.text();
        var pos_end_firstname = text.indexOf(' ');
        if (pos_end_firstname < 0)
            return text;
        else {
            return text.substr(0, pos_end_firstname);
        }
    },
    _get_user_fullname_from_pillbox : function(jq_pillbox_container) {
        var jq_pill_name;
        if(er_utils.is_new_style_page())
            jq_pill_name = jq_pillbox_container.find('.msg-connections-lookup__recipient-name');
        else
            jq_pill_name = jq_pillbox_container.find('.pill-name');
        return jq_pill_name.text();
    },
    _get_user_firstname : function(jq_pillbox_container) {
        //var obj = this._get_user_names_from_pillbox_container(jq_pillbox_container);
        var fullname = this._get_user_fullname_from_pillbox(jq_pillbox_container);
        return er_utils.get_translated_firstname_from_fullname(fullname);
    },
    _get_user_firstname_lastname : function(jq_pillbox_container) {
        //var obj = this._get_user_names_from_pillbox_container(jq_pillbox_container);
        var fullname = this._get_user_fullname_from_pillbox(jq_pillbox_container);
        return er_utils.get_translated_firstname_lastname_from_fullname(fullname);
    },
    /*_get_user_names_from_pillbox_container : function(jq_pillbox_container) {
        var jq_pill_name = jq_pillbox_container.find('.pill-name');
        var text = jq_pill_name.text();
        var pos_end_firstname = text.indexOf(' ');
        var obj = {};
        if (pos_end_firstname < 0) {
            obj.firstname = text;
        } else {
            obj.firstname = text.substr(0, pos_end_firstname);
            obj.lastname = text.substr(pos_end_firstname+1);
        }
        return obj;
    },*/
    /*_guess_firstname : function(posible_firstname, posible_lastname) {
        var r_firstname, r_lastname;
        if (localStorage.er_names_eng_to_rus == 'true') {
            r_firstname = er_utils.convert_name_eng_to_rus(posible_firstname);
            r_lastname = posible_lastname ? er_utils.convert_name_eng_to_rus_with_null(posible_lastname) : null;
            if (r_lastname) {
                r_firstname = r_lastname;
            }
        } else if (localStorage.er_names_rus_to_eng == 'true')
            r_firstname = er_translit(posible_firstname, 5);
        else
            r_firstname = posible_firstname;
        //if(r_firstname.toLowerCase() )

        return r_firstname;
    },*/
    _generate_message_text : function(firstname, lastname) {
        /*if (localStorage.er_names_eng_to_rus == 'true')
            firstnname = er_utils.convert_name_eng_to_rus(firstnname);
        else if (localStorage.er_names_rus_to_eng == 'true')
            firstnname = er_translit(firstnname, 5);*/

        var variables = {
            firstname : firstname,
            lastname : lastname
        };

        return this._generate_message_text_from_mini_profile_object(variables);

        //return localStorage.er_message_template.replace(/{firstname}/g,firstnname).replace(/{lastname}/g,lastname);
    },
    _generate_message_text_from_mini_profile_object : function(mini_profile) {
        var defaults = {
            position : localStorage.er_message_position,
            company : localStorage.er_message_company
        };

        return er_utils.message_generator(localStorage.er_message_template, mini_profile, defaults);
    },
    _get_message_textarea : function() {
        var jq_compose_message;
        if(er_utils.is_new_style_page())
            jq_compose_message = $('textarea.msg-compose-form__message-text');
        else if (er_utils.is_sales_navigator_profile_page())
            jq_compose_message = er_sn_profile_helper.get_message_popup_textarea();
        else
            jq_compose_message = $('#compose-message');

        return jq_compose_message;
    },
    _put_message_text : function(text) {
        var jq_compose_message = this._get_message_textarea();

        jq_compose_message.val(text);
        jq_compose_message.focusout().keyup();
    },
    _get_subject_field : function() {
        var jq_subject;
        if(er_utils.is_new_style_page())
            jq_subject = $('input.msg-inmail-compose-form__subject');
        else if (er_utils.is_sales_navigator_profile_page())
            jq_subject = $('#subject');
        return jq_subject;
    },
    _click_send : function(deferred) {
        if (!deferred)
            deferred = $.Deferred();

        if(er_utils.is_new_style_page()) {
            var btn_send = $('button.msg-compose-form__send-button').first();
            if (btn_send.length == 0) {
                btn_send = $('button.msg-inmail-compose-form__send-button').first();
            }

            if(btn_send.is(':disabled') || btn_send.length == 0) {
                if(btn_send.length == 0) {
                    console.error('_click_send : btn_send not found');
                }
                var that = this;
                setTimeout(function(){ that._click_send(deferred) }, 100);
            } else {
                btn_send.click();
                this._ns_wait_btn_send_became_inactive()
                    .then(function() { deferred.resolve() });
            }
        } if (er_utils.is_sales_navigator_profile_page()) {
            er_sn_profile_helper.click_send_message_and_wait_until_it_sent_deferred()
                .then(deferred.resolve.bind(deferred));
        } else {
            $('.message-submit').first().click();
            deferred.resolve();
        }

        return deferred.promise();
    },
    _ns_wait_btn_send_became_inactive : function(deferred) {
        if (!deferred)
            deferred = $.Deferred();

        var btn_send = $('button.msg-compose-form__send-button').first();

        if(btn_send.is(':disabled'))
            deferred.resolve();
        else {
            var that = this;
            setTimeout(function(){ that._ns_wait_btn_send_became_inactive(deferred) }, 100);
        }
        return deferred.promise();
    },
    /**
     * Генерирует линк для страницы отрпавки сообщения пользователю
     *
     * @param user_id
     * @private
     */
    _get_link_for_user_message_page : function(user_id) {
        if (er_utils.is_sales_navigator_profile_id(user_id)) {
            return er_utils._sn_get_profile_url_by_id(user_id);
        }

        if(er_utils.is_new_style_page() || er_utils.is_cached_as_new_style_page())
            return 'https://www.linkedin.com/messaging/compose/?after=profile.view&recipient='+user_id;
        else
            return 'https://www.linkedin.com/messaging/compose?connId='+user_id;
    },
    _go_to_user_message_page : function(user_id) {
        var url = this._get_link_for_user_message_page(user_id);
        window.location.assign(url);
        if(er_utils.is_new_style_page()) {
            var that = this;
            setTimeout(function() { that._ns_wait_to_page_load(user_id) }, 2000);
        }
    },
    _ns_wait_to_page_load : function(new_user_id) {
        var is_loaded = true;
        if (href.indexOf('linkedin.com/in/') >= 0 || href.indexOf('linkedin.com/profile/') >= 0)
            is_loaded = false;
        else if(href.indexOf(new_user_id) < 0)
            is_loaded = false;
        if (!is_loaded) {
            var that = this;
            setTimeout(function() { that._wait_for_task() }, 2000);
        }
    },

    _is_deleted_profile : function() {
        if(er_utils.is_new_style_page()) {
            var jq_btn_try_again = $('button.error-action');
            return jq_btn_try_again.length > 0;
        } else if (er_utils.is_sales_navigator_page()) {
            return er_sn_profile_helper.is_profile_page_error();
        }
        return false;
    },
    _not_1st_connection : function() {
        var jq_subject = this._get_subject_field();
        if(jq_subject.length == 0) {
            return false;
        } else {
            return true;
        }
    },

    delete_all_collected_recipients : function() {
        er_message_recipients.delete_all();
    },
    /*delete_all_broadcasted_recipients : function() {
        localStorage.er_message_done_peoples_ids = JSON.stringify([]);
    },*/
    delete_all : function() {
        er_broadcasted_recipients.clear_broadcasted_recipients_ids();
        this.delete_all_collected_recipients();
        localStorage.er_message_broadcast_sent_in_current_bunch = 0;
        localStorage.er_message_broadcast_current_bunch = this.CONST_BROADCAST_ENDED;
        delete localStorage.er_message_broadcast_next_bunch_starts_at;
    },

    _on_license_not_valid : function() {
        localStorage.er_message_job_search_next = 'false';
        this.tab_delete_mode_collect();
        localStorage.er_message_broadcast_current_bunch = this.CONST_BROADCAST_ENDED;
        localStorage.er_message_broadcast = 'false';
        this.tab_delete_mode_broadcast();
    },
};
/**
 * Created by Alex on 06.11.2016.
 */
function ER_Message_Broadcast_Select_View (options) {
    if(!options)
        options = {};
    this.options = options;
    this.jq_parent = options.jq_parent;
    this.filter = {
        id : '',
        fullname : '',
        description : '',
        ischecked : 0, // 0 - both, 1 - only checked, -1 - only unchecked
    };

    this.mode = this.options.mode ? this.options.mode : ER_Message_Broadcast_Select_View.const.modes.queue;
    this.profiles = {};
    this.jq_profiles = {};
    this.selected_profiles_ids = {};
    this.profiles_count = 0;
    this.selected_profiles_count = 0;
};

ER_Message_Broadcast_Select_View.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="er_broadcast_select_view" data-mode="'+this.mode+'">';
        html += this._HTML_build_main_content();
        html += '</div>';
        return html;
    },
    _HTML_build_main_content : function() {
        var html = '<div class="content">';
        html += '<p class="title"></p>';
        html += this._HTML_build_top_panel();
        html += this._HTML_build_profiles_cont();
        html += this._HTML_build_preloader();

        html += '</div>';
        return html;
    },
    _HTML_build_preloader : function() {
        return '<div class="preloader"><span class="img"></span></div>';
    },
    _HTML_build_top_panel : function() {
        var html = '<div class="top_panel">';
        html += this._HTML_build_tabs_panel();
        html += this._HTML_build_control_panel();
        html += this._HTML_build_filter_panel();
        html += '</div>';
        return html;
    },
    _HTML_build_tabs_panel : function() {
        var html = '<div class="tabs_panel">';

        html += this._HTML_build_tab('queue');
        html += this._HTML_build_tab('processed');
        html += this._HTML_build_tab('excluded');

        html += '</div>';
        return html;
    },
    _HTML_build_tab : function(name) {
        var set = name == this.mode ? ' set' : '';
        return '<span class="er_tab '+set+'" data-tab="'+name+'"></span>';
    },
    _HTML_build_control_panel : function() {
        var html = '<div class="control_panel">';
        html += '<button class="select_all"></button>';
        html += '<button class="deselect_all"></button>';
        html += '<button class="move_to_excluded"></button>';
        html += '<button class="move_to_processed"></button>';
        html += '<button class="move_to_queue"></button>';
        /*html += '<button class="save"></button>';*/
        html += '<button class="close"></button>';
        html += '<span class="count selected">0</span>';
        html += '<span class="count deselected">0</span>';
        html += '</div>';
        return html;
    },
    _HTML_build_filter_panel : function() {
        var html = '<div class="filter_panel">';
        html += '<span class="cont_filter_fullname"><input class="filter_fullname" type="text" placeholder="Name"></span>';
        html += '<span class="cont_filter_description"><input class="filter_description" type="text" placeholder="Position & company"></span>';
        html += '<span class="cont_filter_id"><input class="filter_id" type="text" placeholder="Profile Identifier"></span>';
        html += this._HTML_build_filter_checked_toggle();
        html += '</div>';
        return html;
    },
    _HTML_build_filter_checked_toggle : function() {
        var html = '<div class="b2ctoggle filter_checked_toggle">';
        html += '<span class="label"></span>';
        html += '<span class="values">' +
            '<span class="togglevalue unchecked left" data-val="unchecked"></span>' +
            '<span class="togglevalue all set" data-val="all"></span>' +
            '<span class="togglevalue checked right"  data-val="checked"></span>' +
            '</span>';
        html += '</div>';

        return html;
    },
    _HTML_build_profiles_cont : function() {
        var html = '<div class="profiles_cont"><table class="profiles_table">';
        html += '</table></div>';
        return html;
    },
    _HTML_build_profile_item : function(profile) {
        var html = '<tr class="item" data-id="'+profile.id+'">';
        html += '<td class="td_checkbox"><input class="checkbox" type="checkbox"></td>';
        html += '<td class="avatar"><a class="profile_url" href="'+profile.url+'"><img src="'+profile.avatar+'"></a></td>';
        html += '<td class="fullname_descr"><a class="profile_url fullname" href="'+profile.url+'">'+profile.fullname+'</a><div class="description">'+profile.description+'</div><div class="profile_id">'+profile.id+'</div></td>';
        html += '<td class="td_show_message"><button class="btn_show_message"></button></td>';

        html += '</tr>';
        return html;
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
        this._load_profiles();
    },
    _add_handlers : function() {
        var that = this;

        var jq_linkedin_top_header = $('#top-header');
        var jq_linkedin_responsive_nav_scrollable = $('#responsive-nav-scrollable');

        var linkedin_height = jq_linkedin_top_header.outerHeight() + jq_linkedin_responsive_nav_scrollable.outerHeight();
        //this.jq_main.height(window.screen.height - linkedin_height);
        this.jq_main.css('height', window.innerHeight - linkedin_height);
        this.jq_main.css('top', linkedin_height);

        var content_height = window.innerHeight - linkedin_height;
        var jq_content = this.jq_main.children('.content').css('height', content_height);

        var jq_title = jq_content.children('.title');
        var jq_top_panel = jq_content.children('.top_panel');
        var jq_profiles_cont = jq_content.children('.profiles_cont');
        var profiles_cont_height = content_height - jq_title.outerHeight() - jq_top_panel.outerHeight()-50;
        profiles_cont_height = Math.round(profiles_cont_height * 100 / content_height);
        //jq_profiles_cont.css('max-height', content_height - jq_title.outerHeight() - jq_top_panel.outerHeight()-10);
        jq_profiles_cont.css('height', profiles_cont_height+'%');

        this.jq_tabs_panel = this.jq_main.find('.tabs_panel');

        this.jq_tabs_panel.find('.er_tab').click(function() { that._on_tab_click($(this)) });

        this.jq_main.find('.select_all').click(this._on_click_btn_select_all.bind(this));
        this.jq_main.find('.deselect_all').click(this._on_click_btn_deselect_all.bind(this));

        this.jq_main.find('.move_to_queue').click(this._on_click_btn_move_to_queue.bind(this));
        this.jq_main.find('.move_to_processed').click(this._on_click_btn_move_to_processed.bind(this));
        this.jq_main.find('.move_to_excluded').click(this._on_click_btn_move_to_excluded.bind(this));

        this.jq_main.find('.save').click(this._on_click_btn_save.bind(this));
        this.jq_main.find('.close').click(this._on_click_btn_close.bind(this));

        this.jq_filter_fullname = this.jq_main.find('.filter_fullname').change(this._on_change_input_filter_fullname.bind(this));
        this.jq_filter_description = this.jq_main.find('.filter_description').change(this._on_change_input_filter_description.bind(this));
        this.jq_filter_id = this.jq_main.find('.filter_id').change(this._on_change_input_filter_id.bind(this));

        this.jq_profiles_table = this.jq_main.find('.profiles_table');

        this.jq_preloader = this.jq_main.find('.preloader');

        this.jq_count_selected = this.jq_main.find('.count.selected');
        this.jq_count_deselected = this.jq_main.find('.count.deselected');

        this.jq_filter_checked_toggle = this.jq_main.find('.filter_checked_toggle');
        this.jq_filter_checked_toggle.b2ctoggle({
            multiMode : false,
            onValueChange : this._on_filter_checked_toggle_state_change.bind(this)
        })
    },
    _load_profiles : function() {
        this._show_preloader();
        switch (this.mode) {
            case ER_Message_Broadcast_Select_View.const.modes.queue :
                er_message_recipients.get_recipients_mini_profiles(this._on_profiles_loaded.bind(this));
                break;
            case ER_Message_Broadcast_Select_View.const.modes.processed :
                er_broadcasted_recipients.get_broadcasted_recipients_mini_profiles(this._on_profiles_loaded.bind(this));
                break;
            case ER_Message_Broadcast_Select_View.const.modes.excluded :
                er_broadcast_excluded.get_excluded_mini_profiles(this._on_profiles_loaded.bind(this));
                break;
        }

    },
    _add_profiles : function(profiles) {
        for(var i=0; i<profiles.length; i++) {
            this._add_profile(profiles[i]);
        }
        this.jq_count_deselected.text(this.profiles_count);
    },
    _add_profile : function(profile) {
        this.profiles[profile.id] = profile;
        var html = this._HTML_build_profile_item(profile);
        var jq_profile = $(html).appendTo(this.jq_profiles_table);
        jq_profile.find('.checkbox').change(this._on_change_input_profile_item_checkbox.bind(this));
        jq_profile.find('.btn_show_message').click(this._on_click_btn_show_message.bind(this));
        this.jq_profiles[profile.id] = jq_profile;
        this.profiles_count++;
    },
    _show_preloader : function() {
        this.jq_preloader.addClass('show');
    },
    _hide_preloader : function() {
        this.jq_preloader.removeClass('show');
    },
    show : function() {
        this.jq_main.removeClass('hidden');
    },
    hide : function() {
        this.jq_main.addClass('hidden');
    },
    destroy : function() {
        this.profiles = {};
        this.jq_profiles = {};
        this.selected_profiles_ids = {};
        this.profiles_count = 0;
        this.selected_profiles_count = 0;
        this.jq_main.remove();
    },
    start_filter : function() {
        var jq_profile;
        for(var id in this.profiles) {
            jq_profile = this.jq_profiles[id];
            if(this._is_match_filter(id)) {
                jq_profile.removeClass('hidden');
            } else {
                jq_profile.addClass('hidden');
            }
        }
    },
    _is_match_filter : function(profile_id) {
        var profile = this.profiles[profile_id];
        if(this.filter.id != null && this.filter.id != '') {
            if (profile.id.toLowerCase().indexOf(this.filter.id) < 0)
                return false;
        }
        if(this.filter.fullname != null && this.filter.fullname != '') {
            if (!profile.fullname || profile.fullname.toLowerCase().indexOf(this.filter.fullname) < 0)
                return false;
        }
        if(this.filter.description != null && this.filter.description != '') {
            if (profile.description.toLowerCase().indexOf(this.filter.description) < 0)
                return false;
        }
        if(this.filter.ischecked == -1 && this.selected_profiles_ids[profile_id]) {
            return false;
        } else if(this.filter.ischecked == 1 && !this.selected_profiles_ids[profile_id]) {
            return false;
        }

        return true;
    },
    /**
     * Показать диалог
     * @private
     */
    show_yes_no_dialog : function(message, onYes, onNo) {
        var jqDialog = $('<div class="yes_no_dialog"></div>').appendTo(this.jq_main);
        jqDialog.b2cpopupyesnodialog({
            message : message,
            onYes : onYes,
            onNo : onNo,
            onClose : function() { jqDialog.remove() }
        });
        jqDialog.b2cpopupyesnodialog('show');
    },
    /**
     * Показывает всплывающее окно с указанным сообщением
     *
     * @param message {string}
     * @private
     */
    _info_popup_show : function(message) {
        if (this.jqInfoPopup == null) {
            var that = this;
            this.jqInfoPopup = $('<div class="b2c_info_popup"></div>').appendTo(this.jq_main).b2cpopup({
                html_content : '<p class="message"></p>',
                lightMode : true
            });
            this.jqInfoPopup.b2cpopup('getUserCont').click(function(event) { that.jqInfoPopup.b2cpopup('close'); });
        }
        this.jqInfoPopup.b2cpopup('getUserCont').text(message);
        this.jqInfoPopup.b2cpopup('show');
    },

    set_mode : function(mode) {
        this.mode = mode;
        this.jq_main.attr('data-mode', mode);
        this._adjust_tabs_to_mode();
        this._clear();

        this._load_profiles();
    },
    _adjust_tabs_to_mode : function() {
        this.jq_tabs_panel.find('.er_tab').removeClass('set');
        this.jq_tabs_panel.find('.er_tab[data-tab='+this.mode+']').addClass('set');
    },
    _clear : function() {
        this._clear_results();

        this.jq_count_selected.text(0);
        this.jq_count_deselected.text(0);

        this._clear_filters();

    },
    _clear_filters : function() {
        this.jq_filter_fullname.val('');
        this.jq_filter_description.val('');
        this.jq_filter_checked_toggle.b2ctoggle('set',
            [{val : 'unchecked', set : false}, {val : 'all', set : true}, {val : 'checked', set : false}]
        );

        this.filter = {
            id : '',
            fullname : '',
            description : '',
            ischecked : 0, // 0 - both, 1 - only checked, -1 - only unchecked
        };
    },
    _clear_results : function() {
        for(var id in this.jq_profiles) {
            this.jq_profiles[id].remove();
        }

        this.profiles = {};
        this.jq_profiles = {};
        this.selected_profiles_ids = {};
        this.profiles_count = 0;
        this.selected_profiles_count = 0;
    },

    _get_selected_profiles_ids_as_array : function() {
        var arr = [];

        for(var id in this.selected_profiles_ids)
            arr.push(id);

        return arr;
    },

    _delete_selected_from_widget : function() {
        var ids = this._get_selected_profiles_ids_as_array();
        this._delete_jq_profiles_by_ids(ids);

        for(var i=0; i<ids.length; i++) {
            delete this.profiles[ids[i]];
        }

        this.selected_profiles_ids = {};
        this.profiles_count -= ids.length;
        this.selected_profiles_count = 0;

        this.jq_count_selected.text(0);
        this.jq_count_deselected.text(this.profiles_count);
    },

    _delete_jq_profiles_by_ids : function(ids) {
        for(var i= 0, id; i<ids.length; i++) {
            id = ids[i];
            this.jq_profiles[ids[i]].remove();
            delete this.jq_profiles[id];
        }
    },

    _on_click_btn_save : function() {
        if(this.selected_profiles_count == 0) {
            //this.destroy();
        } else {
            this.show_yes_no_dialog(
                er_translator.get_text('message_broadcast_select_view', 'messages', 'save', er_gen_settings.get_current_language_id()),
                this._on_save_yes.bind(this)
            )
        }
    },
    _on_click_btn_close : function() {
        this.destroy();
        /*if(this.selected_profiles_count == 0)
            this.destroy();
        else {
            this.show_yes_no_dialog(
                er_translator.get_text('message_broadcast_select_view', 'messages', 'close', er_gen_settings.get_current_language_id()),
                this._on_close_and_discard_yes.bind(this)
            )
        }*/
    },
    _on_click_btn_select_all : function() {
        var jq_rows = this.jq_profiles_table.find('.item:not(.hidden)');

        var additional_selected = 0;
        for(var i= 0, jq_row, jq_input, id; i<jq_rows.length; i++) {
            jq_row = $(jq_rows[i]);
            jq_input = jq_row.find('input');
            if(!jq_input.prop('checked')) {
                id = jq_row.attr('data-id');
                this.selected_profiles_ids[id] = id;
                ++additional_selected;
                jq_input.prop('checked', true);
            }
        }

        this.selected_profiles_count += additional_selected;
        this.jq_count_selected.text(this.selected_profiles_count);
        this.jq_count_deselected.text(this.profiles_count - this.selected_profiles_count);
    },
    _on_click_btn_deselect_all : function() {
        var jq_rows = this.jq_profiles_table.find('.item:not(.hidden)');

        var additional_deselected = 0;
        for(var i= 0, jq_row, jq_input, id; i<jq_rows.length; i++) {
            jq_row = $(jq_rows[i]);
            jq_input = jq_row.find('input');
            if(jq_input.prop('checked')) {
                id = jq_row.attr('data-id');
                delete this.selected_profiles_ids[id];
                ++additional_deselected;
                jq_input.prop('checked', false);
            }
        }

        this.selected_profiles_count -= additional_deselected;
        this.jq_count_selected.text(this.selected_profiles_count);
        this.jq_count_deselected.text(this.profiles_count - this.selected_profiles_count);
    },
    _on_click_btn_move_to_queue : function() {
        this.show_yes_no_dialog(
            er_translator.get_text('message_broadcast_select_view', 'messages', 'move_to_queue', er_gen_settings.get_current_language_id()),
            this._on_move_to_queue_yes.bind(this)
        )
    },
    _on_move_to_queue_yes : function() {
        this._show_preloader();

        var ids = this._get_selected_profiles_ids_as_array();

        if(this.mode == ER_Message_Broadcast_Select_View.const.modes.processed) {
            er_message_broadcast.move_ids_from_processed_to_recipients_queue(ids);
        } else if(this.mode == ER_Message_Broadcast_Select_View.const.modes.excluded) {
            er_message_broadcast.move_ids_from_excluded_to_recipients_queue(ids);
        }

        this._delete_selected_from_widget();

        this._hide_preloader();
    },
    _on_click_btn_move_to_processed : function() {
        this.show_yes_no_dialog(
            er_translator.get_text('message_broadcast_select_view', 'messages', 'move_to_processed', er_gen_settings.get_current_language_id()),
            this._on_move_to_processed_yes.bind(this)
        );
    },
    _on_move_to_processed_yes : function() {
        this._show_preloader();

        var ids = this._get_selected_profiles_ids_as_array();

        if(this.mode == ER_Message_Broadcast_Select_View.const.modes.queue) {
            er_message_broadcast.move_ids_from_recipients_queue_to_processed(ids);
        } else if(this.mode == ER_Message_Broadcast_Select_View.const.modes.excluded) {
            er_message_broadcast.move_ids_from_excluded_to_processed(ids);
        }

        this._delete_selected_from_widget();

        this._hide_preloader();
    },
    _on_click_btn_move_to_excluded : function() {
        this.show_yes_no_dialog(
            er_translator.get_text('message_broadcast_select_view', 'messages', 'move_to_excluded', er_gen_settings.get_current_language_id()),
            this._on_move_to_excluded.bind(this)
        );
    },
    _on_click_btn_show_message : function(event) {
        var jq_btn_show_message = $(event.target);
        var jq_profile_item = jq_btn_show_message.closest('.item');
        var id = jq_profile_item.attr('data-id');
        var profile = this.profiles[id];
        //var rez = er_utils.get_translated_firstname_lastname_from_fullname(profile.fullname);
        //var message = er_message_broadcast._generate_message_text(rez.firstname, rez.lastname);
        var message = er_message_broadcast._generate_message_text_from_mini_profile_object(profile);
        //this._info_popup_show(message);
        var er_Textbox_Preview = new ER_Textbox_Preview({jq_parent : this.jq_main});
        er_Textbox_Preview.show('Message Preview', message);
    },
    _on_move_to_excluded : function() {
        this._show_preloader();

        var ids = this._get_selected_profiles_ids_as_array();

        if(this.mode == ER_Message_Broadcast_Select_View.const.modes.queue) {
            er_message_broadcast.move_ids_from_recipients_queue_to_excluded(ids);
        } else if(this.mode == ER_Message_Broadcast_Select_View.const.modes.processed) {
            er_message_broadcast.move_ids_from_processed_to_excluded(ids);
        }

        this._delete_selected_from_widget();

        this._hide_preloader();
    },
    _on_close_and_discard_yes : function() {
        this.destroy();
    },
    _on_tab_click : function(jq_tab) {
        if(jq_tab.hasClass('set'))
            return;
        var mode = jq_tab.attr('data-tab');
        this.set_mode(mode);
    },
    _on_save_yes : function() {
        this._show_preloader();
        var that = this;
        var ids = [];
        for(var id in this.selected_profiles_ids)
            ids.push(er_utils.is_new_style_page() || er_utils.is_sales_navigator_page() ? id : Number(id));

        er_message_broadcast.delete_recipients_by_ids(
            ids,
            function() {
                that.destroy();
            });
    },
    _on_change_input_filter_fullname : function() {
        this.filter.fullname = this.jq_filter_fullname.val().toLowerCase();
        this.start_filter();
    },
    _on_change_input_filter_description : function() {
        this.filter.description = this.jq_filter_description.val().toLowerCase();
        this.start_filter();
    },
    _on_change_input_filter_id : function() {
        this.filter.id = this.jq_filter_id.val().toLowerCase();
        this.start_filter();
    },
    _on_change_input_profile_item_checkbox : function(event) {
        var jq_checkbox = $(event.target);
        var jq_profile_item = jq_checkbox.closest('.item');
        var id = jq_profile_item.attr('data-id');
        if(!er_utils.is_new_style_page() && !er_utils.is_sales_navigator_page())
            id = Number(id);

        if (jq_checkbox.prop( "checked" )) {
            this.selected_profiles_ids[id] = id;
            this.selected_profiles_count++;
        } else {
            delete this.selected_profiles_ids[id];
            this.selected_profiles_count--;
        }
        var deselected = this.profiles_count - this.selected_profiles_count;

        this.jq_count_deselected.text(deselected);
        this.jq_count_selected.text(this.selected_profiles_count);
    },
    _on_filter_checked_toggle_state_change : function(sates) {
        if(this.jq_filter_checked_toggle.b2ctoggle('isset', 'all')) {
            this.filter.ischecked = 0;
        } else if (this.jq_filter_checked_toggle.b2ctoggle('isset', 'checked')) {
            this.filter.ischecked = 1;
        } else if (this.jq_filter_checked_toggle.b2ctoggle('isset', 'unchecked')) {
            this.filter.ischecked = -1;
        }
        this.start_filter();
    },
    _on_profiles_loaded : function(profiles) {
        this._hide_preloader();
        this._add_profiles(profiles);
    },
};

ER_Message_Broadcast_Select_View.const = {};
ER_Message_Broadcast_Select_View.const.modes = {};
ER_Message_Broadcast_Select_View.const.modes.queue = 'queue';
ER_Message_Broadcast_Select_View.const.modes.processed = 'processed';
ER_Message_Broadcast_Select_View.const.modes.excluded = 'excluded';
/**
 * Created by erinsasha on 12/08/17.
 */
// message_broadcast_timeouts

var er_message_broadcast_timeouts = window.er_message_broadcast_timeouts || {
        const_timeouts_names : {
            click_message : 'Click "Send message"',
            insert_message : 'Insert message',
            click_send : 'Click "Send" after inserting message',
            go_to_next_contact : 'Go to next contact',

        },
        const_timeout_fast : {
            click_message : {min : 2000, max : 5000},
            insert_message : {min : 2000, max : 5000},
            click_send : {min : 2000, max : 4000},
            go_to_next_contact : {min : 10000, max : 20000}
        },
        const_timeout_safe : {
            click_message : {min : 5000, max : 120000},
            insert_message : {min : 5000, max : 120000},
            click_send : {min : 5000, max : 60000},
            go_to_next_contact : {min : 30000, max : 600000}
        },
        const_message_mode_type_write : 1,
        const_message_mode_insert : 2,

        init : function() {
            if(this.started)
                return;
            this.started = true;
            this._init_timeouts_from_local_storage();
            this._init_message_mode_from_local_storage();
        },
        _init_timeouts_from_local_storage : function() {
            if(this.current_timeouts)
                return;

            var current_timeouts = localStorage.er_message_broadcast_timeouts;
            if(current_timeouts && current_timeouts != '') {
                this.current_timeouts = JSON.parse(current_timeouts);
                this.restore_missed_values();
            } else
                this.save_timeouts_from_object(this.const_timeout_fast);
        },
        _init_message_mode_from_local_storage : function() {
            if(this.message_mode)
                return;

            var message_mode = localStorage.er_message_broadcast_message_mode;
            if(message_mode && message_mode != '') {
                this.message_mode = JSON.parse(message_mode);
            } else
                this.message_mode = this.const_message_mode_insert;
        },
        restore_missed_values : function() {
            var timeouts_tech_names = Object.keys(this.const_timeout_fast);

            var tech_name;

            for(var i=0; i<timeouts_tech_names.length; i++) {
                tech_name = timeouts_tech_names[i];
                if(!this.current_timeouts[tech_name])
                    this.current_timeouts[tech_name] = this.const_timeout_fast[tech_name];
            }
        },
        save_timeouts_from_object : function(obj) {
            this.current_timeouts = er_utils.get_object_copy(obj);
            this.save_current_timeouts_to_local_storage();
        },
        save_current_timeouts_to_local_storage : function() {
            localStorage.er_message_broadcast_timeouts = JSON.stringify(this.current_timeouts);
        },
        save_timeouts_and_message_mode : function(timeouts, message_mode) {
            this.save_timeouts_from_object(timeouts);
            this.set_message_mode(message_mode);
        },
        get_timeouts : function() {
            this.init();
            return this.current_timeouts;
        },
        get_random_timeout : function(timeout_name, dont_show_clock) {
            this.init();
            var timeout = this.current_timeouts[timeout_name];
            var rt = er_utils.getRandomInt(timeout.min, timeout.max);

            if(!dont_show_clock) {
                new ER_W_Timeout_Clock({
                    timeout : rt,
                    techname : timeout_name,
                    description : this.const_timeouts_names[timeout_name]
                })
            }

            return rt;
        },
        get_message_mode : function() {
            this.init();
            return this.message_mode;
        },
        set_message_mode : function(val) {
            this.message_mode = val;
            localStorage.er_message_broadcast_message_mode = JSON.stringify(val);
        },
    };
/**
 * Created by Alex on 30.08.2016.
 */
er_message_broadcast_view = window.er_message_broadcast_view || {
    CONST_REFRESH_STAT_TIMEOUT : 5000,

    type : 'er_message_broadcast',
    tittle : 'Message broadcast',
    message_template : null,

    jq_main : null,
    jq_textarea : null,
    jq_eng_names_to_rus_switch : null,
    jq_recipients_count_new : null,
    jq_recipients_count_sent : null,
    jq_recipients_count_sent_in_current_period : null,
    jq_current_broadcast_state : null,
    jq_next_broadcast_start : null,
    jq_stat_cont_next_broadcast_start : null,

    init_main : function() {
        if (this.inited)
            return;

        er_message_broadcast.init_limits();

        this.message_template = localStorage.er_message_template;
        if (this.message_template == null)
            this.message_template = '';

        this.jq_main = $(this._HTML_build_main());
        this.jq_btn_save = this.jq_main.find('button.save');
        this.jq_btn_begin_broadcast = this.jq_main.find('.begin_broadcast');
        this.jq_btn_collect = this.jq_main.find('.collect');
        this.jq_textarea = this.jq_main.find('.er_message_template');
        this.jq_eng_names_to_rus_switch = this.jq_main.find('.er_names_eng_to_rus');
        this.jq_rus_names_to_eng_switch = this.jq_main.find('.er_names_rus_to_eng');
        var jq_er_recipients_stat = this.jq_main.find('.er_recipients_stat');
        this.jq_recipients_count_new = jq_er_recipients_stat.find('.er_count_new');
        this.jq_recipients_count_sent = jq_er_recipients_stat.find('.er_count_sent');
        this.jq_recipients_count_sent_in_current_period = jq_er_recipients_stat.find('.er_count_sent_in_period');
        this.jq_current_broadcast_state = jq_er_recipients_stat.find('.er_current_broadcast_state');
        this.jq_next_broadcast_start = jq_er_recipients_stat.find('.er_next_broadcast_start');
        this.jq_stat_cont_next_broadcast_start = jq_er_recipients_stat.find('.stat_cont.next_broadcast_start');

        this._add_handlers();

        er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

        this.closure_refresh_recipients_stat = this._refresh_recipients_stat.bind(this);
        setTimeout(this.closure_refresh_recipients_stat, this.CONST_REFRESH_STAT_TIMEOUT);

        er_main_view._add_callback_on_click_mode_after_turn_on('er_message_broadcast', this._on_click_broadcast_mode_after_turn_on.bind(this));
        er_main_view._add_callback_on_click_mode_after_turn_on('er_message_job_search_next', this._on_click_search_mode_after_turn_on.bind(this));

        var href = window.location.href;
        if (
            localStorage.er_message_broadcast == 'true'
            && er_message_broadcast.tab_is_active_in_broadcast()
            && (
                href.indexOf('linkedin.com/messaging/compose?connId=') >= 0
                || href.indexOf('linkedin.com/messaging/compose/')
                || er_utils.is_sales_navigator_profile_page()
            )
        || localStorage.er_message_job_search_next == 'true'
            && er_message_broadcast.tab_is_active_in_collect()
            && (
                href.indexOf('linkedin.com/vsearch') >= 0
                || href.indexOf('linkedin.com/search/') >= 0
                || er_utils.is_sales_navigator_search_page()
            )
        )
            er_main_view.show_settings(this.type);

        this.inited = true;
    },
    _HTML_build_main : function() {
        var html = '<div class="er_sub_view '+this.type+'">';

        html += this._HTML_build_tabs_pannel();

        html += this._HTML_build_content_general();
        html += this._HTML_build_content_recipients();
        html += this._HTML_build_content_message();
        html += this._HTML_build_content_broadcast();

        html += '</div>';
        return html;
    },
    _HTML_build_tabs_pannel : function() {
        var general_set = 'set', recipients_set = '', broadcast_set = '';
        if (er_message_broadcast.is_search_for_message_broadcast_mode_on() && er_message_broadcast.tab_is_active_in_collect()) {
            general_set = '';
            recipients_set = 'set';
        } else if (er_message_broadcast.is_message_broadcast_mode_on() && er_message_broadcast.tab_is_active_in_broadcast()) {
            general_set = '';
            broadcast_set = 'set';
        }

        return '<div class="tabs_pannel">' +
                '<span class="tab '+general_set+'" data-tab="general"></span>' +
                '<span class="tab '+recipients_set+'" data-tab="recipients"></span>' +
                '<span class="tab" data-tab="message"></span>' +
                '<span class="tab '+broadcast_set+'" data-tab="broadcast"></span>' +
            '</div>';
    },
    _HTML_build_content_general : function() {
        var general_set = 'set';
        if (
            (
                er_message_broadcast.is_search_for_message_broadcast_mode_on()
                && er_message_broadcast.tab_is_active_in_collect()
            )
            ||
            (
                er_message_broadcast.is_message_broadcast_mode_on()
                && er_message_broadcast.tab_is_active_in_broadcast()
            )
        ) {
            general_set = '';
        }

        var html = '<div class="content '+general_set+'" data-type="general">';
            html += this._HTML_build_broadcast_select_cont();
            //html += '<button class="manage_broadcasts"></button>';
            html += '<button class="btn_lists_manager">Open lists manager</button>';
            html += this._HTML_build_recipients_stat();
            //html += '<button class="clear_all danger"></button>';


        html += '</div>';
        return html;
    },
    _HTML_build_content_recipients : function() {
        var recipients_set = '';
        if (er_message_broadcast.is_search_for_message_broadcast_mode_on() && er_message_broadcast.tab_is_active_in_collect()) {
            recipients_set = 'set';
        }

        var html = '<div class="content '+recipients_set+'" data-type="recipients">';
        html += this._HTML_build_recipients_stat();
        var collect_started = er_message_broadcast.is_search_for_message_broadcast_mode_on() ? 'started' : '';
        html += '<button class="collect '+collect_started+'"></button>';
        html += '<button class="view_recipients"></button>';
        html += '<button class="clear_recipients danger"></button>';
        html += '<button class="clear_broadcasted_recipients danger"></button>';
        html += '</div>';
        return html;
    },
    _HTML_build_content_message : function() {
        var html = '<div class="content" data-type="message">';

        /*html += '<p class="label"></p>';
        html += '<p class="tip"></p>';
        html += '<textarea class="er_message_template" placeholder="Hello {firstname}! We have a great business opportunity for you!">'+this.message_template+'</textarea>';
        html += '<button class="save er_inactive"></button>';
        html += '<div class="message_defaults_cont"></div>';
        html += this._HTML_build_eng_names_to_rus_switch();
        html += this._HTML_build_rus_names_to_eng_switch();*/
        //html += '<button class="write_message"></button>';

        html += '</div>';
        return html;
    },
    _HTML_build_content_broadcast : function() {
        var broadcast_set = '';
        if (er_message_broadcast.is_search_for_message_broadcast_mode_on() && er_message_broadcast.tab_is_active_in_collect()) {
            broadcast_set = '';
        } else if (er_message_broadcast.is_message_broadcast_mode_on() && er_message_broadcast.tab_is_active_in_broadcast()) {
            broadcast_set = 'set';
        }

        var html = '<div class="content '+broadcast_set+'" data-type="broadcast">';
        html += this._HTML_build_recipients_stat();
        html += this._HTML_build_broadcast_period();
        html += this._HTML_build_broadcast_limit_cont();
        var broadcast_started = er_message_broadcast.is_message_broadcast_mode_on() ? 'started' : '';
        html += '<button class="er_timeout_settings">Timeout settings</button>';
        html += '<button class="begin_broadcast '+broadcast_started+'"></button>';
        html += '</div>';
        return html;
    },
    _HTML_build_broadcast_select_cont : function() {
        var html = '<div class="broadcast_select_cont">';

        html += '<span class="label"></span>';

        html += '</div>';

        return html;
    },
    /*_HTML_build_eng_names_to_rus_switch : function() {
        var er_off = localStorage.er_names_eng_to_rus == 'true' ? '' : 'er_off';
        return '<div class="er_state_toggle jim-sm-default er_mode_cont er_names_eng_to_rus '+er_off+'" data-variable="er_names_eng_to_rus"><span class="title"></span></div>';
    },
    _HTML_build_rus_names_to_eng_switch : function() {
        var er_off = localStorage.er_names_rus_to_eng == 'true' ? '' : 'er_off';
        return '<div class="er_state_toggle jim-sm-default er_mode_cont er_names_rus_to_eng '+er_off+'" data-variable="er_names_rus_to_eng"><span class="title"></span></div>';
    },*/
    _HTML_build_recipients_stat : function() {
        return '<div class="er_recipients_stat">'
            +this._HTML_build_recipients_found()
            +this._HTML_build_messages_sent()
            +this._HTML_build_messages_sent_in_current_period()
            +this._HTML_build_current_broadcast_state()
            +this._HTML_build_next_broadcast_start()
            +'</div>';
    },
    _HTML_build_recipients_found : function() {
        var count_new = 0;
        var arr = localStorage.er_message_job_peoples_ids;
        if(arr != null) {
            arr = JSON.parse(arr);
            count_new = arr.length;
        }

        return '<div class="stat_cont recipients_found"><span class="title label"></span><span class="er_count_new value">'+count_new+'</span></div>';
    },
    _HTML_build_messages_sent : function() {
        var count_sent = 0;

        arr = localStorage.er_message_done_peoples_ids;
        if(arr != null) {
            arr = JSON.parse(arr);
            count_sent = arr.length;
        }

        return '<div class="stat_cont messages_sent"><span class="title label"></span><span class="er_count_sent value">'+count_sent+'</span></div>';
    },
    _HTML_build_messages_sent_in_current_period : function() {
        var count_sent = localStorage.er_message_broadcast_sent_in_current_bunch;
        if (isNaN(count_sent))
            count_sent = 0;

        return '<div class="stat_cont messages_sent_in_current_period"><span class="title label"></span><span class="er_count_sent_in_period value">'+count_sent+'</span></div>';
    },
    _HTML_build_current_broadcast_state : function() {
        var state = localStorage.er_message_broadcast_current_bunch;
        if (state != er_message_broadcast.CONST_BROADCAST_STARTED)
            state = er_message_broadcast.CONST_BROADCAST_ENDED;

        return '<div class="stat_cont current_broadcast_state"><span class="title label"></span><span class="er_current_broadcast_state value">'+state+'</span></div>';
    },
    _HTML_build_next_broadcast_start : function() {
        var date = localStorage.er_message_broadcast_next_bunch_starts_at;
        var hidden = 'hidden';

        if (date != null && date != '')
            date = new Date(JSON.parse(date));

        if (date instanceof Date && !isNaN(date.getHours()) && new Date < date) {
            hidden = '';
            date = er_utils.datetimeJSToUser(date);
        }
        return '<div class="stat_cont next_broadcast_start '+hidden+'"><span class="title label"></span><span class="er_next_broadcast_start value">'+date+'</span></div>';
    },
    _HTML_build_broadcast_limit_cont : function() {
        var html = '<div class="broadcast_limit_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var limit = localStorage.er_message_broadcast_limit;

        html += '<input class="broadcast_limit" type="text" value="'+limit+'">';
        html += '</div>';
        return html;
    },
    _HTML_build_broadcast_period : function() {
        var html = '<div class="broadcast_period_cont er_label_input_cont">';
        html += '<span class="label"></span>';

        var period = localStorage.er_message_broadcast_period;

        html += '<input class="broadcast_period" type="text" value="'+period+'">';
        html += '</div>';
        return html;
    },

    _add_handlers : function() {
        new ER_Widget_How_To({
            jq_parent : this.jq_main,
            links : [ER_Widget_How_To.links.er_message_broadcast_view_general,
                ER_Widget_How_To.links.er_message_broadcast_view_manage_single,
                ER_Widget_How_To.links.er_message_broadcast_view_manage_multiple
            ]
        });

        window.addEventListener(
            er_broadcast_control.EVENT_ACTIVE_BROADCAST_SWITCHED,
            this.on_EVENT_ACTIVE_BROADCAST_SWITCHED.bind(this),
            false);

        this.jq_main.children('.tabs_pannel').children('.tab').click(this._on_click_tab.bind(this));

        this.w_invitation_template = new ER_Widget_Broadcast_Message_Template({jq_parent : this.jq_main.children('.content[data-type=message]')});

        var jq_broadcast_select_cont = this.jq_main.find('.broadcast_select_cont');
        this.er_Widget_Broadcasts_Selector = new ER_Widget_Broadcasts_Selector({
            jq_parent : jq_broadcast_select_cont,
            is_always_show_active_broadcast : true,
            is_new_broadcast_must_be_active : true,
            callback_on_selected_broadcast_change : this.callback_on_selected_broadcast_change.bind(this)
        });
        this.er_Widget_Broadcasts_Selector.build_main_view();

        new ER_Widget_Delete_Active_Broadcast({
            jq_parent : this.jq_main.children('.content[data-type="general"]')
        });

        /*this.jq_btn_save.click(this._on_click_save.bind(this));*/

        //this.jq_main.find('button.manage_broadcasts').click(this._on_click_btn_manage_broadcasts.bind(this));
        this.jq_main.find('.btn_lists_manager').click(this._on_click_btn_lists_manager.bind(this));

        this.jq_main.find('.write_message').click(this._on_click_write_message.bind(this));
        this.jq_main.find('.begin_broadcast').click(this._on_click_begin_broadcast.bind(this));
        this.jq_main.find('.er_timeout_settings').click(this._on_click_timeout_settings.bind(this));
        this.jq_main.find('.collect').click(this._on_click_collect.bind(this));
        this.jq_main.find('.view_recipients').click(this._on_click_view_recipients.bind(this));
        this.jq_main.find('.clear_recipients').click(this._on_click_delete_all_recipients.bind(this));
        this.jq_main.find('.clear_broadcasted_recipients').click(this._on_click_delete_all_broadcasted_recipients.bind(this));
        this.jq_main.find('.clear_all').click(this._on_click_delete_all.bind(this));
        /*this.jq_main.find('.er_names_eng_to_rus').click(this._on_click_eng_names_to_rus_switch.bind(this));
        this.jq_main.find('.er_names_rus_to_eng').click(this._on_click_rus_names_to_eng_switch.bind(this));*/

        this.jq_input_broadcast_limit = this.jq_main.find('input.broadcast_limit').change(this._on_change_input_broadcast_limit.bind(this));
        this.jq_input_broadcast_period = this.jq_main.find('input.broadcast_period').change(this._on_change_input_broadcast_period.bind(this));

        /*var closure_make_save_btn_active = this._make_save_btn_active.bind(this);
        this.jq_textarea.change(closure_make_save_btn_active).keypress(closure_make_save_btn_active).on('input', closure_make_save_btn_active);

        this.er_Message_Defaults_Editor = new ER_Message_Defaults_Editor({
            jq_parent : this.jq_main.find('.message_defaults_cont'),
            variables : {
                company : localStorage.er_message_company,
                position : localStorage.er_message_position
            },
            callback_on_change : this.callback_on_message_defaults_change.bind(this)
        });
        this.er_Message_Defaults_Editor.build_main_view();*/

        window.addEventListener(
            er_license_limit.EVENT_MESSAGES_LIMIT,
            this._on_EVENT_MESSAGES_LIMIT.bind(this),
            false);

        if(er_license_limit.when_can_continue_messages() > 0 && er_message_broadcast.is_message_broadcast_mode_on() && er_message_broadcast.tab_is_active_in_broadcast())
            this._show_messages_limit_reached();
    },

    _update_widget_by_current_broadcast : function() {
        /*this.jq_textarea.val(localStorage.er_message_template);
        this.jq_btn_save.addClass('er_inactive');
        this.er_Message_Defaults_Editor.set_variables({
            company : localStorage.er_message_company,
            position : localStorage.er_message_position
        });*/

        this._refresh_recipients_stat(true);
    },

    is_widget_visible : function() {
        return this.jq_main.height() > 0;
    },

    _refresh_recipients_stat : function(is_refresh_once) {
        if (this.is_widget_visible()) {
            this._refresh_recipients_found();
            this._refresh_messages_sent();
            this._refresh_messages_sent_in_current_period();
            this._refresh_current_broadcast_state();
            this._refresh_next_broadcast_start();
            this._refresh_btn_begin_broadcast();
            this._refresh_btn_collect();
        }

        if(!is_refresh_once) {
            setTimeout(this.closure_refresh_recipients_stat, this.CONST_REFRESH_STAT_TIMEOUT);
        }
    },
    _refresh_recipients_found : function() {
        var count_new = 0;
        var arr = localStorage.er_message_job_peoples_ids;
        if(arr != null) {
            arr = JSON.parse(arr);
            count_new = arr.length;
        }

        this.jq_recipients_count_new.text(count_new);
    },
    _refresh_messages_sent : function() {
        var count_sent = 0;
        arr = localStorage.er_message_done_peoples_ids;
        if(arr != null) {
            arr = JSON.parse(arr);
            count_sent = arr.length;
        }

        this.jq_recipients_count_sent.text(count_sent);
    },
    _refresh_messages_sent_in_current_period : function() {
        var count_sent = localStorage.er_message_broadcast_sent_in_current_bunch;
        if (isNaN(count_sent))
            count_sent = 0;

        this.jq_recipients_count_sent_in_current_period.text(count_sent);
    },
    _refresh_current_broadcast_state : function() {
        var state = localStorage.er_message_broadcast_current_bunch;
        if (state != er_message_broadcast.CONST_BROADCAST_STARTED)
            state = er_message_broadcast.CONST_BROADCAST_ENDED;

        this.jq_current_broadcast_state.text(state);
    },
    _refresh_next_broadcast_start : function() {
        var date = localStorage.er_message_broadcast_next_bunch_starts_at;

        if (date != null && date != '')
            date = new Date(JSON.parse(date));

        var hidden = true;

        if (date instanceof Date && !isNaN(date.getHours()) && new Date < date) {
            hidden = false;
            date = er_utils.datetimeJSToUser(date);
        }

        if (hidden) {
            this.jq_stat_cont_next_broadcast_start.addClass('hidden');
        } else {
            this.jq_stat_cont_next_broadcast_start.removeClass('hidden');
        }

        this.jq_next_broadcast_start.text(date);
    },
    _refresh_btn_begin_broadcast : function() {
        if (er_message_broadcast.is_message_broadcast_mode_on())
            this.jq_btn_begin_broadcast.addClass('started');
        else
            this.jq_btn_begin_broadcast.removeClass('started');
    },
    _refresh_btn_collect : function() {
        if (er_message_broadcast.is_search_for_message_broadcast_mode_on())
            this.jq_btn_collect.addClass('started');
        else
            this.jq_btn_collect.removeClass('started');
    },

        _check_limits_and_warn : function() {
            if(er_message_broadcast.is_limits_are_safe()) {
                this.jq_input_broadcast_limit.removeClass('warning');
                this.jq_input_broadcast_period.removeClass('warning');
            } else {
                this.jq_input_broadcast_limit.addClass('warning');
                this.jq_input_broadcast_period.addClass('warning');

                er_main_view._info_popup_show(er_translator.get_text('message_broadcast_view', 'messages', 'limits_warning', er_gen_settings.get_current_language_id()));
            }
        },

    /*_make_save_btn_active : function () {
        this.jq_btn_save.removeClass('er_inactive');
    },*/

    _show_messages_limit_reached : function() {
        var message = 'You have reached day limit for message broadcast according your license plan.';

        new ER_Buy_Unlimited_Control({
            show_any_way : true,
            additional_message : message
        });
        //er_main_view._info_popup_show(er_translator.get_text('message_broadcast_view', 'messages', 'reached_today_limit', er_gen_settings.get_current_language_id()));
    },

    _check_limits : function(period, maxmessages) {
        var deferred = $.Deferred();
        var that = this;

        er_license_limit.get_limits()
            .then(function(limits) {
                if(limits && limits.messages) {
                    period = Number(period);
                    maxmessages = Number(maxmessages);
                    if(isNaN(period) || isNaN(maxmessages) ||
                        (limits.messages / 24) < (maxmessages / period)
                    ) {
                        er_message_broadcast.set_message_broadcast_limit(limits.messages);
                        er_message_broadcast.set_message_broadcast_period(24);
                        that.jq_input_broadcast_limit.val(limits.messages);
                        that.jq_input_broadcast_period.val(24);
                    }
                }

                deferred.resolve();
            });

        return deferred.promise();
    },    

    _on_main_view_ready_for_sub_view : function() {
        this.init_main();
    },

    _on_click_btn_manage_broadcasts : function() {
        this.er_Broadcast_Control_View = new ER_Broadcast_Control_View({
            jq_parent : this.jq_main
        });
        this.er_Broadcast_Control_View.build_main_view();
    },
    _on_click_btn_lists_manager : function() {
        new ER_W_List_Manager({
            jq_parent : this.jq_main,
            current_source_function_id : 'message_broadcast',
            current_target_function_id : 'message_broadcast',
        })
    },
    /*_on_click_save : function() {
        this.message_template = this.jq_textarea.val();
        localStorage.er_message_template = this.message_template;
        this.jq_btn_save.addClass('er_inactive');
    },*/
    _on_click_collect : function(event, start_any_way) {
        if (!start_any_way && this.jq_btn_collect.hasClass('started')) {
            er_message_broadcast.set_search_for_message_broadcast_mode_off();
            this.jq_btn_collect.removeClass('started');
            return;
        }

        var href = window.location.href;
        if (href.indexOf('linkedin.com/vsearch') >= 0
        || href.indexOf('linkedin.com/search/') >= 0
        || er_utils.is_sales_navigator_search_page()
        || er_utils.is_my_connections_page()
        ) {
            er_message_broadcast.start_collect_user_ids();
            this.jq_btn_collect.addClass('started');
        }
        else {
            new ER_W_Go_To_Page({
                add_go_to_my_connections : true,
                add_go_to_1st : true,
                add_go_to_1st_sn : true,
            });
            er_main_view._info_popup_show(er_translator.get_text('message_broadcast_view', 'messages', 'go_to_search_page', er_gen_settings.get_current_language_id()));
        }

    },
    _on_click_view_recipients : function() {
        /*var select_view = new ER_Message_Broadcast_Select_View({ jq_parent : this.jq_main });
        select_view.build_main_view();
        select_view.show();*/

        var er_Widget_Broadcast_Queue_Proc_Excl =
            new ER_Widget_Broadcast_Queue_Proc_Excl({
                jq_parent : this.jq_main
            });
    },
    /*_on_click_eng_names_to_rus_switch : function() {
        var variable = this.jq_eng_names_to_rus_switch.attr('data-variable');
        localStorage[variable] = this.jq_eng_names_to_rus_switch.hasClass('er_off');
        this.jq_eng_names_to_rus_switch.toggleClass('er_off');
    },
    _on_click_rus_names_to_eng_switch : function() {
        var variable = this.jq_rus_names_to_eng_switch.attr('data-variable');
        localStorage[variable] = this.jq_rus_names_to_eng_switch.hasClass('er_off');
        this.jq_rus_names_to_eng_switch.toggleClass('er_off');
    },*/
    _on_click_write_message : function() {
        er_message_broadcast.insert_message_to_message_field();
    },
    _on_click_begin_broadcast : function(event, start_any_way) {
        if (this.jq_btn_begin_broadcast.hasClass('started') && !start_any_way) {
            er_message_broadcast.set_message_broadcast_mode_off();
            this.jq_btn_begin_broadcast.removeClass('started');
            return;
        }

        var wait = er_license_limit.when_can_continue_messages();
        if (wait > 0) {
            this._show_messages_limit_reached();
        } else {
            er_message_broadcast.start_send_messages();
            this.jq_btn_begin_broadcast.addClass('started');
        }
    },
    _on_click_timeout_settings : function() {
        new W_Message_Broadcast_Timeout_Settings({});
    },
    _on_click_tab : function(event) {
        var jq_tab = $(event.target);
        if(jq_tab.hasClass('set'))
            return;

        jq_tab.siblings('.tab.set').removeClass('set');
        this.jq_main.children('.content.set').removeClass('set');

        jq_tab.addClass('set');
        this.jq_main.children('.content[data-type='+jq_tab.attr('data-tab')+']').addClass('set');
    },
    _on_click_delete_all : function() {
        er_main_view.show_yes_no_dialog(
            er_translator.get_text('message_broadcast_view', 'messages', 'delete_all', er_gen_settings.get_current_language_id()),
            this._on_click_yes_dialog_delete_all.bind(this)
        );
    },
    _on_click_yes_dialog_delete_all : function() {
        er_message_broadcast.delete_all();
        this._refresh_recipients_stat();
    },
    _on_click_delete_all_recipients : function() {
        er_main_view.show_yes_no_dialog(
            er_translator.get_text('message_broadcast_view', 'messages', 'delete_all_collected', er_gen_settings.get_current_language_id()),
            this._on_click_yes_dialog_delete_all_recipients.bind(this)
        );
    },
    _on_click_yes_dialog_delete_all_recipients : function() {
        er_message_broadcast.delete_all_collected_recipients();
        this._refresh_recipients_stat();
    },
    _on_click_delete_all_broadcasted_recipients : function() {
        er_main_view.show_yes_no_dialog(
            er_translator.get_text('message_broadcast_view', 'messages', 'delete_all_broadcated', er_gen_settings.get_current_language_id()),
            this._on_click_yes_dialog_delete_all_broadcasted_recipients.bind(this)
        );
    },
    _on_click_yes_dialog_delete_all_broadcasted_recipients : function() {
        er_broadcasted_recipients.clear_broadcasted_recipients_ids();
        this._refresh_recipients_stat();
    },
    _on_change_input_broadcast_period : function(event) {
        var jqInput = $(event.target);
        var newVal = Number(jqInput.val());
        if(isNaN(newVal) || newVal == 0) {
            localStorage.er_message_broadcast_period = er_message_broadcast.DEFAULT_SEND_PERIOD_UNSET_VALUE;
            jqInput.val(er_message_broadcast.DEFAULT_SEND_PERIOD_UNSET_VALUE);
        } else {
            localStorage.er_message_broadcast_period = newVal;
        }
        this._check_limits_and_warn();
        //this._check_limits(er_message_broadcast.get_message_broadcast_period(), er_message_broadcast.get_message_broadcast_limit());
        $(document).trigger(er_message_broadcast.EVENT_SEND_PERIOD_HOURS_CHANGED);
    },
    _on_change_input_broadcast_limit : function(event) {
        var jqInput = $(event.target);
        var newVal = Number(jqInput.val());
        if(isNaN(newVal) || newVal == 0) {
            localStorage.er_message_broadcast_limit = er_message_broadcast.DEFAULT_SEND_LIMIT_UNSET_VALUE;
            jqInput.val(er_message_broadcast.DEFAULT_SEND_LIMIT_UNSET_VALUE);
        } else {
            localStorage.er_message_broadcast_limit = newVal;
        }
        this._check_limits_and_warn();
        //this._check_limits(er_message_broadcast.get_message_broadcast_period(), er_message_broadcast.get_message_broadcast_limit());
        $(document).trigger(er_message_broadcast.EVENT_SEND_LIMIT_PER_PERIOD_CHANGED);
    },

    _on_click_search_mode_after_turn_on : function() {
        var that = this;
        er_main_view.show_yes_no_dialog(
            er_translator.get_text('message_broadcast_view', 'messages', 'need_begin_collect_recipients', er_gen_settings.get_current_language_id()),
            function() {
                that._on_click_collect(null, true);
            }
        );
    },
    _on_click_broadcast_mode_after_turn_on : function() {
        var that = this;

        er_main_view.show_yes_no_dialog(
            er_translator.get_text('message_broadcast_view', 'messages', 'need_begin_broadcast', er_gen_settings.get_current_language_id()),
            function() {
                that._on_click_begin_broadcast(null, true)
            }
        );
    },

    _on_EVENT_MESSAGES_LIMIT : function() {
        this._show_messages_limit_reached();
    },

    on_EVENT_ACTIVE_BROADCAST_SWITCHED : function(event) {
        var broadcast = event.detail;
        this._update_widget_by_current_broadcast();
    },
    callback_on_selected_broadcast_change : function(id) {
        er_broadcast_control.set_active_broadcast(id);
    },
    callback_on_message_defaults_change : function(variables) {
        localStorage.er_message_company = variables.company;
        localStorage.er_message_position = variables.position;
    },
};
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_message_broadcast_view._on_main_view_ready_for_sub_view() });

/**
 * Created by erinsasha on 10/02/17.
 */
var er_message_recipients = window.er_message_recipients || {
        get_recipients_ids : function() {
            /*if (this.recipients_ids)
                return this.recipients_ids;*/

            this.recipients_ids = localStorage.er_message_job_peoples_ids;
            if(this.recipients_ids == null || this.recipients_ids == '') {
                this.recipients_ids = [];
                localStorage.er_message_job_peoples_ids = JSON.stringify(this.recipients_ids);
            } else {
                this.recipients_ids = JSON.parse(localStorage.er_message_job_peoples_ids);
            }
            return this.recipients_ids;
        },

        add_ids_to_recipients_ids : function(new_ids) {
            var broadcasted_recipients_ids = er_broadcasted_recipients.get_broadcasted_recipients_ids();
            new_ids = er_utils.get_array_uniq(new_ids, broadcasted_recipients_ids);
            var excluded_ids = er_broadcast_excluded.get_excluded_ids();
            new_ids = er_utils.get_array_uniq(new_ids, excluded_ids);

            merged_ids = er_utils.get_array_merge(new_ids, this.get_recipients_ids());
            this.recipients_ids = merged_ids;
            localStorage.er_message_job_peoples_ids = JSON.stringify(this.recipients_ids);

            return new_ids;
        },
        add_ids_to_recipients_ids_without_check : function(ids) {
            this.recipients_ids = this.get_recipients_ids();
            for(var i= 0, id; i<ids.length; i++) {
                id = ids[i];
                if (this.recipients_ids.indexOf(id) < 0) {
                    this.recipients_ids.push(id);
                }
            }
            localStorage.er_message_job_peoples_ids = JSON.stringify(this.recipients_ids);
        },


        /**
         * Возвращает в callback ассоциативный массив мини-профилей получателей рассылки
         * @param callback_result
         * @private
         */
        get_recipients_mini_profiles : function(callback_result) {
            var collected_ids = this.get_recipients_ids();
            er_mini_profiles_db.get_profiles(collected_ids)
                .then(function(mini_profiles) {
                    callback_result(mini_profiles);
                });


            /*if (!this.er_indexedDB) {
             var that = this;
             this._init_recipients_mini_profiles_DB()
             .then(function() { that.get_all_recipients_mini_profiles(callback_result) });
             return;
             }
             var that = this;
             var result = {};

             var objectStore = this.er_indexedDB.transaction(this.CONST_TABLE_MINI_PROFILES).objectStore(this.CONST_TABLE_MINI_PROFILES);

             objectStore.openCursor().onsuccess = function(event) {
             var cursor = event.target.result;

             if (cursor) {
             result[cursor.key] = cursor.value;
             cursor.continue();
             } else {
             var profiles_ids = [];
             for(var id in result)
             //profiles_ids.push(Number(id));
             profiles_ids.push(id);
             var ls_ids = localStorage.er_message_job_peoples_ids;
             if(ls_ids == null || ls_ids == '')
             ls_ids = [];
             else
             ls_ids = JSON.parse(ls_ids);
             var to_delete_ids = er_utils.get_array_uniq(profiles_ids, ls_ids);
             if (to_delete_ids.length > 0) {
             for(var i=0; i<to_delete_ids.length; i++)
             delete result[to_delete_ids[i]];

             that.delete_recipients_by_ids(
             to_delete_ids,
             function() { }
             )
             }

             callback_result(result);
             }
             };*/
        },
        delete_first_id_from_queue : function() {
            var ids_for_send = this.get_recipients_ids();
            ids_for_send.splice(0, 1);
            localStorage.er_message_job_peoples_ids = JSON.stringify(ids_for_send);
        },
        delete_all : function() {
            this.recipients_ids = [];
            localStorage.er_message_job_peoples_ids = JSON.stringify(this.recipients_ids);
        },
        delete_ids : function(ids) {
            var ids_for_send = this.get_recipients_ids();
            this.recipients_ids = er_utils.get_array_uniq(ids_for_send, ids);
            localStorage.er_message_job_peoples_ids = JSON.stringify(this.recipients_ids);
        },
        replace_all_recipients_by_array : function(ids) {
            this.recipients_ids = ids;
            localStorage.er_message_job_peoples_ids = JSON.stringify(this.recipients_ids);
        },
    };
/**
 * Created by erinsasha on 13/02/17.
 */
/**
 *
 * @param options
 * @param options.optional_html_class
 * @param options.set_array_name
 * @constructor
 */
function ER_Widget_Broadcast_Array_Selector(options) {
    options = options || {};
    this.options = options;

    this.set_array_name = options.set_array_name ? options.set_array_name : er_broadcast_control.CONST_ARRAY_NAME_RECIPIENTS;
    this.broadcast_id = er_broadcast_control.get_active_broadcast_id();

    this.jq_parent = options.jq_parent;
};
ER_Widget_Broadcast_Array_Selector.prototype = {
    _HTML_build_main_view : function() {

        var optional_html_class = this.options.optional_html_class ? this.options.optional_html_class : '';
        var html = '<div class="ER_Widget_Broadcast_Array_Selector '+optional_html_class+'">';

        html += this._HTML_build_broadcast_select_cont();
        html += this._HTML_build_select_array_cont();

        html += '</div>';

        return html;
    },
    _HTML_build_broadcast_select_cont : function() {
        var html = '<div class="broadcast_select_cont">';

        html += '<span class="label"></span>';

        html += '</div>';

        return html;
    },
    _HTML_build_select_array_cont : function() {
        var html = '<div class="select_array_cont">';

        html += this._HTML_build_select_array_option(er_broadcast_control.CONST_ARRAY_NAME_RECIPIENTS);
        html += this._HTML_build_select_array_option(er_broadcast_control.CONST_ARRAY_NAME_PROCESSED);
        html += this._HTML_build_select_array_option(er_broadcast_control.CONST_ARRAY_NAME_EXCLUDED);

        html += '</div>';

        return html;
    },
    _HTML_build_select_array_option : function(array_name) {
        var set = array_name == this.set_array_name ? 'set' : '';
        var count;

        var source_arr;
        switch (array_name) {
            case er_broadcast_control.CONST_ARRAY_NAME_RECIPIENTS :
                source_arr = er_message_recipients.get_recipients_ids();
                break;
            case er_broadcast_control.CONST_ARRAY_NAME_PROCESSED :
                source_arr = er_broadcasted_recipients.get_broadcasted_recipients_ids();
                break;
            case er_broadcast_control.CONST_ARRAY_NAME_EXCLUDED :
                source_arr = er_broadcast_excluded.get_excluded_ids();
                break;
        }
        count = source_arr.length;

        return '<span class="array_option '+set+'" data-arrayname="'+array_name+'"><span class="count">'+count+'</span></span>';
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        var jq_broadcast_select_cont = this.jq_main.find('.broadcast_select_cont');
        this.er_Widget_Broadcasts_Selector = new ER_Widget_Broadcasts_Selector({
            jq_parent : jq_broadcast_select_cont,
            is_always_show_active_broadcast : false,
            is_new_broadcast_must_be_active : false,
            is_always_switch_to_new_broadcast_created_here : true,
            callback_on_selected_broadcast_change : this.callback_on_selected_broadcast_change.bind(this)
        });
        this.er_Widget_Broadcasts_Selector.build_main_view();

        this.jq_select_array_cont = this.jq_main.find('.select_array_cont');
        this.jq_select_array_cont.find('.array_option').click(this._on_click_array_option.bind(this));
    },

    get_current_broadcast_id : function() {
        return this.broadcast_id;
    },

    get_current_array_name : function() {
        return this.set_array_name;
    },

    refresh_select_array_cont : function(broadcast) {
        if (!broadcast) {
            er_broadcast_control.get_broadcast(this.broadcast_id)
                .then(this.refresh_select_array_cont.bind(this));
            return;
        }

        this._refresh_select_array_option(
            er_broadcast_control.CONST_ARRAY_NAME_RECIPIENTS,
            broadcast.recipients_ids.length
        );
        this._refresh_select_array_option(
            er_broadcast_control.CONST_ARRAY_NAME_PROCESSED,
            broadcast.broadcasted_ids.length
        );
        this._refresh_select_array_option(
            er_broadcast_control.CONST_ARRAY_NAME_EXCLUDED,
            broadcast.excluded_ids.length
        );
    },
    _refresh_select_array_option : function(array_name, new_count) {
        var jq_count = this.jq_select_array_cont.find('.array_option[data-arrayname='+array_name+'] .count');
        jq_count.text(new_count);
    },


    _on_click_array_option : function(event) {
        var jq_array_option = $(event.currentTarget);
        var array_name = jq_array_option.attr('data-arrayname');
        if (this.set_array_name == array_name)
            return;

        this.set_array_name = array_name;
        this.jq_select_array_cont.find('.array_option.set').removeClass('set');
        jq_array_option.addClass('set');
    },

    callback_on_selected_broadcast_change : function(id) {
        this.broadcast_id = id;
        this.refresh_select_array_cont();
    },
};
/**
 * Created by erinsasha on 12/02/17.
 */
/**
 *
 * @param options
 * @param options.callback_on_selected_broadcast_change
 * @param options.is_always_show_active_broadcast
 * @param options.is_always_switch_to_new_broadcast_created_here
 * @param options.is_new_broadcast_must_be_active
 * @constructor
 */
function ER_Widget_Broadcasts_Selector(options) {
    options = options || {};
    this.options = options;

    this.jq_parent = options.jq_parent;
};

ER_Widget_Broadcasts_Selector.prototype = {
    _HTML_build_main_view : function() {
        var html = '<span class="ER_Widget_Broadcasts_Selector">';

        html += '<select class="select_broadcast">';

        html += '<option value="'+ER_Widget_Broadcasts_Selector.const.CONST_SELECTION_CREATE_MEW_ID+'">'+er_translator.get_text('ER_Widget_Broadcasts_Selector', 'select_broadcast', 'create_new', er_gen_settings.get_current_language_id())+'</option>';


        var active_broadcast_id = er_broadcast_control.get_active_broadcast_id();
        var list = er_broadcast_control.get_broadcasts_list();

        for(var i=0, current_broadcast_id; i < list.length; i++) {
            current_broadcast_id = list[i];
            html += this._HTML_build_select_option(current_broadcast_id, active_broadcast_id == current_broadcast_id);
        }

        html += '</select>';

        html += '</span>';

        return html;
    },
    _HTML_build_select_option : function(id, is_selected) {
        var selected = is_selected ? 'selected' : '';
        return '<option value="'+id.replace(/"/g,'&quot;')+'" '+selected+'>'+id.replace(/"/g,'&quot;')+'</option>';
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_select = this.jq_main.find('.select_broadcast');
        this.jq_select.change(this._on_change_select_broadcast.bind(this));

        window.addEventListener(
            er_broadcast_control.EVENT_NEW_BROADCAST_CREATED,
            this.on_EVENT_NEW_BROADCAST_CREATED.bind(this),
            false);
        window.addEventListener(
            er_broadcast_control.EVENT_ACTIVE_BROADCAST_SWITCHED,
            this.on_EVENT_ACTIVE_BROADCAST_SWITCHED.bind(this),
            false);
        window.addEventListener(
            er_broadcast_control.EVENT_BROADCAST_DELETED,
            this.on_EVENT_BROADCAST_DELETED.bind(this),
            false);
    },

    _add_new_broadcast_to_selector : function(id) {
        if (this._is_select_option_created(id))
            return;

        var is_selected = this.options.is_always_show_active_broadcast
            && er_broadcast_control.get_broadcasts_list() == id;

        var option = this._HTML_build_select_option(id, is_selected);
        this.jq_select.append($(option));
    },
    _delete_broadcast_from_selector : function(id) {
        var jq_option = this._get_jq_option_with_id(id);
        jq_option.remove();
    },

    _set_selected_broadcast : function(id) {
        if(!this._is_select_option_created(id)) {
            this._add_new_broadcast_to_selector(id);
        }

        this.jq_select.val(id);
        if (this.options.callback_on_selected_broadcast_change) {
            this.options.callback_on_selected_broadcast_change(id);
        }
    },
    _get_jq_option_with_id : function(id) {
        return this.jq_select.find('option[value="'+id.replace(/"/g,'\\\"')+'"]');
    },
    _is_select_option_created : function(id) {
        return this._get_jq_option_with_id(id).length == 1;
    },

    _show_create_broadcast_dialog : function() {
        var er_Widget_New_Broadcast = new ER_Widget_New_Broadcast({
            is_new_broadcast_must_be_active : this.options.is_new_broadcast_must_be_active,
            callback_on_new_broadcast_created : this.callback_on_new_broadcast_created.bind(this)
        });
        er_Widget_New_Broadcast.build_main_view(this.jq_main);
    },
    _on_change_select_broadcast : function(event) {
        var jq_option = this.jq_select.find('option:selected');
        var broadcast_id = jq_option.attr('value');
        if (broadcast_id == ER_Widget_Broadcasts_Selector.const.CONST_SELECTION_CREATE_MEW_ID) {
            this._show_create_broadcast_dialog();
            this.jq_select.val(er_broadcast_control.get_active_broadcast_id());
        } else {
            if (this.options.callback_on_selected_broadcast_change) {
                this.options.callback_on_selected_broadcast_change(broadcast_id);
            }
        }
    },
    on_EVENT_NEW_BROADCAST_CREATED : function(event) {
        var id = event.detail.id;
        this._add_new_broadcast_to_selector(id);
    },
    on_EVENT_ACTIVE_BROADCAST_SWITCHED : function(event) {
        var id = event.detail.id;
        if (this.options.is_always_show_active_broadcast)
            this._set_selected_broadcast(id);
    },
    on_EVENT_BROADCAST_DELETED : function(event) {
        var id = event.detail;
        this._delete_broadcast_from_selector(id);
    },
    callback_on_new_broadcast_created : function(broadcast) {
        if(this.options.is_always_switch_to_new_broadcast_created_here) {
            this._set_selected_broadcast(broadcast.id);
        }
    },
};
ER_Widget_Broadcasts_Selector.const = {};
ER_Widget_Broadcasts_Selector.const.CONST_SELECTION_CREATE_MEW_ID = '__create_new_broadcast__';
/**
 * Created by Alex on 10.03.2017.
 */
function ER_Widget_Delete_Active_Broadcast(options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Delete_Active_Broadcast.prototype = {
    _HTML_build_main_view : function() {
        var er_inactive = er_broadcast_control.is_default_broadcast_active() ? 'er_inactive' : '';
        return '<button class="ER_Widget_Delete_Active_Broadcast danger '+er_inactive+'"></button>';
    },
    _add_handlers : function() {
        window.addEventListener(
            er_broadcast_control.EVENT_ACTIVE_BROADCAST_SWITCHED,
            this.on_EVENT_ACTIVE_BROADCAST_SWITCHED.bind(this),
            false);

        this.jq_main.click(this.on_click_button.bind(this));
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    on_click_button : function() {
        if(this.jq_main.hasClass('er_inactive'))
            return;

        var message = er_translator.get_text('ER_Widget_Delete_Active_Broadcast', 'messages', 'need_delete_broadcast');
        message = message.replace(/{BROADCAST_NAME}/g,er_broadcast_control.get_active_broadcast_id());

        er_main_view.show_yes_no_dialog(
            message,
            this.on_click_yes_delete_broadcast.bind(this)
        );
    },
    on_click_yes_delete_broadcast : function() {
        er_broadcast_control.delete_broadcast(er_broadcast_control.get_active_broadcast_id());
    },
    on_EVENT_ACTIVE_BROADCAST_SWITCHED : function(event) {
        if(er_broadcast_control.is_default_broadcast_active()) {
            this.jq_main.addClass('er_inactive');
        } else {
            this.jq_main.removeClass('er_inactive');
        }
    },
};


/**
 * Created by erinsasha on 12/02/17.
 * @param options
 * @param options.callback_on_new_broadcast_created
 * @param options.is_new_broadcast_must_be_active
 * @constructor
 */
function ER_Widget_New_Broadcast (options) {
    options = options || {};
    this.options = options;
    this.jq_parent = options.jq_parent;
};

ER_Widget_New_Broadcast.prototype = {
    _HTML_build_main_view : function() {
        var html = '<div class="ER_Widget_New_Broadcast">';
        html += '<div class="er_transparent_back"></div>';
        html += this._HTML_build_main_content();
        html += '</div>';
        return html;
    },
    _HTML_build_main_content : function() {
        var html = '<div class="content"><div class="internal_wrapper">';

        html += '<p class="title"></p>';
        html += '<input class="inp_broadcast_name" type="text" maxlength="255" placeholder="broadcast name">';

        html += this._HTML_build_buttons_panel();

        html += '</div></div>';
        return html;
    },
    _HTML_build_buttons_panel : function() {
        var html = '<div class="buttons_panel">';

        html += '<button class="create"></button>';
        html += '<button class="cancel"></button>';

        html += '</div>';
        return html;
    },

    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    _add_handlers : function() {
        this.jq_input_broadcast_name = this.jq_main.find('.inp_broadcast_name');
        this.jq_input_broadcast_name.focus();
        this.jq_main.find('.er_transparent_back').click(this._on_click_er_transparent_back.bind(this));
        this.jq_main.find('button.create').click(this._on_click_btn_create.bind(this));
        this.jq_main.find('button.cancel').click(this._on_click_btn_cancel.bind(this));
    },

    close : function() {
        this.jq_main.remove();
    },

    /**
     * Показывает всплывающее окно с указанным сообщением
     *
     * @param message {string}
     * @private
     */
    _info_popup_show : function(message) {
        if (this.jqInfoPopup == null) {
            var that = this;
            this.jqInfoPopup = $('<div class="b2c_info_popup"></div>').appendTo(this.jq_main).b2cpopup({
                html_content : '<p class="message"></p>',
                lightMode : true
            });
            this.jqInfoPopup.b2cpopup('getUserCont').click(function(event) { that.jqInfoPopup.b2cpopup('close'); });
        }
        this.jqInfoPopup.b2cpopup('getUserCont').text(message);
        this.jqInfoPopup.b2cpopup('show');
    },
    _create_new_broadcast : function(id) {
        if(this.options.is_new_broadcast_must_be_active)
            return er_broadcast_control.create_new_broadcast_as_active(id);
        else
            return er_broadcast_control.create_new_broadcast(id);
    },

    _on_click_er_transparent_back : function() {
        this.close();
    },
    _on_click_btn_cancel : function() {
        this.close();
    },
    _on_click_btn_create : function() {
        var val = this.jq_input_broadcast_name.val().trim();
        if (val == '')
            return;
        if(er_broadcast_control.is_broadcast_exists(val)) {
            this.close();
            return;
        } else {
            var that = this;

            this._create_new_broadcast(val)
                .then(function(broadcast) {
                    if (that.options.callback_on_new_broadcast_created) {
                        try {
                            that.options.callback_on_new_broadcast_created(broadcast)
                        } catch (e) {

                        }
                    }
                    that.close();
                })
        }
    },

};
/**
 * Created by erinsasha on 07/06/17.
 */

er_my_account_view = window.er_my_account_view || {
        type : 'er_my_account',
        tittle : 'My Account (Linked Helper)',

        jq_main : null,

        jq_select_language : null, // Селектор выбора языка

        init_main : function() {
            if (this.inited)
                return;

            this.jq_main = $(this._HTML_build_main());

            this._add_handlers();
            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            html += '</div>';
            return html;
        },

        _add_handlers : function() {
            window.addEventListener(
                er_main_view.EVENT_MAIN_VIEW_SETTINGS_SHOW,
                this._on_EVENT_MAIN_VIEW_SETTINGS_SHOW.bind(this));
        },

        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },

        _on_EVENT_MAIN_VIEW_SETTINGS_SHOW : function(event) {
            if(event.detail != this.type)
                return;

            erlh_main.show();
            er_main_view.show_settings('none');
        }
    };
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_my_account_view._on_main_view_ready_for_sub_view() });

/**
 * Created by erinsasha on 09/05/17.
 */

/**
 *
 * @param options
 * @param options.stop_ids // массив идентификаторв, при встрече которых поиск контактов должен прекратиться
 * @param options.callback // function(result, is_finished, callback)
 * @constructor
 */
function ER_My_Connections_Scrapper(options) {
    this.options = options;
    this.stop_ids = options.stop_ids ? options.stop_ids : [];
    this.callback = options.callback;

    this.closure_continue = this._continue.bind(this);
    this.current_pos = 0;
}

ER_My_Connections_Scrapper.prototype = {
    begin : function() {
        this._continue();
    },
    _continue : function() {
        this._grab(this.current_pos);
    },
    _grab : function(start, jq_cards) {
        var that = this;

        if(!jq_cards)
            jq_cards = ER_My_Connections_Scrapper.get_jq_crads();

        if(jq_cards.length <= start) {
            ER_My_Connections_Scrapper.load_more_cards({
                current_length : start
            }).then(function(result) {

                if(result.result) {
                    setTimeout(function(){
                        that._grab(start, result.jq_cards);
                    }, 300);
                } else {
                    var is_finished = true;

                    that.callback(
                        {
                            profiles : []
                        },
                        is_finished,
                        that.closure_continue
                    )
                }
            });
        } else {
            var profiles = er_my_connection_profile_card_parser.get_mini_profiles_from_jq_cards(jq_cards, start);
            er_mini_profiles_db.push_profiles(profiles)
                .then(function() {
                    that.current_pos += profiles.length;

                    var is_finished = that._is_arr_has_stop_ids(profiles);
                    that.callback(
                        {
                            profiles : profiles
                        },
                        is_finished,
                        that.closure_continue
                    )
                })
        }
    },

    _is_arr_has_stop_ids : function(profiles) {
        if (this.stop_ids.length == 0)
            return false;

        for(var i= 0, id, pos; i<profiles.length; i++) {
            id = profiles[i].id;
            if(this.stop_ids.indexOf(id) >= 0)
                return true;
        }

        return false;
    },
};

ER_My_Connections_Scrapper.get_jq_crads = function() {
    return $('#mynetwork').find('li.mn-person-card');
};

/**
 *
 * @param options
 * @param options.current_length
 * @param options.current_attempt
 * @param options.timeout
 * @param options.max_attempts
 * @param deferred
 */
ER_My_Connections_Scrapper.load_more_cards = function(options, deferred) {
    if(!deferred)
        deferred = $.Deferred();

    if (!options.current_length)
        options.current_length = 0;

    if (!options.current_attempt)
        options.current_attempt = 0;

    if (!options.timeout)
        options.timeout = 200;

    if (!options.max_attempts)
        options.max_attempts = 50;

    er_utils.scroll_down(0);
    setTimeout(function() {
        var jq_cards = ER_My_Connections_Scrapper.get_jq_crads();
        if(jq_cards.length > options.current_length) {
            deferred.resolve({jq_cards : jq_cards, result : true});
            return;
        }
        ++options.current_attempt;
        if(options.current_attempt >= options.max_attempts) {
            deferred.resolve({jq_cards : jq_cards, result : false});
            return;
        }
        ER_My_Connections_Scrapper.load_more_cards(options, deferred);
    }, options.timeout);

    return deferred.promise();
};
/**
 * Created by erinsasha on 08/05/17.
 */
var er_my_connection_profile_card_parser = window.er_my_connection_profile_card_parser || {
        get_mini_profile_from_jq_card : function(jq_card) {
            var obj = {};

            var jq_mn_person_info__picture = jq_card.find('a.mn-person-info__picture');

            var href = jq_mn_person_info__picture.attr('href');
            if(!href || href == '')
                return null;

            obj.id = er_utils.get_profile_id_from_url_profile_page(href);
            obj.url = href;

            obj.avatar = jq_mn_person_info__picture.find('img').attr('src');

            var jq_mn_person_info__details = jq_card.find('.mn-person-info__details');

            obj.fullname = jq_mn_person_info__details.find('.mn-person-info__name').text().trim();
            if(!obj.fullname || obj.fullname == '')
                return null;

            obj.description = jq_mn_person_info__details.find('.mn-person-info__occupation').text().trim();

            var mini_profile = new ER_Profile_Mini(obj);

            return mini_profile;
        },
        get_mini_profiles_from_jq_cards : function(jq_cards, start) {
            start = start ? start : 0;

            var results = [];

            for(var i=start, profile; i<jq_cards.length; i++) {
                profile = this.get_mini_profile_from_jq_card($(jq_cards[i]));
                if(profile) {
                    results.push(profile);
                }
            }

            return results;
        },
    };
/**
 * Created by erinsasha on 08/05/17.
 */

var er_my_connections = window.er_my_connections || {

    };
/**
 * Created by erinsasha on 05/01/17.
 */
er_my_invites_canceler = window.er_my_invites_canceler || {

        //How many last sent the invitations should be left
        CONST_LAST_SENT_INVITES_LEFT : 200,
        EVENT_MY_INVITES_FOUND : 'ER_EVENT_MY_INVITES_FOUND',
        MAX_NUM_ITERATION_FOR_SCROLL : 50,
        MAX_CANCEL_PER_ITERATION : 50,
        //MAX_CANCEL_PER_ITERATION : 10,

        invites_found : 0,

        last_sent_invites_left : this.CONST_LAST_SENT_INVITES_LEFT,

        //jq_invites : null,

        get_invites_found : function() {
            return this.invites_found;
        },
        get_LAST_SENT_INVITES_LEFT : function() {
            value = Number(localStorage.er_invites_cancel_must_left);
            if(isNaN(value) || value < 0) {
                this.last_sent_invites_left = this.CONST_LAST_SENT_INVITES_LEFT;
                localStorage.er_invites_cancel_must_left = this.CONST_LAST_SENT_INVITES_LEFT;
            } else {
                this.last_sent_invites_left = value;
            }

            return this.last_sent_invites_left;
        },
        set_LAST_SENT_INVITES_LEFT : function(value) {
            value = Number(value);
            if(isNaN(value) || value < 0)
                return;
            this.last_sent_invites_left = value;
            localStorage.er_invites_cancel_must_left = value;
        },

        get_iteration_number : function() {
            var iteration_number = Number(sessionStorage.er_myinvites_canceller);
            if (isNaN(iteration_number)) {
                iteration_number = 0;
            }
            return iteration_number;
        },
        set_iteration_number : function(value) {
            sessionStorage.er_myinvites_canceller = value;
        },
        increase_iteration_number : function() {
            var current = this.get_iteration_number();
            this.set_iteration_number(1 + current);
        },

        find_bottom_of_the_page : function() {
            var deferred = $.Deferred();

            this._scroll_loop(null)
                .then(function() {
                    deferred.resolve();
                });

            return deferred.promise();
        },
        _scroll_loop : function(deferred) {
            if(!deferred)
                deferred = $.Deferred();

            var that = this;

            this._scroll_down_and_check(null, this.MAX_NUM_ITERATION_FOR_SCROLL)
                .then(function(result) {
                    if(result) {
                        that._scroll_loop(deferred);
                    } else {
                        deferred.resolve();
                    }
                });

            return deferred.promise();
        },
        _scroll_down_and_check : function(deferred, iteration) {
            if(!deferred)
                deferred = $.Deferred();

            var that = this;

            er_utils.scroll_down_promise(500)
                .then(function() {
                    that._check_after_scroll(deferred, iteration);
                });

            return deferred.promise();
        },
        _check_after_scroll : function(deferred, iteration) {
            var jq_invites = this._get_refreshed_jq_invites();
            var new_length = jq_invites.length;
            if(new_length <= this.invites_found) {
                if(iteration > 1) {
                    this._scroll_down_and_check(deferred, --iteration);
                } else {
                    deferred.resolve(false);
                }
            } else {
                this.invites_found = new_length;
                deferred.resolve(true);
                this.trigger_EVENT_MY_INVITES_FOUND();
            }
        },
        _get_refreshed_jq_invites : function() {
            var jq_invites;
            if(er_utils.is_new_style_page()) {
                jq_invites = $('button[data-control-name=withdraw_single]');
            } else {
                jq_invites = $('input.entity-checkbox[name=Ids]');
            }

            return jq_invites;
        },

        old_check_for_cancel : function() {
            var jq_invites = this._get_refreshed_jq_invites();

            var last_sent_invites_left = this.last_sent_invites_left == null ? this.CONST_LAST_SENT_INVITES_LEFT : this.last_sent_invites_left;
            if (last_sent_invites_left == 0) {
                jq_invites.click();
            } else {
                for (var i = last_sent_invites_left; i < jq_invites.length; i++) {
                    $(jq_invites[i]).click();
                }
            }
        },
        old_deselect_all_selected : function() {
            $('input.entity-checkbox[name=Ids]:checked').click();
        },
        old_click_cancel_selected : function() {
            $('#manager-submit-button').click();
        },
        go_to_my_invites_page : function() {
            var url;
            if(er_utils.is_new_style_page()) {
                url = 'https://www.linkedin.com/mynetwork/invitation-manager/sent/';
            } else {
                url = 'https://www.linkedin.com/people/invites?trk=connect_hub_manage_invitations_sent';
            }
            window.location.assign(url);
        },
        is_my_invites_page : function() {
            var href = window.location.href;
            return href.indexOf('/mynetwork/invitation-manager/sent/') >= 0
             || href.indexOf('/people/invites?trk=connect_hub_manage_invitations_sent') >= 0;
        },
        cancel : function() {
            if(er_utils.is_new_style_page()) {
                //this.new_cancel();
                this.new_cancel_immediately();
            } else {
                this.old_click_cancel_selected();
            }
        },
        new_cancel : function() {
            var deferred = $.Deferred();

            var promise = $.when();
            var jq_invites = this._get_refreshed_jq_invites();

            var that = this;

            jq_invites.each(function(index) {
                if (index >= that.get_LAST_SENT_INVITES_LEFT()) {
                    var jq_invite = $(this);
                    promise = promise.then(function() {
                        return that._new_cancel_single(jq_invite);
                    });
                }
            });

            promise.then(function(){
                deferred.resolve();
            });

            return deferred.promise();
        },
        _new_cancel_single : function(jq_invite) {
            var deferred = $.Deferred();

            er_utils.scroll_to_element_promise(jq_invite, er_utils.getRandomInt(300, 500))
                .then(function() {
                    jq_invite.click();
                    setTimeout(function() {
                            deferred.resolve();
                        },
                        er_utils.getRandomInt(300, 500)
                    );
                });

            return deferred.promise();
        },
        new_cancel_immediately : function() {
            var deferred = $.Deferred();

            var jq_invites = this._get_refreshed_jq_invites();

            var that = this;

            jq_invites.each(function(index) {
                if (index >= that.get_LAST_SENT_INVITES_LEFT()) {
                    var jq_invite = $(this);
                    jq_invite.click();
                }
            });

            setTimeout(function() { location.reload(); }, 5000);

            deferred.resolve();

            return deferred.promise();
        },

        scroll_and_cancel : function() {
            var that = this;

            var number_to_find = this.get_LAST_SENT_INVITES_LEFT() + this.MAX_CANCEL_PER_ITERATION + 1;
            this._scroll_until(number_to_find, null, 0, 0)
                .then(function() {
                    that.new_cancel_by_iteration();
                });
        },

        _scroll_until : function(number, deferred, iteration, found) {
            if(!deferred)
                deferred = $.Deferred();

            var that = this;

            er_utils.scroll_down_promise(500)
                .then(function() {
                    var jq_invites = that._get_refreshed_jq_invites();

                    that.invites_found = jq_invites.length;
                    that.trigger_EVENT_MY_INVITES_FOUND();

                    if(jq_invites.length >= number || iteration > that.MAX_NUM_ITERATION_FOR_SCROLL) {
                        deferred.resolve();
                    } else {
                        if(jq_invites.length > found)
                            found = jq_invites.length;
                        else
                            ++iteration;
                        that._scroll_until(number, deferred, iteration, found);
                    }
                });

            return deferred.promise();
        },

        new_cancel_by_iteration : function() {
            var that = this;
            var jq_invites = this._get_refreshed_jq_invites();

            var total = jq_invites.length;

            var last_sent_and_max_per_iteration_idx = that.get_LAST_SENT_INVITES_LEFT() + that.MAX_CANCEL_PER_ITERATION -1;

            jq_invites.each(function(index) {
                if(index >= last_sent_and_max_per_iteration_idx) {
                    if(index == last_sent_and_max_per_iteration_idx)
                        that.start_new_iteration(total);
                } else if (index >= that.get_LAST_SENT_INVITES_LEFT()) {
                    var jq_invite = $(this);
                    jq_invite.click();
                }

            });


        },
        start_new_iteration : function(total) {
            this.increase_iteration_number();
            var iteration = this.get_iteration_number();
            new ERLH_W_Message({ message : this.MAX_CANCEL_PER_ITERATION + ' of ' +total+ ' canceled. Reloading the page for the next iteration'});
            setTimeout(function() { location.reload(); }, 5000);
        },
        trigger_EVENT_MY_INVITES_FOUND : function() {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_MY_INVITES_FOUND, true, true, this.invites_found);
            window.dispatchEvent(evt);
        },
    };
/**
 * Created by erinsasha on 05/01/17.
 */
er_my_invites_canceler_view = window.er_my_invites_canceler_view || {
        type : 'er_my_invites_canceler_view',
        tittle : 'My invites canceller',

        init_main : function() {
            if (this.inited)
                return;

            this.jq_main = $(this._HTML_build_main());
            this._add_handlers();

            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

            if(er_my_invites_canceler.is_my_invites_page())
                er_main_view.show_settings(this.type);

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            if(er_my_invites_canceler.is_my_invites_page()) {
                html += this._HTML_build_content_invites_page();
            } else {
                html += this._HTML_build_content_non_invites_page();
            }

            html += '</div>';
            return html;
        },
        _HTML_build_content_invites_page : function() {
            var html = '';

            html += this._HTML_build_search_status();
            html += this._HTML_build_invites_found();
            html += this._HTML_build_LAST_SENT_INVITES_LEFT_cont();
            if (!er_utils.is_new_style_page())
                html += '<button class="select_invites" data-mode="select"></button>';
            html += '<button class="cancel_invites"></button>';

            return html;
        },
        _HTML_build_content_non_invites_page : function() {
            var html = '';

            html += '<button class="go_to_invites_page"></button>';

            return html;
        },
        _HTML_build_invites_found : function() {
            var invites_found = er_my_invites_canceler.get_invites_found();

            return '<div class="stat_cont invites_found"><span class="title label"></span><span class="er_count_found value">'+invites_found+'</span></div>';
        },
        _HTML_build_LAST_SENT_INVITES_LEFT_cont : function() {
            var html = '<div class="LAST_SENT_INVITES_LEFT_cont er_label_input_cont">';
            html += '<span class="label"></span>';

            html += '<input class="LAST_SENT_INVITES_LEFT" type="number" value="'+er_my_invites_canceler.get_LAST_SENT_INVITES_LEFT()+'">';
            html += '</div>';
            return html;
        },
        _HTML_build_search_status : function() {
            return '<div class="search_status_cont"><span class="label"></span><span class="value"></span></div>';
        },

        _add_handlers : function() {
            this.jq_main.find('.go_to_invites_page').click(this._on_click_btn_go_to_invites_page.bind(this));
            this.jq_main.find('button.cancel_invites').click(this._on_click_btn_cancel_invites.bind(this));

            this.jq_btn_select_invites = this.jq_main.find('.select_invites');
            this.jq_btn_select_invites.click(this._on_click_btn_select_invites.bind(this));

            this.jq_input_LAST_SENT_INVITES_LEFT = this.jq_main.find('input.LAST_SENT_INVITES_LEFT');
            this.jq_input_LAST_SENT_INVITES_LEFT.change(this._on_change_LAST_SENT_INVITES_LEFT.bind(this));

            this.jq_invites_found_value = this.jq_main.find('.invites_found .value');

            this.jq_search_status_cont = this.jq_main.find('.search_status_cont');
            this.jq_search_status_value = this.jq_search_status_cont.find('.value');

            this.closure_status_search_animation = this._status_search_animation.bind(this);

            window.addEventListener(
                er_my_invites_canceler.EVENT_MY_INVITES_FOUND,
                this._on_EVENT_MY_INVITES_FOUND.bind(this),
                false);

            if(er_my_invites_canceler.is_my_invites_page()) {
                if(er_my_invites_canceler.get_iteration_number() > 0) {
                    er_my_invites_canceler.scroll_and_cancel();
                    var w_message = new ERLH_W_Message({
                        message : 'Current iteration #'+er_my_invites_canceler.get_iteration_number() ,
                        close_in : 10000});
                    this._status_search_animation();
                } else {
                    this.begin_invites_search();
                }
            }

        },

        begin_invites_search : function() {
            var that = this;

            this.search_mode = true;

            this.jq_search_status_cont.attr('data-status', 'search');
            this._status_search_animation();
            er_my_invites_canceler.find_bottom_of_the_page()
                .then(function(){
                    that._on_all_invites_found();
                });
        },
        _status_search_animation : function() {
            if (this.search_mode) {
                var val = this.jq_search_status_value.val();
                if (val == '')
                    val = '.';
                else if (val == '.')
                    val = '..';
                else if (val == '..')
                    val = '...';
                else if (val == '...')
                    val = '';
                this.jq_search_status_value.val();

                setTimeout(this.closure_status_search_animation, 500);
            } else {
                this.jq_search_status_value.val('');
            }
        },

        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },
        _on_click_btn_go_to_invites_page : function() {
            er_my_invites_canceler.go_to_my_invites_page();
        },
        _on_click_btn_select_invites : function() {
            if(this.jq_btn_select_invites.attr('data-mode') == 'select') {
                er_my_invites_canceler.old_check_for_cancel();
                this.jq_btn_select_invites.attr('data-mode', 'deselect');
            } else {
                er_my_invites_canceler.old_deselect_all_selected();
                this.jq_btn_select_invites.attr('data-mode', 'select');
            }
        },
        _on_click_btn_cancel_invites : function() {
            //er_my_invites_canceler.cancel();
            er_my_invites_canceler.new_cancel_by_iteration();
        },
        _on_change_LAST_SENT_INVITES_LEFT : function() {
            var value = Number(this.jq_input_LAST_SENT_INVITES_LEFT.val());
            if(isNaN(value)) {
                value = er_my_invites_canceler.CONST_LAST_SENT_INVITES_LEFT;
                er_my_invites_canceler.set_LAST_SENT_INVITES_LEFT(er_my_invites_canceler.CONST_LAST_SENT_INVITES_LEFT);
                this.jq_input_LAST_SENT_INVITES_LEFT.val(value);
            } else if (value <= 0) {
                er_my_invites_canceler.set_LAST_SENT_INVITES_LEFT(0);
                this.jq_input_LAST_SENT_INVITES_LEFT.val(0);
            } else {
                er_my_invites_canceler.set_LAST_SENT_INVITES_LEFT(value);
            }
        },
        _on_EVENT_MY_INVITES_FOUND : function(event) {
            this.jq_invites_found_value.text(event.detail);
        },
        _on_all_invites_found : function() {
            this.search_mode = false;
            this.jq_search_status_cont.attr('data-status', 'finished');
        },
    };
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_my_invites_canceler_view._on_main_view_ready_for_sub_view() });
/**
 * Created by Alex on 30.08.2016.
 */
var er_people_you_may_know = window.er_people_you_may_know || {
    kill_all_hr : function(){
        return;

        var jq_cards = $('.card.pymk-card');
        this._kill_one_hr_recur(jq_cards, 0);
        /*for(var i=0; i<jq_cards.length; i++)
         kill_one_hr($(jq_cards[i]));*/
    },
    /*kill_one_hr : function(jq_card) {
        console.log('kill_one_hr');
        var jq_headline = jq_card.find('.headline');
        var text = jq_headline.text();
        if (text != null) {
            text = text.toLowerCase();
            if (
                text.indexOf('recruit') >= 0 ||
                text.indexOf('персонал') >= 0 ||
                text.indexOf('рекрут') >= 0 ||
                text.indexOf('hr-') == 0 ||
                text.indexOf(' hr-') >= 0 ||
                text.indexOf('hr ') == 0 ||
                text.indexOf('hr,') == 0 ||
                text.indexOf(' hr,') >= 0 ||
                text.indexOf(' hr ') >= 0
            ) {
                console.log('HR FOUND');
                jq_card.find('.bt-close').click();
                console.log('HR KILLED');
            }
        }
    },*/

    /**
     * Убивает одного HR рекурсивно
     * @param jq_cards
     * @param i
     * @private
     */
    _kill_one_hr_recur : function(jq_cards, i) {
        if (i >= jq_cards.length)
            return;
        var that = this;

        var jq_card = $(jq_cards[i]);
        console.log('kill_one_hr');
        var jq_headline = jq_card.find('.headline');
        var text = jq_headline.text();
        if (text != null) {
            text = text.toLowerCase();
            if (
                text.indexOf('recruit') >= 0 ||
                text.indexOf('персонал') >= 0 ||
                text.indexOf('рекрут') >= 0 ||
                text.indexOf('talent') >= 0 ||
                text.indexOf('hr-') == 0 ||
                text.indexOf(' hr-') >= 0 ||
                text.indexOf('hr ') == 0 ||
                text.indexOf('hr,') == 0 ||
                text.indexOf(' hr,') >= 0 ||
                text.indexOf(' hr ') >= 0
            ) {
                console.log('HR FOUND');
                jq_card.find('.bt-close').click();
                console.log('HR KILLED');

                setTimeout(
                    function() { that._kill_one_hr_recur(jq_cards, i+1) },
                    er_utils.getRandomInt(300, 1000)
                );
                return;
            }
        }
        this._kill_one_hr_recur(jq_cards, i+1);
    },  
};
/**
 * Created by erinsasha on 13/01/17.
 */
if(!window.ER_Profile) {
    window.ER_Profile = function (obj) {
        for(key in obj)
            this[key] = obj[key];

        if(obj.t)
            this.t = obj.t;
        else {
            var d = new Date();
            this.t = d.getTime();
        }

        this.phones = this.phones ? this.phones : [];
        this.im = this.im ? this.im : [];
        this.websites = this.websites ? this.websites : [];
        this.positions = this.positions ? this.positions : [];
        this.educations = this.educations ? this.educations : [];
        this.skills = this.skills ? this.skills : [];
    };
    ER_Profile.prototype = {
        save_to_db : function() {
            var d = new Date();
            this.u = d.getTime();

            return er_profilesdb.push_profile(this);
        },
    };
};
/**
 * Created by erinsasha on 10/02/17.
 */
if(!window.ER_Profile_Mini) {
    window.ER_Profile_Mini = function (obj) {
        for(key in obj)
            this[key] = obj[key];

        ER_Profile_Mini.static.extend_mini_profile(this);

        if(obj.t)
            this.t = obj.t;
        else {
            var d = new Date();
            this.t = d.getTime();
        }
    };
    ER_Profile_Mini.prototype = {
        save_to_db : function() {
            var d = new Date();
            this.u = d.getTime();

            return er_mini_profiles_db.push_profile(this);
        },
        get_profile_url : function() {
            return er_universal_profile_helper.get_profile_url_from_id(this.id);
        }
    };
    ER_Profile_Mini.static = {};
    ER_Profile_Mini.static.add_fake_mini_profiles_to_array = function(profiles, ids) {
        var result = [];

        for(var i= 0, id, profile; i<ids.length; i++) {
            id = ids[i];
            profile = ER_Profile_Mini.static.get_profile_from_arraywith_id(profiles, id);
            if(profile)
                result.push(profile);
            else
                result.push(ER_Profile_Mini.static.generate_profiles_for_id(id));
        }

        return result;
    },
    ER_Profile_Mini.static.get_profile_from_arraywith_id = function(profiles, id) {
        for(var i=0; i<profiles.length; i++) {
            if (profiles[i].id == id)
                return profiles[i];
        }
        return null;
    },
    ER_Profile_Mini.static.generate_profiles_for_ids = function(ids) {
        var result = [];

        for(var i=0; i<ids.length; i++) {
            result.push(ER_Profile_Mini.static.generate_profiles_for_id(ids[i]));
        }

        return result;
    };
    ER_Profile_Mini.static.generate_profiles_for_id = function(id) {
        var url;
        if(er_utils.is_new_style_page())
            url = er_utils._ns_get_profile_url_by_id(id);
        else
            url = er_message_broadcast._get_link_for_user_message_page(id);

        var obj = {
            id : id,
            fullname : id,
            url : url,
            avatar : '',
            description : '',
            location : '',
        };

        return new ER_Profile_Mini(obj);
    };
    ER_Profile_Mini.static.extend_mini_profile = function(mini_profile) {
        if (mini_profile.firstname == null || mini_profile.firstname == '') {
            if (mini_profile.fullname != null) {
                var obj_first_last_name = er_utils.get_firstname_lastname_from_fullname(mini_profile.fullname);
                mini_profile.firstname = obj_first_last_name.firstname;
                mini_profile.lastname = obj_first_last_name.lastname;
            }
        }

        if (mini_profile.company == null || mini_profile.company == '') {
            if (mini_profile.description != null) {
                var obj_position_company = er_utils.get_position_company_from_description(mini_profile.description);
                mini_profile.company = obj_position_company.company;
                mini_profile.position = obj_position_company.position;
            }
        }
    };
    /**
     *
     * @param mini_profiles
     * @param options
     * @param options.dists - [1,2,3,10] - relationships
     * @param options.skip_invite_sent
     * @returns {Array}
     */
    ER_Profile_Mini.static.get_profiles_ids_from_profiles_arr = function(mini_profiles, options) {
        options = options ? options : {};
        var result = [];
        var dists = options.dists;
        var skip_invite_sent = options.skip_invite_sent;

        for(var i= 0, mini_profile; i<mini_profiles.length; i++) {
            mini_profile = mini_profiles[i];
            if(!dists || !mini_profile.dist || dists.indexOf(mini_profile.dist) >= 0) {
                if(!skip_invite_sent || mini_profile.invite_sent != 1)
                    result.push(mini_profile.id);
            }

        }

        return result;
    };

    ER_Profile_Mini.static.update_mini_from_max_deferred = function(max_profile) {
        var deferred = $.Deferred();

        er_mini_profiles_db.get_profile(max_profile.id)
            .then(function (mini_profile) {
                if(mini_profile) {
                    var company, position;

                    if(max_profile.positions && max_profile.positions.length > 0) {
                        var org = max_profile.positions[0];
                        company = org.company;
                        position = org.title;
                    }

                    if( !mini_profile.fullname
                        || !mini_profile.firstname
                        || !mini_profile.lastname
                        || !mini_profile.company
                        || !mini_profile.position) {

                        if(!mini_profile.fullname)
                            mini_profile.fullname = max_profile.fullname;
                        if(!mini_profile.firstname)
                            mini_profile.firstname = max_profile.firstname;
                        if(!mini_profile.lastname)
                            mini_profile.lastname = max_profile.lastname;

                        if(!mini_profile.company)
                            mini_profile.company = company;
                        if(!mini_profile.position)
                            mini_profile.position = position;

                        mini_profile.save_to_db()
                            .then(deferred.resolve.bind(deferred));
                    } else {
                        deferred.resolve(mini_profile);
                    }
                } else {
                    ER_Profile_Mini.static.create_mini_from_max_deferred(max_profile)
                        .then(deferred.resolve.bind(deferred));
                }
            });

        return deferred.promise();
    };
    ER_Profile_Mini.static.create_mini_from_max_deferred = function(max_profile) {
        var company, position;

        if(max_profile.positions && max_profile.positions.length > 0) {
            var org = max_profile.positions[0];
            company = org.company;
            position = org.title;
        }

        var mini_profile = new ER_Profile_Mini({
            id : max_profile.id,
            fullname : max_profile.fullname,
            url : max_profile.url,
            firstname : max_profile.firstname,
            lastname : max_profile.lastname,
            description : max_profile.title,
            avatar : max_profile.avatar,
            dist : max_profile.dist,
            company : company,
            position : position
        });

        return mini_profile.save_to_db();
    };
};
/**
 * Created by erinsasha on 14/01/17.
 */
if (!window.ER_Profiles_List) {
    window.ER_Profiles_List = function (obj) {
        this.id = obj.id ? obj.id : obj.name;
        this.name = obj.name;
        this.indexed_ids = obj.indexed_ids ? obj.indexed_ids : [];
        this.index_queue = obj.index_queue ? obj.index_queue : [];
        this.sn_ids = obj.sn_ids ? obj.sn_ids : [];
        if(obj.t)
            this.t = obj.t;
        else {
            var d = new Date();
            this.t = d.getTime();
        }
    };
    ER_Profiles_List.prototype = {
        get_extracted_counter : function() {
            return this.indexed_ids.length;
        },
        get_in_queue_counter : function() {
            return this.index_queue.length;
        },

        get_all_ids_in_queue : function() {
            return this.index_queue;
        },
        get_all_ids_in_extracted : function() {
            return this.indexed_ids;
        },
        get_uniq : function(ids) {
            ids = er_utils.get_array_uniq(ids, this.indexed_ids);
            return er_utils.get_array_uniq(ids, this.index_queue);
        },

        set_ids_in_queue : function(ids) {
            this.index_queue = ids;
        },
        set_ids_in_extracted : function(ids) {
            this.indexed_ids = ids;
        },

        refresh_and_save : function() {
            var deferred = $.Deferred();

            if(this.index_queue.length == 0 || this.id == er_profiles_list_control.CONST_ALL_PROFILES_LIST_ID)
                deferred.resolve();
            else
                this.refresh()
                    .then(this.save_to_db.bind(this))
                    .then(function() {
                        deferred.resolve();
                    });

            return deferred.promise();
        },
        refresh : function() {
            var deferred = $.Deferred();

            if(this.index_queue.length == 0 || this.id == er_profiles_list_control.CONST_ALL_PROFILES_LIST_ID)
                deferred.resolve();
            else {
                er_profiles_list_control.get_full_list_with_all_profiles()
                    .then(this.refresh_using_all.bind(this))
                    .then(function() {
                        deferred.resolve();
                    });
            }

            return deferred.promise();
        },
        refresh_using_all : function(all_ER_Profiles_List) {
            this.delete_empty_id();

            if(!er_profiles_list_control.get_refresh_all_mode()) {
                var deferred = $.Deferred();
                deferred.resolve();
                return deferred.promise();
            }

            var ready_ids = er_utils.get_array_intersection(this.index_queue, all_ER_Profiles_List.indexed_ids);
            for(var i=0; i<ready_ids.length; i++)
                this.add_profile_id_to_indexed_ids(ready_ids[i]);

            return this._refresh_using_all_sn_ids(all_ER_Profiles_List);
        },
        _refresh_using_all_sn_ids : function(all_ER_Profiles_List) {
            var deferred = $.Deferred();
            var processed_sn_ids_from_all_in_index_queue = er_utils.get_array_intersection(all_ER_Profiles_List.sn_ids, this.index_queue);
            if (processed_sn_ids_from_all_in_index_queue.length == 0) {
                deferred.resolve();
                return deferred.promise();
            }

            var that = this;

            er_sn_ids_map_db.get_maps_by_snids(processed_sn_ids_from_all_in_index_queue)
                .then(function(maps) {
                    var ids = er_sn_ids_map_db.build_array_of_ids_from_maps(maps);
                    that.add_profiles_ids_to_queue(ids);
                    // удалит из add_profiles_ids_to_queue, но без этого не будет добавлено в indexed
                    that.add_profiles_ids_to_indexed_ids(ids);
                    that.add_profiles_ids_to_sn_ids(processed_sn_ids_from_all_in_index_queue);
                    that.delete_ids_from_index_queue(processed_sn_ids_from_all_in_index_queue);

                    deferred.resolve();
                });

            return deferred.promise();
        },
        add_profiles_ids_to_queue : function(profiles_ids) {
            for(var i=0; i<profiles_ids.length; i++) {
                this.add_profile_id_to_queue(profiles_ids[i]);
            }
        },
        add_profile_id_to_queue : function(profile_id, add_to_start) {
            if (profile_id != null && profile_id != ''
                && this.index_queue.indexOf(profile_id) < 0
                && this.indexed_ids.indexOf(profile_id) < 0
                && this.sn_ids.indexOf(profile_id) < 0
            )
                if(add_to_start)
                    this.index_queue.unshift(profile_id);
                else
                    this.index_queue.push(profile_id);
        },
        add_profiles_ids_to_indexed_ids : function(profiles_ids) {
            for(var i=0; i<profiles_ids.length; i++)
                this.add_profile_id_to_indexed_ids(profiles_ids[i]);
        },
        add_profile_id_to_indexed_ids : function(profile_id) {
            var queue_pos = this.index_queue.indexOf(profile_id);
            if (queue_pos >= 0)
                this.index_queue.splice(queue_pos, 1);
            else if(window.escape) {
                var escaped_profile_id = escape(profile_id);
                queue_pos = this.index_queue.indexOf(escaped_profile_id);
                if (queue_pos >= 0) {
                    this.index_queue.splice(queue_pos, 1);
                    profile_id = escaped_profile_id;
                }
            }
            else if (this.id != er_profiles_list_control.CONST_ALL_PROFILES_LIST_ID)
                return;
            if (this.indexed_ids.indexOf(profile_id) < 0)
                this.indexed_ids.push(profile_id);
        },
        add_profiles_ids_to_sn_ids : function(profiles_ids) {
            this.sn_ids = er_utils.get_array_merge(profiles_ids, this.sn_ids);
        },
        add_profile_id_to_sn_ids : function(id) {
            if(this.sn_ids.indexOf(id) < 0)
                this.sn_ids.push(id);
        },
        save_to_db : function() {
            return er_profiles_list_db.push_list(this);
        },
        get_first_profile_queued_id : function() {
            if (this.index_queue && this.index_queue.length > 0) {
                var id = this.index_queue[0];
                if (id == '') {
                    this.delete_first_id_from_index_queue();
                    return this.get_first_profile_queued_id();
                } else {
                    return id;
                }
            } else
                return null;
        },
        replace_snid_by_id : function(id, snid) {
            this.add_profile_id_to_queue(id, true);
            this.move_id_from_index_queue_to_sn_ids(snid);
        },
        move_id_from_index_queue_to_sn_ids : function(id) {
            this.add_profile_id_to_sn_ids(id);
            this.delete_id_from_index_queue(id);
        },
        delete_first_id_from_index_queue : function() {
            if(this.index_queue.length > 0)
                return this.index_queue.shift();
            else
                return null;
        },
        delete_ids_from_index_queue : function(ids) {
            this.index_queue = er_utils.get_array_uniq(this.index_queue, ids);
        },
        delete_id_from_index_queue : function(id) {
            var queue_pos = this.index_queue.indexOf(id);
            if (queue_pos >= 0)
                this.index_queue.splice(queue_pos, 1);
        },
        delete_empty_id : function() {
            this.delete_id_from_index_queue('');
        },
    }
}
/**
 * Created by erinsasha on 14/01/17.
 */
if (!window.ER_Profiles_Mini_List) {
    window.ER_Profiles_Mini_List = function (obj) {
        this.id = obj.id ? obj.id : obj.name;
        this.name = obj.name;

        if(obj.t)
            this.t = obj.t;
        else {
            var d =  new Date();
            this.t = d.getTime();
        }
    };
    ER_Profiles_Mini_List.prototype = {

    }
}
/**
 * Created by erinsasha on 07/08/17.
 */
// ER_W_MiniProfile_Editor

/**
 *
 * @param options
 * @param options.profile_id
 * @param options.jq_parent
 * @param options.on_close
 * @param options.on_cancel
 * @param options.on_changed
 * @constructor
 */
function ER_W_MiniProfile_Editor(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.profile_id = options.profile_id;

    this.options = options;

    this._process();
}

ER_W_MiniProfile_Editor.prototype = {
    _process : function() {
        var that = this;

        er_mini_profiles_db.get_profile(this.profile_id)
            .then(function(profile) {
                that.profile = profile;
                that._build();
            });
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_MiniProfile_Editor">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += '<p class="erlh_header">Edit Profile</p>';

        html += this._build_HTML_fields_cont();
        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_fields_cont : function() {
        var html = '<div class="erlh_fields_cont">';

        html += '<div class="firstname_cont"></div>';
        html += '<div class="lastname_cont"></div>';
        html += '<div class="company_cont"></div>';
        html += '<div class="position_cont"></div>';
        html += '<div class="description_cont"></div>';
        
        html += '</div>';
        return html;
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_save_cont"></span>';

        html += '</div>';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_fields();
        this._build_buttons();

        this._add_handlers();
    },
    _build_fields : function() {
        var jq_fields_cont = this.jq_main_content.children('.erlh_fields_cont');
        this._build_firstname_input(jq_fields_cont.children('.firstname_cont'));
        this._build_lastname_input(jq_fields_cont.children('.lastname_cont'));
        this._build_company_input(jq_fields_cont.children('.company_cont'));
        this._build_position_input(jq_fields_cont.children('.position_cont'));
        this._build_description_input(jq_fields_cont.children('.description_cont'));
    },
    _build_firstname_input : function(jq_parent) {
        this.w_firstname_input = new ERLH_W_Input({
            html_class : 'er_firstname',
            jq_parent : jq_parent,
            input_attrs : {
                placeholder : 'First name',
                value : this.profile.firstname
            },
            on_change : this._on_change.bind(this),
            on_keyup : this._on_change.bind(this)
        })
    },
    _build_lastname_input : function(jq_parent) {
        this.w_lastname_input = new ERLH_W_Input({
            html_class : 'er_lastname',
            jq_parent : jq_parent,
            input_attrs : {
                placeholder : 'Last name',
                value : this.profile.lastname
            },
            on_change : this._on_change.bind(this),
            on_keyup : this._on_change.bind(this)
        })
    },
    _build_company_input : function(jq_parent) {
        this.w_company_input = new ERLH_W_Input({
        html_class : 'er_company',
            jq_parent : jq_parent,
            input_attrs : {
                placeholder : 'Company',
                value : this.profile.company
            },
            on_change : this._on_change.bind(this),
            on_keyup : this._on_change.bind(this)
        })
    },
    _build_position_input : function(jq_parent) {
        this.w_position_input = new ERLH_W_Input({
            html_class : 'er_position',
            jq_parent : jq_parent,
            input_attrs : {
                placeholder : 'Position',
                value : this.profile.position
            },
            on_change : this._on_change.bind(this),
            on_keyup : this._on_change.bind(this)
        })
    },
    _build_description_input : function(jq_parent) {
        this.w_description_input = new ERLH_W_Input({
            html_class : 'er_description',
            jq_parent : jq_parent,
            input_attrs : {
                placeholder : 'Description',
                value : this.profile.description
            },
            on_change : this._on_change.bind(this),
            on_keyup : this._on_change.bind(this)
        })
    },

    _build_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_save = new ERLH_W_Button({
            html_class : 'btn_save',
            jq_parent : jq_btns_cont.children('.btn_save_cont'),
            text : 'Save',
            disabled : false,
            on_click : this._on_click_btn_save.bind(this)
        });
    },

    _add_handlers : function() {

    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    gather_request : function() {
        var profile = {};
        profile.id = this.profile_id;

        if(this.profile) {
            var keys = Object.keys(this.profile);
            for(var i= 0, key; i<keys.length; i++) {
                key = keys[i];
                profile[key] = this.profile[key];
            }
        }

        profile.firstname = this.w_firstname_input.get();
        profile.lastname = this.w_lastname_input.get();
        profile.company = this.w_company_input.get();
        profile.position = this.w_position_input.get();
        profile.description = this.w_description_input.get();

        return profile;
    },

    _on_change : function() {

    },

    _on_click_btn_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },

    _on_click_btn_save : function() {
        var that = this;

        var profile = this.gather_request();
        profile = new ER_Profile_Mini(profile);
        profile.save_to_db()
            .then(function() {
                that.profile = profile;
                that._on_click_profile_saved();
            })
    },
    _on_click_profile_saved : function() {
        new ERLH_W_Message({ message : 'The profile has been saved!' });
        this.close();
        if(this.options.on_changed)
            this.options.on_changed(this.profile);
    },

};
/**
 * Created by erinsasha on 08/05/17.
 */

function ER_W_Profiles_List_Selector(options) {
  this.options = options;
  this.jq_parent = options.jq_parent;

  this._build();
}

ER_W_Profiles_List_Selector.prototype = {
    _build : function() {
        this.w_selector = new ERLH_W_Select({
          html_class : 'ER_W_Profiles_List_Selector',
          jq_parent : this.jq_parent,
          label : 'Choose list',
          ids_to_options : {},
          on_change : this._on_change_selector.bind(this)
        });

        er_profiles_list_control.get_all_mini()
            .then(this.add_mini_lists.bind(this));
    },
    add_mini_lists : function(mini_lists) {
        for(var i=0; i<mini_lists.length; i++)
            this.add_mini_list(mini_lists[i]);
    },
    add_mini_list : function(mini_list) {
        this.w_selector.add_option({
            id : mini_list.id,
            name : mini_list.name
        })
    },

    show : function() {
        this.w_selector.show();
    },
    hide : function() {
        this.w_selector.hide();
    },

    get : function() {
        return this.w_selector.get();
    },

    _on_change_selector : function(id) {
        if(this.options.on_change)
            this.options.on_change(id);
    },

};
/**
 * Created by Alex on 11.03.2017.
 */
//ER_Widget_Delete_Active_Profiles_List
function ER_Widget_Delete_Active_Profiles_List(options) {
    this.options = options;
    this.jq_parent = this.options.jq_parent;

    this.build_main_view();
};

ER_Widget_Delete_Active_Profiles_List.prototype = {
    _HTML_build_main_view : function() {
        var er_inactive = er_profiles_list_control.is_default_list_active() ? 'er_inactive' : '';
        return '<button class="ER_Widget_Delete_Active_Profiles_List danger '+er_inactive+'"></button>';
    },
    _add_handlers : function() {
        window.addEventListener(
            er_profiles_list_control.EVENT_ACTIVE_PROFILES_LIST_SWITCHED,
            this.on_EVENT_ACTIVE_PROFILES_LIST_SWITCHED.bind(this),
            false);

        this.jq_main.click(this.on_click_button.bind(this));
    },
    build_main_view : function(jq_parent) {
        if(jq_parent)
            this.jq_parent = jq_parent;

        var html = this._HTML_build_main_view();
        this.jq_main = $(html).appendTo(this.jq_parent);
        this._add_handlers();
    },

    on_click_button : function() {
        if(this.jq_main.hasClass('er_inactive'))
            return;

        var message = er_translator.get_text('ER_Widget_Delete_Active_Profiles_List', 'messages', 'need_delete_list');
        message = message.replace(/{PROFILES_LIST}/g,er_profiles_list_control.get_active_id());

        er_main_view.show_yes_no_dialog(
            message,
            this.on_click_yes_delete_list.bind(this)
        );
    },
    on_click_yes_delete_list : function() {
        er_profiles_list_control.delete_list_of_list(er_profiles_list_control.get_active_id());
    },
    on_EVENT_ACTIVE_PROFILES_LIST_SWITCHED : function(event) {
        if(er_profiles_list_control.is_default_list_active()) {
            this.jq_main.addClass('er_inactive');
        } else {
            this.jq_main.removeClass('er_inactive');
        }
    },
};
/**
 * Created by erinsasha on 12/08/17.
 */

// W_Profiles_Extractor_Timeout_Settings

/**
 *
 * @param options
 * @param options.jq_parent
 * @constructor
 */
function ER_W_Profiles_Extractor_Timeout_Settings(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.options = options;

    this._process();
}

ER_W_Profiles_Extractor_Timeout_Settings.prototype = {
    _process : function() {
        this.w_timeout_settings = new ER_W_Timeout_Settings({
            header : 'Timeouts for Profiles Extractor',
            timeouts_names : er_profile_extractor_timeouts.const_timeouts_names,
            timeouts : er_profile_extractor_timeouts.get_timeouts(),
            fast_timeouts : er_profile_extractor_timeouts.const_timeout_fast,
            safe_timeouts : er_profile_extractor_timeouts.const_timeout_safe,
            jq_parent : this.jq_parent,
            callback_save_settings : er_profile_extractor_timeouts.save_timeouts_from_object.bind(er_profile_extractor_timeouts)
        });
    },
};
/**
 * Created by erinsasha on 23/01/17.
 */
var er_profiles_common_csv = window.er_profiles_common_csv || {
        csv_string : null,
        profiles : null,
        delimiter : ',',

        common_header_columns : [
            'id',
            'Full name',
            'Email',
            'Profile url',
            'First name',
            'Last name',
            'Title',
            'Avatar',
            'Location',
            'Address',
            'Birthday',
            'Summary',
            'Twitter',
            'Phone 1',
            'Phone 1 type',
            'Phone 2',
            'Phone 2 type',
            'Phone 3',
            'Phone 3 type',
            'Messenger 1',
            'Messenger 1 type',
            'Messenger 2',
            'Messenger 2 type',
            'Messenger 3',
            'Messenger 3 type',
            'Website 1',
            'Website 2',
            'Website 3',
            'Organization 1',
            'Organization Title 1',
            'Organization Start 1',
            'Organization End 1',
            'Organization Description 1',
            'Organization Location 1',
            'Organization LI URL 1',
            'Organization LI ID 1',
            'Organization 2',
            'Organization Title 2',
            'Organization Start 2',
            'Organization End 2',
            'Organization Description 2',
            'Organization Location 2',
            'Organization LI URL 2',
            'Organization LI ID 2',
            'Organization 3',
            'Organization Title 3',
            'Organization Start 3',
            'Organization End 3',
            'Organization Description 3',
            'Organization Location 3',
            'Organization LI URL 3',
            'Organization LI ID 3',
            'Organization 4',
            'Organization Title 4',
            'Organization Start 4',
            'Organization End 4',
            'Organization Description 4',
            'Organization Location 4',
            'Organization LI URL 4',
            'Organization LI ID 4',
            'Organization 5',
            'Organization Title 5',
            'Organization Start 5',
            'Organization End 5',
            'Organization Description 5',
            'Organization Location 5',
            'Organization LI URL 5',
            'Organization LI ID 5',
            'Organization 6',
            'Organization Title 6',
            'Organization Start 6',
            'Organization End 6',
            'Organization Description 6',
            'Organization Location 6',
            'Organization LI URL 6',
            'Organization LI ID 6',
            'Organization 7',
            'Organization Title 7',
            'Organization Start 7',
            'Organization End 7',
            'Organization Description 7',
            'Organization Location 7',
            'Organization LI URL 7',
            'Organization LI ID 7',
            'Education 1',
            'Education Degree 1',
            'Education FOS 1',
            'Education Grade 1',
            'Education Start 1',
            'Education End 1',
            'Education Description 1',
            'Education 2',
            'Education Degree 2',
            'Education FOS 2',
            'Education Grade 2',
            'Education Start 2',
            'Education End 2',
            'Education Description 2',
            'Education 3',
            'Education Degree 3',
            'Education FOS 3',
            'Education Grade 3',
            'Education Start 3',
            'Education End 3',
            'Education Description 3',
            'Skills',
            'Followers',
            'Relationship',
            'Connected at',
            'Industry',
        ],

        generate_csv_file_for_active_list : function() {
            return this.generate_csv_file_for_list_id(er_profiles_list_control.get_active_id())
        },
        generate_csv_file_for_list_id : function(list_id) {
            var deferred = $.Deferred();

            er_profiles_list_control.get_list(list_id)
                .then(this.generate_csv_file_for_list.bind(this))
                .then(function(result) {
                    deferred.resolve(result);
                });

            return deferred.promise();
        },
        generate_csv_file_for_list : function(list) {
            return this.generate_csv_file_for_ids(list.indexed_ids);
            /*

            var deferred = $.Deferred();

            this.csv_string = null;
            this.profiles = null;

            var that = this;

            er_profilesdb.get_profiles(list.indexed_ids)
                .then(function(profiles) {
                    that.profiles = profiles;
                    that._generate_csv_file();
                    ////console.log(that.csv_string);
                    that._generate_uri();
                    deferred.resolve();
                });

            return deferred.promise();*/
        },
        generate_csv_file_for_ids : function(ids) {
            var deferred = $.Deferred();

            this.csv_string = null;
            this.profiles = null;

            var that = this;

            er_profilesdb.get_profiles(ids)
                .then(function(profiles) {
                    that.profiles = profiles;
                    that._generate_csv_file();
                    ////console.log(that.csv_string);
                    that._generate_uri();
                    deferred.resolve();
                });

            return deferred.promise();
        },

        _generate_csv_file : function() {
            this.csv_string = this._generate_csv_header();

            for(var i=0; i<this.profiles.length; i++) {
                this.csv_string += ('\n' + this._generate_csv_data_raw(this.profiles[i]));
            }
        },
        _generate_csv_header : function() {
            return this._array_to_csv_string(this.common_header_columns);
        },
        _generate_csv_data_raw : function(profile) {
            //console.log(profile);
            var arr = [];

            arr.push(profile.id);
            arr.push(profile.fullname);
            arr.push(profile.email);
            arr.push(profile.url);
            arr.push(profile.firstname);
            arr.push(profile.lastname);
            arr.push(profile.title);
            arr.push(profile.avatar);
            arr.push(profile.location);
            arr.push(profile.address);
            arr.push(profile.birthday);
            arr.push(profile.summary);
            arr.push(profile.twitter);
            this._add_phones(profile, arr);
            this._add_messengers(profile, arr);
            this._add_websites(profile, arr);
            this._add_organizations(profile, arr);
            this._add_educations(profile, arr);
            this._add_skills(profile, arr);
            arr.push(profile.followers);
            arr.push(profile.dist);
            arr.push(profile.connected_at);
            arr.push(profile.industry);

            var result = this._array_to_csv_string(arr);
            ////console.log(result);
            return result;
        },

        _generate_uri : function() {
            //var uriContent = "data:application/octet-stream," + encodeURIComponent(this.csv_string);
            //var newWindow = window.open(uriContent, 'neuesDokument');

            this._download('contacts.csv', this.csv_string);
        },
        _download : function(filename, text) {
            var pom = document.createElement('a');

            csvData = new Blob([text], { type: 'text/csv' });
            var csvUrl = URL.createObjectURL(csvData);

            //pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            pom.setAttribute('href', csvUrl);
            pom.setAttribute('download', filename);

            if (document.createEvent) {
                var event = document.createEvent('MouseEvents');
                event.initEvent('click', true, true);
                pom.dispatchEvent(event);
            }
            else {
                pom.click();
            }
        },

        _add_phones : function(profile, arr) {
            for(var i=0; i<profile.phones.length; i++)
                this._add_phone(profile.phones[i], arr);
            if (profile.phones.length < 3) {
                this._add_null_to_arr(arr, (3-profile.phones.length)*2);
            }
        },
        _add_phone : function(phone, arr) {
            arr.push(phone.p);
            arr.push(phone.t);
        },

        _add_messengers : function(profile, arr) {
            for(var i=0; i<profile.im.length; i++)
                this._add_messenger(profile.im[i], arr);
            if (profile.im.length < 3) {
                this._add_null_to_arr(arr, (3-profile.im.length)*2);
            }
        },
        _add_messenger : function(im, arr) {
            arr.push(im.l);
            arr.push(im.t);
        },

        _add_websites : function(profile, arr) {
            for(var i= 0; i < profile.websites.length; i++) {
                arr.push(profile.websites[i]);
            }
            if (profile.websites.length < 3) {
                this._add_null_to_arr(arr, 3-profile.websites.length);
            }
        },

        _add_organizations : function(profile, arr) {
            for(var i=0; i<profile.positions.length && i<7; i++)
                this._add_organization(profile.positions[i], arr);
            if (profile.positions.length < 7) {
                this._add_null_to_arr(arr, (7-profile.positions.length)*8);
            }
        },
        _add_organization : function(org, arr) {
            arr.push(org.company);
            arr.push(org.title);
            arr.push(org.time_start);
            arr.push(org.time_end);
            arr.push(org.description);
            arr.push(org.location);
            arr.push(org.company_li_url);
            arr.push(org.company_id);
        },

        _add_educations : function(profile, arr) {
            for(var i=0; i<profile.educations.length && i < 3; i++)
                this._add_education(profile.educations[i], arr);
            if (profile.educations.length < 3) {
                this._add_null_to_arr(arr, (3-profile.educations.length)*7);
            }
        },
        _add_education : function(ed, arr) {
            arr.push(ed.school);
            arr.push(ed.degree);
            arr.push(ed.fos);
            arr.push(ed.grade);
            arr.push(ed.time_start);
            arr.push(ed.time_end);
            arr.push(ed.description);
        },

        _add_skills : function(profile, arr) {
            var rez = '"';

            for(var i=0; i<profile.skills.length; i++) {
                rez += this._generate_skill_str(profile.skills[i]) + ', ';
            }
            rez += '"';

            arr.push(rez);
        },
        _generate_skill_str : function(skill) {
            return skill.n + ' : ' + (skill.c ? skill.c : 0);
        },

        _add_null_to_arr : function(arr, amount) {
            for(var i=0; i<amount; i++)
                arr.push(null);
        },
        _array_to_csv_string : function(arr) {
            var rez = '';

            for(var i=0; i<arr.length; i++) {
                if(i+1 == arr.length)
                    rez += this._field_csv_field(arr[i]);
                else
                    rez += this._field_csv_field(arr[i]) + this.delimiter;
            }

            return rez;
        },
        _field_csv_field : function(field) {
            if (field == null)
                return '';
            if(typeof field === "string") {
                field = field.trim().replace(/\n/g,' ').replace(/"/g,'""');
                if(field.indexOf(this.delimiter) >=0 )
                    field = '"' + field + '"';
            }

            return field;
        }
    };
/**
 * Created by erinsasha on 19/01/17.
 */
var er_profile_extractor = window.er_profile_extractor || {
        WARNING_THRESHOLD_LIMIT : 400,
        DEFAULT_EXTRACT_LIMIT_PER_PERIOD : 400,
        DEFAULT_PERIOD_HOURS : 24,
        CONST_CURRENT_PERIOD_STARTED : 'STARTED',
        CONST_CURRENT_PERIOD_FINISHED : 'FINISHED',

        get_mode_profile_extract : function() {
            return localStorage.er_profile_extract_mode == 'true';
        },
        set_mode_profile_extract : function(value) {
            if(value === true || value == 'true' || value == 'TRUE')
                localStorage.er_profile_extract_mode = 'true';
            else {
                localStorage.er_profile_extract_mode = 'false';
                this.tab_delete_mode();
            }
        },

        tab_add_mode : function() {
            er_tabs_control.add_active_mode('er_profile_extract_mode');
        },
        tab_delete_mode : function() {
            er_tabs_control.delete_active_mode('er_profile_extract_mode');
        },
        tab_is_active_in : function() {
            return er_tabs_control.is_mode_active('er_profile_extract_mode');
        },

        get_extract_limit_per_period : function() {
            var limit = Number(localStorage.er_profile_extract_limit_per_period);
            if (isNaN(limit)) {
                localStorage.er_profile_extract_limit_per_period = this.DEFAULT_EXTRACT_LIMIT_PER_PERIOD;
                limit = this.DEFAULT_EXTRACT_LIMIT_PER_PERIOD;
            }
            return limit;
        },
        set_extract_limit_per_period : function(value) {
            var limit = Number(value);
            if (isNaN(limit) || limit <= 0) {
                return false;
            }
            localStorage.er_profile_extract_limit_per_period = limit;
        },

        get_period_hours : function() {
            var limit = Number(localStorage.er_profile_extract_period_hours);
            if (isNaN(limit)) {
                localStorage.er_profile_extract_period_hours = this.DEFAULT_PERIOD_HOURS;
                limit = this.DEFAULT_PERIOD_HOURS;
            }
            return limit;
        },
        set_period_hours : function(value) {
            var limit = Number(value);
            if (isNaN(limit) || limit <= 0) {
                return false;
            }
            localStorage.er_profile_extract_period_hours = limit;
        },

        is_limits_are_safe : function() {
            var x = 24 * this.get_extract_limit_per_period() / this.get_period_hours();
            return x <= this.WARNING_THRESHOLD_LIMIT;
        },

        is_get_current_period_state_STARTED : function() {
            return this.CONST_CURRENT_PERIOD_STARTED = this.get_current_period_state();
        },
        get_current_period_state : function() {
            var current_period_state = localStorage.er_profile_current_period_state;
            if (current_period_state == this.CONST_CURRENT_PERIOD_STARTED ) {
                return this.CONST_CURRENT_PERIOD_STARTED;
            } else {
                return this.CONST_CURRENT_PERIOD_FINISHED;
            }
        },
        set_current_period_state : function(value) {
            if (value == this.CONST_CURRENT_PERIOD_STARTED || value === true) {
                localStorage.er_profile_current_period_state = this.CONST_CURRENT_PERIOD_STARTED;
            } else {
                localStorage.er_profile_current_period_state =  this.CONST_CURRENT_PERIOD_FINISHED;
            }
        },

        get_extracted_in_current_period : function() {
            var value = Number(localStorage.er_profile_extracted_in_current_period);
            if (isNaN(value)) {
                value = 0;
            }
            return value;
        },
        set_extracted_in_current_period : function(value) {
            value = Number(value);
            if (isNaN(value))
                return;
            localStorage.er_profile_extracted_in_current_period = value;
        },
        increase_extracted_in_current_period : function(delta) {
            localStorage.er_profile_extracted_in_current_period = delta + this.get_extracted_in_current_period();
        },

        /**
         * Возвращает дату начала следующего периода
         * @returns {*}
         */
        get_next_period_start : function() {
            var date = localStorage.er_profile_next_starts_at;

            if (date != null && date != '')
                date = new Date(JSON.parse(date));

            if (date instanceof Date && !isNaN(date.getHours()) && new Date < date) {
                return date;
            } else {
                return null;
            }
        },
        /**
         * Задает через сколько должен запуститься следующий период от текущего момента
         * @returns {number}
         */
        set_next_period_start : function() {
            var date = new Date();
            // Количество миллисекунд до следующего запуска
            var wait_milli_seconds = 3600000*this.get_period_hours();
            date.setTime(date.getTime() + wait_milli_seconds);
            localStorage.er_profile_next_starts_at = JSON.stringify(date);

            return wait_milli_seconds;
        },
        /**
         * Возвращает количество миллисекунд между текущем временем и временем следующего запуска
         */
        get_diff_between_now_and_next_period_start : function() {
            var nextStartDate = this.get_next_period_start();
            if (nextStartDate == null) {
                return 0;
            } else {
                var currDate = new Date();
                return nextStartDate.getTime() - currDate.getTime();
            }
        },

        reset_current_period : function() {
            this.set_extracted_in_current_period(0);
            delete localStorage.er_profile_next_starts_at;
        },
        check_should_continue_work : function(is_need_setup_waiter) {
            er_logger.log('check_should_continue_work');

            if(!this.get_mode_profile_extract())
                return false;
            if(this.get_extracted_in_current_period() < this.get_extract_limit_per_period())
                return true;
            else
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_FINISHED);

            var diff = this.get_diff_between_now_and_next_period_start();
            if (diff <= 0) {
                er_logger.log('must continue');
                this.reset_current_period();
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_STARTED);
                return true;
            } else {
                if (is_need_setup_waiter) {
                    er_logger.log('check_should_continue_work : should sleep = '+diff);
                    setTimeout(this.process.bind(this), diff);
                    new ER_W_Timeout_Clock({
                        timeout : diff,
                        techname : 'profiles_next_period',
                        description : 'Start next iteration of Profiles Extraction'
                    });
                }
                return false;
            }
        },

        begin_process : function() {
            var that = this;

            var evtPK = document.createEvent("CustomEvent");
            evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                function(result) {
                    if (result) {
                        that.reset_current_period();
                        that.set_current_period_state(true);
                        if(er_utils.is_profile_page())
                            that.process();
                        else
                            that.go_to_next_profile();
                    } else {
                        that._on_license_not_valid();
                    }
                }
            );
            window.dispatchEvent(evtPK);
        },

        process : function() {
            var that = this;

            var evtPK = document.createEvent("CustomEvent");
            evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                function(result) {
                    if (result) {
                        that._process();
                    } else {
                        that._on_license_not_valid();
                    }
                }
            );
            window.dispatchEvent(evtPK);
        },
        _process : function() {
            if(!this.check_should_continue_work(true))
                return;

            var that = this;

            if(er_utils.is_current_page_deleted_profile()) {
                er_profiles_list_control.delete_from_queue_first_id()
                    .then(this._on_process_single_page_finished.bind(this));
            } else if(er_utils.is_sales_navigator_profile_page()) {
                this._process_sales_navigator_profile_page()
                    .then(this._on_process_single_page_finished.bind(this));
            } else {
                this.process_single_page()
                    .then(function() {
                        setTimeout(
                            that._on_process_single_page_finished.bind(that),
                            er_utils.getRandomInt(100, 200)
                        );
                    });
            }
        },
        _on_process_single_page_finished : function() {
            var that = this;

            if(this.get_extracted_in_current_period() >= this.get_extract_limit_per_period()) {
                this.set_next_period_start();
                this.set_current_period_state(this.CONST_CURRENT_PERIOD_FINISHED);
            }

            if(this.check_should_continue_work(false))
                setTimeout(
                    that.go_to_next_profile.bind(that),
                    er_profile_extractor_timeouts.get_random_timeout('go_to_next_contact')
                );
            else {
                var diff = this.get_diff_between_now_and_next_period_start();
                if (diff > 0) {
                    setTimeout(this.go_to_next_profile.bind(this), diff);
                    new ER_W_Timeout_Clock({
                        timeout : diff,
                        techname : 'profiles_extractor_next_period',
                        description : 'Start next iteration of Profiles Extraction'
                    });
                }
            }

        },

        process_single_page : function(options) {
            options = options ? options : {};
            var deferred = $.Deferred();
            var that = this;

            this._wait_and_extract_profile_to_memory()
                .then(this._save_extracted_object_to_db.bind(this))
                .then(er_profiles_list_control.init.bind(er_profiles_list_control))
                .then(function() {
                    er_logger.log('Trying to push_profile_id_to_indexed_ids');
                    er_profiles_list_control.push_profile_id_to_indexed_ids(that.profile.id)
                        .then(function() {
                            that.increase_extracted_in_current_period(1);
                            deferred.resolve();
                            console.log('er_profile_extractor.process_single_page finished');
                        })
                });

            return deferred.promise();
        },

        go_to_next_profile : function() {
            er_logger.log('go_to_next_profile');

            er_profiles_list_control.get_first_profile_queued_id_in_active_list()
                .then(function(profile_id) {
                    er_logger.log('go_to_next_profile profile_id='+profile_id);
                    if (profile_id) {
                        var url;
                        if (er_utils.is_sales_navigator_profile_id(profile_id))
                            url = er_utils.get_profile_url_from_sale_navigator_profile_id(profile_id);
                        else
                            url = er_utils._ns_get_profile_url_by_id(profile_id);
                        window.location.assign(url);
                    }
                });
        },

        _save_extracted_object_to_db : function() {
            var deferred = $.Deferred();
            er_logger.log('Profile extracted to memory');
            er_logger.log('Trying to save to DB');

            var that = this;
            this.profile.save_to_db()
                .then(function() {
                    er_logger.log('Full profiles saved to DB');
                    er_logger.log('Trying to mini-profile save to DB');
                    ER_Profile_Mini.static.update_mini_from_max_deferred(that.profile)
                        .then(function() {
                            er_logger.log('Mini profiles saved to DB');
                            deferred.resolve(that.profile);
                        })
                });

            return deferred.promise();
        },
        _wait_and_extract_profile_to_memory : function() {
            var deferred = $.Deferred();
            var that = this;

            this._profile_full_page_load_waiter()
                .then(function(){
                    that._build_profile_object();
                    deferred.resolve();
                });

            return deferred.promise();
        },

        _profile_full_page_load_waiter : function() {
            console.log('_profile_full_page_load_waiter');
            var deferred = $.Deferred();
            var that = this;

            this._profile_view_grid_waiter()
                .then(er_utils.scroll_page_down_by_screens.bind(er_utils))
                .then(this._profile_skills_waiter.bind(this))
                .then(this._profile_summary_loader.bind(this))
                .then(this._profile_contact_info_loader.bind(this))
                .then(function() {
                    setTimeout(function() {
                        deferred.resolve();
                    }, 100);
                });

            return deferred.promise();
        },
        _profile_view_grid_waiter : function(deferred) {
            console.log('_profile_view_grid_waiter');
            if(!deferred)
                deferred = $.Deferred();
            var that = this;

            var jq_profile_view_grid = $('.profile-view-grid');
            if(jq_profile_view_grid.length == 0) {
                setTimeout(function(){ that._profile_view_grid_waiter(deferred) }, 100);
                return deferred.promise();
            } else {
                deferred.resolve();
            }

            return deferred.promise();
        },
        _profile_contact_info_loader : function() {
            var deferred = $.Deferred();
            console.log('_profile_contact_info_loader');

            var that = this;

            this._scroll_to_right_rail()
                .then(this._profile_button_show_profile_contact_info_waiter.bind(this))
                .then(this._scroll_to_contact_info.bind(this))
                .then(function() {
                    that._click_to_show_profile_contact_info();
                    that._profile_contact_info_waiter()
                        .then(function() {
                            deferred.resolve();
                        });
                });

            return deferred.promise();
        },
        _scroll_to_right_rail : function() {
            // right-rail
            console.log('_scroll_to_right_rail');
            var jq_right_rail = $('.right-rail').first();
            return er_utils.scroll_to_element_promise(jq_right_rail, 100);
        },
        _profile_button_show_profile_contact_info_waiter : function(deferred, attempt) {
            if(!attempt)
                attempt = 0;

            if(!deferred) {
                console.log('START _profile_button_show_profile_contact_info');
                deferred = $.Deferred();
            } else {
                console.log('END _profile_button_show_profile_contact_info');
            }

            var that = this;

            var jq_button_show_profile_contact_info = $('section.pv-contact-info .contact-see-more-less');
            if(jq_button_show_profile_contact_info.length == 0) {
                if(er_utils.is_tab_hidden()) {
                    console.log('tab is hidden');
                } else {
                    ++attempt;
                }

                if(attempt > 20) {
                    deferred.resolve(false);
                } else {
                    setTimeout(function(){ that._profile_button_show_profile_contact_info_waiter(deferred, attempt) }, 100);
                }
            } else {
                deferred.resolve();
            }

            return deferred.promise();
        },
        _scroll_to_contact_info : function() {
            console.log('_scroll_to_contact_info');
            var jq_contact_info_cont = $('section.pv-contact-info');
            return er_utils.scroll_to_element_promise(jq_contact_info_cont, 100);
        },
        _click_to_show_profile_contact_info : function() {
            console.log('_click_to_show_profile_contact_info');
            $('section.pv-contact-info .contact-see-more-less').click();
        },
        _profile_contact_info_waiter : function(deferred, attempt) {
            if(!attempt)
                attempt = 0;

            if(!deferred) {
                console.log('START _profile_contact_info_waiter');
                deferred = $.Deferred();
            } else {
                console.log('CONTINUE _profile_contact_info_waiter');
            }

            var that = this;

            var jq_profile_info_linkedin_profile_url = $('section.pv-contact-info .ci-vanity-url');
            if(jq_profile_info_linkedin_profile_url.length == 0) {
                if(er_utils.is_tab_hidden()) {
                    console.log('tab is hidden');
                } else {
                    ++attempt;
                }

                if(attempt > 20) {
                    deferred.resolve(false);
                } else {
                    setTimeout(function(){ that._profile_contact_info_waiter(deferred, attempt) }, 100);
                }
            } else {
                deferred.resolve();
            }

            return deferred.promise();
        },
        _profile_skills_waiter : function() {
            console.log('_profile_skills_waiter');
            var deferred = $.Deferred();

            //er_endorse._ns_skills_container_waiter(10)
            er_endorse_endorser._ns_skills_container_waiter_full()
                .then(function() {
                    var jq_background_skills_cont = er_endorse_endorser.get_jq_background_skills_cont();
                    er_utils.scroll_to_element_promise(jq_background_skills_cont, 300)
                        .then(function() {
                            er_endorse_endorser._ns_open_all_skills_cont(jq_background_skills_cont)
                                .then(function() {
                                    er_logger.log('_profile_skills_waiter RESOLVE');
                                    deferred.resolve();
                                })
                        })
                });

            return deferred.promise();
        },
        _profile_summary_loader : function() {
            console.log('_profile_summary_loader');
            var deferred = $.Deferred();
            var that = this;

            var jq_profile_view_grid = $('.profile-view-grid').first();
            var jq_general_info_cont = jq_profile_view_grid.find('.pv-top-card-section');
            var jq_pv_top_card_section_rich_content = jq_general_info_cont.find('.pv-top-card-section__rich-content');
            var jq_btn_truncate_multiline_button = jq_pv_top_card_section_rich_content.find('button.truncate-multiline--button');
            if(jq_btn_truncate_multiline_button.length == 0) {
                deferred.resolve();
            } else {
                er_utils.scroll_to_element_promise(jq_pv_top_card_section_rich_content, 100)
                    .then(function() {
                        jq_btn_truncate_multiline_button.click();
                        that._profile_summary_full_loader_waiter(deferred, jq_pv_top_card_section_rich_content);
                    });
            }

            return deferred.promise();
        },
        _profile_summary_full_loader_waiter : function(deferred, jq_pv_top_card_section_rich_content) {
            console.log('_profile_summary_full_loader_waiter');
            if(!deferred)
                deferred = $.Deferred();

            var jq_truncate_multiline_truncation_target = jq_pv_top_card_section_rich_content.find('.truncate-multiline--truncation-target');
            if(jq_truncate_multiline_truncation_target.length == 0)
                deferred.resolve();
            else {
                var that = this;
                setTimeout(function() {
                    that._profile_summary_full_loader_waiter(deferred, jq_pv_top_card_section_rich_content);
                }, 100)
            }

            return deferred.promise();
        },

        _build_profile_object : function() {
            this.profile = new ER_Profile({});

            this.profile.url = er_utils.escape_url(window.location.href);

            this.profile.id = er_utils.get_profile_fullname_from_url(this.profile.url);

            this.jq_profile_view_grid = $('.profile-view-grid').first();

            this._extract_general_info();
            this._extract_contact_info();
            this._extract_experiences_info();
            this._extract_educations_info();
            this._extract_skills();
            this._extract_followers_count();

            console.log('er_profile_extractor._build_profile_object finished');
        },
        _extract_general_info : function() {
            var jq_general_info_cont = this.jq_profile_view_grid.find('.pv-top-card-section');
            this.profile.avatar = jq_general_info_cont.find('img.pv-top-card-section__image').attr('src');

            var jq_pv_top_card_section_information = jq_general_info_cont.find('.pv-top-card-section__information');
            this.profile.fullname = jq_pv_top_card_section_information.find('.pv-top-card-section__name').text();
            var obj_name = er_utils.get_firstname_lastname_from_fullname(this.profile.fullname);
            this.profile.firstname = obj_name.firstname;
            this.profile.lastname = obj_name.lastname;

            this.profile.title = jq_pv_top_card_section_information.find('.pv-top-card-section__headline').text();
            this.profile.location = jq_pv_top_card_section_information.find('.pv-top-card-section__location').text();

            this.profile.summary = jq_general_info_cont.find('.pv-top-card-section__summary').text().trim();

            this.profile.dist = er_utils.get_distance_from_text(jq_pv_top_card_section_information.find('.dist-value').text().trim());
        },

        _extract_contact_info : function() {
            var jq_contact_info_cont = this.jq_profile_view_grid.find('section.pv-contact-info');
            this._extract_contact_info_phones(jq_contact_info_cont);
            this._extract_email(jq_contact_info_cont);
            this._extract_websites(jq_contact_info_cont);
            this._extract_address(jq_contact_info_cont);
            this._extract_twitter(jq_contact_info_cont);
            this._extract_messengers(jq_contact_info_cont);
            this._extract_birthday(jq_contact_info_cont);
            this._extract_connected_at(jq_contact_info_cont);
        },
        _extract_contact_info_phones : function(jq_contact_info_cont) {
            var jq_phone_items = jq_contact_info_cont.find('.pv-contact-info__contact-type.ci-phone .pv-contact-info__list .pv-contact-info__contact-item');
            this.profile.phones = [];
            for(var i=0; i < jq_phone_items.length; i++) {
                this.profile.phones.push(this._extract_single_phone($(jq_phone_items[i])));
            }
        },
        _extract_single_phone : function(jq_phone_item) {
            var text = jq_phone_item.text();
            var phone = er_utils.phone_getInternalFormat(text);
            var type;
            var last_open_bracket_pos = text.lastIndexOf('(');
            var close_bracket_pos = text.indexOf(')', last_open_bracket_pos+1);
            if (last_open_bracket_pos > 0) {
                if (close_bracket_pos > 0) {
                    type = text.substring(last_open_bracket_pos+1, close_bracket_pos);
                } else {
                    type = text.substring(last_open_bracket_pos+1)
                }
            }

            return {p : phone, t : type};
        },
        _extract_email : function(jq_contact_info_cont) {
            this.profile.email = jq_contact_info_cont
                .find('.pv-contact-info__contact-type.ci-email .pv-contact-info__contact-item')
                .text().replace(new RegExp('"', 'g'), '').trim();
        },
        _extract_websites : function(jq_contact_info_cont) {
            var jq_websites_items = jq_contact_info_cont.find('.pv-contact-info__contact-type.ci-websites .pv-contact-info__list .pv-contact-info__action');
            this.profile.websites = [];
            for(var i=0; i < jq_websites_items.length; i++) {
                this.profile.websites.push($(jq_websites_items[i]).attr('href'));
            }
        },
        _extract_address : function(jq_contact_info_cont) {
            this.profile.address = jq_contact_info_cont
                .find('.pv-contact-info__contact-type.ci-address .pv-contact-info__action')
                .text().replace(new RegExp('"', 'g'), '').trim();
        },
        _extract_twitter : function(jq_contact_info_cont) {
            this.profile.twitter = jq_contact_info_cont
                .find('.pv-contact-info__contact-type.ci-twitter .pv-contact-info__action')
                .text().replace(new RegExp('"', 'g'), '').trim();
        },
        _extract_messengers : function(jq_contact_info_cont) {
            var jq_messenger_items = jq_contact_info_cont.find('.pv-contact-info__contact-type.ci-ims .pv-contact-info__list .pv-contact-info__contact-item');
            this.profile.im = [];
            for(var i=0; i < jq_messenger_items.length; i++) {
                this.profile.im.push(this._extract_single_messenger($(jq_messenger_items[i])));
            }
        },
        _extract_single_messenger : function(jq_messenger_item) {
            var text = jq_messenger_item.text();

            var type;
            var last_open_bracket_pos = text.lastIndexOf('(');
            var close_bracket_pos = text.indexOf(')', last_open_bracket_pos+1);
            if (last_open_bracket_pos > 0) {
                if (close_bracket_pos > 0) {
                    type = text.substring(last_open_bracket_pos+1, close_bracket_pos);
                } else {
                    type = text.substring(last_open_bracket_pos+1)
                }
            }

            var login;
            if (last_open_bracket_pos > 0)
                login = text.substring(0, last_open_bracket_pos-1);

            login = login.replace(new RegExp('"', 'g'), '').trim();

            return {l : login, t : type};
        },
        _extract_birthday : function(jq_contact_info_cont) {
            this.profile.birthday = jq_contact_info_cont
                .find('.pv-contact-info__contact-type.ci-birthday .pv-contact-info__contact-item')
                .text().replace(new RegExp('"', 'g'), '').trim();
        },
        _extract_connected_at : function(jq_contact_info_cont) {
            this.profile.connected_at = jq_contact_info_cont
                .find('.pv-contact-info__contact-type.ci-connected .pv-contact-info__contact-item')
                .text().replace(new RegExp('"', 'g'), '').trim();
        },

        _extract_experiences_info : function() {
            var jq_position_entities = this.jq_profile_view_grid.find('section.experience-section .position-entity');
            if(jq_position_entities.length == 0)
                jq_position_entities = this.jq_profile_view_grid.find('section.experience-section .pv-position-entity');
            this.profile.positions = [];
            for(var i=0; i<jq_position_entities.length; i++) {
                this.profile.positions.push(this._extract_position_entity($(jq_position_entities[i])));
            }
        },
        _extract_position_entity : function(jq_position_entity) {
            var position = {};

            var jq_pv_entity__summary_info = jq_position_entity.find('.pv-entity__summary-info');
            position.title = jq_pv_entity__summary_info.find('h3').text().trim();
            position.company = jq_pv_entity__summary_info.find('h4 .pv-entity__secondary-title').text().trim();

            var jq_a_background_details_company = jq_position_entity.find('a[data-control-name=background_details_company]');
            if (jq_a_background_details_company.length > 0) {
                var company_li_href = jq_a_background_details_company.attr('href');
                if(company_li_href != null && company_li_href != '') {
                    if(company_li_href.indexOf('linkedin.com/')>=0) {
                        position.company_li_url = company_li_href;
                    } else {
                        position.company_li_url = 'https://www.linkedin.com' + company_li_href;
                    }
                    position.company_id = this._get_company_id_from_url(company_li_href);
                }
            }

            var jq_pv_entity__date_range = jq_pv_entity__summary_info.find('.pv-entity__date-range');
            this._extract_position_date_range(position, jq_pv_entity__date_range);

            //position.location = jq_pv_entity__summary_info.find('.pv-entity__location .pv-entity__bullet-item').text().trim();
            this._extract_position_location(position, jq_pv_entity__summary_info);

            position.description = jq_position_entity.find('.pv-entity__description').text().trim();

            return position;
        },
        _extract_position_location : function(position, jq_pv_entity__summary_info) {
            var jq_location = jq_pv_entity__summary_info.find('.pv-entity__location .pv-entity__bullet-item');
            if (jq_location.length > 0) {
                position.location = jq_location.text().trim();
                return;
            }

            jq_location = jq_pv_entity__summary_info.find('.pv-entity__location span:not(.visually-hidden)');
            position.location = jq_location.text().trim();
        },
        _extract_position_date_range : function(position, jq_pv_entity__date_range) {
            var jq_pv_entity__date_range_time = jq_pv_entity__date_range.find('time');
            if(jq_pv_entity__date_range_time.length > 0) {
                position.time_start = jq_pv_entity__date_range_time.first().text().trim();
                if(jq_pv_entity__date_range_time.length < 2)
                    position.time_end = 'PRESENT';
                else
                    position.time_end = $(jq_pv_entity__date_range_time[1]).text();
            } else {
                var jq_span = jq_pv_entity__date_range.find('span:not(.visually-hidden)');
                if(jq_span.length > 0) {
                    var str = jq_span.first().text().trim();
                    // Jan 2017 – Present
                    var delimiter = ' – ';
                    var pos_before_delimiter = str.indexOf(delimiter);
                    if (pos_before_delimiter<0) {
                        position.time_start = str;
                        position.time_end = 'PRESENT';
                    } else {
                        position.time_start = str.substring(0, pos_before_delimiter);
                        var end = str.substring(pos_before_delimiter + delimiter.length);
                        if(end.toUpperCase() == 'PRESENT') {
                            position.time_end = 'PRESENT';
                        } else {
                            position.time_end = end;
                        }
                    }
                }
            }
        },


        _get_company_id_from_url : function(url) {
            var last_slash = url.lastIndexOf('/');
            if (last_slash == url.length - 1) {
                url = url.substring(0, last_slash);
                last_slash = url.lastIndexOf('/');
            }
            return url.substring(last_slash+1);
        },

        _extract_educations_info : function() {
            var jq_education_section = this.jq_profile_view_grid.find('section.education-section');
            var jq_educations_entities = jq_education_section.find('.education-entity');
            if(jq_educations_entities.length == 0) {
                jq_educations_entities = jq_education_section.find('.pv-education-entity');
            }
            this.profile.educations = [];
            for(var i=0; i<jq_educations_entities.length; i++) {
                this.profile.educations.push(this._extract_education_entity($(jq_educations_entities[i])));
            }
        },

        _extract_education_entity : function(jq_education_entity) {
            var education = {};

            var jq_pv_entity__summary_info = jq_education_entity.find('.pv-entity__summary-info');
            education.school = jq_pv_entity__summary_info.find('h3').text().trim();

            education.degree = jq_pv_entity__summary_info.find('.pv-entity__degree-name .pv-entity__comma-item').text().trim();
            education.fos = jq_pv_entity__summary_info.find('.pv-entity__fos .pv-entity__comma-item').text().trim();
            education.grade = jq_pv_entity__summary_info.find('.pv-entity__grade .pv-entity__comma-item').text().trim();

            var jq_pv_entity__date_range_time = jq_pv_entity__summary_info.find('.pv-entity__dates time');
            education.time_start = jq_pv_entity__date_range_time.first().text().trim();
            if(jq_pv_entity__date_range_time.length < 2)
                education.time_end = 'PRESENT';
            else
                education.time_end = $(jq_pv_entity__date_range_time[1]).text();

            education.description = jq_education_entity.find('.pv-entity__description').text().trim();

            return education;
        },

        _extract_skills : function() {
            var jq_background_skills = er_endorse_endorser.get_jq_background_skills_cont();
            var jq_skill_items = jq_background_skills.find('.pv-skill-entity--featured');
            if (jq_skill_items.length == 0)
                jq_skill_items = jq_background_skills.find('.pv-skill-entity__pill-contents');
            this.profile.skills = [];

            for(var i=0; i<jq_skill_items.length; i++) {
                this.profile.skills.push(this._extract_skill($(jq_skill_items[i])));
            }
        },
        _extract_skill : function(jq_skill) {
            var skill = {};
            skill.n = jq_skill.find('.pv-skill-entity__skill-name').text();
            skill.c = jq_skill.find('.pv-skill-entity__endorsement-count').text().replace(/[^0-9]/g,'');
            return skill;
        },

        _extract_followers_count : function() {
            var jq_follower_count = this.jq_profile_view_grid.find('.pv-recent-activity-section__follower-count');
            if (jq_follower_count.length > 0) {
                this.profile.followers = jq_follower_count.text().replace(/[^0-9]/g,'');
            } else {
                this.profile.followers = '';
            }
        },

        _process_sales_navigator_profile_page : function() {
            er_logger.log('START _process_sales_navigator_profile_page');
            var deferred = $.Deferred();

            er_sn_profile_helper.extract_and_store_profile_id_map_to_snid()
                .then(function(map) {

                    er_logger.log('map');
                    er_logger.log(map);

                    er_profiles_list_control.init()
                        .then(function() {
                            if (map) {
                                er_profiles_list_control.replace_snid_by_id(map.id, map.snid)
                                    .then(function() {
                                        deferred.resolve();
                                        er_logger.log('er_profile_extractor.process_sales_navigator_page finished');
                                    })
                            } else {
                                er_profiles_list_control.delete_from_queue_id(er_utils.get_profile_id_from_url_profile_page(er_utils.escape_url(window.location.href)))
                                    .then(function() {
                                        deferred.resolve();
                                        er_logger.log('er_profile_extractor.process_sales_navigator_page finished');
                                    })
                            }

                        });
                });

            return deferred.promise();
        },

        _on_license_not_valid : function() {
            this.set_mode_profile_extract(false);
            this.set_current_period_state(false);
        },
    };
/**
 * Created by erinsasha on 29/08/17.
 */
// er_profile_extractor_lm_callbacks

var er_profile_extractor_lm_callbacks = window.er_profile_extractor_lm_callbacks || {
        get_callbacks : function() {
            return {
                get_lists_deferred : this.get_lists_deferred.bind(this), // get_lists_deferred () // return ({id : id, name : name}, error_message)
                get_sublists : this.get_sublists.bind(this), // get_sublists() // return {id : id, name : name}
                get_sublists_counters_deferred : this.get_sublists_counters_deferred.bind(this), // get_sublists_counters_deferred (list_id) // ({id : sublist_id, counter : counter }, error_message)
                get_create_new_deferred : this.get_create_new_deferred.bind(this), // get_create_new_deferred (list_name) // return (list_id, list_name, error_message)
                get_current_list_id : this.get_current_list_id.bind(this), // get_current_list_id () // return list_id
                get_ids_deferred : this.get_ids_deferred.bind(this), // get_ids_deferred (list_id, sublist_id) // return ids
                perform_action_return_counter_deferred : this.perform_action_return_counter_deferred.bind(this), // perform_action_return_counter_deferred (list_id, sublist_id, action, ids) // return counter of target
            }
        },

        get_lists_deferred : function() {
            var deferred = $.Deferred();

            er_profiles_list_control.init()
                .then(er_profiles_list_control.get_all_mini.bind(er_profiles_list_control))
                .then(function(profiles_mini_list) {
                    deferred.resolve(profiles_mini_list);
                });

            return deferred.promise();
        },
        get_sublists : function() {
            return [
                {id : 'queue', name : 'Queue'},
                {id : 'extracted', name : 'Extracted'},
                //{id : 'excluded', name : 'Excluded'},
            ];
        },
        get_sublists_counters_deferred : function(list_id) {
            var deferred = $.Deferred();
            er_profiles_list_control.init()
                .then(function() {
                    er_profiles_list_control.get_list(list_id)
                        .then(function(profiles_list) {
                            var result = [
                                {id : 'queue', counter : profiles_list.get_in_queue_counter()},
                                {id : 'extracted', counter : profiles_list.get_extracted_counter()},
                                //{id : 'excluded', counter : endorse_list.get_excluded_length()}
                            ];
                            deferred.resolve(result);
                        });
                });

            return deferred.promise();
        },
        get_create_new_deferred : function(list_name) {
            var deferred = $.Deferred();
            er_profiles_list_control.is_list_with_id_exists(list_name)
                .then(function(is_exist) {
                    if(is_exist) {
                        deferred.resolve(null, null, 'List already exists');
                        return;
                    }

                    var mini_list = new ER_Profiles_Mini_List({name : list_name});

                    er_profiles_list_control.save(mini_list)
                        .then(function(){
                            deferred.resolve(mini_list.id, mini_list.name);
                        });
                });

            return deferred.promise();
        },
        get_current_list_id : function() {
            return er_profiles_list_control.get_active_id();
        },
        get_ids_deferred : function(list_id, sublist_id) {
            var deferred = $.Deferred();

            er_profiles_list_control.init()
                .then(function() {
                    er_profiles_list_control.get_list(list_id)
                        .then(function(profiles_list) {
                            var result;
                            switch (sublist_id) {
                                case  'queue' : result = profiles_list.get_all_ids_in_queue(); break;
                                case  'extracted' : result = profiles_list.get_all_ids_in_extracted(); break;
                                //case  'excluded' : result = profiles_list.get_all_ids_in_excluded(); break;
                            }

                            deferred.resolve(result);
                        });
                });

            return deferred.promise();
        },
        perform_action_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();

            er_profiles_list_control.init()
                .then(function() {
                    er_profiles_list_control.get_list(list_id)
                        .then(function(profiles_list) {
                            var target_ids;

                            switch (sublist_id) {
                                case  'queue' : target_ids = profiles_list.get_all_ids_in_queue(); break;
                                case  'extracted' : target_ids = profiles_list.get_all_ids_in_extracted(); break;
                                //case  'excluded' : target_ids = profiles_list.get_all_ids_in_excluded(); break;
                            }

                            switch (action) {
                                case 'add' : target_ids = er_utils.get_array_merge(target_ids, profiles_list.get_uniq(ids)); break;
                                case 'keep_the_same' : target_ids = er_utils.get_array_intersection(target_ids, ids); break;
                                case 'delete_the_same' : target_ids = er_utils.get_array_uniq(target_ids, ids); break;
                                case 'replace' : target_ids = ids; break;
                                case 'add_all' : target_ids = er_utils.get_array_merge(target_ids, ids); break;
                            }

                            switch (sublist_id) {
                                case  'queue' : profiles_list.set_ids_in_queue(target_ids); break;
                                case  'extracted' : profiles_list.set_ids_in_extracted(target_ids); break;
                                //case  'excluded' : profiles_list.set_ids_in_excluded(target_ids); break;
                            }

                            profiles_list.save_to_db()
                                .then(deferred.resolve.bind(deferred));
                        });
                });

            return deferred.promise();
        },
        perform_action_return_counter_deferred : function(list_id, sublist_id, action, ids) {
            var deferred = $.Deferred();

            this.perform_action_deferred(list_id, sublist_id, action, ids)
                .then(function(profiles_list) {
                    var new_counter;

                    switch (sublist_id) {
                        case  'queue' : new_counter = profiles_list.get_in_queue_counter(); break;
                        case  'extracted' : new_counter = profiles_list.get_extracted_counter(); break;
                        //case  'excluded' : new_counter = profiles_list.get_excluded_length(); break;
                    }

                    deferred.resolve(new_counter);
                });

            return deferred.promise();
        },
    };
/**
 * Created by erinsasha on 23/05/17.
 */

//profile_extractor_my_connections_collector

var er_profile_extractor_my_connections_collector = window.er_profile_extractor_my_connections_collector || {
        collect : function() {
            this.scrapper = new ER_My_Connections_Scrapper({
                stop_ids : [],
                callback : this._on_scrapped.bind(this)
            });
            this.scrapper.begin();
        },
        _on_scrapped : function(results, is_finished, callback_to_continue) {
            var ids = [];
            for(var i=0; i<results.profiles.length; i++) {
                ids.push(results.profiles[i].id);
            }
            er_profiles_list_extract_from_search._save_ids_queue(ids)
                .then(function() {
                    if(!is_finished && er_profiles_list_extract_from_search.get_mode_collect_profiles_from_search())
                        callback_to_continue();
                });
        }
    };
/**
 * Created by erinsasha on 12/08/17.
 */
// profile_extractor

var er_profile_extractor_timeouts = window.er_profile_extractor_timeouts || {
        const_timeouts_names : {
            go_to_next_contact : 'Go to next contact',

        },
        const_timeout_fast : {
            go_to_next_contact : {min : 10000, max : 20000}
        },
        const_timeout_safe : {
            go_to_next_contact : {min : 30000, max : 600000}
        },

        init : function() {
            if(this.started)
                return;
            this.started = true;
            this._init_from_local_storage();
        },
        _init_from_local_storage : function() {
            if(this.current_timeouts)
                return;

            var current_timeouts = localStorage.er_profile_extractor_timeouts;
            if(current_timeouts && current_timeouts != '') {
                this.current_timeouts = JSON.parse(current_timeouts);
                this.restore_missed_values();
            } else
                this.save_timeouts_from_object(this.const_timeout_fast);
        },
        restore_missed_values : function() {
            var timeouts_tech_names = Object.keys(this.const_timeout_fast);

            var tech_name;

            for(var i=0; i<timeouts_tech_names.length; i++) {
                tech_name = timeouts_tech_names[i];
                if(!this.current_timeouts[tech_name])
                    this.current_timeouts[tech_name] = this.const_timeout_fast[tech_name];
            }
        },
        save_timeouts_from_object : function(obj) {
            this.current_timeouts = er_utils.get_object_copy(obj);
            this.save_current_timeouts_to_local_storage();
        },
        save_current_timeouts_to_local_storage : function() {
            localStorage.er_profile_extractor_timeouts = JSON.stringify(this.current_timeouts);
        },
        get_timeouts : function() {
            this.init();
            return this.current_timeouts;
        },
        get_random_timeout : function(timeout_name, dont_show_clock) {
            this.init();
            var timeout = this.current_timeouts[timeout_name];
            var rt = er_utils.getRandomInt(timeout.min, timeout.max);

            if(!dont_show_clock) {
                new ER_W_Timeout_Clock({
                    timeout : rt,
                    techname : timeout_name,
                    description : this.const_timeouts_names[timeout_name]
                })
            }

            return rt;
        },
    };
/**
 * Created by Alex on 18.03.2017.
 */
//er_profiles_extractor_backup_export
var er_profiles_extractor_backup_export = window.er_profiles_extractor_backup_export || {
        build_object : function() {
            var deferred = $.Deferred();
            var obj = {};
            obj.lc = this._build_lc();

            this._build_db()
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },
        _build_lc : function() {
            var lc = {};

            lc.er_profile_extract_limit_per_period = localStorage.er_profile_extract_limit_per_period;
            lc.er_profile_extract_period_hours = localStorage.er_profile_extract_period_hours;
            lc.er_profiles_active_list_id = localStorage.er_profiles_active_list_id;

            return lc;
        },
        _build_db : function() {
            var deferred = $.Deferred();
            var db = {};

            er_profilesdb.get_all_profiles()
                .then(function(profiles) {
                    db.profiles = profiles;
                })
                .then(er_profiles_list_db.get_all_lists.bind(er_profiles_list_db))
                .then(function(profiles_list_db) {
                    db.profiles_list_db = profiles_list_db;
                })
                .then(er_profiles_list_of_list_db.get_all_lists.bind(er_profiles_list_of_list_db))
                .then(function(profiles_list_of_list_db) {
                    db.profiles_list_of_list_db = profiles_list_of_list_db;
                    deferred.resolve(db);
                })
            ;

            return deferred.promise();
        },

        build_object_for_list : function(list_id) {
            var deferred = $.Deferred();
            var obj = {
                id : list_id
            };

            this._build_db_for_list(list_id)
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },

        _build_db_for_list : function(list_id) {
            var deferred = $.Deferred();

            var db_obj = {};

            er_profiles_list_db.get_list(list_id).then(function(profiles_list) {
                db_obj.profiles_list = profiles_list;
                er_profilesdb.get_profiles(profiles_list.indexed_ids)
                    .then(function(profiles) {
                        db_obj.profiles = profiles;

                        deferred.resolve(db_obj);
                    })
            });

            return deferred.promise();
        }

    };
/**
 * Created by Alex on 18.03.2017.
 */
//er_profiles_extractor_backup_import
var er_profiles_extractor_backup_import = window.er_profiles_extractor_backup_import || {
        import : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj) {
                er_logger.log('SKIPS : Profiles Extractor data missing');
                deferred.resolve(true);
                return deferred.promise();
            }

            this._import_db(obj.db)
                .then(function() {
                    that._import_lc(obj.lc);
                    deferred.resolve(true);
                });

            return deferred.promise();
        },

        _import_db : function(db) {
            var deferred = $.Deferred();

            er_profilesdb.push_profiles(db.profiles)
                .then(function() {
                    return er_profiles_list_db.push_lists(db.profiles_list_db);
                })
                .then(function() {
                    return er_profiles_list_of_list_db.push_lists(db.profiles_list_of_list_db);
                })
                .then(deferred.resolve.bind(deferred));

            return deferred.promise();
        },

        _import_lc : function(lc) {
            if(lc.er_profile_extract_limit_per_period)
                localStorage.er_profile_extract_limit_per_period = lc.er_profile_extract_limit_per_period;
            else
                delete lc.er_profile_extract_limit_per_period;

            if(lc.er_profile_extract_period_hours)
                localStorage.er_profile_extract_period_hours = lc.er_profile_extract_period_hours;
            else
                delete localStorage.er_profile_extract_period_hours;

            if(lc.er_profiles_active_list_id)
                localStorage.er_profiles_active_list_id = lc.er_profiles_active_list_id;
            else
                delete localStorage.er_profiles_active_list_id;
        },
        import_list : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            er_profilesdb.push_profiles(obj.db.profiles)
                .then(function() {
                    return er_profiles_list_control.save(obj.db.profiles_list);
                })
                .then(function() {
                    deferred.resolve();
                });

            return deferred.promise();
        },

    };
/**
 * Created by erinsasha on 14/01/17.
 */
var er_profiles_extractor_view = window.er_profiles_extractor_view || {
        CONST_REFRESH_STAT_TIMEOUT : 5000,
        CONST_SELECTION_CREATE_MEW_ID : '__create_new_list__',

        type : 'er_profiles_extractor_view',
        tittle : 'Profiles extractor',

        profiles_mini_list : null,

        jq_main : null,

        jq_select_list : null, // Выбор списка для экстракци
        list : null,

        init_main : function() {
            if (this.inited)
                return;

            er_profiles_list_control.init()
                .then(er_profiles_list_control.get_all_mini.bind(er_profiles_list_control))
                .then(this._init_main.bind(this));

            this.inited = true;
        },
        _init_main : function(profiles_mini_list) {
            this.profiles_mini_list = profiles_mini_list;

            this.jq_main = $(this._HTML_build_main());

            this.jq_select_list = this.jq_main.find('.select_list');
            this.jq_create_new_list_cont = this.jq_main.find('.create_new_list_cont');
            this.jq_new_list_name_input = this.jq_create_new_list_cont.find('.new_list_name_input');
            this.jq_btn_add_new_list = this.jq_create_new_list_cont.find('.add_new_list');

            this.jq_list_stats_cont = this.jq_main.find('.list_stats_cont');
            this.jq_stat_extracted_value = this.jq_main.find('.extracted_cont .value');
            this.jq_stat_in_queue_value = this.jq_main.find('.in_queue_cont .value');

            this.jq_btn_collect_from_search = this.jq_main.find('.btn_collect_from_search');
            this.jq_btn_extract_collected = this.jq_main.find('.btn_extract_collected');

            this.jq_input_extract_limit = this.jq_main.find('input.extract_limit');
            this.jq_input_extract_period = this.jq_main.find('input.extract_period');

            this.jq_checkbox_refresh_extracted = this.jq_main.find('input.re_extract_switcher');

            this.jq_extracted_in_current_period = this.jq_main.find('.er_extracted_in_current_period');

            this.jq_current_period_state = this.jq_main.find('.er_current_period_state');

            this.jq_next_period_start_cont = this.jq_main.find('.stat_cont.next_period_start');
            this.jq_next_period_start = this.jq_next_period_start_cont.find('.er_next_period_start');


            this.jq_btn_export_file = this.jq_main.find('.btn_export_file');
            this.jq_select_delimiter = this.jq_main.find('.select_delimiter');

            this._add_handlers();

            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);
            er_main_view._add_callback_on_click_mode_after_turn_on('er_profiles_mode_collect_from_search', this._on_click_mode_after_collect_turn_on.bind(this));
            er_main_view._add_callback_on_click_mode_after_turn_on('er_profile_extract_mode', this._on_click_mode_after_extract_turn_on.bind(this));

            this.closure_refresh = this._refresh.bind(this);
            setTimeout(this.closure_refresh, this.CONST_REFRESH_STAT_TIMEOUT);
            this.closure_looped_refreshed = this._looped_refreshed.bind(this);
            this._looped_refreshed();

            if (
                    (er_search_page_helper.is_search_page()
                    && er_profiles_list_extract_from_search.get_mode_collect_profiles_from_search()
                    && er_profiles_list_extract_from_search.tab_is_active_in()
                    )
                || (er_utils.is_profile_page()
                    &&  er_profile_extractor.get_mode_profile_extract()
                    &&  er_profile_extractor.tab_is_active_in())
            )
                er_main_view.show_settings(this.type);
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            html += this._HTML_build_tabs_pannel();

            html += this._HTML_build_content_collect();
            html += this._HTML_build_content_extract();
            html += this._HTML_build_content_export();

            html += '</div>';
            return html;
        },
        _HTML_build_tabs_pannel : function() {
            var html = '<div class="tabs_pannel">';
            var collect_set = 'set', extract_set = '';

            if (!er_profiles_list_extract_from_search.get_mode_collect_profiles_from_search()
            && er_profile_extractor.get_mode_profile_extract()) {
                collect_set = '';
                extract_set = 'set';
            }

            html += '<span class="tab '+collect_set+'" data-tab="collect"></span>';

            html += '<span class="tab '+extract_set+'" data-tab="extract"></span>';

            html += '<span class="tab" data-tab="export"></span>';

            html += '</div>';

            return html;
        },

        _HTML_build_content_collect : function() {
            var collect_set = 'set';

            if (!er_profiles_list_extract_from_search.get_mode_collect_profiles_from_search()
                && er_profile_extractor.get_mode_profile_extract()) {
                collect_set = '';
            }

            var html = '<div class="content '+collect_set+'" data-type="collect">';

            html += this._HTML_build_list_selector();
            html += this._HTML_build_create_new_list_cont();
            html += this._HTML_build_list_stats();
            html += this._HTML_build_btn_collect_from_search();
            html += '<button class="btn_lists_manager">Open lists manager</button>';

            html += '</div>';
            return html;
        },
        _HTML_build_content_extract : function() {
            var extract_set = '';

            if (!er_profiles_list_extract_from_search.get_mode_collect_profiles_from_search()
                && er_profile_extractor.get_mode_profile_extract()) {
                extract_set = 'set';
            }

            var html = '<div class="content '+extract_set+'" data-type="extract">';

            html += '<p class="warning message separate_window"></p>';
            html += this._HTML_build_current_period_state();
            html += this._HTML_build_list_stat_in_queue();
            html += this._HTML_build_list_stat_extracted();
            html += this._HTML_build_extracted_in_current_period();
            html += this._HTML_build_next_period_start();
            html += this._HTML_build_extract_limit();
            html += this._HTML_build_extract_period();
            html += this._HTML_build_re_extract_switcher();
            html += this._HTML_build_btn_extract_collected();
            html += '<button class="er_timeout_settings">Timeout settings</button>';

            html += '</div>';
            return html;
        },
        _HTML_build_content_export : function() {
            var html = '<div class="content" data-type="export">';

            html += this._HTML_build_list_stat_extracted();
            html += this._HTML_build_delimiter_selector();
            html += '<button class="btn_export_file"></button>';

            html += '<a class="help er_blog" target="_blank" href="https://medium.com/linked-helper/how-to-import-csv-file-into-ms-excel-b4aee2f30375?source=---------1">Read How to Import CSV file into MS Excel</a>';

                html += '</div>';
            return html;
        },

        _HTML_build_list_selector : function() {
            var html = '<div class="list_selector_cont er_label_input_cont">';

            html += '<span class="label"></span>';

            html += '<select class="select_list">';

            html += '<option value="'+this.CONST_SELECTION_CREATE_MEW_ID+'">'+er_translator.get_text('er_profiles_extractor_view', 'select_list', 'create_new', er_gen_settings.get_current_language_id())+'</option>';

            var active_list_id = er_profiles_list_control.get_active_id();

            for(var i=0, list; i < this.profiles_mini_list.length; i++) {
                list = this.profiles_mini_list[i];
                html += this._HTML_build_list_selector_option(list.id, list.name, active_list_id == list.id);
            }

            html += '</select>';

            html += '</div>';

            return html;
        },
        _HTML_build_list_selector_option : function(id, name, is_active) {
            var selected = is_active ? 'selected' : '';
            return '<option value="'+id.replace(/"/g,'&quot;')+'" '+selected+'>'+name.replace(/"/g,'&quot;')+'</option>';
        },
        _HTML_build_create_new_list_cont : function() {
            var html = '<div class="create_new_list_cont hidden">';

            html += '<input class="new_list_name_input" type="text" placeholder="List name">';
            html += '<button class="add_new_list"></button>';

            html += '</div>';

            return html;
        },
        _HTML_build_list_stats : function() {
            var html = '<div class="list_stats_cont">';

            html += this._HTML_build_list_stat_extracted();
            html += this._HTML_build_list_stat_in_queue();

            html += '</div>';
            return html;
        },
        _HTML_build_list_stat_extracted : function() {
            var counter = this.list ? this.list.get_extracted_counter() : 0;
            return '<div class="stat_cont extracted_cont"><span class="title label"></span><span class="er_count_new value">'+counter+'</span></div>';
        },
        _HTML_build_list_stat_in_queue : function() {
            var counter = this.list ? this.list.get_in_queue_counter() : 0;
            return '<div class="stat_cont in_queue_cont"><span class="title label"></span><span class="er_count_new value">'+counter+'</span></div>';
        },
        _HTML_build_btn_collect_from_search : function() {
            var started = er_profiles_list_extract_from_search.get_mode_collect_profiles_from_search() ? 'started' : '';
            return '<button class="btn_collect_from_search '+started+'"></button>';
        },

        _HTML_build_btn_extract_collected : function() {
            var started = er_profile_extractor.get_mode_profile_extract() ? 'started' : '';
            return '<button class="btn_extract_collected '+started+'"></button>';
        },
        _HTML_build_extract_limit : function() {
            var html = '<div class="extract_limit_cont er_label_input_cont">';
            html += '<span class="label"></span>';

            var limit = er_profile_extractor.get_extract_limit_per_period();

            html += '<input class="extract_limit" type="number" value="'+limit+'">';
            html += '</div>';
            return html;
        },
        _HTML_build_extract_period : function() {
            var html = '<div class="extract_period_cont er_label_input_cont">';
            html += '<span class="label"></span>';

            var period = er_profile_extractor.get_period_hours();

            html += '<input class="extract_period" type="number" value="'+period+'">';
            html += '</div>';
            return html;
        },
        _HTML_build_extracted_in_current_period : function() {
            var count_sent = er_profile_extractor.get_extracted_in_current_period();

            return '<div class="stat_cont extracted_in_current_period"><span class="title label"></span><span class="er_extracted_in_current_period value">'+count_sent+'</span></div>';
        },
        _HTML_build_current_period_state : function() {
            var state = er_profile_extractor.get_current_period_state();

            return '<div class="stat_cont current_period_state"><span class="title label"></span><span class="er_current_period_state value">'+state+'</span></div>';
        },
        _HTML_build_next_period_start : function() {
            var date = er_profile_extractor.get_next_period_start();
            var hidden = 'hidden';

            if (date != null) {
                hidden = '';
                date = er_utils.datetimeJSToUser(date);
            }
            return '<div class="stat_cont next_period_start '+hidden+'"><span class="title label"></span><span class="er_next_period_start value">'+date+'</span></div>';
        },
        _HTML_build_re_extract_switcher : function () {
            var html = '<div class="re_extract_switcher_cont er_label_input_cont"><span class="title label"></span>';

            var checked;
            if(er_profiles_list_control.get_refresh_all_mode())
                checked = '';
            else
                checked = 'checked';

            html += '<input class="re_extract_switcher" type="checkbox" '+checked+'>';

            html += '</div>';
            return html;
        },


        _HTML_build_delimiter_selector : function() {
            var html = '<div class="delimiter_selector_cont er_label_input_cont">';

            html += '<span class="label"></span>';

            html += '<select class="select_delimiter">';

            html += '<option value="," selected>, - Google Sheets</option>';
            html += '<option value=";">; - Microsoft Excel</option>';

            html += '</select>';

            html += '</div>';

            return html;
        },

        _add_list_to_bd : function(list_name) {
            var that = this;

            var mini_list = new ER_Profiles_Mini_List({name : list_name});

            er_profiles_list_control.save(mini_list)
                .then(function(){
                    that._on_new_list_added_to_bd(mini_list);
                });
        },

        _set_list_selector_option_selected : function(id) {
            var jq_option = this._get_jq_list_selector_option(id);
            if(jq_option.length == 0) {
                this._add_list_selector_option_selected(id);
            }
            this.jq_select_list.val(id);
        },
        _add_list_selector_option_selected : function(id) {
            var jq_option = this._get_jq_list_selector_option(id);
            if(jq_option.length == 0) {
                jq_option = $(this._HTML_build_list_selector_option(id, id, id == er_profiles_list_control.get_active_id()));
                this.jq_select_list.append(jq_option);
            }
        },
        _delete_list_selector_option : function(id) {
            this._get_jq_list_selector_option(id).remove();
        },
        _get_jq_list_selector_option_selected : function() {
            return this.jq_select_list.find('option:selected');
        },
        _get_jq_list_selector_option : function(id) {
            return this.jq_select_list.find('option[value="'+id.replace(/"/g,'\\\"')+'"]');
        },

        _add_handlers : function() {
            new ER_Widget_How_To({
                jq_parent : this.jq_main,
                links : [ER_Widget_How_To.links.er_profiles_extractor_view]
            });

            new ER_Widget_Delete_Active_Profiles_List({
                jq_parent : this.jq_main.children('.content[data-type="collect"]')
            });

            this.jq_main.children('.tabs_pannel').children('.tab').click(this._on_click_tab.bind(this));

            this.jq_select_list.change(this._on_change_this_select_list.bind(this));
            this.jq_btn_add_new_list.click(this._on_btn_add_new_list_click.bind(this));
            this.jq_btn_collect_from_search.click(this._on_btn_collect_from_search.bind(this));
            this.jq_btn_extract_collected.click(this._on_btn_extract_collected.bind(this));
            this.jq_btn_export_file.click(this._on_btn_export_file_click.bind(this));

            this.jq_main.find('.btn_lists_manager').click(this._on_click_btn_lists_manager.bind(this));

            this.jq_main.find('button.er_timeout_settings').click(this._on_btn_timeout_settings_click.bind(this));

            this.jq_input_extract_limit.change(this._on_input_extract_limit.bind(this));
            this.jq_input_extract_period.change(this._on_input_extract_period.bind(this));

            this.jq_checkbox_refresh_extracted.change(this._on_change_checkbox_refresh_extracted.bind(this));

            window.addEventListener(
                er_main_view.EVENT_MAIN_VIEW_SETTINGS_SHOW,
                this._on_show.bind(this),
                false);

            window.addEventListener(
                er_profiles_list_control.EVENT_NEW_PROFILES_LIST_SAVED,
                this.on_EVENT_NEW_PROFILES_LIST_SAVED.bind(this),
                false);

            window.addEventListener(
                er_profiles_list_control.EVENT_ACTIVE_PROFILES_LIST_SWITCHED,
                this.on_EVENT_ACTIVE_PROFILES_LIST_SWITCHED.bind(this),
                false);

            window.addEventListener(
                er_profiles_list_control.EVENT_PROFILES_LIST_DELETED,
                this.on_EVENT_PROFILES_LIST_DELETED.bind(this),
                false);
        },

        is_widget_visible : function() {
            return this.jq_main.height() > 0;
        },

        _refresh : function() {
            if (this.is_widget_visible()) {
                this._refresh_extracted_in_current_period();
                this._refresh_next_period_start();
                this._refresh_current_period_state();
            }

            setTimeout(this.closure_refresh, this.CONST_REFRESH_STAT_TIMEOUT);
        },
        _refresh_extracted_in_current_period : function() {
            var extracted = er_profile_extractor.get_extracted_in_current_period();
            this.jq_extracted_in_current_period.text(extracted);
        },
        _refresh_current_period_state : function() {
            var state = er_profile_extractor.get_current_period_state();
            this.jq_current_period_state.text(state);
        },
        _refresh_next_period_start : function() {
            var date = er_profile_extractor.get_next_period_start();
            if (date) {
                this.jq_next_period_start_cont.removeClass('hidden');
                this.jq_next_period_start.text(er_utils.datetimeJSToUser(date));
            } else {
                this.jq_next_period_start_cont.addClass('hidden');
            }
        },

        _check_limits_and_warn : function() {
            if(er_profile_extractor.is_limits_are_safe()) {
                this.jq_input_extract_limit.removeClass('warning');
                this.jq_input_extract_period.removeClass('warning');
            } else {
                this.jq_input_extract_limit.addClass('warning');
                this.jq_input_extract_period.addClass('warning');

                er_main_view._info_popup_show(er_translator.get_text('er_profiles_extractor_view', 'messages', 'limits_warning', er_gen_settings.get_current_language_id()));
            }
        },

        _looped_refreshed : function() {
            if(this.is_widget_visible()) {
                this._request_active_list();
            }
            setTimeout(this.closure_looped_refreshed, 5000);
        },

        _request_active_list : function() {
            er_profiles_list_control.get_list(er_profiles_list_control.get_active_id())
                .then(this._on_active_list_got.bind(this));
        },
        _update_list_stat : function() {
            this.jq_stat_extracted_value.text(this.list.get_extracted_counter());
            this.jq_stat_in_queue_value.text(this.list.get_in_queue_counter());
        },

        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },
        _on_show : function(event) {
            var view_type = event.detail;
            if (view_type != this.type)
                return;
            this._request_active_list();
        },

        _on_click_tab : function(event) {
            var jq_tab = $(event.target);
            if(jq_tab.hasClass('set'))
                return;

            jq_tab.siblings('.tab.set').removeClass('set');
            this.jq_main.children('.content.set').removeClass('set');

            jq_tab.addClass('set');
            this.jq_main.children('.content[data-type='+jq_tab.attr('data-tab')+']').addClass('set');
        },

        _on_change_this_select_list : function(event) {
            var jq_option = this._get_jq_list_selector_option_selected();
            var list_id = jq_option.attr('value');
            if (list_id == this.CONST_SELECTION_CREATE_MEW_ID) {
                this._on_create_new_mode_on();
            } else {
                this.jq_create_new_list_cont.addClass('hidden');
                er_profiles_list_control.set_active_id(list_id);
                this._request_active_list();
            }
        },
        _on_create_new_mode_on : function() {
            this.jq_create_new_list_cont.removeClass('hidden');
        },
        _on_btn_add_new_list_click : function() {
            var val = this.jq_new_list_name_input.val();
            if (val == '')
                return;
            for(var i= 0; i < this.profiles_mini_list.length; i++) {
                if(val == this.profiles_mini_list[i].name) {
                    er_main_view._info_popup_show(er_translator.get_text('er_profiles_extractor_view', 'messages', 'list_already_exists', er_gen_settings.get_current_language_id()));
                    return;
                }
            }

            this._add_list_to_bd(val);
        },
        _on_btn_timeout_settings_click : function() {
            new ER_W_Profiles_Extractor_Timeout_Settings({});
        },
        _on_new_list_added_to_bd : function(mini_list) {
            this.profiles_mini_list.push(mini_list);
            this.jq_create_new_list_cont.addClass('hidden');

            er_profiles_list_control.set_active_id(mini_list.id);

            this._request_active_list();
        },
        _on_active_list_got : function(list) {
            this.list = list;
            this._update_list_stat();
            /*this.list.refresh_and_save()
                .then(this._update_list_stat.bind(this));*/
        },
        _on_btn_collect_from_search : function(event, start_any_way) {
            if(!start_any_way && this.jq_btn_collect_from_search.hasClass('started')) {
                er_profiles_list_extract_from_search.set_mode_collect_profiles_from_search(false);
                this.jq_btn_collect_from_search.removeClass('started');
            } else {
                if(er_search_page_helper.is_search_page() || er_utils.is_my_connections_page()) {
                    er_profiles_list_extract_from_search.set_mode_collect_profiles_from_search(true);
                    er_profiles_list_extract_from_search.tab_add_mode();
                    er_profiles_list_extract_from_search.process();
                    this.jq_btn_collect_from_search.addClass('started');

                    //this._looped_refreshed();

                } else {
                    new ER_W_Go_To_Page({
                        add_go_to_my_connections : true,
                        add_go_to_1st : true,
                        add_go_to_1st_sn : true,
                    });
                    er_main_view._info_popup_show(er_translator.get_text('er_profiles_extractor_view', 'messages', 'go_to_search_page', er_gen_settings.get_current_language_id()));
                }
            }
        },
        _on_btn_extract_collected : function(event, start_any_way) {
            if(!start_any_way && this.jq_btn_extract_collected.hasClass('started')) {
                er_profile_extractor.set_mode_profile_extract(false);
                this.jq_btn_extract_collected.removeClass('started');
            } else {
                er_profile_extractor.set_mode_profile_extract(true);
                er_profile_extractor.tab_add_mode();
                er_profile_extractor.begin_process();
                this.jq_btn_extract_collected.addClass('started');
            }
        },
        _on_btn_export_file_click : function() {
            if(this.jq_btn_export_file.hasClass('started'))
                return;

            var that = this;

            var evtPK = document.createEvent("CustomEvent");
            evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                function(result) {
                    if (result) {
                        var jq_option = that.jq_select_delimiter.find('option:selected');
                        var delimiter = jq_option.attr('value');

                        er_profiles_common_csv.delimiter = delimiter;

                        that.jq_btn_export_file.addClass('started');



                        er_profiles_common_csv.generate_csv_file_for_active_list()
                            .then(function() {
                                that.jq_btn_export_file.removeClass('started');
                            });
                    } else {
                        //that._on_license_not_valid();
                    }
                }
            );
            window.dispatchEvent(evtPK);


        },

        _on_click_btn_lists_manager : function() {
            new ER_W_List_Manager({
                jq_parent : this.jq_main,
                current_source_function_id : 'message_broadcast',
                current_target_function_id : 'profiles_extractor',
            })
        },

        _on_input_extract_limit : function() {
            er_profile_extractor.set_extract_limit_per_period(this.jq_input_extract_limit.val());
            this._check_limits_and_warn();
        },
        _on_input_extract_period : function() {
            er_profile_extractor.set_period_hours(this.jq_input_extract_period.val());
            this._check_limits_and_warn();
        },
        _on_change_checkbox_refresh_extracted : function() {
            er_profiles_list_control.set_refresh_all_mode(
                ! this.jq_checkbox_refresh_extracted.is(':checked')
            )
        },
        _on_click_mode_after_collect_turn_on : function() {
            this._on_btn_collect_from_search(null, true);
        },
        _on_click_mode_after_extract_turn_on : function() {
            this._on_btn_extract_collected(null, true);
        },

        on_EVENT_NEW_PROFILES_LIST_SAVED : function(event) {
            var id = event.detail.id;
            this._add_list_selector_option_selected(id);
        },
        on_EVENT_ACTIVE_PROFILES_LIST_SWITCHED : function(event) {
            var id = event.detail;
            this._set_list_selector_option_selected(id);
        },
        on_EVENT_PROFILES_LIST_DELETED : function(event) {
            var id = event.detail;
            this._delete_list_selector_option(id);
        },
    };
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_profiles_extractor_view._on_main_view_ready_for_sub_view() });
/**
 * Created by erinsasha on 14/01/17.
 */
var er_profiles_list_control = window.er_profiles_list_control || {
        EVENT_NEW_PROFILES_LIST_SAVED : 'ER_EVENT_NEW_PROFILES_LIST_SAVED',
        EVENT_PROFILES_LIST_DELETED : 'ER_EVENT_PROFILES_LIST_DELETED',
        EVENT_ACTIVE_PROFILES_LIST_SWITCHED : 'ER_EVENT_ACTIVE_PROFILES_LIST_SWITCHED',
        
        CONST_ALL_PROFILES_LIST_ID : '-____ALL___-',
        CONST_ALL_PROFILES_LIST_NAME : 'ALL',
        is_inited : false,

        init : function() {
            var deferred = $.Deferred();
            if(this.is_inited) {
                deferred.resolve();
                return deferred.promise();
            }

            var that = this;

            this._init_active_mini_list();
            this._create_all_list_if_not_exists()
                .then(function(){
                    deferred.resolve();
                    that.is_inited = true;
                });

            return deferred.promise();
        },
        _create_all_list_if_not_exists : function() {
            var deferred = $.Deferred();

            var that = this;

            er_profiles_list_of_list_db.get_list(this.CONST_ALL_PROFILES_LIST_ID)
                .then(function(mini_all_list){
                    if (mini_all_list) {
                        deferred.resolve(mini_all_list)
                    } else {
                        mini_all_list = new ER_Profiles_Mini_List({
                            id : that.CONST_ALL_PROFILES_LIST_ID,
                            name : that.CONST_ALL_PROFILES_LIST_NAME
                        });

                        that.save(mini_all_list)
                            .then(function() {
                            that.set_active_id(that.CONST_ALL_PROFILES_LIST_ID);
                            deferred.resolve();
                        });
                    }
                });

            return deferred.promise();
        },
        _init_active_mini_list : function() {
            var active_id = this.get_active_id();
            if(!active_id)
                this.set_active_id(this.CONST_ALL_PROFILES_LIST_ID);
        },

        get_refresh_all_mode : function() {
            return localStorage.er_profile_extractor_refresh_mode == 'true';
        },
        set_refresh_all_mode : function(is_it_active) {
            if(is_it_active === true || is_it_active == 'true' || is_it_active == 'TRUE') {
                localStorage.er_profile_extractor_refresh_mode = 'true';
            } else {
                localStorage.er_profile_extractor_refresh_mode = 'false';
            }
        },

        save : function(list) {
            if(!list.id)
                list.id = list.name;

            var mini_list = {
                id : list.id,
                name : list.name
            };

            if(!(list instanceof ER_Profiles_List))
                list = new ER_Profiles_List(list);
            
            var that = this;

            return $.when(er_profiles_list_db.push_list(list), er_profiles_list_of_list_db.push_list(mini_list))
                .then(function() {
                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_NEW_PROFILES_LIST_SAVED, true, true, list);
                    window.dispatchEvent(evt);
                });
        },
        is_list_with_id_exists : function(id) {
            var deferred = $.Deferred();

            this.init()
                .then(this.get_all_mini.bind(this))
                .then(function(profiles_mini_list) {
                    deferred.resolve(profiles_mini_list.indexOf(id) >= 0);
                });

            return deferred.promise();
        },
        _delete : function(id) {
            return $.when(er_profiles_list_db.delete_list(id), er_profiles_list_of_list_db.delete_list(id));
        },
        get_all : function() {
            return er_profiles_list_db.get_all_lists();
        },
        get_all_mini : function() {
            return er_profiles_list_of_list_db.get_all_lists();
        },
        get_active_id : function() {
            return localStorage.er_profiles_active_list_id;
        },
        set_active_id : function(id) {
            localStorage.er_profiles_active_list_id = id;
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_ACTIVE_PROFILES_LIST_SWITCHED, true, true, id);
            window.dispatchEvent(evt);
        },
        is_default_list_active : function() {
            return this.CONST_ALL_PROFILES_LIST_ID == this.get_active_id();
        },
        get_list : function(id) {
            er_logger.log('START _profiles_list_control->get_list = '+id);
            return er_profiles_list_db.get_list(id);
        },
        get_full_list_with_all_profiles : function() {
            return this.get_list(this.CONST_ALL_PROFILES_LIST_ID);
        },
        get_first_profile_queued_id_in_active_list : function() {
            var deferred = $.Deferred();
            er_logger.log('START _profiles_list_control->get_first_profile_queued_id_in_active_list');

            this.get_list(this.get_active_id())
                .then(function(active_list) {
                    var first_profile_queued_id = active_list.get_first_profile_queued_id();
                    er_logger.log('get_first_profile_queued_id_in_active_list = '+first_profile_queued_id);
                    deferred.resolve(first_profile_queued_id);
                });

            return deferred.promise();
        },
        push_profiles_ids_to_queue : function(profiles_ids) {
            var deferred = $.Deferred();
            var that = this;

            er_logger.log('START _profiles_list_control->push_profiles_ids_to_queue');
            er_logger.log(profiles_ids);

            this.get_full_list_with_all_profiles()
                .then(function(all_full_list) {
                    return that._push_profiles_ids_to_queue(all_full_list, profiles_ids)
                })
                .then(function() {
                    er_logger.log('RESOLVE _profiles_list_control->push_profiles_ids_to_queue');
                    deferred.resolve();
                });


            return deferred.promise();
        },
        _push_profiles_ids_to_queue : function(all_full_list, profiles_ids) {
            er_logger.log('_profiles_list_control->_push_profiles_ids_to_queue : START');
            var deferred = $.Deferred();

            var that = this;

            all_full_list.add_profiles_ids_to_queue(profiles_ids);
            all_full_list.save_to_db()
                .then(function() {
                    if(that.get_active_id() == that.CONST_ALL_PROFILES_LIST_ID) {
                        er_logger.log('er_profiles_list_control->_push_profiles_ids_to_queue : active list is ALL');
                        er_logger.log('er_profiles_list_control->_push_profiles_ids_to_queue : RESOLVE');
                        deferred.resolve();
                    } else {
                        that.get_list(that.get_active_id())
                            .then(function(active_list){
                                er_logger.log('er_profiles_list_control->_push_profiles_ids_to_queue : begin update active list');
                                active_list.add_profiles_ids_to_queue(profiles_ids);
                                active_list.refresh_using_all(all_full_list);
                                active_list.save_to_db()
                                    .then(function() {
                                       deferred.resolve();
                                        er_logger.log('er_profiles_list_control->_push_profiles_ids_to_queue : RESOLVE');
                                    });
                            });
                    }
                });

            return deferred.promise();
        },
        push_profile : function(profile) {
            er_logger.log('START _profiles_list_control->push_profile');
            er_logger.log(profile);

            var deferred = $.Deferred();

            var that = this;

            er_profilesdb.push_profile(profile)
                .then(function() {
                    that.push_profile_id_to_indexed_ids(profile.id)
                        .then(deferred.resolve.bind(deferred));
                });

            return deferred.promise();
        },
        push_profile_id_to_indexed_ids : function(id) {
            er_logger.log('START _profiles_list_control->push_profile_id_to_indexed_ids');
            er_logger.log(id);

            var deferred = $.Deferred();

            var that = this;

            this.get_full_list_with_all_profiles()
                .then(function(all_full_list){
                    that._push_profile_id_to_indexed_ids(all_full_list, id)
                        .then(deferred.resolve.bind(deferred));
                });

            return deferred.promise();
        },
        _push_profile_id_to_indexed_ids : function(all_full_list, id) {
            var deferred = $.Deferred();

            var that = this;

            all_full_list.add_profile_id_to_indexed_ids(id);
            all_full_list.save_to_db()
                .then(function(){
                    if(that.get_active_id() == that.CONST_ALL_PROFILES_LIST_ID) {
                        deferred.resolve();
                    } else {
                        that.get_list(that.get_active_id())
                            .then(function(active_list){
                                active_list.add_profile_id_to_indexed_ids(id);
                                active_list.save_to_db()
                                    .then(function() {
                                        er_logger.log('Finished _profiles_list_control->_push_profile_id_to_indexed_ids');
                                        er_logger.log('active_list');
                                        er_logger.log(active_list);

                                        deferred.resolve();
                                    });
                            });
                    }
                });


            return deferred.promise();
        },
        replace_snid_by_id : function(id, snid) {
            er_logger.log('START _profiles_list_control->replace_snid_by_id');
            er_logger.log('id='+id+' snid'+snid);

            var deferred = $.Deferred();

            var that = this;

            this.get_full_list_with_all_profiles()
                .then(function(all_full_list){
                    that._replace_snid_by_id(all_full_list, id, snid)
                        .then(deferred.resolve.bind(deferred));
                });


            return deferred.promise();
        },
        _replace_snid_by_id : function(all_full_list, id, snid) {
            var deferred = $.Deferred();

            var that = this;
            all_full_list.replace_snid_by_id(id, snid);
            all_full_list.save_to_db()
                .then(function(){
                    if(that.get_active_id() == that.CONST_ALL_PROFILES_LIST_ID) {
                        deferred.resolve();
                    } else {
                        that.get_list(that.get_active_id())
                            .then(function(active_list){
                                active_list.replace_snid_by_id(id, snid);
                                active_list.save_to_db()
                                    .then(function() {
                                        setTimeout(deferred.resolve.bind(deferred), 100);
                                    });
                            });
                    }
                });

            return deferred.promise();
        },

        delete_from_queue_first_id : function() {
            er_logger.log('START _profiles_list_control->delete_from_queue_first_id');

            var deferred = $.Deferred();
            var that = this;

            this.get_list(this.get_active_id())
                .then(function(active_list) {
                    var id_to_delete = active_list.delete_first_id_from_index_queue();
                    active_list.save_to_db()
                        .then(function() {
                            that.get_list(that.CONST_ALL_PROFILES_LIST_ID)
                                .then(function(all_list) {
                                    all_list.delete_id_from_index_queue(id_to_delete);
                                    all_list.save_to_db()
                                        .then(function() {
                                            er_logger.log('id_to_delete='+id_to_delete);
                                            er_logger.log('FINISHED _profiles_list_control->delete_from_queue_first_id');
                                            deferred.resolve();
                                        })
                                })
                        })
                });

            return deferred.promise();
        },
        delete_from_queue_id : function(id) {
            er_logger.log('START _profiles_list_control->delete_from_queue_id');
            er_logger.log('id='+id);

            var deferred = $.Deferred();

            this.get_list(this.get_active_id())
                .then(function(active_list) {
                    active_list.delete_first_id_from_index_queue(id);
                    active_list.save_to_db()
                        .then(deferred.resolve.bind(deferred))
                });

            return deferred.promise();
        },

        delete_list_of_list : function(id) {
            er_logger.log('START _profiles_list_control->delete_list_of_list');
            er_logger.log('id='+id);

            var deferred = $.Deferred();

            if (id == this.CONST_ALL_PROFILES_LIST_ID || id == this.CONST_ALL_PROFILES_LIST_NAME) {
                deferred.resolve(false);
                return deferred.promise();
            }

            if (id == this.get_active_id()) {
                this.set_active_id(this.CONST_ALL_PROFILES_LIST_ID);
            }

            var that = this;

            this._delete(id)
                .then(function() {
                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(that.EVENT_PROFILES_LIST_DELETED, true, true, id);
                    window.dispatchEvent(evt);

                    deferred.resolve(true);
                });

            return deferred.promise();
        },
    };
/**
 * Created by erinsasha on 17/01/17.
 */
var er_profiles_list_extract_from_search = window.er_profiles_list_extract_from_search || {
        get_mode_collect_profiles_from_search : function() {
            return localStorage.er_profiles_mode_collect_from_search == 'true';
        },
        set_mode_collect_profiles_from_search : function(value) {
            if(value === true || value == 'true' || value == 'TRUE')
                localStorage.er_profiles_mode_collect_from_search = 'true';
            else {
                localStorage.er_profiles_mode_collect_from_search = 'false';
                this.tab_delete_mode();
            }
        },

        tab_add_mode : function() {
            er_tabs_control.add_active_mode('er_profiles_mode_collect_from_search');
        },
        tab_delete_mode : function() {
            er_tabs_control.delete_active_mode('er_profiles_mode_collect_from_search');
        },
        tab_is_active_in : function() {
            return er_tabs_control.is_mode_active('er_profiles_mode_collect_from_search');
        },

        _save_ids_queue : function(ids) {
            var deferred = $.Deferred();
            er_profiles_list_control.init()
                .then(function() {
                    er_profiles_list_control.push_profiles_ids_to_queue(ids)
                        .then(function() {
                            deferred.resolve();
                        })
                });
            return deferred.promise();
        },

        process_single_page : function() {
            var deferred = $.Deferred();

            if(!this.get_mode_collect_profiles_from_search()) {
                deferred.reject();
                return deferred.promise();
            }

            var that = this;

            er_search_page_helper.wait_people_card_load_and_extract_single_page()
                .then(function(mini_profiles) {
                    var ids = ER_Profile_Mini.static.get_profiles_ids_from_profiles_arr(mini_profiles);
                    that._save_ids_queue(ids)
                        .then(function() {
                            deferred.resolve();
                        });
                });

            /*er_search_page_helper.waiter_jq_people_cards_load()
                .then(function() {
                    var ids = er_search_page_helper.get_peoples_ids_from_single_page();
                    that._save_ids_queue(ids)
                        .then(function() {
                            deferred.resolve();
                        });
                });*/


            return deferred.promise();
        },
        process : function() {
            if (!this.get_mode_collect_profiles_from_search())
                return;

            //var that = this;

            if(er_utils.is_my_connections_page()) {
                er_profile_extractor_my_connections_collector.collect();
            } else {
                this.process_single_page()
                    .then(this._after_single_page_processed.bind(this));
            }

            /*var evtPK = document.createEvent("CustomEvent");
            evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                function(result) {
                    if (result) {
                        that.process_single_page()
                            .then(that._after_single_page_processed.bind(that));
                    } else {
                        that._on_license_not_valid();
                    }
                }
            );
            window.dispatchEvent(evtPK);*/
        },
        _after_single_page_processed : function() {
            if (!this.get_mode_collect_profiles_from_search())
                return;
            var that = this;
            er_search_page_helper.ns_sn_old_load_next_page_deferred()
                .then(function(result) {
                    if (result) {
                        if (er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page())
                            that.process();
                    } else
                        that.set_mode_collect_profiles_from_search(false);
                });

            /*
            if (er_utils.is_new_style_page()) {
                er_search_page_helper._ns_sn_load_next_page()
                    .then(function(result) {
                        if (result)
                            that.process();
                        else
                            that.set_mode_collect_profiles_from_search(false);
                    }
                );
            } else {
                if(!er_search_page_helper._old_load_next_page())
                    that.set_mode_collect_profiles_from_search(false);
            }*/
        },

        _on_license_not_valid : function() {
            this.set_mode_collect_profiles_from_search(false);
        }
    };
/**
 * Created by erinsasha on 21/02/17.
 */
var er_sn_profile_helper = window.er_sn_profile_helper || {
        extract_and_store_profile_id_map_to_snid : function() {
            er_logger.log('START er_sn_profile_helper->extract_and_store_profile_id_map_to_snid');
            var deferred = $.Deferred();


            this._generate_general_linkedin_url()
                .then(function(url) {
                    if(url) {
                        var map = {
                            id : er_utils.get_profile_id_from_url_profile_page(url),
                            snid : er_utils.get_profile_id_from_url_profile_page(er_utils.escape_url(window.location.href))
                        };

                        er_sn_ids_map_db.push_map(map)
                            .then(deferred.resolve.bind(deferred));
                    } else {
                        er_logger.log('RESOLVE AS NULL er_sn_profile_helper->extract_and_store_profile_id_map_to_snid');
                        deferred.resolve(null);
                    }
                });

            return deferred.promise();
        },
        _get_more_info_tray : function() {
            return $('#topcard').find('.more-info-tray');
        },
        _generate_general_linkedin_url : function() {
            er_logger.log('START er_sn_profile_helper->_generate_general_linkedin_url');
            var deferred = $.Deferred();

            var url = this._extract_linkedin_profile_url();

            er_logger.log('START er_sn_profile_helper->_extract_linkedin_profile_url = '+url);

            if(!url) {
                deferred.resolve(null);
            } else if(er_utils.is_linkedin_profile_pub_url(url)) {
                er_utils.get_profile_url_from_pub_url_promise(url)
                    .then(deferred.resolve.bind(deferred));
            } else {
                deferred.resolve(url);
            }

            return deferred.promise();
        },
        _extract_linkedin_profile_url : function() {
            var jq_more_info_tray = this._get_more_info_tray();
            var jq_a = jq_more_info_tray.find('a');
            for(var i= 0, href; i<jq_a.length; i++) {
                href = $(jq_a[i]).attr('href');
                if(er_utils.is_linkedin_profile_url(href))
                    return href;
            }
        },
        _extract_linkedin_profile_id : function() {
            var url = this._extract_linkedin_profile_url();
            if (url)
                return er_utils.get_profile_id_from_url_profile_page(url);
            else
                return null;
        },
        open_message_popup_deferred : function() {
            var deferred = $.Deferred();

            var jq_textbox = this.get_message_popup_textarea();

            if(jq_textbox.length == 1) {
                deferred.resolve(jq_textbox);
            } else {
                $('#topcard').find('button.send-message').click();
                this._message_popup_open_waiter()
                    .then(deferred.resolve.bind(deferred));
            }

            return deferred.promise();
        },
        _message_popup_open_waiter : function(deferred) {
            if(!deferred)
                deferred = $.Deferred();

            var jq_textbox = this.get_message_popup_textarea();
            if(jq_textbox.length == 1) {
                deferred.resolve(jq_textbox);
            } else {
                var that = this;
                setTimeout(function() { that._message_popup_open_waiter(deferred) }, 100);
            }

            return deferred.promise();
        },
        _message_popup_close_waiter : function(deferred) {
            if(!deferred)
                deferred = $.Deferred();

            var jq_textbox = this.get_message_popup_textarea();
            if(jq_textbox.length == 0) {
                deferred.resolve();
            } else {
                var that = this;
                setTimeout(function() { that._message_popup_close_waiter(deferred) }, 100);
            }

            return deferred.promise();
        },
        get_message_popup_textarea : function() {
            return $('#message-body-content');
        },
        get_message_send_submit_button : function() {
            return $('#modeless-dialog').find('button.submit-button');
        },
        click_send_message_and_wait_until_it_sent_deferred : function(deferred) {
            if(!deferred)
                deferred = $.Deferred();
            var jq_button_send = this.get_message_send_submit_button();
            if(jq_button_send.is(':disabled')) {
                var that = this;
                setTimeout(function() { that.click_send_message_and_wait_until_it_sent_deferred(deferred) },100);
                return deferred.promise();
            }
            jq_button_send.click();
            this._message_popup_close_waiter()
                .then(deferred.resolve.bind(deferred));

            return deferred.promise();
        },
        is_profile_page_error : function() {
            if(er_utils.is_sales_navigator_error_page()) {
                return true;
            } else {
                return $("#profile").length == 0;
            }
        },

        _get_company_id_from_url : function(url) {
            var last_slash = url.lastIndexOf('/');
            if (last_slash == url.length - 1) {
                url = url.substring(0, last_slash);
                last_slash = url.lastIndexOf('/');
            }

            var var_name = 'companyId=';
            var index_of_var = url.indexOf(var_name);
            if(index_of_var < 0)
                return null;
            else
                return url.substring(index_of_var+var_name.length);
        },

        _export_to_db_current_profile_page : function() {
            var deferred = $.Deferred();

            var that = this;
            er_utils.scroll_page_down_by_screens()
                .then(function() {
                    that._extract();
                    that.profile = new ER_Profile(that.profile);
                    that.profile.save_to_db()
                        .then(function() {
                            ER_Profile_Mini.static.update_mini_from_max_deferred(that.profile)
                                .then(function() {
                                    deferred.resolve(that.profile);
                                })
                        });
                });

            return deferred.promise();
        },

        _extract : function() {
            this.profile = {};
            this.profile.url = er_utils.escape_url(window.location.href);
            this.profile.id = er_utils.get_profile_id_from_sale_navigator_profile_url(this.profile.url);

            this._extract_general_info();
            this._extract_contact_info();
            this._extract_summary();

            this._extract_experiences_info();
            this._extract_educations_info();
            this._extract_skills();
        },
        _extract_general_info : function() {
            var jq_topcard = $('#topcard');

            var jq_module_body = jq_topcard.children('.module-body');
            this.profile.avatar = jq_module_body.find('img.member-image').attr('data-li-src');

            var jq_info_container = jq_module_body.children('.info-container');

            this.profile.dist = er_utils.get_distance_from_text(jq_info_container.find('.degree-icon').text());

            this.profile.fullname = jq_info_container.find('.member-name').text().trim();
            var obj_name = er_utils.get_firstname_lastname_from_fullname(this.profile.fullname);
            this.profile.firstname = obj_name.firstname;
            this.profile.lastname = obj_name.lastname;

            this.profile.title = jq_info_container.find('.positions').first().find('li').first().text().trim();

            this.profile.connections = jq_info_container.find('.connections-badge').text().trim();

            this._extract_location_industry(jq_topcard);
        },
        _extract_location_industry : function(jq_topcard) {
            var jq_location_industry = jq_topcard.find('.location-industry');
            this.profile.location = jq_location_industry.children('.location').text().trim();
            this.profile.industry = jq_location_industry.children('.industry').text().trim();

            //location-industry
        },

        _extract_contact_info : function() {
            var jq_trs = $('#topcard').children('.module-footer').children('.more-info-tray').find('tr');
            this._parse_contact_info_trs(jq_trs, this.profile);
        },
        _parse_contact_info_trs : function(jq_trs, result) {
            result = result ? result : {};

            for(var i=0; i<jq_trs.length; i++) {
                this._parse_contact_info_tr($(jq_trs[i]), result);
            }

            return result;
        },
        _parse_contact_info_tr : function(jq_tr, result) {
            var name = jq_tr.children('th').text().trim();
            name = name.toLocaleLowerCase();
            var value = this._parse_contact_info_td(jq_tr.children('td'), name);

            if(!result.phones)
                result.phones = [];
            if(!result.websites)
                result.websites = [];
            if(!result.im)
                result.im = [];

            switch (name) {
                case 'phone' : result.phones.push(value); break;
                case 'emails' : result.email = value; break;
                case 'websites' : result.websites = value; break;
                case 'ims' : result.im = value; break;
                case 'twitter' : result.twitter = value; break;
                case 'linkedin' : result.linkedin = value; break;
            }

        },
        _parse_contact_info_td : function(jq_td, name) {
            var jq_li = jq_td.find('li');

            var value;
            switch (name) {
                case 'phone' : value = this._parse_contact_info_phone(jq_li); break;
                case 'emails' : value = jq_li.first().text().trim(); break;
                case 'websites' : value = this._parse_contact_info_websites(jq_li); break;
                case 'ims' : value = this._parse_contact_info_ims(jq_li); break;
                case 'twitter' : value = jq_li.first().text().trim(); break;
                case 'linkedin' : value = jq_li.first().text().trim(); break;
            }

            return value;
        },
        _parse_contact_info_phone : function(jq_li) {
             return {p : jq_li.first().text().trim(), t : 'Work'};
        },
        _parse_contact_info_websites : function(jq_lis) {
            var websites = [];

            for(var i=0; i<jq_lis.length; i++)
                websites.push($(jq_lis[i]).children('a').attr('href'));

            return websites;
        },
        _parse_contact_info_ims : function(jq_lis) {
            var ims = [];

            for(var i= 0, im; i<jq_lis.length; i++) {
                im = this._parse_contact_info_im($(jq_lis[i]));
                if(im)
                    ims.push(im);
            }

            return ims;
        },
        _parse_contact_info_im : function(jq_li) {
            var text = jq_li.text().trim();
            var arr = text.split(' ');
            if (arr.length >= 2)
                return {l: arr[0], t: arr[1]};
            else
                return null;
        },

        _extract_summary : function() {
            this.profile.summary = $('#summary').find('.description').text().trim();
        },

        _extract_experiences_info : function() {
            this.profile.positions = [];
            var jq_position =  $('#experience').children('.positions').children('.position');

            for(var i=0; i<jq_position.length; i++) {
                this._extract_position_entity($(jq_position[i]));
            }
        },
        _extract_position_entity : function(jq_position) {
            var position = {};
            this._extract_position_info(jq_position, position);
            this._extract_position_date_range_location(jq_position, position);

            position.description = jq_position.children('.description').text().trim();
            this.profile.positions.push(position)
        },
        _extract_position_info : function(jq_position, position) {
            var jq_position_info = jq_position.children('.position-info');
            position.title = jq_position_info.children('.position-title').text().trim();

            var jq_company_name = jq_position_info.children('.company-name');
            position.company = jq_company_name.text().trim();

            var jq_company_li_url = jq_company_name.children('a');
            if(jq_company_li_url.length > 0) {
                var company_li_href = jq_company_li_url.attr('href');
                if(company_li_href != null && company_li_href != '') {
                    if(company_li_href.indexOf('linkedin.com/')>=0) {
                        position.company_li_url = company_li_href;
                    } else {
                        position.company_li_url = 'https://www.linkedin.com' + company_li_href;
                    }
                    position.company_id = this._get_company_id_from_url(company_li_href);
                }
            }
        },
        _extract_position_date_range_location : function(jq_position, position) {
            var jq_meta = jq_position.children('.meta');
            var text = jq_meta.text().trim();
            if(text.length = 0)
                return;
            var index_delimiter = text.indexOf('|');
            if(index_delimiter < 0) {
                this._extract_position_date_range(text, position);
            } else {
                this._extract_position_date_range(text.substring(0, index_delimiter), position);
                position.location = text.substring(index_delimiter+1).trim();
            }
        },
        _extract_position_date_range : function(text, position) {
            text = text.trim();
            var delimiter = ' - ';
            var index_delimiter = text.indexOf(delimiter);
            if(index_delimiter < 0) {
                position.time_start = text;
            } else {
                position.time_start = text.substring(0, index_delimiter);
                var end = text.substring(index_delimiter + delimiter.length);
                if(end.toLocaleLowerCase().indexOf('present') >= 0) {
                    position.time_end = 'PRESENT';
                } else {
                    end = er_utils.string_replace_all(end, '&nbsp;', '');
                    var index_open_bracket = end.indexOf('(');
                    if(index_open_bracket > 0)
                        end = end.substring(0, index_open_bracket);
                    position.time_end = end;
                }
            }
        },

        _extract_educations_info : function() {
            this.profile.educations = [];
            var jq_schools = $('#education').children('.schools').children('.school');

            for(var i=0; i<jq_schools.length; i++) {
                this._extract_educations_school($(jq_schools[i]));
            }
        },
        _extract_educations_school : function(jq_school) {
            var education = {};

            this._extract_educations_school_info(jq_school, education);
            this._extract_educations_school_date_range(jq_school, education);

            education.description = jq_school.children('.description').text().trim();

            this.profile.educations.push(education);
        },
        _extract_educations_school_info : function(jq_school, education) {
            var jq_position_info = jq_school.children('.position-info');
            education.degree = jq_position_info.children('.degree').text().trim();

            var jq_school = jq_position_info.children('.school-name');
            education.school = jq_school.text().trim();
        },
        _extract_educations_school_date_range : function(jq_school, education) {
            var jq_start_graduate = jq_school.children('.start-graduate');
            if(jq_start_graduate.length > 0) {
                education.time_start = jq_start_graduate.children('time').first().text().trim();

                var jq_time = jq_start_graduate.children('time');
                if(jq_time.length > 1) {
                    education.time_end = $(jq_time[1]).text().trim();
                }
            }
        },

        _extract_skills : function() {
            this.profile.skills = [];
            var jq_skills = $('#skills').children('.skills').children('.skill');

            for(var i=0; i<jq_skills.length; i++) {
                this._extract_skill($(jq_skills[i]));
            }
        },
        _extract_skill : function(jq_skill) {
            var skill = {};
            skill.n = jq_skill.text().trim();
            skill.c = '';
            this.profile.skills.push(skill);
        },
    };
/**
 * Created by erinsasha on 21/08/17.
 */

var er_universal_profile_helper = window.er_universal_profile_helper || {
        get_profile_url_from_id : function(profile_id) {
            var url;
            if (er_utils.is_sales_navigator_profile_id(profile_id))
                url = er_utils.get_profile_url_from_sale_navigator_profile_id(profile_id);
            else if (er_utils.is_new_style_page() || er_utils.is_cached_as_new_style_page())
                url = er_utils._ns_get_profile_url_by_id(profile_id);
            else
                url = er_utils._old_get_profile_url_by_id(profile_id);

            return url;
        },
        go_to_profile : function(profile_id) {
            var url = this.get_profile_url_from_id(profile_id);
            window.location.assign(url);
        },
    };
/**
 * Created by erinsasha on 08/01/17.
 */
er_video_help_view = window.er_video_help_view || {
        type : 'er_video_help_view',
        tittle : 'Video-tutorial & User Manual',

        jq_main : null,

        articles : {
            1 : { id : 1,
                name : 'Automatically send personalised invitations to targeted 2nd & 3rd contacts',
                link : 'https://medium.com/linked-helper/collect-select-invite-2nd-3rd-linkedin-connections-4f9d41628467?source=---------4-----------'
            },
            2 : { id : 2,
                name : 'How to send your messages to your LinkedIn 1st connections',
                link : 'https://medium.com/linked-helper/how-to-send-your-messages-to-your-linkedin-1st-connections-mailing-system-message-broadcast-8d6d0308516e#.ta7u6kl65'
            },
            3 : { id : 3,
                name : 'How to manage Collected Recipients (Recipients Queue), Processed Recipients and Excluded Contacts for message broadcast to 1st connections',
                link : 'https://medium.com/linked-helper/how-to-manage-collected-recipients-recipients-queue-processed-recipients-and-excluded-contacts-580d53f6ee63#.7x6vihbvc'
            },
            4 : { id : 4,
                name : 'How to manage broadcasts to LinkedIn 1st connections — creating messages chains',
                link : 'https://medium.com/linked-helper/how-to-manage-broadcasts-to-linkedin-1st-connections-creating-messages-chains-61f746389009#.jnutkg339'
            },
            5 : { id : 5,
                name : 'Sequential messaging',
                link : 'https://medium.com/linked-helper/how-to-manage-broadcasts-to-linkedin-1st-connections-creating-messages-chains-61f746389009#.jnutkg339'
            },
            6 : { id : 6,
                name : 'Export your LinkedIn contacts to CSV File',
                link : 'https://medium.com/linked-helper/export-your-contacts-to-csv-file-build-mailing-list-only-for-new-linkedin-interface-2c0327b18716#.1shtg7vdf'
            },
            7 : { id : 7,
                name : 'Build mailing list',
                link : 'https://medium.com/linked-helper/export-your-contacts-to-csv-file-build-mailing-list-only-for-new-linkedin-interface-2c0327b18716#.1shtg7vdf'
            },
            8 : { id : 8,
                name : 'Boost your profile and get hundreds of endorsements',
                link : 'https://medium.com/linked-helper/boost-your-profile-and-get-hundreds-of-endorsements-from-other-users-in-no-time-automatically-b75758237a0f#.gccj6rmap'
            },
            9 : { id : 9,
                name : 'Automatically endorse all your contacts',
                link : 'https://medium.com/linked-helper/boost-your-profile-and-get-hundreds-of-endorsements-from-other-users-in-no-time-automatically-b75758237a0f#.gccj6rmap'
            },
            10 : { id : 10,
                name : 'Automatically add your signature to new messages',
                link : 'https://medium.com/linked-helper/automatically-add-your-signature-to-new-messages-61574a394b02?source=---------3'
            },
            11 : { id : 11,
                name : 'Switch collapse mode to minified',
                link : 'https://medium.com/linked-helper/switch-collapse-mode-to-minified-c9543608c018?source=---------2'
            },
            12 : { id : 12,
                name : 'Auto-Visit Profiles to get Look-Back',
                link : 'https://medium.com/linked-helper/auto-visit-profiles-to-get-look-back-8fe2aa4be7a9#.jdlvh0h9o'
            },
            13 : { id : 13,
                name : 'Collect, Select & Invite 2nd & 3rd connections',
                link : 'https://medium.com/linked-helper/collect-select-invite-2nd-3rd-linkedin-connections-4f9d41628467#.3t82hhxvg'
            },
            14 : { id : 14,
                name : 'Important — Linked Helper Data Storage',
                link : 'https://medium.com/linked-helper/important-linked-helper-data-storage-2a8d73a38e0d?source=collection_home---4------1----------'
            },
            15 : { id : 15,
                name : 'How to send messages to recently added connections',
                link : 'https://medium.com/linked-helper/how-to-collect-all-your-1st-connections-for-message-broadcast-f4b178928759'
            },
            16 : { id : 16,
                name : 'How to collect all 1st connections for Message Broadcast',
                link : 'https://medium.com/linked-helper/how-to-collect-all-your-1st-connections-for-message-broadcast-f4b178928759'
            },
            17 : { id : 17,
                name : 'Sent pending invites bulk canceller',
                link : 'https://medium.com/linked-helper/how-to-cancel-withdraw-all-my-sent-pending-invites-connection-requests-in-linkedin-39b8be9ba3ad'
            },
            18 : { id : 18,
                name : 'How To backup & restore your Linked Helper Data',
                link : 'https://medium.com/linked-helper/how-to-backup-restore-your-linked-helper-data-f832fdfcc334'
            },
            19 : { id : 19,
                name : 'Recommended daily limits',
                link : 'https://medium.com/linked-helper/what-kind-of-limits-should-i-use-88df661c6cf0'
            },
            20 : { id : 20,
                name : 'Will Linked Helper send invite twice to the same person?',
                link : 'https://medium.com/linked-helper/will-linked-helper-send-invite-twice-to-the-same-person-f887c04f2deb'
            },
            21 : { id : 21,
                name : 'I think, something wrong! How to ask for a support?',
                link : 'https://medium.com/linked-helper/i-think-something-wrong-how-to-ask-for-a-support-f9afecdde8c'
            },
            22 : { id : 22,
                name : 'I have more than 1000 contacts. How to collect all of them thru search?',
                link : 'https://medium.com/linked-helper/i-have-more-than-1000-contacts-how-to-collect-all-of-them-thru-search-b83f29dfa402'
            },
            23 : { id : 23,
                name : 'Not all contacts in CSV file have email address. Why?',
                link : 'https://medium.com/linked-helper/not-all-contacts-in-csv-file-have-email-address-why-63c64f83d33e'
            },
            24 : { id : 24,
                name : 'Can I manage multiple LinkedIn accounts with one Linked Helper license?',
                link : 'https://medium.com/linked-helper/can-manage-multiple-linkedin-accounts-with-one-linked-helper-license-5d0af01c257d'
            },
            25 : { id : 25,
                name : 'PRIVACY POLICY & TERMS OF USE',
                link : 'https://linkedhelper.com/terms'
            },
            26 : { id : 26,
                name : 'Plans & Prices',
                link : 'https://linkedhelper.com/#price-table'
            },
        },

        init_main : function() {
            if (this.inited)
                return;

            er_connect_in_search.init_limits();

            this.jq_main = $(this._HTML_build_main());

            er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);

            if (! er_tabs_control.is_any_mode_active() && !er_my_invites_canceler.is_my_invites_page()) {
                er_main_view.show_settings(this.type);
            }

            this.inited = true;
        },
        _HTML_build_main : function() {
            var html = '<div class="er_sub_view '+this.type+'">';

            //html += '<a class="help jim-sm-bsale" target="_blank" href="https://drive.google.com/open?id=0BwIBOuOHC0Gucmg2OHEwdF9CZzg">User manual</a><a class="help jim-sm-default" target="_blank" href="https://medium.com/linked-helper">User manual</a><br>';
            html += '<div><a class="help jim-sm-default" target="_blank" href="https://medium.com/linked-helper/tagged/how-to">How To</a>'
                + '<span> | </span>'
                + '<a class="help jim-sm-default" target="_blank" href="https://medium.com/linked-helper/tagged/faq">FAQ</a>'
                + '<span> | </span>'
                + '<a class="help jim-sm-default" target="_blank" href="https://medium.com/linked-helper/solutions-for-common-issues-75047b5d1e2e">Solutions for common problems</a></div>'
                + '<br>';

            html += this._html_build_blog_items();

            html += '<br>';

            html += '<p class="label">Youtube-tutorial:</p>'
                    + '<a class="help" target="_blank" href="https://www.youtube.com/watch?v=sPjISVb1r_s">1: Automatically expand your contact list</a><br>'
                    + '<a class="help" target="_blank" href="https://www.youtube.com/watch?v=kaaXLLn6RQw">2: Broadcast your messages automatically</a><br>'
                    + '<a class="help" target="_blank" href="https://www.youtube.com/watch?v=qmmDckZ3PvM">3: Boost your profile and get hundreds of endorsements</a><br>'
                    + '<a class="help" target="_blank" href="https://www.youtube.com/watch?v=HOUoC03pous">4: Automatically add your signature to messages</a>';

            html += '<br><span class="support_email">';
            html += '<a class="jim-sm-bsale" target="_blank" href="mailto:info@linkedhelper.ch">info@linkedhelper.ch</a>';
            html += '<a class="jim-sm-default" target="_blank" href="mailto:info@linkedhelper.com">info@linkedhelper.com</a>';
            html += '</span>';

            html += '</div>';
            return html;
        },

        _html_build_blog_items : function() {
            var html = '<div class="blog_cont">';

            var ids = [];
            for(var id in this.articles) {
                ids.push(id);
            }

            er_utils.shuffle_array(ids);

            for(var i=0; i<ids.length; i++) {
                html += this._html_build_blog_item(this.articles[ids[i]], i+1);
            }

            html += '</div>';
            return html;
        },
        _html_build_blog_item : function(item, pos) {
            return '<a class="help er_blog" target="_blank" href="'+item.link+'">'+pos+' : '+item.name+'</a>';
        },


        _on_main_view_ready_for_sub_view : function() {
            this.init_main();
        },

    };

document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_video_help_view._on_main_view_ready_for_sub_view() });
/**
 * Created by erinsasha on 09/08/17.
 */

//w_timeout_clock

/**
 *
 * @param options
 * @param options.timeout
 * @param options.techname
 * @param options.description
 * @param options.jq_parent
 * @param options.on_close
 * @constructor
 */
function ER_W_Timeout_Clock(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.techname = options.techname;
    this.timeout = options.timeout;
    this.description = options.description;
    this.current_timmer = this.timeout;

    this.closure_on_one_second = this._on_one_second.bind(this);

    this._process();
}

ER_W_Timeout_Clock.prototype = {
    _process : function() {
        this._build();
    },
    _get_jq_parent : function() {
        if(this.jq_parent)
            return this.jq_parent;
        var jq_parent = $('#ER_W_Timeout_Clock_Cont');
        if(jq_parent.length == 0) {
            return this._build_jq_parent();        
        } else {
            this.jq_parent = jq_parent;
            return jq_parent;
        }
    },
    _build_jq_parent : function() {
        var html = '<div id="ER_W_Timeout_Clock_Cont"></div>';
        this.jq_parent = $(html).appendTo($('body'));

        new ER_UI_Draggable({
            jq_draggable : this.jq_parent,
            jq_event_provider : this.jq_parent,
        });

        return this.jq_parent;
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_Timeout_Clock">';

        html += '<div class="erlh_header">Next action will start in</div>';
        html += this._build_HTML_clock();
        html += this._build_HTML_description();
        html += this._build_HTML_btn_close();

        html += '</div>';

        return html;
    },

    _build_HTML_clock : function() {
        var html = '<div class="er_clock">';

        var hh_mm_ss = this._get_hh_mm_ss_from_milliseconds(this.timeout);

        html += '<span class="er_hours">'+er_utils.addLeftZeros(hh_mm_ss.hh,2)+'</span>';
        html += '<span class="er_semicolon"> : </span>';
        html += '<span class="er_minutes">'+er_utils.addLeftZeros(hh_mm_ss.mm,2)+'</span>';
        html += '<span class="er_semicolon"> : </span>';
        html += '<span class="er_seconds">'+er_utils.addLeftZeros(hh_mm_ss.ss,2)+'</span>';

        html += '</div>';

        return html;
    },
    _build_HTML_description : function() {
        var html = '<div class="er_description">';

        html += this.description;
        html += '</div>';

        return html;
    },
    _build_HTML_btn_close : function() {
        return '<div class="er_btn_close">close</div>';
    },

    _build : function() {
        this._get_jq_parent();

        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        this._add_handlers();
    },

    _get_hh_mm_ss_from_milliseconds : function(milliseconds) {
        var res = {};
        var hh_left = milliseconds % 3600000;
        res.hh = Math.round((milliseconds - hh_left) / 3600000);
        var mm_left = hh_left % 60000;
        res.mm = Math.round((hh_left - mm_left) / 60000);
        res.ss = Math.round(mm_left / 1000);

        return res;
    },

    _add_handlers : function() {
        this.jq_er_clock = this.jq_main.find('.er_clock');
        this.jq_hours = this.jq_er_clock.children('.er_hours');
        this.jq_minutes = this.jq_er_clock.children('.er_minutes');
        this.jq_seconds = this.jq_er_clock.children('.er_seconds');

        this.jq_main.find('.er_btn_close').click(this._on_click_close.bind(this));

        setTimeout(this.close.bind(this), this.timeout);
        setTimeout(this.closure_on_one_second, 1000);
    },

    set_current_jq_hh_mm_ss : function() {
        var hh_mm_ss = this._get_hh_mm_ss_from_milliseconds(this.current_timmer);
        this.jq_hours.text(er_utils.addLeftZeros(hh_mm_ss.hh,2));
        this.jq_minutes.text(er_utils.addLeftZeros(hh_mm_ss.mm,2));
        this.jq_seconds.text(er_utils.addLeftZeros(hh_mm_ss.ss,2));
    },


    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    _on_one_second : function() {
        this.current_timmer -= 1000;
        this.set_current_jq_hh_mm_ss();
        if(this.current_timmer > 0)
            setTimeout(this.closure_on_one_second, 1000);
    },
    _on_click_close : function() {
        this.close();
    },
};
/**
 * Created by erinsasha on 09/08/17.
 */
// w_timeout_one_setting

/**
 *
 * @param options
 * @param options.min_max
 * @param options.techname
 * @param options.description
 * @param options.jq_parent
 * @constructor
 */
function ER_W_Timeout_One_Setting(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.techname = options.techname;
    this.min_max = options.min_max;
    this.description = options.description;
    this.current_timmer = this.timeout;


    this._process();
}

ER_W_Timeout_One_Setting.prototype = {
    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_Timeout_One_Setting" data-techname="'+this.techname+'">';

        html += '<div class="erlh_header">'+this.description+'</div>';
        html += this._build_HTML_inputs();
        html += '</div>';

        return html;
    },
    _build_HTML_inputs : function() {
        var html = '<div class="er_inputs_cont">';
        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);
        this._build_inputs();

        this._add_handlers();
    },
    _build_inputs : function() {
        var jq_inputs_cont = this.jq_main.children('.er_inputs_cont');

        this.w_inp_min = new ERLH_W_Input({
            html_class : 'er_inp_min',
            jq_parent : jq_inputs_cont,
            inline_block : true,
            is_minified : true,
            input_attrs : {
                placeholder : 'MIN Seconds',
                value : Math.round(this.min_max.min / 1000),
                minvalue : 1,
                type : 'number',
                step : 1,
            },
            on_change : this._on_change.bind(this),
            on_keyup : this._on_change.bind(this)
        });

        this.w_inp_max = new ERLH_W_Input({
            html_class : 'er_inp_max',
            jq_parent : jq_inputs_cont,
            inline_block : true,
            is_minified : true,
            input_attrs : {
                placeholder : 'MAX Seconds',
                value : Math.round(this.min_max.max / 1000),
                minvalue : 1,
                type : 'number',
                step : 1,
            },
            on_change : this._on_change.bind(this),
            on_keyup : this._on_change.bind(this)
        });
    },

    _add_handlers : function() {

    },

    set_min_max : function(min_max) {
        this.min_max = min_max;
        this.w_inp_min.set(Math.round(this.min_max.min / 1000));
        this.w_inp_max.set(Math.round(this.min_max.max / 1000));
    },
    get_min_max : function() {
        this.min_max.min = this.w_inp_min.get()*1000;
        this.min_max.max = this.w_inp_max.get()*1000;

        return this.min_max;
    },

    remove : function() {
        this.jq_main.remove();
    },
    _on_change : function() {

    }
};
/**
 * Created by erinsasha on 09/08/17.
 */
// w_timeout_settings


/**
 *
 * @param options
 * @param options.header
 * @param options.timeouts_names (techname -> username)
 * @param options.timeouts
 * @param options.fast_timeouts
 * @param options.safe_timeouts
 * @param options.add_message_mode_switcher
 * @param options.message_mode
 * @param options.jq_parent
 * @param options.callback_save_settings
 * @param options.on_close
 * @param options.on_cancel
 * @constructor
 */
function ER_W_Timeout_Settings(options) {
    options = options ? options : {};
    options.jq_parent = options.jq_parent ? options.jq_parent : $('body');
    this.jq_parent = options.jq_parent;
    this.timeouts_names = options.timeouts_names;
    this.timeouts = options.timeouts;
    this.fast_timeouts = options.fast_timeouts;
    this.safe_timeouts = options.safe_timeouts;
    this.add_message_mode_switcher = options.add_message_mode_switcher;
    this.message_mode = options.message_mode;
    this.inputs_widgetes = {};

    this.options = options;

    this._process();
}

ER_W_Timeout_Settings.prototype = {
    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_Timeout_Settings">';
        html += '</div>';

        return html;
    },

    _build_HTML_main_content : function() {
        var html = '<div class="ERLH_main_content">';

        html += this._build_HTML_header();
        html += this._build_HTML_preset_buttons_cont();
        html += this._build_HTML_fields_cont();
        html += this._build_HTML_buttons_cont();

        html += '</div>';

        return html;
    },
    _build_HTML_header : function() {
        var header = this.options.header ? this.options.header : 'Timeout settings';
        return '<p class="erlh_header">'+header+'</p>';
    },
    _build_HTML_fields_cont : function() {
        var html = '<div class="erlh_fields_cont">';
        html += '</div>';
        return html;
    },
    _build_HTML_buttons_cont : function() {
        var html = '<div class="erlh_buttons_cont">';

        html += '<span class="btn_cancel_cont"></span>';
        html += '<span class="btn_save_cont"></span>';

        html += '</div>';
        return html;
    },
    _build_HTML_preset_buttons_cont : function() {
        var html = '<div class="erlh_preset_buttons_cont">';

        html += '<span class="btn_reset_to_fast_cont"></span>';
        html += '<span class="btn_reset_to_safe_cont"></span>';

        html += '</div>';
        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);

        if(this.options.dont_use_popup) {
            this.jq_main_content = this.jq_main;
        } else {
            this.w_popup = new ERLH_W_Popup({
                jq_parent : this.jq_main,
                not_closable : true
            });
            this.jq_main_content = this.w_popup.get_user_cont();
        }

        this.jq_main_content = $(this._build_HTML_main_content()).appendTo(this.jq_main_content);

        this._build_preset_buttons();
        this._build_fields();
        this._build_buttons();

        this._add_handlers();
    },
    _build_fields : function() {
        var jq_fields_cont = this.jq_main_content.children('.erlh_fields_cont');

        var timeouts_tech_names = Object.keys(this.timeouts_names);

        var tech_name, timeout, description, w_timeout;

        for(var i=0; i<timeouts_tech_names.length; i++) {
            tech_name = timeouts_tech_names[i];
            description = this.timeouts_names[tech_name];
            timeout = this.timeouts[tech_name];
            w_timeout = new ER_W_Timeout_One_Setting({
                    min_max : timeout,
                    techname : tech_name,
                    description : description,
                    jq_parent : jq_fields_cont
            });

            this.inputs_widgetes[tech_name] = w_timeout;
        }

        this._build_message_mode_switcher(jq_fields_cont);
    },
    _build_message_mode_switcher : function(jq_parent) {
        if(!this.add_message_mode_switcher)
            return;

        this.w_message_mode_switcher = new ER_W_Writing_Inserting_Mode_Switcher({
            jq_parent : jq_parent,
            value : this.message_mode,
            on_change : this._on_change_message_mode.bind(this)
        })
    },
    _build_preset_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_preset_buttons_cont');

        this.w_btn_reset_to_fast = new ERLH_W_Button({
            html_class : 'btn_reset_to_fast',
            is_danger : true,
            jq_parent : jq_btns_cont.children('.btn_reset_to_fast_cont'),
            text : 'Reset to FAST TIMEOUTS',
            on_click : this._on_click_btn_reset_to_fast.bind(this)
        });

        this.w_btn_reset_to_safe = new ERLH_W_Button({
            html_class : 'btn_reset_to_safe',
            color : 'green',
            jq_parent : jq_btns_cont.children('.btn_reset_to_safe_cont'),
            text : 'Reset to SAFE TIMEOUTS',
            disabled : false,
            on_click : this._on_click_btn_reset_to_safe.bind(this)
        });
    },

    _build_buttons : function() {
        var jq_btns_cont = this.jq_main_content.children('.erlh_buttons_cont');

        this.w_btn_cancel = new ERLH_W_Button({
            html_class : 'btn_cancel',
            jq_parent : jq_btns_cont.children('.btn_cancel_cont'),
            text : 'Cancel',
            on_click : this._on_click_btn_cancel.bind(this)
        });

        this.w_btn_save = new ERLH_W_Button({
            html_class : 'btn_save',
            jq_parent : jq_btns_cont.children('.btn_save_cont'),
            text : 'Save',
            disabled : false,
            on_click : this._on_click_btn_save.bind(this)
        });
    },

    _set_fields_values : function() {
        var timeouts_tech_names = Object.keys(this.timeouts_names);
        var tech_name, timeout, w_timeout;

        for(var i=0; i<timeouts_tech_names.length; i++) {
            tech_name = timeouts_tech_names[i];

            timeout = this.timeouts[tech_name];
            w_timeout = this.inputs_widgetes[tech_name];
            w_timeout.set_min_max(timeout);
        }
    },
    _set_message_mode_switcher : function() {
        if(this.w_message_mode_switcher)
            this.w_message_mode_switcher.set(this.message_mode);
    },

    _add_handlers : function() {

    },

    remove : function() {
        this.jq_main.remove();
    },

    close : function() {
        if(!this.options.dont_remove)
            this.remove();

        if(this.options.on_close)
            this.options.on_close();
    },

    gather_request : function() {
        var timeouts = {};

        var timeouts_tech_names = Object.keys(this.inputs_widgetes);
        var w_timeout;

        for(var i=0; i<timeouts_tech_names.length; i++) {
            tech_name = timeouts_tech_names[i];
            w_timeout = this.inputs_widgetes[tech_name];
            timeouts[tech_name] = w_timeout.get_min_max();
        }

        return timeouts;
    },

    _on_change : function() {

    },

    _on_click_btn_cancel : function() {
        if(this.options.on_cancel)
            this.options.on_cancel();
        this.close();
    },

    _on_click_btn_save : function() {
        this.options.callback_save_settings(this.gather_request(), this.message_mode);
        new ERLH_W_Message({ message : 'Timeout settings have been changed!' });
        this.close();
    },
    _on_click_btn_reset_to_fast : function() {
        this.timeouts = er_utils.get_object_copy(this.fast_timeouts);
        this._set_fields_values();
        this.message_mode = 2;
        this._set_message_mode_switcher();
    },
    _on_click_btn_reset_to_safe : function() {
        this.timeouts = er_utils.get_object_copy(this.safe_timeouts);
        this._set_fields_values();
        this.message_mode = 1;
        this._set_message_mode_switcher();
    },
    _on_change_message_mode : function(val) {
        this.message_mode = val;
    },
};
/**
 * Created by erinsasha on 11/08/17.
 */
//w_write_insert_mode_switcher

/**
 *
 * @param options
 * @param options.value
 * @param options.jq_parent
 * @param options.on_change
 * @constructor
 */
function ER_W_Writing_Inserting_Mode_Switcher(options) {
    options = options ? options : {};
    this.jq_parent = options.jq_parent;

    this.options = options;
    this.value = options.value;


    this._process();
}

ER_W_Writing_Inserting_Mode_Switcher.prototype = {
    _process : function() {
        this._build();
    },

    _build_HTML : function() {
        var html = '<div class="ER_W_Writing_Inserting_Mode_Switcher" data-techname="'+this.techname+'">';

        //html += '<div class="erlh_header">'+this.description+'</div>';
        html += this._build_HTML_inputs();
        html += '</div>';

        return html;
    },
    _build_HTML_inputs : function() {
        var html = '<div class="er_inputs_cont">';
        html += '</div>';

        return html;
    },

    _build : function() {
        var html = this._build_HTML();
        this.jq_main = $(html);
        this.jq_main.appendTo(this.jq_parent);
        this._build_inputs();

        this._add_handlers();
    },
    _build_inputs : function() {
        var jq_inputs_cont = this.jq_main.children('.er_inputs_cont');

        this.w_method_select = new ERLH_W_Select({
            html_class : 'write_insert_method_select',
            jq_parent : jq_inputs_cont,
            label : 'Choose: Insert OR Type (Write) Message',
            select_attrs : {},
            ids_to_options : {
                1 : { id : 1, name : 'Type (Write) Message [TAKES MORE TIME]'},
                2 : { id : 2, name : 'Insert message [TAKES LESS TIME]'},
            },
            selected_id : this.value,
            on_change : this._on_change.bind(this)
        });
    },

    _add_handlers : function() {

    },

    set : function(val) {
        this.w_method_select.set(val);
    },
    get : function() {
        return this.w_method_select.get();
    },

    remove : function() {
        this.jq_main.remove();
    },
    _on_change : function() {
        this.value = this.w_method_select.get();
        if(this.options.on_change)
            this.options.on_change(this.value);
    },
};
/**
 * Created by Alex on 09.11.2016.
 */
var er_user_signature = window.er_user_signature || {
    CONST_SEARCH_TIMEOUT : 500, // режим ожидания между следующей попытка поиска textarea
    is_signature_added : false, // была ли добавлена подпись

    set_mode_on_and_begin_process : function() {
        this.set_user_signature_mode(true);
        this.process_page();
    },
    set_user_signature_mode : function(mode) {
        localStorage.er_user_signature_mode = mode;
    },
    is_user_signature_mode_on : function() {
        return localStorage.er_user_signature_mode == 'true';
    },
    _find_textarea : function() {
        var jq_textarea = $('#compose-message');
        if (jq_textarea.length == 1)
            return jq_textarea;
        jq_textarea = $('#body-msgForm');
        if (jq_textarea.length == 1)
            return jq_textarea;
        jq_textarea = $('#send_message_linkedin_message_message');
        if (jq_textarea.length == 1)
            return jq_textarea;
        jq_textarea = $('textarea.msg-compose-form__message-text');
        if (jq_textarea.length == 1)
            return jq_textarea;
        jq_textarea = $('textarea.msg-messaging-form__message');
        if (jq_textarea.length == 1)
            return jq_textarea;
        jq_textarea = $('#message-body-content');
        if (jq_textarea.length == 1)
            return jq_textarea;
        jq_textarea = $('#compose-text');
        if (jq_textarea.length == 1)
            return jq_textarea;

        return jq_textarea;
    },
    save_signature : function(signature) {
        localStorage.er_user_signature = signature;
    },
    get_signature : function() {
        var signature = localStorage.er_user_signature;
        if (!signature)
            return '';
        else
            return signature;
    },
    _add_signature_to_textarea : function(jq_textarea) {
        jq_textarea.val(jq_textarea.val() + '\n' + this.get_signature() );
        jq_textarea.change();
        jq_textarea.focusout();
        var el = jq_textarea[0];
        el.focus();
        try {
            el.setSelectionRange(0,0);
        } catch (err) {
            console.error(err);
        }

        var e = jQuery.Event("keyup");
        e.which = 38; // # Some key code value
        jq_textarea.trigger(e);

        this.is_signature_added = true;
    },
    process_page : function() {
        var href = window.location.href;
        if (
            !this.is_user_signature_mode_on()
            /*||
            (er_message_broadcast.is_message_broadcast_mode_on()
            && (href.indexOf('linkedin.com/messaging/compose?connId=') >= 0
                || href.indexOf('linkedin.com/messaging/compose/') >= 0)
            )*/
            ||
            (
                (er_message_broadcast.is_message_broadcast_mode_on() && er_message_broadcast.tab_is_active_in_broadcast())
                ||
                (er_connect_in_search.is_connect_in_search_mode_on() && er_connect_in_search.tab_is_active_in())
                ||
                er_connect_selected_inviter.is_mode_on_and_tab_active()

            )

        )
            return;

        var jq_textarea = this._find_textarea();
        if (jq_textarea.length == 0) {
            this.is_signature_added = false;
        } else {
            if (! this.is_signature_added || jq_textarea.val() == '') {
                this._add_signature_to_textarea(jq_textarea);
            }
        }
        if (!this.closure_begin_process)
            this.closure_begin_process = this.process_page.bind(this);

        setTimeout(this.closure_begin_process, this.CONST_SEARCH_TIMEOUT);
    },
};
/**
 * Created by Alex on 18.03.2017.
 */
// er_user_signature_backup_export
var er_user_signature_backup_export = window.er_user_signature_backup_export || {
        build_object : function() {
            var deferred = $.Deferred();
            var obj = {};
            obj.lc = this._build_lc();

            this._build_db()
                .then(function(db) {
                    obj.db = db;
                    deferred.resolve(obj);
                });

            return deferred.promise();
        },
        _build_lc : function() {
            var lc = {};

            lc.er_user_signature_mode = localStorage.er_user_signature_mode;
            lc.er_user_signature = localStorage.er_user_signature;

            return lc;
        },
        _build_db : function() {
            var deferred = $.Deferred();
            var db = {};

            deferred.resolve(db);

            return deferred.promise();
        },
    };
/**
 * Created by Alex on 18.03.2017.
 */
//er_user_signature_backup_import
var er_user_signature_backup_import = window.er_user_signature_backup_import || {
        import : function(obj) {
            var deferred = $.Deferred();

            var that = this;

            if(!obj) {
                er_logger.log('SKIPS : User Signature data missing');
                deferred.resolve(true);
                return deferred.promise();
            }

            this._import_db(obj.db)
                .then(function() {
                    that._import_lc(obj.lc);
                    deferred.resolve(true);
                });

            return deferred.promise();
        },

        _import_db : function(db) {
            var deferred = $.Deferred();

            deferred.resolve();

            return deferred.promise();
        },

        _import_lc : function(lc) {
            if(lc.er_user_signature_mode)
                localStorage.er_user_signature_mode = lc.er_user_signature_mode;
            else
                delete localStorage.er_user_signature_mode;

            if(lc.er_user_signature)
                localStorage.er_user_signature = lc.er_user_signature;
            else
                delete localStorage.er_user_signature;
        },
    };
/**
 * Created by Alex on 17.10.2016.
 */
er_user_signature_view = window.er_user_signature_view || {
    CONST_REFRESH_STAT_TIMEOUT : 5000,

    type : 'er_user_signature',
    tittle : 'My Signature',

    jq_main : null,

    init_main : function() {
        if (this.inited)
            return;

        er_connect_in_search.init_limits();

        this.jq_main = $(this._HTML_build_main());
        this._add_handlers();
        er_main_view.add_sub_setting(this.type, this.tittle, this.jq_main);
        er_main_view._add_callback_on_click_mode_after_turn_on('er_user_signature_mode', this._on_click_broadcast_mode_after_turn_on.bind(this));

        this.inited = true;
    },
    _HTML_build_main : function() {
        var html = '<div class="er_sub_view '+this.type+'">';

        html += '<p class="label"></p>';

        html += '<textarea class="er_user_signature_textarea"></textarea>';
        html += '<button class="btn_save er_inactive"></button>';
        html += this._HTML_build_signature_switch();

        html += '</div>';
        return html;
    },
    _HTML_build_signature_switch : function() {
        var er_off = er_user_signature.is_user_signature_mode_on() ? '' : 'er_off';
        return '<div class="er_state_toggle er_mode_cont er_signature_switch '+er_off+'"><span class="title"></span></div>';
    },


    _add_handlers : function() {
        new ER_Widget_How_To({
            jq_parent : this.jq_main,
            links : [ER_Widget_How_To.links.er_user_signature_view]
        });

        this.jq_main.find('.btn_save').click(this._on_click_btn_save.bind(this));
        this.jq_btn_save = this.jq_main.find('button.btn_save');

        this.jq_textarea = this.jq_main.find('.er_user_signature_textarea');
        this.jq_textarea.val(er_user_signature.get_signature());

        var closure_make_save_btn_active = this._make_save_btn_active.bind(this);
        this.jq_textarea.change(closure_make_save_btn_active).keypress(closure_make_save_btn_active).on('input', closure_make_save_btn_active);

        this.jq_er_signature_switch = this.jq_main.find('.er_signature_switch').click(this._on_click_signature_switch.bind(this));
    },

    _make_save_btn_active : function () {
        this.jq_btn_save.removeClass('er_inactive');
    },

    _on_main_view_ready_for_sub_view : function() {
        this.init_main();
    },

    _on_click_btn_save : function() {
        er_user_signature.save_signature(this.jq_textarea.val());
        this.jq_btn_save.addClass('er_inactive');
    },
    _on_click_signature_switch : function() {
        if (er_user_signature.is_user_signature_mode_on()) {
            er_user_signature.set_user_signature_mode(false);
            this.jq_er_signature_switch.addClass('er_off');
        } else {
            er_user_signature.set_mode_on_and_begin_process();
            this.jq_er_signature_switch.removeClass('er_off');
        }
    },
    _on_click_broadcast_mode_after_turn_on : function() {
        er_user_signature.set_mode_on_and_begin_process();
    }
};
document.addEventListener('er_main_view_ready_for_sub_view', function(){ er_user_signature_view._on_main_view_ready_for_sub_view() });

/**
 * Created by Alex on 31.08.2016.
 */
er_map_names = window.er_map_names || {
    'august' : 'Август',
    'avdyei' : 'Авдей',
    'averky' : 'Аверкий',
    'averyan' : 'Аверьян',
    'auxentios' : 'Авксентий',
    'avtonom' : 'Автоном',
    'agap' : 'Агап',
    'agathon' : 'Агафон',
    'haggai' : 'Аггей',
    'adam' : 'Адам',
    'adrian' : 'Адриан',
    'azary' : 'Азарий',
    'akim' : 'Аким',
    'alexander' : 'Александр',
    'alexandr' : 'Александр',
    'aleksandr' : 'Александр',
    'aliaksandr' : 'Александр',
    'aliaxandr' : 'Александр',
    'sasha' : 'Александр',
    'alex' : 'Алекс',
    'ales' : 'Алес',
    'alesia' : 'Алесия',
    'alexey' : 'Алексей',
    'oleksii' : 'Алексей',
    'oleksiy' : 'Алексей',
    'olexiy' : 'Алексей',
    'aleksey' : 'Алексей',
    'alexey' : 'Алексей',
    'aleksei' : 'Алексей',
    'alexei' : 'Алексей',
    'ambrose' : 'Амвросий',
    'amos' : 'Амос',
    'hanani' : 'Ананий',
    'aneliya' : 'Анелия',
    'aneliia' : 'Анелия',
    'anatoly' : 'Анатолий',
    'anatolii' : 'Анатолий',
    'anatoliy' : 'Анатолий',
    'andrei' : 'Андрей',
    'andrey' : 'Андрей',
    'andrew' : 'Андрей',
    'andron' : 'Андрон',
    'andronicus' : 'Андроник',
    'anikei' : 'Аникей',
    'anikita' : 'Аникита',
    'anisim' : 'Анисим',
    'anzhelika' : 'Анжелика',
    'anzhela' : 'Анжела',
    'angela' : 'Анжела',
    'anjela' : 'Анжела',
    'antipas' : 'Антип',
    'antonin' : 'Антонин',
    'apollinaris' : 'Аполлинарий',
    'apollo' : 'Аполлон',
    'aref' : 'Арефий',
    'aristarch' : 'Аристарх',
    'arkady' : 'Аркадий',
    'arcady' : 'Аркадий',
    'arseny' : 'Арсений',
    'artemy' : 'Артемий',
    'artemiy' : 'Артемий',
    'artur' : 'Артур',
    'arthur' : 'Артур',
    'artem' : 'Артем',
    'aydar' : 'Айдар',
    'airat' : 'Айрат',
    'arkhip' : 'Архип',
    'askold' : 'Аскольд',
    'athanasius' : 'Афанасий',
    'afinogen' : 'Афиноген',
    'bazhen' : 'Бажен',
    'bogdan' : 'Богдан',
    'boleslav' : 'Болеслав',
    'boris' : 'Борис',
    'borislav' : 'Борислав',
    'bojan' : 'Боян',
    'bronislaw' : 'Бронислав',
    'budimir' : 'Будимир',
    'vadim' : 'Вадим',
    'vadym' : 'Вадим',
    'valentine' : 'Валентин',
    'valery' : 'Валерий',
    'valerian' : 'Валерьян',
    'varlaam' : 'Варлаам',
    'bartholomew' : 'Варфоломей',
    'vasily' : 'Василий',
    'vasiliy' : 'Василий',
    'vaclav' : 'Вацлав',
    'velimir' : 'Велимир',
    'benedict' : 'Венедикт',
    'benjamin' : 'Вениамин',
    'vincent' : 'Викентий',
    'victor' : 'Виктор',
    'viktor' : 'Виктор',
    'vika' : 'Вика',
    'victorine' : 'Викторин',
    'vissarion' : 'Виссарион',
    'vitalina' : 'Виталина',
    'vitali' : 'Виталий',
    'vitalii' : 'Виталий',
    'vitaly' : 'Виталий',
    'vitaliy' : 'Виталий',
    'vlad' : 'Влад',
    'ulad' : 'Влад',
    'vladilen' : 'Владилен',
    'vladlen' : 'Владлен',
    'vladimir' : 'Владимир',
    'uladzimir' : 'Владимир',
    'volodimir' : 'Владимир',
    'volodymyr' : 'Владимир',
    'vladislav' : 'Владислав',
    'vlas' : 'Влас',
    'vsevolod' : 'Всеволод',
    'vsemil' : 'Всемил',
    'vseslav' : 'Всеслав',
    'vysheslav' : 'Вышеслав',
    'vyacheslav' : 'Вячеслав',
    'viacheslav' : 'Вячеслав',
    'viachaslau' : 'Вячеслав',
    'gavrila' : 'Гаврила',
    'gabriel' : 'Гавриил',
    'galaktion' : 'Галактион',
    'gideon' : 'Гедеон',
    'gennady' : 'Геннадий',
    'georgy' : 'Георгий',
    'george' : 'Георгий',
    'gerasim' : 'Герасим',
    'hermann' : 'Герман',
    'gleb' : 'Глеб',
    'gordey' : 'Гордей',
    'gostomysl' : 'Гостомысл',
    'gremislav' : 'Гремислав',
    'gregory' : 'Григорий',
    'grigoriy' : 'Григорий',
    'cairn' : 'Гурий',
    'davyd' : 'Давыд',
    'david' : 'Давид',
    'danila' : 'Данила',
    'daniel' : 'Даниил',
    'dementy' : 'Дементий',
    'demid' : 'Демид',
    'demian' : 'Демьян',
    'denis' : 'Денис',
    'dan' : 'Денис',
    'dmitriy' : 'Дмитрий',
    'dmitrii' : 'Дмитрий',
    'dmitry' : 'Дмитрий',
    'dmitro' : 'Дмитро',
    'dobromyslov' : 'Добромысл',
    'dobroslav' : 'Доброслав',
    'dorofei' : 'Дорофей',
    'eugene' : 'Евгений',
    'eugeniy' : 'Евгений',
    'eugenij' : 'Евгений',
    'evgeniy' : 'Евгений',
    'evgenia' : 'Евгения',
    'evgeniya' : 'Евгения',
    'yeseniya' : 'Есения',
    'yesenia' : 'Есения',
    'evgraf' : 'Евграф',
    'evdokim' : 'Евдоким',
    'evlampy' : 'Евлампий',
    'yevsei' : 'Евсей',
    'eustace' : 'Евстафий',
    'yevstigney' : 'Евстигней',
    'egor' : 'Егор',
    'yegor' : 'Егор',
    'elizar' : 'Елизар',
    'elisha' : 'Елисей',
    'yemelyan' : 'Емельян',
    'epiphanes' : 'Епифан',
    'jeremiah' : 'Еремей',
    'yermil' : 'Ермил',
    'ermolai' : 'Ермолай',
    'erofei' : 'Ерофей',
    'efim' : 'Ефим',
    'ephraim' : 'Ефрем',
    'zahar' : 'Захар',
    'zakhar' : 'Захар',
    'zinovy' : 'Зиновий',
    'zosima' : 'Зосима',
    'ivan' : 'Иван',
    'ignatius' : 'Игнатий',
    'igor' : 'Игорь',
    'ishmael' : 'Измаил',
    'isot' : 'Изот',
    'izyaslav' : 'Изяслав',
    'hilarion' : 'Иларион',
    'ilya' : 'Илья',
    'innocent' : 'Иннокентий',
    'joseph' : 'Иосиф',
    'ipat' : 'Ипат',
    'hypatia' : 'Ипатий',
    'hippolyte' : 'Ипполит',
    'irakli' : 'Ираклий',
    'isaiah' : 'Исай',
    'isidore' : 'Исидор',
    'casimir' : 'Казимир',
    'callistratus' : 'Каллистрат',
    'capito' : 'Капитон',
    'charles' : 'Карл',
    'carp' : 'Карп',
    'kasian' : 'Касьян',
    'kim' : 'Ким',
    'cyrus' : 'Кир',
    'kirill' : 'Кирилл',
    'claudius' : 'Клавдий',
    'clement' : 'Климент',
    'clementiy' : 'Клементий',
    'klim' : 'Клим',
    'kondrat' : 'Кондрат',
    'kondraty' : 'Кондратий',
    'conon' : 'Конон',
    'konstantin' : 'Константин',
    'kostya' : 'Константин',
    'the roots' : 'Корнил',
    'kuzma' : 'Кузьма',
    'kuprian' : 'Куприян',
    'lavr' : 'Лавр',
    'lawrence' : 'Лаврентий',
    'ladimir' : 'Ладимир',
    'ladislav' : 'Ладислав',
    'lazarus' : 'Лазарь',
    'lev' : 'Лев',
    'leon' : 'Леон',
    'leonid' : 'Леонид',
    'leanid' : 'Леонид',
    'leonti' : 'Леонтий',
    'longin' : 'Лонгин',
    'luke' : 'Лука',
    'lukyan' : 'Лукьян',
    'luchezar' : 'Лучезар',
    'lubim' : 'Любим',
    'lubomir' : 'Любомир',
    'lyubosmysl' : 'Любосмысл',
    'ludmila' : 'Людмила',
    'makar' : 'Макар',
    'maksim' : 'Максим',
    'maxim' : 'Максим',
    'max' : 'Максим',
    'maximilian' : 'Максимильян',
    'marian' : 'Мариан',
    'mark' : 'Марк',
    'martyn' : 'Мартын',
    'matthew' : 'Матвей',
    'matvey' : 'Матвей',
    'methodius' : 'Мефодий',
    'mechyslau' : 'Мечислав',
    'milan' : 'Милан',
    'milen' : 'Милен',
    'mily' : 'Милий',
    'milovan' : 'Милован',
    'mine' : 'Мина',
    'peace' : 'Мир',
    'miron' : 'Мирон',
    'miroslav' : 'Мирослав',
    'mitofan' : 'Митофан',
    'michael' : 'Михаил',
    'michail' : 'Михаил',
    'mikhail' : 'Михаил',
    'mike' : 'Михаил',
    'mihail' : 'Михаил',
    'micah' : 'Михей',
    'modest' : 'Модест',
    'moses' : 'Моисей',
    'mokey' : 'Мокей',
    'mstislav' : 'Мстислав',
    'nazar' : 'Назар',
    'narkis' : 'Наркис',
    'nathan' : 'Натан',
    'naum' : 'Наум',
    'nestor' : 'Нестор',
    'nikandr' : 'Никандр',
    'nicanor' : 'Никанор',
    'nikita' : 'Никита',
    'nikifor' : 'Никифор',
    'nicodemus' : 'Никодим',
    'nicholas' : 'Николай',
    'niholas' : 'Николай',
    'nick' : 'Николай',
    'nikolay' : 'Николай',
    'nickolay' : 'Николай',
    'nikolai' : 'Николай',
    'nickolai' : 'Николай',
    'nikon' : 'Никон',
    'niphon' : 'Нифонт',
    'oleg' : 'Олег',
    'olympia' : 'Олимпий',
    'onufry' : 'Онуфрий',
    'orest' : 'Орест',
    'osip' : 'Осип',
    'ostap' : 'Остап',
    'ostromir' : 'Остромир',
    'pavel' : 'Павел',
    'paul' : 'Павел',
    'pankraty' : 'Панкратий',
    'pancrate' : 'Панкрат',
    'panteleimon' : 'Пантелеймон',
    'panfil' : 'Панфил',
    'paramon' : 'Парамон',
    'parfyon' : 'Парфен',
    'pahom' : 'Пахом',
    'peter' : 'Петр',
    'piotr' : 'Петр',
    'pimen' : 'Пимен',
    'plato' : 'Платон',
    'polycarp' : 'Поликарп',
    'porphyry' : 'Порфирий',
    'potap' : 'Потап',
    'prov' : 'Пров',
    'proclus' : 'Прокл',
    'prokofy' : 'Прокофий',
    'prohor' : 'Прохор',
    'radim' : 'Радим',
    'radislav' : 'Радислав',
    'radovan' : 'Радован',
    'ratibor' : 'Ратибор',
    'ratmir' : 'Ратмир',
    'rodion' : 'Родион',
    'roxana' : 'Роксана',
    'roman' : 'Роман',
    'roma' : 'Роман',
    'rostislav' : 'Ростислав',
    'ruben' : 'Рубен',
    'ruslan' : 'Руслан',
    'rurik' : 'Рюрик',
    'sawa' : 'Савва',
    'sabina' : 'Сабина',
    'savvaty' : 'Савватий',
    'savely' : 'Савелий',
    'samson' : 'Самсон',
    'samuel' : 'Самуил',
    'svetozar' : 'Светозар',
    'sviatopolk' : 'Святополк',
    'svyatoslav' : 'Святослав',
    'sebastian' : 'Севастьян',
    'selivan' : 'Селиван',
    'seliverstov' : 'Селиверст',
    'semen' : 'Семен',
    'seraph' : 'Серафим',
    'sergei' : 'Сергей',
    'sergey' : 'Сергей',
    'serg' : 'Сергей',
    'serj' : 'Сергей',
    'serge' : 'Сергей',
    'sigismund' : 'Сигизмунд',
    'sidor' : 'Сидор',
    'force' : 'Сила',
    'silanti' : 'Силантий',
    'sylvester' : 'Сильвестр',
    'simon' : 'Симон',
    'socrates' : 'Сократ',
    'solomon' : 'Соломон',
    'zephaniah' : 'Софон',
    'sofron' : 'Софрон',
    'spartacus' : 'Спартак',
    'spyridon' : 'Спиридон',
    'stanimir' : 'Станимир',
    'stanislas' : 'Станислав',
    'stanislav' : 'Станислав',
    'stas' : 'Станислав',
    'stepan' : 'Степан',
    'stojan' : 'Стоян',
    'taras' : 'Тарас',
    'tverdislav' : 'Твердислав',
    'tvorimir' : 'Творимир',
    'terence' : 'Терентий',
    'timothy' : 'Тимофей',
    'timofey' : 'Тимофей',
    'timur' : 'Тимур',
    'tit' : 'Тит',
    'tikhon' : 'Тихон',
    'trifon' : 'Трифон',
    'trofim' : 'Трофим',
    'uljan' : 'Ульян',
    'ustin' : 'Устин',
    'fadei' : 'Фадей',
    'fedor' : 'Федор',
    'fedosov' : 'Федосий',
    'fedot' : 'Федот',
    'felix' : 'Феликс',
    'teoctist' : 'Феоктист',
    'theophane' : 'Феофан',
    'ferapont' : 'Ферапонт',
    'filaret' : 'Филарет',
    'philemon' : 'Филимон',
    'philip' : 'Филипп',
    'firs' : 'Фирс',
    'florentine' : 'Флорентин',
    'fock' : 'Фока',
    'thomas' : 'Фома',
    'fortunat' : 'Фортунат',
    'photios' : 'Фотий',
    'photios' : 'Фотий',
    'frol' : 'Фрол',
    'chariton' : 'Харитон',
    'harlampi' : 'Харлампий',
    'christopher' : 'Христофор',
    'czeslaw' : 'Чеслав',
    'edward' : 'Эдуард',
    'emmanuel' : 'Эммануил',
    'emil' : 'Эмиль',
    'erast' : 'Эраст',
    'ernest' : 'Эрнест',
    'ernst' : 'Эрнст',
    'juvenal' : 'Ювеналий',
    'julian' : 'Юлиан',
    'julius' : 'Юлий',
    'jury' : 'Юрий',
    'yury' : 'Юрий',
    'yuri' : 'Юрий',
    'yuriy' : 'Юрий',
    'jacob' : 'Яков',
    'yang' : 'Ян',
    'yana' : 'Яна',
    'jakub' : 'Якуб',
    'januarius' : 'Януарий',
    'yaropolk' : 'Ярополк',
    'yaroslav' : 'Ярослав',
    'iaroslav' : 'Ярослав',
    'augusta' : 'Августа',
    'agatha' : 'Агата',
    'aglaia' : 'Аглая',
    'agnessa' : 'Агнесса',
    'agnes' : 'Агния',
    'agrafena' : 'Аграфена',
    'agrippina' : 'Агриппина',
    'ada' : 'Ада',
    'adelaide' : 'Аделаида',
    'aza' : 'Аза',
    'alevtina' : 'Алевтина',
    'alexandra' : 'Александра',
    'aleksandra' : 'Александра',
    'oleksandra' : 'Олександра',
    'alina' : 'Алина',
    'alice' : 'Алиса',
    'alla' : 'Алла',
    'albina' : 'Альбина',
    'anastasia' : 'Анастасия',
    'anastasiia' : 'Анастасия',
    'anastasiya' : 'Анастасия',
    'nastya' : 'Анастасия',
    'angelina' : 'Ангелина',
    'anisa' : 'Анисья',
    'anna' : 'Анна',
    'aleona' : 'Алеона',
    'hanna' : 'Анна',
    'antonida' : 'Антонида',
    'antonina' : 'Антонина',
    'anton' : 'Антон',
    'anfisa' : 'Анфиса',
    'ariadne' : 'Ариадна',
    'beatrice' : 'Беатриса',
    'bertha' : 'Берта',
    'borislava' : 'Борислава',
    'bronislawa' : 'Бронислава',
    'sandra' : 'Сандра',
    'valentina' : 'Валентина',
    'valeria' : 'Валерия',
    'valeriya' : 'Валерия',
    'valerie' : 'Валерия',
    'valeriia' : 'Валерия',
    'violetta' : 'Виолетта',
    'violeta' : 'Виолетта',
    'wanda' : 'Ванда',
    'varvara' : 'Варвара',
    'vasilisa' : 'Василиса',
    'vassa' : 'Васса',
    'vera' : 'Вера',
    'veronica' : 'Вероника',
    'veronika' : 'Вероника',
    'quiz' : 'Викторина',
    'victoria' : 'Виктория',
    'viсtoria' : 'Виктория',
    'victoriia' : 'Виктория',
    'virginia' : 'Виргиния',
    'vlada' : 'Влада',
    'vladilena' : 'Владилена',
    'vladlena' : 'Владлена',
    'vladislava' : 'Владислава',
    'vlasta' : 'Власта',
    'vseslava' : 'Всеслава',
    'galina' : 'Галина',
    'gayane' : 'Гаяне',
    'galya' : 'Галя',
    'gunn' : 'Ганна',
    'henrietta' : 'Генриетта',
    'glafira' : 'Глафира',
    'gorislava' : 'Горислава',
    'daria' : 'Дарья',
    'darya' : 'Дарья',
    'diana' : 'Диана',
    'dina' : 'Дина',
    'dominica' : 'Доминика',
    'blast furnace' : 'Домна',
    'eve' : 'Ева',
    'evgeinya' : 'Евгеиня',
    'evgeny' : 'Евгений',
    'evhenii' : 'Евгений',
    'evgen' : 'Евгений',
    'evdokia' : 'Евдокия',
    'evlampiya' : 'Евлампия',
    'catherine' : 'Екатерина',
    'ekaterina' : 'Екатерина',
    'katerina' : 'Катерина',
    'kateryna' : 'Катерина',
    'kate' : 'Катерина',
    'christina' : 'Кристина',
    'kristina' : 'Кристина',
    'elena' : 'Елена',
    'helena' : 'Елена',
    'helen' : 'Елена',
    'olena' : 'Елена',
    'elizabeth' : 'Елизавета',
    'elizaveta' : 'Елизавета',
    'yefrosinya' : 'Ефросинья',
    'jeanne' : 'Жанна',
    'zinaida' : 'Зинаида',
    'zlata' : 'Злата',
    'zoe' : 'Зоя',
    'isabel' : 'Изабелла',
    'isolde' : 'Изольда',
    'inga' : 'Инга',
    'inessa' : 'Инесса',
    'inna' : 'Инна',
    'iraida' : 'Ираида',
    'ilona' : 'Илона',
    'irina' : 'Ирина',
    'irene' : 'Ирен',
    'iryna' : 'Ирина',
    'casimira' : 'Казимира',
    'ksenia' : 'Ксения',
    'kseniia' : 'Ксения',
    'ksusha' : 'Ксения',
    'kseniya' : 'Ксения',
    'xenia' : 'Ксения',
    'kaleria' : 'Калерия',
    'capitolina' : 'Капитолина',
    'caroline' : 'Каролина',
    'kira' : 'Кира',
    'claudia' : 'Клавдия',
    'clara' : 'Клара',
    'clarissa' : 'Кларисса',
    'clementine' : 'Клементина',
    'lily' : 'Лилия',
    'lidia' : 'Лидия',
    'leah' : 'Лия',
    'louise' : 'Луиза',
    'lusha' : 'Лукерья',
    'lyubava' : 'Любава',
    'luibov' : 'Любовь',
    'liubov' : 'Любовь',
    'lubov' : 'Любовь',
    'lina' : 'Лина',
    'any' : 'Любомила',
    'lubomira' : 'Любомира',
    'lyudmila' : 'Людмила',
    'liudmila' : 'Людмила',
    'liudmyla' : 'Людмила',
    'mayan' : 'Майя',
    'malvina' : 'Мальвина',
    'marat' : 'Марат',
    'margaret' : 'Маргарита',
    'margareita' : 'Маргарита',
    'marianne' : 'Марианна',
    'maryana' : 'Марианна',
    'maryanna' : 'Марианна',
    'marianna' : 'Марианна',
    'marietta' : 'Мариетта',
    'marina' : 'Марина',
    'maria' : 'Мария',
    'mary' : 'Мария',
    'mariya' : 'Мария',
    'martha' : 'Марта',
    'melania' : 'Меланья',
    'melitrisa' : 'Мелитриса',
    'milena' : 'Милена',
    'milica' : 'Милица',
    'Mira' : 'Мира',
    'miroslava' : 'Мирослава',
    'mlada' : 'Млада',
    'mstislava' : 'Мстислава',
    'muse' : 'Муза',
    'nadezhda' : 'Надежда',
    'nadia' : 'Надежда',
    'nadiia' : 'Надежда',
    'natalia' : 'Наталья',
    'natallia' : 'Наталья',
    'nataliya' : 'Наталья',
    'natalya' : 'Наталья',
    'natalie' : 'Наталья',
    'natali' : 'Наталья',
    'neonila' : 'Неонила',
    'nika' : 'Ника',
    'nina' : 'Нина',
    'ninel' : 'Нинель',
    'nona' : 'Нона',
    'oksana' : 'Оксана',
    'oxana' : 'Оксана',
    'oktiabrina' : 'Октябрина',
    'olympiad' : 'Олимпиада',
    'olga' : 'Ольга',
    'olya' : 'Ольга',
    'pelagia' : 'Пелагея',
    'polyxena' : 'Поликсена',
    'pauline' : 'Полина',
    'polina' : 'Полина',
    'praskovya' : 'Прасковья',
    'pulcheria' : 'Пульхерия',
    'rada' : 'Рада',
    'rashid' : 'Рашид',
    'raisa' : 'Раиса',
    'regina' : 'Регина',
    'renata' : 'Рената',
    'rimma' : 'Римма',
    'rogneda' : 'Рогнеда',
    'rose flower' : 'Роза',
    'rosalia' : 'Розалия',
    'rosina' : 'Розина',
    'rostislava' : 'Ростислава',
    'rufina' : 'Руфина',
    'svetlana' : 'Светлана',
    'seraphim' : 'Серафима',
    'silvia' : 'Сильвия',
    'salome' : 'Саломея',
    'sofia' : 'Софья',
    'sofiya' : 'Софья',
    'stanislaus' : 'Станислава',
    'stele' : 'Стела',
    'stepanida' : 'Степанида',
    'susanna' : 'Сусанна',
    'taisiya' : 'Таисия',
    'taisiia' : 'Таисия',
    'tamara' : 'Тамара',
    'tatyana' : 'Татьяна',
    'tatsiana' : 'Татьяна',
    'tetyana' : 'Татьяна',
    'tanya' : 'Татьяна',
    'tatjana' : 'Татьяна',
    'tatiana' : 'Татьяна',
    'ulyana' : 'Ульяна',
    'faina' : 'Фаина',
    'theodosia' : 'Федосья',
    'felitsata' : 'Фелицата',
    'flora' : 'Флора',
    'florentina' : 'Флорентина',
    'fatina' : 'Фатина',
    'haritina' : 'Харитина',
    'hristina' : 'Христина',
    'evelina' : 'Эвелина',
    'eleanor' : 'Элеонора',
    'elvira' : 'Эльвира',
    'emilia' : 'Эмилия',
    'emma' : 'Эмма',
    'yuliya' : 'Юлия',
    'yulia' : 'Юлия',
    'juliya' : 'Юлия',
    'julia' : 'Юлия',
    'yulya' : 'Юлия',
    'jadwiga' : 'Ядвига',
    'yaroslava' : 'Ярослава',
    'dzhavala' : 'Джавала',
    'nazariy' : 'Назарий',
    'rita' : 'Рита',
};

var er_map_names_hebrew = window.er_map_names_hebrew || {
        "éirinn" : "ארין",
        "aaron" : "אהרון",
        "aba" : "אבא",
        "abi" : "אבי",
        "abigail" : "אביגייל",
        "abir" : "אביר",
        "abraham" : "אברהם",
        "achava" : "אחוה",
        "achi" : "אחי",
        "achiad" : "אחיעד",
        "achiam" : "אחיעם",
        "achiav" : "אחיאב",
        "achiel" : "אחיאל",
        "achiezer" : "אחיעזר",
        "achihud" : "אחיהוד",
        "achikam" : "אחיקם",
        "achimeir" : "אחימאיר",
        "achinadav" : "אחינדב",
        "achinoam" : "אחינעם",
        "achishay" : "אחישי",
        "achituv" : "אחטוב",
        "achiya" : "אחיה",
        "achlama" : "אחלמה",
        "ad el" : "עד אל",
        "ad" : "עד",
        "ada" : "אדה",
        "adam" : "אדם",
        "adama" : "אדמה",
        "adamiel" : "אדמיאל",
        "adamit" : "אדמית",
        "adar" : "אדר",
        "adara" : "אדרה",
        "adaya" : "עדיה",
        "adela" : "אדלה",
        "adele" : "אדל",
        "adelia" : "אדליה",
        "adeline" : "אדלין",
        "adell" : "אדל",
        "aderet" : "אדרת",
        "adi chen" : "עדי חן",
        "adi li" : "עדי לי",
        "adi" : "עדי",
        "adiel" : "עדיאל",
        "adiela" : "עדיאלה",
        "adili" : "עדילי",
        "adin" : "עדין",
        "adina" : "עדינה",
        "adir" : "אדיר",
        "adira" : "אדירה",
        "adiv" : "אדיב",
        "adiva" : "אדיבה",
        "adoram" : "אדורם",
        "adore" : "אדור",
        "adrian" : "אדריאן",
        "adriana" : "אדריאנה",
        "adva" : "אדוה",
        "afek" : "אפק",
        "afeka" : "אפקה",
        "afik" : "אפיק",
        "agam" : "אגם",
        "agamit" : "אגמית",
        "agas" : "אגס",
        "agat" : "אגת",
        "agmon" : "אגמון",
        "agnes" : "אגנס",
        "agnon" : "עגנון",
        "agur" : "עגור",
        "ahal" : "אהל",
        "ahala" : "אהלה",
        "ahaliav" : "אהליאב",
        "ahaliba" : "אהליבה",
        "ahaorona" : "אהרונה",
        "aharon" : "אהרון",
        "ahav" : "אהב",
        "ahava" : "אהבה",
        "ahavatel" : "אהבתאל",
        "ahavit" : "אהבית",
        "ahavniel" : "אהבניאל",
        "ahavtia" : "אהבתיה",
        "ahel" : "אהל",
        "ahuda" : "אהודה",
        "ahuv" : "אהוּב",
        "ahuva" : "אהוּבה",
        "ahuvi" : "אהובי",
        "ahuviel" : "אהוביאל",
        "ahuvit" : "אהובית",
        "ahuvya" : "אהוביה",
        "aileen" : "איילין",
        "aimee" : "איימי",
        "aka" : "אקה",
        "akiva" : "עקיבא",
        "alan" : "אלן",
        "albert" : "אלברט",
        "aldo" : "אלדו",
        "aleen" : "אלין",
        "alel" : "אלאל",
        "alex" : "אלכס",
        "alexander" : "אלכסנדר",
        "alexandra" : "אלכסנדרה",
        "alexei" : "אלכסי",
        "alexey" : "אלכסי",
        "alfons" : "אלפונס",
        "alfonso" : "אלפונסו",
        "alfred" : "אלפרד",
        "alfredo" : "אלפרדו",
        "alice" : "אליס",
        "alina" : "אלינה",
        "aline" : "אלין",
        "alisson" : "אליסון",
        "alit" : "אלית",
        "aliya" : "אליה",
        "aliz" : "עליז",
        "aliza" : "עליזה",
        "allegra" : "אלגרה",
        "allegria" : "אלגריה",
        "allen" : "אלן",
        "alma" : "עלמה",
        "almar" : "אלמר",
        "almog" : "אלמוג",
        "almoga" : "אלמוגה",
        "almogit" : "אלמוגית",
        "alon" : "אלון",
        "alona" : "אלונה",
        "aloni" : "אלוני",
        "alonit" : "אלונית",
        "altar" : "אלתר",
        "aluma" : "אלומה",
        "alva" : "עלוה",
        "alvetina" : "אלבטינה",
        "alvit" : "עלוית",
        "amal" : "עמל",
        "amalia" : "אמליה",
        "amanda" : "אמנדה",
        "amarel" : "אמראל",
        "amatzya" : "אמציה",
        "amber" : "אמבר",
        "ami chai" : "עמי חי",
        "ami" : "עמי",
        "amiad" : "עמיעד",
        "amichai" : "עמיחי",
        "amiel" : "עמיאל",
        "amihud" : "עמיהוד",
        "amikam" : "עמיקם",
        "aminadav" : "עמינדב",
        "amioz" : "עמיעז",
        "amir" : "אמיר",
        "amira" : "אמירה",
        "amiram" : "עמירם",
        "amiran" : "אמירן",
        "amirel" : "אמיראל",
        "amiri" : "אמירי",
        "amirit" : "אמירית",
        "amit" : "עמית",
        "amital" : "עמיטל",
        "amiti" : "עמיתי",
        "amittai" : "אמיתי",
        "amitz" : "אמיץ",
        "amitzur" : "עמיצור",
        "amnon" : "אמנון",
        "amor" : "אמור",
        "amos" : "עמוס",
        "amotz" : "אמוץ",
        "amram" : "עמרם",
        "amy" : "איימי",
        "amya" : "עמיה",
        "anael" : "ענהאל",
        "anafa" : "אנפה",
        "anahí" : "אנהי",
        "anastasia" : "אנסטסיה",
        "anat" : "ענת",
        "anati" : "ענתי",
        "anatol" : "אנטול",
        "anatoli" : "אנטולי",
        "anava" : "ענוה",
        "andre" : "אנדרה",
        "andrea" : "אנדראה",
        "andreia" : "אנדריה",
        "andrew" : "אנדרו",
        "andrey" : "אנדרי",
        "andy" : "אנדי",
        "anefa" : "ענפה",
        "aner" : "ענר",
        "angel" : "אנג'ל",
        "angela" : "אנג'לה",
        "angelika" : "אנג'ליקה",
        "angellina" : "אנגלינה",
        "angy" : "אנג'י",
        "aniam" : "אניעם",
        "anidor" : "אנידור",
        "anil" : "א‏ניל",
        "anila" : "א‏נילה",
        "anise" : "א‏ניס",
        "anit" : "א‏נית",
        "anita" : "א‏ניטה",
        "anna" : "אנה",
        "annabel" : "אנאבל",
        "annabela" : "אנבלה",
        "anne" : "אן",
        "annette" : "אנט",
        "annick" : "אניק",
        "anny" : "אני",
        "anog" : "ענוג",
        "anouk" : "אנוק",
        "anthony" : "אנטוני",
        "anton" : "אנטון",
        "antonia" : "אנטוניה",
        "antonina" : "אנטונינה",
        "antonio" : "אנטוניו",
        "anuga" : "ענוגה",
        "anya" : "אניה",
        "april" : "אפריל",
        "arad" : "ערד",
        "aram" : "ארם",
        "aran" : "ארן",
        "arava" : "ערבה",
        "arbel" : "ארבל",
        "arcadi" : "ארקדי",
        "arel" : "אראל",
        "argaman" : "ארגמן",
        "ari" : "ארי",
        "ariana" : "אריאנה",
        "ariane" : "אריאן",
        "ariav" : "אריאב",
        "arie" : "אריה",
        "ariel" : "אריאל",
        "ariela" : "אריאלה",
        "arieli" : "אריאלי",
        "arig" : "אריג",
        "arik" : "אריק",
        "arina" : "ארינה",
        "arit" : "ארית",
        "arleen" : "ארלין",
        "arline" : "ארלין",
        "arlyne" : "ארלין",
        "arman" : "ארמן",
        "armando" : "ארמנדו",
        "armond" : "ארמונד",
        "arna" : "ארנה",
        "arnold" : "ארנולד",
        "arnon" : "ארנון",
        "artal" : "ערטל",
        "arthur" : "ארתור",
        "arza" : "ארזה",
        "arzit" : "ארזית",
        "ash" : "אש",
        "asher" : "אשר",
        "ashi" : "אשי",
        "ashir" : "אשיר",
        "ashira" : "אשירה",
        "asia" : "אסיה",
        "assa" : "אסא",
        "assael" : "עשהאל",
        "assaf" : "אסף",
        "assafa" : "אספה",
        "assi" : "אסי",
        "assif" : "אסיף",
        "atai" : "עתי",
        "atalia" : "אטליה",
        "atar" : "עטר",
        "atara" : "עטרה",
        "ateka" : "אטקה",
        "atel" : "אטל",
        "ateret" : "עטרת",
        "ati" : "אטי",
        "atid" : "עתיד",
        "atida" : "עתידה",
        "atir" : "עתיר",
        "atira" : "עתירה",
        "atli" : "אתלי",
        "atniel" : "עתניאל",
        "attalia" : "עתליה",
        "atzil" : "אציל",
        "atzmon" : "עצמון",
        "atzmona" : "עצמונה",
        "audelia" : "אדליה",
        "audrey" : "אוֹדרי",
        "aurelia" : "אורליה",
        "av" : "אב",
        "avel" : "אבאל",
        "avgar" : "אבגר",
        "avi ad" : "אבי עד",
        "avi chai" : "אבי חי",
        "avi el" : "אבי אל",
        "avi hai" : "אבי חי",
        "avi" : "אבי",
        "avi-chai" : "אבי-חי",
        "avi-hai" : "אבי-חי",
        "aviad" : "אביעד",
        "aviah" : "אביה",
        "aviam" : "אביעם",
        "avichai" : "אביחי",
        "avichail" : "אביחיל",
        "avichen" : "אביחן",
        "avida" : "אבידע",
        "avidan" : "אבידן",
        "avidar" : "אבידר",
        "avidor" : "אבידור",
        "aviel" : "אביאל",
        "aviela" : "אביאלה",
        "aviem" : "אביאם",
        "aviezer" : "אביעזר",
        "avigaal" : "אביגאל",
        "avigad" : "אביגד",
        "avigail" : "אביגייל",
        "avigal" : "אביגל",
        "avigdor" : "אביגדור",
        "aviguy" : "אביגיא",
        "avihai" : "אביחי",
        "avihail" : "אביחיל",
        "avihaim" : "אביחיים",
        "avihu" : "אביהו",
        "avihud" : "אביהוד",
        "avikam" : "אביקם",
        "avim" : "אבים",
        "avimelech" : "אבימלך",
        "avinadav" : "אבינדב",
        "aviner" : "אבינר",
        "avinoach" : "אבינח",
        "avinoam" : "אבינועם",
        "avinur" : "אבינור",
        "avior" : "אביאור",
        "avioz" : "אביעוז",
        "aviram" : "אבירם",
        "aviran" : "אבירן",
        "aviraz" : "אבירז",
        "avisar" : "אבישר",
        "avishag" : "אבישג",
        "avishalom" : "אבישלום",
        "avishay" : "אבישי",
        "avit" : "אבית",
        "avital" : "אביטל",
        "avitzur" : "אביצור",
        "aviv" : "אביב",
        "aviva" : "אביבה",
        "avivi" : "אביבי",
        "avivit" : "אביבית",
        "avivya" : "אביביה",
        "avner" : "אבנר",
        "avnet" : "אבנט",
        "avniel" : "אבניאל",
        "avnir" : "אבניר",
        "avraham" : "אברהם",
        "avram" : "אברם",
        "avri" : "אברי",
        "avriel" : "אבריאל",
        "avrum" : "אברום",
        "avshalom" : "אבשלום",
        "aya" : "איה",
        "ayal" : "אייל",
        "ayala" : "אילה",
        "ayalon" : "איילון",
        "ayana" : "עיינה",
        "ayelet chen" : "אילת חן",
        "ayelet ha'shahar" : "אילת השחר",
        "ayelet" : "איילת",
        "ayelet-chen" : "איילת-חן",
        "ayleen" : "איילין",
        "ayub" : "איוב",
        "azaria" : "עזריה",
        "azriel" : "עזריאל",
        "azriela" : "עזריאלה",
        "bahat" : "בהט",
        "bar el" : "בר אל",
        "bar mazal" : "בר מזל",
        "bar oriyan" : "בר אוריין",
        "bar" : "בר",
        "bar-el" : "בר-אל",
        "bar-yochai" : "בר-יוחאי",
        "barak" : "ברק",
        "baram" : "ברעם",
        "barbara" : "ברברה",
        "bareket" : "ברקת",
        "barel" : "בראל",
        "barkai" : "ברקאי",
        "barkan" : "ברקן",
        "baruch" : "ברוך",
        "bat ami" : "בת עמי",
        "bat chayil" : "בת חיל",
        "bat chen" : "בת חן",
        "bat el" : "בת אל",
        "bat gal" : "בת גל",
        "bat galim" : "בת גלים",
        "bat kol" : "בת קול",
        "bat melech" : "בת-מלך",
        "bat nadiv" : "בת נדיב",
        "bat or" : "בת אור",
        "bat shahar" : "בת שחר",
        "bat sheva" : "בת שבע",
        "bat tzion" : "בת ציון",
        "bat tziona" : "בת ציונה",
        "bat" : "בת",
        "bat-chayil" : "בת-חיל",
        "bat-chen" : "בת-חן",
        "bat-dor" : "בת-דור",
        "bat-el" : "בת-אל",
        "bat-or" : "בת-אור",
        "bat-sheva" : "בת-שבע",
        "bat-tzion" : "בת-ציון",
        "batel" : "בתאל",
        "batli" : "בתלי",
        "batya" : "בתיה",
        "baz" : "בז",
        "beatrice" : "ביאטריס",
        "bechor" : "בכור",
        "bechora" : "בכורה",
        "beckie" : "בקי",
        "becky" : "בקי",
        "beeri" : "בארי",
        "bell" : "בל",
        "bella" : "בלה",
        "belle" : "בלה",
        "ben baruch" : "בן ברוך",
        "ben chur" : "בן חו‏ר",
        "ben el" : "בן אל",
        "ben hur" : "בן חו‏ר",
        "ben or" : "בן אור",
        "ben tzion" : "בן ציון",
        "ben yishay" : "בן ישי",
        "ben" : "בן",
        "ben-ami" : "בן-עמי",
        "ben-chur" : "בן-חו‏ר",
        "ben-david" : "בן-דוד",
        "ben-el" : "בן-אל",
        "ben-hur" : "בן-חו‏ר",
        "ben-tzion" : "בן-ציון",
        "benel" : "בנאל",
        "beniel" : "בניאל",
        "benjamin" : "בנימין",
        "benli" : "בנלי",
        "benno" : "בנו",
        "benny" : "בני",
        "bentzi" : "בנצי",
        "bereshit" : "בראשית",
        "berl" : "ברל",
        "bernard" : "ברנרד",
        "bernardo" : "ברנרדו",
        "bernice" : "ברניס",
        "berri" : "ברי",
        "bertha" : "ברטה",
        "bertin" : "ברטין",
        "bertina" : "ברטינה",
        "beth" : "בט",
        "bette" : "בט",
        "bettie" : "בטי",
        "bettina" : "בטינה",
        "betty" : "בטי",
        "betuel" : "בתואל",
        "betzalel" : "בצלאל",
        "beverly" : "בברלי",
        "beyla" : "בילה",
        "bildad" : "בלדד",
        "bilha" : "בלהה",
        "billie" : "בילי",
        "billy" : "בילי",
        "bina" : "בינה",
        "binnat" : "בינת",
        "binyamin" : "בנימין",
        "binyamina" : "בנימינה",
        "biran" : "בירן",
        "biranit" : "בירנית",
        "blanca" : "בלנקה",
        "blanche" : "בלאנש",
        "bluma" : "בלומה",
        "bnaya" : "בניה",
        "bnayahu" : "בניהו",
        "boaz" : "בועז",
        "bogdan" : "בוגדן",
        "bonita" : "בוניטה",
        "bonnie" : "בוני",
        "boris" : "בוריס",
        "bosem" : "בושם",
        "bosmat" : "בושמת",
        "botzer" : "בוצר",
        "bracha" : "ברכה",
        "brel" : "ברל",
        "brenda" : "ברנדה",
        "brian" : "בריאן",
        "brigitte" : "בריז'יט",
        "brit el" : "ברית אל",
        "brit" : "ברית",
        "brit-el" : "ברית-אל",
        "brooke" : "ברוק",
        "brosh" : "ברוש",
        "bruce" : "ברוס",
        "brucha" : "ברוכה",
        "bruna" : "ברונה",
        "bruno" : "ברונו",
        "bruria" : "ברוריה",
        "brurya" : "ברוריה",
        "bryan" : "בריאן",
        "bsor" : "בשור",
        "bsora" : "בשורה",
        "cami" : "קמי",
        "camilla" : "קמילה",
        "candy" : "קנדי",
        "carmel" : "כרמל",
        "carmela" : "כרמלה",
        "carmelit" : "כרמלית",
        "carmen" : "כרמן",
        "carmi" : "כרמי",
        "carmia" : "כרמיה",
        "carmit" : "כרמית",
        "carmon" : "כרמון",
        "celine" : "סלין",
        "cellah" : "סלה",
        "chagai" : "חגי",
        "chagit" : "חגית",
        "chai" : "חי",
        "chaim" : "חיים",
        "chalom" : "חלום",
        "chamutal" : "חמוטל",
        "chana" : "חנה",
        "chanan" : "חנן",
        "chananel" : "חננאל",
        "chananiel" : "חנניאל",
        "chananya" : "חנניה",
        "chanel" : "שאנל",
        "chani" : "חני",
        "chaniel" : "חניאל",
        "chanina" : "חנינה",
        "chanit" : "חנית",
        "chanita" : "חניתה",
        "chanoch" : "חנוך",
        "chantal" : "שנטל",
        "chanuka" : "חנוכה",
        "charleen" : "שרלין",
        "charlene" : "שרלין",
        "charles" : "צ'רלס",
        "charlie" : "צ'רלי",
        "charlotte" : "שרלוט",
        "charly" : "שרלי",
        "chasid" : "חסיד",
        "chasida" : "חסידה",
        "chassia" : "חסיה",
        "chatzav" : "חצב",
        "chava" : "חוה",
        "chavatzelet" : "חבצלת",
        "chaviv" : "חביב",
        "chaviva" : "חביבה",
        "chavivit" : "חביבית",
        "chaya" : "חיה",
        "chayut" : "חיות",
        "chayuta" : "חיותה",
        "chazon" : "חזון",
        "chedva" : "חדוה",
        "chefer" : "חפר",
        "chefetz" : "חפץ",
        "cheftzi ba" : "חפצי בה",
        "cheftzi" : "חפצי",
        "cheftzi-ba" : "חפצי-בה",
        "cheftziba" : "חפציבה",
        "cheli" : "חלי",
        "chemda" : "חמדה",
        "chemdat" : "חמדת",
        "chemi" : "חמי",
        "chen li" : "חן לי",
        "chen" : "חן",
        "chen-li" : "חן-לי",
        "cheni" : "חני",
        "chenit" : "חנית",
        "cherie" : "שרי",
        "chermon" : "חרמון",
        "chermona" : "חרמונה",
        "cherry" : "שרי",
        "cherut" : "חרות",
        "cheryl" : "שריל",
        "chesed" : "חסד",
        "chezi" : "חזי",
        "chiba" : "חיבה",
        "chilik" : "חיליק",
        "chinanit" : "חיננית",
        "chiskiyah" : "חזקיה",
        "chiskiyahu" : "חזקיהו",
        "chita" : "חיטה",
        "chof" : "חוף",
        "chofesh" : "חופש",
        "chofi" : "חופי",
        "chofit" : "חופית",
        "chofshiya" : "חופשיה",
        "choresh" : "חורש",
        "chorev" : "חורב",
        "choshen" : "חשן",
        "chovav" : "חובב",
        "christina" : "כריסטינה",
        "christopher" : "כריסטופר",
        "cilia" : "סיליה",
        "cindy" : "סינדי",
        "clara" : "קלרה",
        "clarissa" : "קלריסה",
        "claude" : "קלוד",
        "claudette" : "קלודט",
        "claudine" : "קלודין",
        "claudio" : "קלאודיו",
        "clementine" : "קלמנטין",
        "cnaan" : "כנען",
        "cnaanit" : "כנענית",
        "colin" : "קולין",
        "collette" : "קולט",
        "cory" : "קורי",
        "dafna" : "דפנה",
        "dagan" : "דגן",
        "dahlia" : "דליה",
        "daisy" : "דייזי",
        "daizy" : "דייזי",
        "dakar" : "דקר",
        "dalit" : "דלית",
        "daly" : "דלי",
        "dan dan" : "דן דן",
        "dan" : "דן",
        "dana li" : "דנה לי",
        "dana" : "דנה",
        "dandan" : "דנדן",
        "danel" : "דנאל",
        "daniel li" : "דניאל לי",
        "daniel" : "דניאל",
        "daniela" : "דניאלה",
        "danieli" : "דניאלי",
        "danit" : "דנית",
        "danny" : "דני",
        "danor" : "דנאור",
        "danya" : "דניה",
        "daphi" : "דפי",
        "daphne" : "דפני",
        "dar" : "דר",
        "darel" : "דראל",
        "daria" : "דריה",
        "darya" : "דריה",
        "dasi" : "דסי",
        "datia" : "דתיה",
        "dave" : "דייב",
        "david" : "דויד",
        "davida" : "דוידה",
        "davidi" : "דוידי",
        "dawn" : "דון",
        "daya" : "דיה",
        "dean" : "דין",
        "debbie" : "דבי",
        "deborah" : "דבורה",
        "dekel" : "דקל",
        "delphine" : "דלפין",
        "denise" : "דניס",
        "dgani" : "דגני",
        "dgania" : "דגניה",
        "dganit" : "דגנית",
        "diana" : "דיאנה",
        "diane" : "דיאן",
        "diego" : "דיאגו",
        "dikla" : "דקלה",
        "dillen" : "דילן",
        "dima" : "דימה",
        "dimitri" : "דימיטרי",
        "dimona" : "דימוֹנה",
        "din din" : "דין דין",
        "dina" : "דינה",
        "dinur" : "דינור",
        "dita" : "דיתה",
        "diti" : "דיתי",
        "ditie" : "דיתי",
        "ditza" : "דיצה",
        "diva" : "דיוה",
        "dlila" : "דלילה",
        "dmitry" : "דמיטרי",
        "dolev" : "דולב",
        "dolly" : "דולי",
        "dolores" : "דולורס",
        "dolphin" : "דולפין",
        "don" : "דון",
        "donald" : "דונלד",
        "donna" : "דונה",
        "dor el" : "דור אל",
        "dor" : "דור",
        "dora" : "דורה",
        "doran" : "דורן",
        "doreen" : "דורין",
        "dorel" : "דוראל",
        "dori" : "דורי",
        "doria" : "דוריה",
        "dorian" : "דוריאן",
        "doriav" : "דוריאב",
        "doriel" : "דוריאל",
        "dorina" : "דורינה",
        "dorine" : "דורין",
        "doris" : "דוריס",
        "dorit" : "דורית",
        "dorli" : "דורלי",
        "doron" : "דורון",
        "dorona" : "דורונה",
        "dorothy" : "דורותי",
        "dotan" : "דותן",
        "dov" : "דב",
        "dovav" : "דובב",
        "dovev" : "דובב",
        "dovi" : "דובי",
        "dovrat" : "דוברת",
        "dror" : "דרור",
        "drora" : "דרורה",
        "drorit" : "דרורית",
        "drorli" : "דרורלי",
        "dubi" : "דובי",
        "dudu" : "דודו",
        "dudy" : "דודי",
        "dumas" : "דימה",
        "dvash" : "דבש",
        "dvir" : "דביר",
        "dvira" : "דבירה",
        "dvora" : "דבורה",
        "dvori" : "דבורי",
        "dvorit" : "דבורית",
        "dyanne" : "דיאן",
        "dylan" : "דילן",
        "earnest" : "ארנסט",
        "eddie" : "אדי",
        "eden" : "עדן",
        "edith" : "אדית",
        "edli" : "עדלי",
        "edmond" : "אדמונד",
        "edna" : "עדנה",
        "edom" : "אדום",
        "edut" : "עדות",
        "edward" : "אדוארד",
        "edwin" : "אדווין",
        "effi" : "אפי",
        "efraim" : "אפרים",
        "efrat" : "אפרת",
        "egoz" : "אגוז",
        "ehud" : "אהוד",
        "eilat" : "אילת",
        "eilon" : "אילון",
        "eilona" : "אילונה",
        "ein ha'tchelet" : "עין התכלת",
        "einan" : "עינן",
        "einat" : "עינת",
        "einav" : "עינב",
        "einel" : "עינאל",
        "eirinn" : "ארין",
        "eitam" : "איתם",
        "eitan" : "איתן",
        "eitana" : "איתנה",
        "el ad" : "אל עד",
        "el chai" : "אל חי",
        "el hai" : "אל חי",
        "el natan" : "אל נתן",
        "el or" : "אל אור",
        "el roi" : "אל רועי",
        "el yam" : "אל ים",
        "el" : "אל",
        "el-ad" : "אל-עד",
        "el-chai" : "אל-חי",
        "el-hai" : "אל-חי",
        "el-yam" : "אל-ים",
        "ela" : "אלה",
        "elad" : "אלעד",
        "elada" : "אלעדה",
        "elah" : "אלה",
        "elaine" : "איליין",
        "elanor" : "אלאנור",
        "elay" : "אלעאי",
        "elazar" : "אלעזר",
        "elchai" : "אלחי",
        "elchanan" : "אלחנן",
        "elda" : "אלדע",
        "eldad" : "אלדד",
        "eldan" : "אלדן",
        "eldar" : "אלדר",
        "eldor" : "אלדור",
        "eleanor" : "אלינור",
        "elena" : "אלנה",
        "eleni" : "אלני",
        "elhanan" : "אלחנן",
        "eli chai" : "אלי חי",
        "eli hai" : "אלי חי",
        "eli or" : "אלי אור",
        "eli ran" : "אלי רן",
        "eli" : "אלי",
        "elia" : "איליה",
        "eliad" : "אליעד",
        "elian" : "אליאן",
        "eliana" : "אליענה",
        "elianna" : "אליאנה",
        "elianora" : "אליאנורה",
        "elias" : "אליאס",
        "eliat" : "אליאת",
        "eliav" : "אליאב",
        "elichai" : "אליחי",
        "elidan" : "אלידן",
        "elidor" : "אלידור",
        "eliel" : "אליאל",
        "eliezer" : "אליעזר",
        "elihai" : "אליחי",
        "elihav" : "אליהב",
        "elihu" : "אליהוא",
        "elimelech" : "אלימלך",
        "elimor" : "אלימור",
        "elinatan" : "אלינתן",
        "elinoam" : "אלינועם",
        "elinoar" : "אלינוער",
        "elinoy" : "אלינוי",
        "elior" : "אליאור",
        "eliora" : "אליאוֹרה",
        "elioz" : "אליעוז",
        "elipaz" : "אליפז",
        "eliram" : "אלירם",
        "eliran" : "אלירן",
        "eliraz" : "אלירז",
        "eliron" : "אלירון",
        "elisa" : "אליסה",
        "elisabetta" : "אליזבטה",
        "elisar" : "אלישר",
        "elise" : "אליס",
        "elisha" : "אלישע",
        "elishama" : "אלישמע",
        "elishay" : "אלישי",
        "elisheva" : "אלישבע",
        "elit" : "עלית",
        "elital" : "אליטל",
        "elitzafan" : "אליצפן",
        "elitzur" : "אליצור",
        "eliya" : "אליה",
        "eliyahu" : "אליהו",
        "eliyashiv" : "אלישיב",
        "eliza" : "אליזה",
        "elizabeth" : "אליזבת",
        "elkana" : "אלקנה",
        "ellison" : "אליסון",
        "elna" : "אלנא",
        "elnatan" : "אלנתן",
        "elor" : "אלאור",
        "elori" : "אלאורי",
        "elram" : "אלרם",
        "elran" : "אלרן",
        "elraz" : "אלרז",
        "elroi" : "אלרואי",
        "elrom" : "אלרום",
        "elron" : "אלרון",
        "elsa" : "אלסה",
        "elul" : "אלול",
        "elvira" : "אלבירה",
        "elyada" : "אלידע",
        "elyakim" : "אליקים",
        "elyaniv" : "אליניב",
        "elyassaf" : "אליסף",
        "elyosef" : "אליוסף",
        "elza" : "אלזה",
        "emanuel" : "עמנואל",
        "emanuela" : "עמנואלה",
        "emek" : "עמק",
        "emi" : "אמי",
        "emilia" : "אמיליה",
        "emilie" : "אמילי",
        "emilio" : "אמיליו",
        "emma" : "אמה",
        "emuna" : "אמונה",
        "enoch" : "חנוך",
        "enosh" : "אנוש",
        "enrico" : "אנריקו",
        "enrique" : "אנריקה",
        "eran" : "ערן",
        "eranit" : "ערנית",
        "erel" : "אראל",
        "erella" : "אראלה",
        "eretz" : "ארץ",
        "erez" : "ארז",
        "erga" : "ערגה",
        "erika" : "אריקה",
        "erin" : "ארין",
        "erno" : "ארנו",
        "eron" : "עירון",
        "erving" : "אירוינג",
        "eryn" : "ארין",
        "eshbal" : "אשבל‎",
        "eshchar" : "אשחר",
        "eshed" : "אשד",
        "eshel" : "אשל",
        "eshkar" : "אשכר",
        "eshkol" : "אשכול",
        "estee" : "אסתי",
        "esther" : "אסתר",
        "etgar" : "אתגר",
        "ethan" : "איתן",
        "eti" : "אתי",
        "etiel" : "אתיאל",
        "etzion" : "עציון",
        "etzyona" : "עציונה",
        "eugene" : "יוג'ין",
        "eva" : "אוה",
        "eve" : "איב",
        "eveline" : "אוולין",
        "evelyn" : "אוולין",
        "evelyna" : "אבלינה",
        "evgenia" : "יבגניה",
        "evgeny" : "יבגני",
        "eviatar" : "אביתר",
        "evron" : "אברון",
        "evyassaf" : "אביסף",
        "eyal" : "אייל",
        "eylam" : "עילם",
        "eynam" : "עינם",
        "ezer" : "עזר",
        "ezra" : "עזרא",
        "ezri" : "עזרי",
        "fabian" : "פביאן",
        "fabiana" : "פביאנה",
        "fabio" : "פביו",
        "fania" : "פאניה",
        "fanni" : "פאני",
        "fanny" : "פאני",
        "faran" : "פארן",
        "faye" : "פיי",
        "federico" : "פדריקו",
        "felix" : "פליקס",
        "ferdinand" : "פרדיננד",
        "fernando" : "פרננדו",
        "fia" : "פיה",
        "fiby" : "פיבי",
        "fiona" : "פיונה",
        "fleurette" : "פלורית",
        "flora" : "פלורה",
        "flori" : "פלורי",
        "florina" : "פלורינה",
        "fortuna" : "פורטונה",
        "francesca" : "פרנצסקה",
        "francios" : "פרנסואה",
        "francis" : "פרנסיס",
        "franco" : "פרנקו",
        "frank" : "פרנק",
        "franz" : "פרנץ",
        "fred" : "פרד",
        "freddy" : "פרדי",
        "frederick" : "פרדריק",
        "frida" : "פרידה",
        "fritze" : "פריץ",
        "fruma" : "פרומה",
        "gaal" : "גאל",
        "gaash" : "געש",
        "gab" : "גב",
        "gabbi" : "גבי",
        "gabi" : "גבי",
        "gabriel" : "גבריאל",
        "gabriela" : "גבריאלה",
        "gachelet" : "גחלת",
        "gad" : "גד",
        "gadi" : "גדי",
        "gadiel" : "גדיאל",
        "gadiela" : "גדיאלה",
        "gadit" : "גדית",
        "gafna" : "גפנה",
        "gal or" : "גל אור",
        "gal" : "גל",
        "gal-or" : "גל-אור",
        "gali" : "גלי",
        "galia" : "גליה",
        "galil" : "גליל",
        "galila" : "גלילה",
        "galina" : "גלינה",
        "galit" : "גלית",
        "galon" : "גלאון",
        "galor" : "גלאור",
        "gamliel" : "גמליאל",
        "gan" : "גן",
        "ganel" : "גנאל",
        "gani" : "גני",
        "ganit" : "גנית",
        "garcía" : "גרסיה",
        "gat" : "גת",
        "gati" : "גתי",
        "gavish" : "גביש",
        "gavri" : "גברי",
        "gavriel" : "גבריאל",
        "gavriela" : "גבריאלה",
        "gaya li" : "גאיה לי",
        "gaya" : "גאיה",
        "gazit" : "גזית",
        "gazith" : "גזית",
        "gdaliahu" : "גדליהו",
        "gedaliah" : "גדליה",
        "gefanit" : "גפנית",
        "geffen" : "גפן",
        "genia" : "גניה",
        "george" : "ג'ורג'",
        "georgette" : "ג'ורג'יית",
        "georgia" : "ג'ורג'יה",
        "georgina" : "ג'ורג'ינה",
        "gera" : "גרא",
        "gerard" : "ג'ררד",
        "gerry" : "גרי",
        "gershom" : "גרשום",
        "gershon" : "גרשון",
        "gerta" : "גרטה",
        "gertie" : "גרטי",
        "geula" : "גאולה",
        "geut" : "גאות",
        "gev" : "גב",
        "geva" : "גבע",
        "gevaram" : "גברעם",
        "gia" : "גיה",
        "gideon" : "גדעון",
        "gideona" : "גדעונה",
        "gidi" : "גידי",
        "gil ad" : "גיל עד",
        "gil li" : "גיל לי",
        "gil" : "גיל",
        "gil-ad" : "גיל-עד",
        "gil-li" : "גיל-לי",
        "gila" : "גילה",
        "gilad" : "גלעד",
        "gilat" : "גילאת",
        "gilbert" : "גילברט",
        "gilboa" : "גלבוע",
        "gili" : "גילי",
        "gilia" : "גיליה",
        "gilit" : "גילית",
        "gillen" : "גילן",
        "giloh" : "גילה",
        "gilor" : "גילאור",
        "ginat" : "גינת",
        "giora" : "גיורא",
        "giron" : "גירון",
        "giselle" : "ג'יזל",
        "gita" : "גיטה",
        "gitay" : "גיתאי",
        "gitit" : "גיתית",
        "givol" : "גבעול",
        "givon" : "גבעון",
        "gladys" : "גלדיס",
        "gloria" : "גלוריה",
        "goel" : "גאל",
        "gofna" : "גופנה",
        "golan" : "גולן",
        "golani" : "גולני",
        "golda" : "גולדה",
        "goldi" : "גולדי",
        "gome" : "גומא",
        "gon" : "גון",
        "gonen" : "גונן",
        "goni" : "גוני",
        "goral" : "גורל",
        "goren" : "גורן",
        "goshen" : "גושן",
        "grace" : "גרייס",
        "gracia" : "גרציה",
        "graciela" : "גרציאלה",
        "granit" : "גרניט",
        "gregory" : "גרגורי",
        "gretta" : "גרטה",
        "guni" : "גוני",
        "gur" : "גור",
        "gurel" : "גוראל",
        "guri" : "גורי",
        "gurit" : "גורית",
        "gurya" : "גוריה",
        "guryon" : "גוריון",
        "gustave" : "גוסטב",
        "guy" : "גיא",
        "hadar" : "הדר",
        "hadara" : "הדרה",
        "hadari" : "הדרי",
        "hadarya" : "הדריה",
        "hadas" : "הדס",
        "hadassa" : "הדסה",
        "hadoram" : "הדורם",
        "hafetz hayim" : "חפץ חיים",
        "hagai" : "חגי",
        "hagar" : "הגר",
        "hagara" : "הגרה",
        "hagit" : "חגית",
        "hagut" : "הגות",
        "hai" : "חי",
        "haim" : "חיים",
        "haleli" : "הללי",
        "haleluya" : "הללויה",
        "halelya" : "הלליה",
        "hali" : "הלי",
        "halit" : "הלית",
        "hallel" : "הלל",
        "halya" : "הליה",
        "hanan" : "חנן",
        "hani" : "חני",
        "hannah" : "אנה",
        "hans" : "הנס",
        "haran" : "הרן",
        "harduf" : "הרדוף",
        "harel" : "הראל",
        "harela" : "הראלה",
        "harry" : "הארי",
        "harvey" : "הרווי",
        "hassia" : "חסיה",
        "hatty" : "הטי",
        "hava" : "חוה",
        "havatzelet ha'sharon" : "חבצלת השרון",
        "haya" : "חיה",
        "haydee" : "היידי",
        "hayley" : "היילי",
        "hector" : "הקטור",
        "hed" : "הד",
        "hedda" : "הדה",
        "hedva" : "חדוה",
        "hedy" : "הדי",
        "heichal" : "היכל",
        "heidi" : "היידי",
        "heinrich" : "הנריך",
        "hela" : "הלה",
        "helen" : "הלן",
        "hellena" : "הלנה",
        "helleni" : "הלני",
        "hellenic" : "הלני",
        "hen li" : "חן לי",
        "hen" : "חן",
        "hendel" : "הנדל",
        "henri" : "הנרי",
        "henriette" : "הנרייט",
        "henrique" : "הנריקה",
        "hermann" : "הרמן",
        "herschel" : "הרשל",
        "hertzel" : "הרצל",
        "hertzelia" : "הרצליה",
        "hever" : "חבר",
        "hezi" : "חזי",
        "hi li" : "היא לי",
        "hi-li" : "היא-לי",
        "hila" : "הילה",
        "hilay" : "הילאי",
        "hilda" : "הילדה",
        "hili" : "הילי",
        "hilit" : "הילית",
        "hillary" : "הילרי",
        "hillel" : "הילל",
        "hilton" : "הילטון",
        "hindie" : "הינדי",
        "hirsh" : "הירש",
        "hiskiyah" : "חזקיה",
        "hiskiyahu" : "חזקיהו",
        "hod" : "הוד",
        "hodaya" : "הודיה",
        "hodel" : "הודאל",
        "hodelya" : "הודליה",
        "hof" : "חוף",
        "hofi" : "חופי",
        "hofit" : "חופית",
        "holly" : "הולי",
        "horaya" : "הוריה",
        "horiya" : "הוריה",
        "hosha" : "הושע",
        "howard" : "הווארד",
        "hugo" : "הוגו",
        "ida" : "אידה",
        "idan" : "עידן",
        "idel" : "אידל",
        "idi" : "אידי",
        "idit" : "עידית",
        "idmit" : "אידמית",
        "ido" : "עידו",
        "idor" : "אידור",
        "ifah" : "יפעה",
        "igor" : "איגור",
        "ilan" : "אילן",
        "ilana" : "אילנה",
        "ilani" : "אילני",
        "ilanit" : "אילנית",
        "ilay" : "איליי",
        "ilayah" : "עילאיה",
        "ili" : "אילי",
        "ilia" : "איליה",
        "ilil" : "אילאיל",
        "ilit" : "עילית",
        "ilona" : "אילונה",
        "ilor" : "אילור",
        "imber" : "אימבר",
        "imri" : "אמרי",
        "inaam" : "ינעם",
        "inbal" : "ענבל",
        "inbar" : "ענבר",
        "inga" : "אינגה",
        "ingrid" : "אינגריד",
        "inna" : "אינה",
        "ira" : "אירה",
        "irad" : "עירד",
        "iram" : "עירם",
        "iran" : "עירן",
        "irena" : "אירנה",
        "irina" : "אירינה",
        "iris" : "איריס",
        "irit" : "אירית",
        "irving" : "אירוינג",
        "isaac" : "יצחק",
        "isabel" : "איזבל",
        "isabella" : "איזבלה",
        "isai" : "איסיי",
        "isar" : "איסר",
        "isaskhar" : "יששכר",
        "isgav" : "ישגב",
        "isi" : "איסי",
        "israel" : "ישראל",
        "israela" : "ישראלה",
        "israelit" : "ישראלית",
        "issi" : "איסי",
        "issy" : "איסי",
        "ita" : "איטה",
        "itael" : "איתהאל",
        "itamar" : "איתמר",
        "itan" : "איטן",
        "itay" : "איתי",
        "itayel" : "איתיאל",
        "itiya" : "איתיה",
        "itro" : "יתרו",
        "ittai" : "איתי",
        "itur" : "עטור",
        "itzik" : "איציק",
        "ivan" : "איוון",
        "ivete" : "איווט",
        "ivona" : "איוונה",
        "ivonna" : "איבונה",
        "ivonne" : "איבון",
        "ivri" : "עברי",
        "ivriya" : "עבריה",
        "ivy" : "איבי",
        "iyar" : "אייר",
        "iyov" : "איוב",
        "izabella" : "איזבלה",
        "izik" : "איציק",
        "izrael" : "יזרעאל",
        "izraela" : "יזרעאלה",
        "jack" : "ז'ק",
        "jacki" : "ז'קי",
        "jackie" : "ג'קי",
        "jacky" : "ז'קי",
        "jaclyn" : "ג'קלין",
        "jacob" : "יעקב",
        "jacqueline" : "ג'קלין",
        "jade" : "ג'ייד",
        "james" : "ג'יימס",
        "jan" : "זאן",
        "jane" : "ג'יין",
        "janet" : "ג'נט",
        "jasmine" : "יסמין",
        "jean" : "ג'ין",
        "jeffrey" : "ג'פרי",
        "jehoram" : "יהורם",
        "jennie" : "ג'ני",
        "jennifer" : "ג'ניפר",
        "jerald" : "ג'רלד",
        "jeremaih" : "ירמיה",
        "jeremiah" : "ירמיהו",
        "jerry" : "ג'רי",
        "jerusalem" : "ירושלם",
        "jesca" : "יסכה",
        "jeshurun" : "ישורון",
        "jessica" : "ג'סיקה",
        "jill" : "ג'יל",
        "jimi" : "ג'ימי",
        "joanna" : "ג'ואנה",
        "joanne" : "ג'ואן",
        "jocheved" : "יוכבד",
        "joe" : "ג'ו",
        "joel" : "יואל",
        "joey" : "ג'ואי",
        "johanan" : "יוחנן",
        "john" : "ג'ון",
        "johnny" : "ג'וני",
        "jonathan" : "יונתן",
        "jordan" : "ג'ורדן",
        "josé" : "חוזה",
        "josef" : "ג'וזף",
        "joseph" : "יוסף",
        "josepha" : "יוספה",
        "josephine" : "ג'וזפין",
        "joshua" : "יהושוע",
        "joy" : "ג'וי",
        "joya" : "ג'ויה",
        "joyce" : "ג'ויס",
        "juan" : "חואן",
        "juana" : "חואנה",
        "judah" : "יהודה",
        "jude" : "ג'וד",
        "judith" : "יהודית",
        "judy" : "ג'ודי",
        "julia" : "ג'וליה",
        "julian" : "ג'וליאן",
        "juliana" : "יוליאנה",
        "julie" : "ג'ולי",
        "juliet" : "ג'ולייט",
        "julio" : "חוליו",
        "julius" : "יוליוס",
        "july" : "יולי",
        "kachal" : "כחל",
        "kadan" : "כדן",
        "kadit" : "כדית",
        "kaduri" : "כדורי",
        "kadya" : "כדיה",
        "kai" : "קאי",
        "kalanit" : "כלנית",
        "kalman" : "קלמן",
        "kama" : "קמה",
        "kame'a" : "קמיע",
        "kamil" : "קמיל",
        "kamila" : "קמילה",
        "kamona" : "כמונה",
        "kanaf" : "כנף",
        "kanarit" : "קנרית",
        "kaner" : "כנר",
        "kaniel" : "קניאל",
        "karel" : "קראל",
        "karen" : "קארן",
        "kari" : "קרי",
        "karin" : "קרין",
        "karina" : "קארינה",
        "karkom" : "כרכום",
        "karl" : "קרל",
        "karlos" : "קרלוס",
        "karni" : "קרני",
        "karniel" : "קרניאל",
        "karnit" : "קרנית",
        "karol" : "קרול",
        "karoline" : "קרולין",
        "karolynn" : "קרוליין",
        "kasiff" : "כסיף",
        "kaspit" : "כספית",
        "kate" : "קייט",
        "katelin" : "קטלין",
        "katelina" : "קטלינה",
        "katerina" : "קטרינה",
        "katharine" : "קתרין",
        "katherine" : "קטרין",
        "kati" : "קטי",
        "katia" : "קטיה",
        "katriel" : "כתריאל",
        "katy" : "קייטי",
        "katzir" : "קציר",
        "kay" : "קאי",
        "kaya" : "קאיה",
        "kaylee" : "קיילי",
        "keala" : "קילה",
        "kedem" : "קדם",
        "kedma" : "קדמה",
        "kei" : "קיי",
        "keidar" : "קידר",
        "keisaria" : "קיסריה",
        "kelly" : "קלי",
        "kenan" : "קינן",
        "kenny" : "קני",
        "kenya" : "קניה",
        "kerem" : "כרם",
        "kerem-ya" : "כרם-יה",
        "keren li" : "קרן לי",
        "keren or" : "קרן אור",
        "keren" : "קרן",
        "keren-or" : "קרן-אור",
        "keret" : "קרת",
        "kesem" : "קסם",
        "keshet" : "קשת",
        "keter" : "כתר",
        "kevin" : "קווין",
        "kfir" : "כפיר",
        "kim" : "קים",
        "kinar" : "כינר",
        "kineret" : "כנרת",
        "kinneret" : "כינרת",
        "kinor" : "כנור",
        "kisuf" : "כיסוף",
        "kit" : "קיט",
        "klil ha'choresh" : "כליל החורש",
        "klil shamaim" : "כליל שמים",
        "klil" : "כליל",
        "klila" : "כלילה",
        "kobi" : "קובי",
        "kochav" : "כוכב",
        "kochava" : "כוכבה",
        "kochavi" : "כוכבי",
        "kochavit" : "כוכבית",
        "kochevet" : "כוכבת",
        "kochi" : "כוכי",
        "kol" : "קול",
        "konstantin" : "קונסטנטין",
        "koral" : "קורל",
        "koranit" : "קורנית",
        "koren" : "קורן",
        "koresh" : "כורש",
        "kori" : "קורי",
        "korina" : "קורינה",
        "kornelia" : "קורנליה",
        "korrine" : "קורין",
        "korry" : "קורי",
        "kotel" : "כותל",
        "kristina" : "קריסטינה",
        "ksenia" : "קסניה",
        "lachan" : "לחן",
        "lael" : "לאל",
        "lahat" : "להט",
        "lahav" : "להב",
        "lali" : "ללי",
        "lalo" : "ללו",
        "lanir" : "לניר",
        "laor" : "לאור",
        "lara" : "לארה",
        "larin" : "לרין",
        "larissa" : "לריסה",
        "lary" : "לארי",
        "laura" : "לאורה",
        "lavan" : "לבן",
        "lavi" : "לביא",
        "lea" : "לאה",
        "leanna" : "ליאנה",
        "leanne" : "ליאן",
        "lear" : "ליר",
        "lee" : "לי",
        "lehava" : "להבה",
        "lei" : "ליי",
        "leizer" : "לייזר",
        "lena" : "לנה",
        "lenina" : "לנינה",
        "lenny" : "לני",
        "leo" : "ליאו",
        "leon" : "לאון",
        "leonard" : "לאונרד",
        "leonardo" : "לאונרדו",
        "leonid" : "לאוניד",
        "leonor" : "לאונור",
        "leonora" : "ליאונורה",
        "leroy" : "לירוי",
        "leshem" : "לשם",
        "leslie" : "לסלי",
        "lesly" : "לסלי",
        "lev" : "לב",
        "levana" : "לבנה",
        "levavit" : "לבבית",
        "levia" : "לביאה",
        "leviya" : "לויה",
        "levona" : "לבונה",
        "levy" : "לוי",
        "lezly" : "לסלי",
        "li ad" : "לי עד",
        "li an" : "לי אן",
        "li at" : "לי את",
        "li chen" : "לי חן",
        "li dor" : "לי דור",
        "li el" : "לי אל",
        "li gal" : "לי גל",
        "li hi" : "לי היא",
        "li mor" : "לי מור",
        "li noy" : "לי נוי",
        "li on" : "לי און",
        "li or" : "לי אור",
        "li paz" : "לי פז",
        "li ran" : "לי רן",
        "li raz" : "לי רז",
        "li ron" : "לי רון",
        "li shay" : "לי שי",
        "li tal" : "לי טל",
        "li yam" : "לי ים",
        "li" : "לי",
        "li-ad" : "לי-עד",
        "li-an" : "לי-אן",
        "li-at" : "לי-את",
        "li-av" : "לי-אב",
        "li-bar" : "לי-בר",
        "li-chen" : "לי-חן",
        "li-dor" : "לי-דור",
        "li-el" : "לי-אל",
        "li-hi" : "לי-היא",
        "li-mor" : "לי-מור",
        "li-ness" : "לי-נס",
        "li-noy" : "לי-נוי",
        "li-on" : "לי-און",
        "li-or" : "לי-אור",
        "li-raz" : "לי-רז",
        "li-ron" : "לי-רון",
        "li-shay" : "לי-שי",
        "li-tal" : "לי-טל",
        "li-yam" : "לי-ים",
        "li-yha" : "לי-יה",
        "liad" : "ליעד",
        "liam" : "ליאם",
        "lian" : "ליאן",
        "liana" : "ליאנה",
        "lianna" : "ליענה",
        "liat" : "ליאת",
        "liati" : "ליאתי",
        "liav" : "ליאב",
        "liaz" : "ליעז",
        "lib" : "ליב",
        "liba" : "ליבה",
        "libat" : "ליבת",
        "libi" : "ליבי",
        "libit" : "לבית",
        "lichai" : "ליחי",
        "lichen" : "ליחן",
        "lidan" : "לידן",
        "lidar" : "לידר",
        "lidi" : "לידי",
        "lidor" : "לידור",
        "lidya" : "לידיה",
        "liel" : "ליאל",
        "lieli" : "ליאלי",
        "ligad" : "ליגד",
        "ligal" : "ליגל",
        "liham" : "ליהם",
        "lihan" : "ליהן",
        "lihi" : "ליהי",
        "lihod" : "ליהוד",
        "lihu" : "ליהו",
        "lil" : "ליל",
        "lilach" : "לילך",
        "lilia" : "ליליה",
        "lilian" : "ליליאן",
        "liliana" : "ליליאנה",
        "lilit" : "לילית",
        "lillian" : "ליליאן",
        "lily" : "לילי",
        "lilya" : "ליליה",
        "limei" : "לימאי",
        "limor" : "לימור",
        "lin" : "לין",
        "lina" : "לינה",
        "linda" : "לינדה",
        "linet" : "לינת",
        "linette" : "לינט",
        "linor" : "לינור",
        "linoy" : "לינוי",
        "linoya" : "לינויה",
        "lion" : "ליאון",
        "lior" : "ליאור",
        "liora" : "ליאורה",
        "liori" : "ליאורי",
        "liorit" : "ליאורית",
        "lioz" : "ליעוז",
        "lipaz" : "ליפז",
        "liram" : "לירם",
        "liran" : "לירן",
        "liraz" : "לירז",
        "liri" : "לירי",
        "lirin" : "לירין",
        "lirit" : "לירית",
        "lirom" : "לירום",
        "liron" : "לירון",
        "lirona" : "לירונה",
        "liroz" : "לירוז",
        "lisa" : "ליזה",
        "lishay" : "לישי",
        "lissa" : "ליסה",
        "lital" : "ליטל",
        "litam" : "ליטם",
        "litan" : "ליטן",
        "litav" : "ליתו",
        "liv" : "ליב",
        "livnat" : "ליבנת",
        "livne" : "ליבנה",
        "liya" : "לייה",
        "liyam" : "ליים",
        "liz" : "ליז",
        "liza" : "ליזה",
        "lizetta" : "ליזטה",
        "lizi" : "ליזי",
        "lola" : "לולה",
        "lolita" : "לוליטה",
        "lora" : "לורה",
        "lorena" : "לורנה",
        "loreta" : "לורטה",
        "lori" : "לורי",
        "lorien" : "לוריאן",
        "lorraine" : "לורין",
        "lotan" : "לוטן",
        "lotem" : "לוטם",
        "lotus" : "לוטוס",
        "lou" : "לו",
        "louie" : "לואי",
        "louis" : "לואיס",
        "louisa" : "לואיסה",
        "loya" : "לויה",
        "luba" : "לובה",
        "luca" : "לוקה",
        "lucia" : "לוסיה",
        "luciana" : "לוסיאנה",
        "lucille" : "לוסיל",
        "lucy" : "לוסי",
        "ludmila" : "לודמילה",
        "lulu" : "לולו",
        "luna" : "לונה",
        "lupo" : "לופו",
        "luria" : "לוריא",
        "luz" : "לוז",
        "luzit" : "לוזית",
        "lydia" : "לידיה",
        "lyovov" : "ליובוב",
        "lyudmila" : "ליודמילה",
        "maagan" : "מעגן",
        "maayan" : "מעין",
        "maayana" : "מעינה",
        "mabel" : "מבל",
        "mable" : "מבל",
        "macabi" : "מכבי",
        "macabit" : "מכבית",
        "mace" : "מייס",
        "machol" : "מחול",
        "madeleine" : "מדליין",
        "madelena" : "מדלנה",
        "madelene" : "מדלן",
        "madi" : "מדי",
        "magal" : "מגל",
        "magali" : "מגלי",
        "magalie" : "מגלי",
        "magaly" : "מגלי",
        "magda" : "מגדה",
        "magdalena" : "מגדלנה",
        "magen" : "מגן",
        "maggie" : "מגי",
        "malaach" : "מלאך",
        "malachi" : "מלאכי",
        "mali" : "מלי",
        "malka" : "מלכה",
        "manor" : "מנור",
        "manuel" : "מנואל",
        "maor" : "מאור",
        "maoz" : "מעוז",
        "mapal" : "מפל",
        "marcella" : "מרסלה",
        "marcelle" : "מרסל",
        "marco" : "מרקו",
        "marcus" : "מרקוס",
        "maree" : "מארי",
        "margalit" : "מרגלית",
        "marganit" : "מרגנית",
        "margaret" : "מרגרט",
        "margaretta" : "מרגרטה",
        "margarit" : "מרגריט",
        "margarita" : "מרגריטה",
        "margot" : "מרגוט",
        "mari ann" : "מרי אן",
        "maria" : "מריה",
        "mariana" : "מריאנה",
        "mariano" : "מריאנו",
        "mariel" : "מאריאל",
        "mariela" : "מריאלה",
        "marilyn" : "מרילין",
        "marin" : "מרין",
        "marina" : "מרינה",
        "mario" : "מריו",
        "marit" : "מרית",
        "marita" : "מריטה",
        "mark" : "מארק",
        "marlena" : "מרלנה",
        "marlene" : "מרלן",
        "marlyn" : "מרלין",
        "marnin" : "מרנין",
        "marom" : "מרום",
        "maron" : "מרון",
        "marta" : "מרתה",
        "martha" : "מרטה",
        "martin" : "מרטין",
        "marva" : "מרווה",
        "marvin" : "מרוין",
        "marvine" : "מרוין",
        "mary" : "מרי",
        "masaat" : "משאת",
        "masha" : "מאשה",
        "mashav" : "משב",
        "mashiach" : "משיח",
        "maskit" : "משכית",
        "masos" : "משוש",
        "masuaa" : "משואה",
        "matana" : "מתנה",
        "matanya" : "מתניה",
        "matar" : "מטר",
        "matatel" : "מתתאל",
        "matatya" : "מתתיה",
        "mathi" : "מטי",
        "mathilda" : "מתילדה",
        "mati" : "מתי",
        "matia" : "מתיה",
        "matilda" : "מטילדה",
        "matityahu" : "מתתיהו",
        "mattan el" : "מתן אל",
        "mattan" : "מתן",
        "mattan-el" : "מתן-אל",
        "mattanel" : "מתנאל",
        "mattat" : "מתת",
        "matthew" : "מתיו",
        "matzliach" : "מצליח",
        "max" : "מקס",
        "maxim" : "מקסים",
        "may" : "מאי",
        "maya li" : "מאיה לי",
        "maya" : "מאיה",
        "maymon" : "מימון",
        "mazal tov" : "מזל טוב",
        "mazal" : "מזל",
        "mazal-tov" : "מזל-טוב",
        "mazali" : "מזלי",
        "mazalit" : "מזלית",
        "mazi" : "מזי",
        "mazor" : "מזור",
        "mechora" : "מכורה",
        "medina" : "מדינה",
        "megan" : "מייגן",
        "mei zahav" : "מי זהב",
        "mei" : "מי",
        "mei-tal" : "מי-טל",
        "meir" : "מאיר",
        "meira" : "מאירה",
        "meirav" : "מרב",
        "meiri" : "מאירי",
        "meishar" : "מישר",
        "meital" : "מיטל",
        "meitar" : "מיתר",
        "melania" : "מלניה",
        "melanie" : "מלאני",
        "melech" : "מלך",
        "melena" : "מלנה",
        "melia" : "מליה",
        "melina" : "מלינה",
        "melissa" : "מליסה",
        "melody" : "מלודי",
        "menachem" : "מנחם",
        "menashe" : "מנשה",
        "mendel" : "מנדל",
        "meni" : "מני",
        "menucha" : "מנוּחה",
        "mercedes" : "מרסדס",
        "merchav" : "מרחב",
        "meshi" : "משי",
        "meshulam" : "משולם",
        "metuka" : "מתוקה",
        "mevaser" : "מבשר",
        "mevaseret" : "מבשרת",
        "mevorach" : "מבורך",
        "mey tal" : "מי טל",
        "meydad" : "מידד",
        "meydan" : "מידן",
        "meytal" : "מייטל",
        "meytav" : "מיטב",
        "meytavel" : "מיטבאל",
        "mezadah" : "מצדה",
        "mi el" : "מי אל",
        "mia" : "מיה",
        "micaella" : "מיקאלה",
        "micha" : "מיכה",
        "michael" : "מיכאל",
        "michaela" : "מיכאלה",
        "michal li" : "מיכל לי",
        "michal" : "מיכל",
        "michali" : "מיכלי",
        "micheal" : "מישיל",
        "michel" : "מישל",
        "midbar" : "מדבר",
        "miel" : "מיאל",
        "miguel" : "מיגל",
        "mika" : "מיקה",
        "mike" : "מייק",
        "mikhail" : "מיכאיל",
        "miki" : "מיקי",
        "miky" : "מייקי",
        "mila" : "מילה",
        "milan" : "מילן",
        "milena" : "מילנה",
        "miley" : "מיילי",
        "mili" : "מילי",
        "milka" : "מילקה",
        "milly" : "מילי",
        "mimi" : "מימי",
        "mina" : "מינה",
        "mincha" : "מנחה",
        "mindy" : "מינדי",
        "mino" : "מינו",
        "minor" : "מינור",
        "mira" : "מירה",
        "miram" : "מירם",
        "miran" : "מירן",
        "mirei" : "מיריי",
        "mirell" : "מירל",
        "miri" : "מירי",
        "miriana" : "מיריאנה",
        "mirit" : "מירית",
        "mirom" : "מירום",
        "miron" : "מירון",
        "miryam" : "מרים",
        "misgav" : "משגב",
        "misha" : "מישה",
        "mishael" : "מישאל",
        "mishala" : "משאלה",
        "missie" : "מיסי",
        "miya" : "מיה",
        "mizmor" : "מזמור",
        "modi" : "מודי",
        "moledet" : "מולדת",
        "moni" : "מוני",
        "monica" : "מוניקה",
        "monique" : "מוניק",
        "mor" : "מור",
        "morag" : "מוֹרג",
        "moral" : "מורל",
        "moran" : "מורן",
        "morasha" : "מורשה",
        "moraz" : "מוֹרז",
        "mordechai" : "מרדכי",
        "morel" : "מוראל",
        "mori" : "מורי",
        "moria" : "מוריה",
        "moriel" : "מוריאל",
        "morin" : "מורין",
        "moriss" : "מוריס",
        "morit" : "מורית",
        "moritz" : "מוריץ",
        "moses" : "משה",
        "moshe" : "משה",
        "moshi" : "מושי",
        "moshik" : "מושיק",
        "moshiko" : "מושיקו",
        "moshit" : "מושית",
        "moti" : "מוטי",
        "muli" : "מולי",
        "naa" : "נאה",
        "naama" : "נעמה",
        "naaman" : "נעמן",
        "naamit" : "נעמית",
        "nachal" : "נחל",
        "nachala" : "נחלה",
        "nachman" : "נחמן",
        "nachshol" : "נחשול",
        "nachshon" : "נחשון",
        "nadav" : "נדב",
        "nadia" : "נדיה",
        "nadir" : "נדיר",
        "nadiv" : "נדיב",
        "nadya" : "נדיה",
        "nae" : "נאה",
        "naftali" : "נפתלי",
        "nahar" : "נהר",
        "nahor" : "נהור",
        "nahum" : "נחום",
        "nair" : "נאיר",
        "nait" : "נאית",
        "namer" : "נמר",
        "nancy" : "ננסי",
        "naomi li" : "נעמי לי",
        "naomi" : "נעמי",
        "naor" : "נאור",
        "nardit" : "נרדית",
        "nared" : "נרד",
        "narit" : "נרית",
        "narkis" : "נרקיס",
        "nata" : "נטע",
        "nataf" : "נטף",
        "natalia" : "נטליה",
        "natalie" : "נטלי",
        "natan el" : "נתן אל",
        "natan" : "נתן",
        "natan-el" : "נתן-אל",
        "nataniel" : "נתניאל",
        "natasha" : "נטשה",
        "nati" : "נתי",
        "nativ" : "נתיב",
        "nava" : "נוה",
        "navat" : "נבט",
        "nave" : "נוה",
        "navit" : "נוית",
        "navon" : "נבון",
        "navot" : "נבות",
        "naya" : "נאיה",
        "neal" : "ניל",
        "nechama" : "נחמה",
        "nechemya" : "נחמיה",
        "nechushtan" : "נחושתן",
        "nediva" : "נדיבה",
        "negba" : "נגבה",
        "negev" : "נגב",
        "negina" : "נגינה",
        "negoha" : "נגוהה",
        "nehara" : "נהרה",
        "nehora" : "נהורה",
        "nehorai" : "נהוראי",
        "nelia" : "נליה",
        "nell" : "נל",
        "nelly" : "נלי",
        "nemera" : "נמרה",
        "neora" : "נאורה",
        "nepal" : "נפאל",
        "ner" : "נר",
        "neri" : "נרי",
        "neriad" : "נריעד",
        "neriah" : "נריה",
        "neriel" : "נריאל",
        "neriya" : "נרייה",
        "neshama" : "נשמה",
        "nesher" : "נשר",
        "nesli" : "נסלי",
        "ness" : "נס",
        "nessel" : "נסאל",
        "nessi" : "נסי",
        "nessya" : "נסיה",
        "neta li" : "נטע לי",
        "neta" : "נטע",
        "neta-li" : "נטע-לי",
        "netali" : "נטעלי",
        "netanel" : "נתנאל",
        "netanela" : "נתנאלה",
        "netanya" : "נתניה",
        "netiaa" : "נטיעה",
        "netsach" : "נצח",
        "netz" : "נץ",
        "nevat" : "נבט",
        "nevet" : "נבט",
        "nevia" : "נביעה",
        "nevo" : "נבו",
        "nevona" : "נבונה",
        "nezer" : "נזר",
        "nick" : "ניק",
        "nicki" : "ניקי",
        "nicola" : "ניקולה",
        "nicole" : "ניקול",
        "nika" : "ניקה",
        "nikita" : "ניקיטה",
        "niko" : "ניקו",
        "nikolai" : "ניקולאי",
        "nil" : "ניל",
        "nile" : "ניל",
        "nili" : "נילי",
        "nilit" : "נילית",
        "nimrod" : "נמרוד",
        "nina" : "נינה",
        "nini" : "ניני",
        "ninnette" : "נינט",
        "nino" : "נינו",
        "nir" : "ניר",
        "nira" : "נירה",
        "niran" : "נירן",
        "nirel" : "ניראל",
        "niri" : "נירי",
        "nirit" : "נירית",
        "niron" : "נירון",
        "nirya" : "ניריה",
        "nisan" : "ניסן",
        "niso" : "ניסו",
        "nissim" : "נסים",
        "nitan" : "ניתן",
        "nitschiya" : "נצחיה",
        "nittai" : "ניתאי",
        "nitza" : "ניצה",
        "nitzan" : "ניצן",
        "nitzana" : "ניצנה",
        "nitzanit" : "ניצנית",
        "nitzat" : "ניצת",
        "nitzchit" : "ניצחית",
        "niv" : "ניב",
        "niva" : "ניבה",
        "nivi" : "ניבי",
        "noa" : "נעה",
        "noad" : "נועד",
        "noah" : "נח",
        "noam" : "נעם",
        "noaz" : "נועז",
        "noel" : "נואל",
        "nof" : "נוף",
        "nofech" : "נופך",
        "nofet" : "נופת",
        "nofit" : "נופית",
        "nofya" : "נופיה",
        "noga" : "נגה",
        "nohar" : "נוהר",
        "noit" : "נואית",
        "norberto" : "נורברטו",
        "nov" : "נוב",
        "nova" : "נובה",
        "noy" : "נוי",
        "noya" : "נויה",
        "nuli" : "נולי",
        "nuphar" : "נופר",
        "nuriel" : "נוריאל",
        "nurit" : "נוּרית",
        "nuriya" : "נוריה",
        "o'neal" : "אוניל",
        "odael" : "אודאל",
        "ode" : "אודה",
        "oded" : "עודד",
        "odeda" : "עודדה",
        "odel" : "אדל",
        "odela" : "אודלה",
        "odele" : "אודל",
        "odeleya" : "אוֹדליה",
        "odelia" : "אוֹדליה",
        "odem" : "אודם",
        "odetta" : "אודטה",
        "odette" : "אודט",
        "odeya" : "אודיה",
        "odiel" : "אודיאל",
        "odile" : "אודיל",
        "odin" : "אודין",
        "odit" : "אודית",
        "ofek" : "אופק",
        "ofelia" : "אופליה",
        "ofer" : "עופר",
        "oferet" : "עופרת",
        "offra" : "עופרה",
        "ofir" : "אופיר",
        "ofira" : "אופירה",
        "ofra" : "עפרה",
        "ofri" : "עופרי",
        "ofrit" : "עופרית",
        "ogen" : "עוגן",
        "ohad" : "אוהד",
        "ohal" : "אהל",
        "ohala" : "אוהלה",
        "ohali" : "אהלי",
        "ohav" : "אהב",
        "ohev tziyon" : "אוהב ציון",
        "ohev" : "אהב",
        "oksana" : "אוקסנה",
        "oleg" : "אולג",
        "olga" : "אולגה",
        "oliver" : "אוליבר",
        "omer" : "עומר",
        "omri" : "עומרי",
        "omrit" : "עומרית",
        "on" : "און",
        "oneg" : "עונג",
        "onit" : "אונית",
        "opal" : "אופל",
        "ophelia" : "אופליה",
        "ophir" : "אופיר",
        "ophira" : "אופירה",
        "or chen" : "אור חן",
        "or el" : "אור אל",
        "or gal" : "אור גל",
        "or gil" : "אור גיל",
        "or ha'chaim" : "אור החיים",
        "or hen" : "אור חן",
        "or li" : "אור לי",
        "or natan" : "אור נתן",
        "or paz" : "אור פז",
        "or shahar" : "אור שחר",
        "or tal" : "אור טל",
        "or tzion" : "אור ציון",
        "or yam" : "אור ים",
        "or" : "אור",
        "or-chai" : "אור-חי",
        "or-chen" : "אור-חן",
        "or-el" : "אור-אל",
        "or-li" : "אור-לי",
        "or-tal" : "אור-טל",
        "or-ya" : "אור-יה",
        "orad" : "אורעד",
        "orah" : "אורה",
        "oral" : "אורל",
        "oram" : "אורם",
        "oran" : "אורן",
        "oranit" : "אורנית",
        "orchai" : "אורחי",
        "orchen" : "אורחן",
        "ordan" : "אורדן",
        "orel" : "אוראל",
        "oren" : "אורן",
        "orgad" : "אורגד",
        "orgil" : "אורגיל",
        "ori" : "אורי",
        "orian" : "אוריין",
        "oriana" : "אוריאנה",
        "oriane" : "אוריאן",
        "orien" : "אוריין",
        "orion" : "אוריון",
        "orioz" : "אוריעוז",
        "orit" : "אורית",
        "orital" : "אוריטל",
        "orlann" : "אורלן",
        "orlene" : "אורלין",
        "orlev" : "אורלב",
        "orley" : "אוֹרלי",
        "orli" : "אוֹרלי",
        "orlit" : "אורלית",
        "orna" : "אורנה",
        "ornat" : "אורנת",
        "orni" : "אורני",
        "oron" : "אורון",
        "orpaz" : "אורפז",
        "orrin" : "אורין",
        "ortal" : "אורטל",
        "orya" : "אוריה",
        "oryom" : "אוריום",
        "osanna" : "אוסנה",
        "oscar" : "אוסקר",
        "oshen" : "אושן",
        "osher" : "אושר",
        "oshik" : "אושיק",
        "oshira" : "אושירה",
        "oshiya" : "אושיה",
        "oshra" : "אושרה",
        "oshrat" : "אשרת",
        "oshri" : "אושרי",
        "oshriel" : "אשריאל",
        "oshrit" : "אושרית",
        "oshriya" : "אושריה",
        "osi" : "אוסי",
        "osnat" : "אסנת",
        "ossi" : "אוסי",
        "otto" : "אוטו",
        "otzar" : "אוצר",
        "ovadia" : "עובדיה",
        "oved" : "עובד",
        "oxana" : "אוקסנה",
        "oz" : "עוז",
        "ozer" : "עוזר",
        "ozit" : "עוזית",
        "pablo" : "פאבלו",
        "paltiel" : "פלטיאל",
        "pamela" : "פמלה",
        "panya" : "פניה",
        "paretz" : "פרץ",
        "pascalle" : "פסקל",
        "pashosh" : "פשוש",
        "patricia" : "פטריסיה",
        "patrick" : "פטריק",
        "paul" : "פאול",
        "paula" : "פאולה",
        "paulette" : "פולט",
        "pavel" : "פבל",
        "paz" : "פז",
        "pazi" : "פזי",
        "pazit" : "פזית",
        "pdut" : "פדות",
        "pe'er li" : "פאר לי",
        "pe'er" : "פאר",
        "pe'eri" : "פארי",
        "pe'erli" : "פארלי",
        "pearl" : "פרל",
        "pedhatzur" : "פדהצור",
        "pedro" : "פדרו",
        "pele" : "פלא",
        "peled" : "פלד",
        "peleg" : "פלג",
        "pennie" : "פני",
        "penny" : "פני",
        "perach" : "פרח",
        "peretz" : "פרץ",
        "perla" : "פרלה",
        "perlit" : "פרלית",
        "perry" : "פרי",
        "pesach" : "פסח",
        "pessia" : "פסיה",
        "petel" : "פטל",
        "peter" : "פטר",
        "philip" : "פיליפ",
        "pierre" : "פייר",
        "pilyit" : "פלאית",
        "pinchas" : "פנחס",
        "pini" : "פיני",
        "pirchit" : "פירחית",
        "pliaa" : "פליאה",
        "pnina" : "פנינה",
        "pninat" : "פנינת",
        "pninit" : "פנינית",
        "pola" : "פולה",
        "poleg" : "פ‏ולג",
        "polina" : "פולינה",
        "porat" : "פורת",
        "poriya" : "פוריה",
        "pri" : "פרי",
        "priel" : "פריאל",
        "priela" : "פריאלה",
        "priya" : "פריה",
        "prosper" : "פרוספר",
        "pua" : "פועה",
        "puah" : "פועה",
        "purim" : "פורים",
        "raam" : "רעם",
        "raanan" : "רענן",
        "raanana" : "רעננה",
        "raaya" : "רעיה",
        "rachamim" : "רחמים",
        "rachamin" : "רחמין",
        "rachel li" : "רחל לי",
        "rachel" : "רחל",
        "rachela" : "רחלה",
        "racheli" : "רחלי",
        "rachelit" : "רחלית",
        "raday" : "רדאי",
        "raffi" : "רפי",
        "rahav" : "רהב",
        "rain" : "ריין",
        "raisa" : "ראיסה",
        "rakefet" : "רקפת",
        "rakia" : "רקיע",
        "ram" : "רם",
        "rama" : "רמה",
        "rami" : "רמי",
        "ramit" : "רמית",
        "ramon" : "רמון",
        "ramona" : "רמונה",
        "ran" : "רן",
        "rana" : "רנה",
        "randi" : "רנדי",
        "randy" : "רנדי",
        "ranel" : "רנאל",
        "ranen" : "רנן",
        "rani" : "רני",
        "ranit" : "רנית",
        "raphael" : "רפאל",
        "raphaela" : "רפאלה",
        "ratzon" : "רצון",
        "raul" : "ראול",
        "rave" : "רוה",
        "ravid" : "רביד",
        "ravit" : "רוית",
        "raviv" : "רביב",
        "ray" : "ריי",
        "raz" : "רז",
        "razi" : "רזי",
        "raziel" : "רזיאל",
        "raziela" : "רזיאלה",
        "razya" : "רזיה",
        "re'em" : "ראם",
        "rea" : "רע",
        "rebecca" : "רבקה",
        "reef" : "ריף",
        "regev" : "רגב",
        "regina" : "רגינה",
        "rei" : "רעי",
        "rekem" : "רקם",
        "reli" : "רלי",
        "renana" : "רננה",
        "renanit" : "רננית",
        "renate" : "רנט",
        "renato" : "רנטו",
        "rene" : "רנה",
        "renen" : "רנן",
        "reshef" : "רשף",
        "reshit" : "ראשית",
        "reubat" : "ראובת",
        "reuben" : "ראובן",
        "reut" : "רעות",
        "reuven" : "ראובן",
        "reuvena" : "ראובנה",
        "reuya" : "ראויה",
        "revaya" : "רוויה",
        "revital" : "רויטל",
        "riccardo" : "ריקרדו",
        "richard" : "ריצ'רד",
        "rika" : "ריקה",
        "riki" : "ריקי",
        "rimi" : "רמי",
        "rimma" : "רימה",
        "rimon" : "רימון",
        "rimona" : "רימונה",
        "rina" : "רינה",
        "rinat" : "רינת",
        "rinatiya" : "רינתיה",
        "rinatya" : "רינתיה",
        "rini" : "ריני",
        "risan" : "ריסן",
        "rita" : "ריטה",
        "rital" : "ריטל",
        "riva" : "ריוה",
        "rivi" : "ריבי",
        "rivkah" : "רבקה",
        "rizi" : "ריזי",
        "robert" : "רוברט",
        "roberto" : "רוברטו",
        "roded" : "רודד",
        "rodica" : "רודיקה",
        "roga" : "רוגע",
        "roger" : "רוג'ר",
        "roi" : "רועי",
        "roit" : "רועית",
        "rolli" : "רולי",
        "rom" : "רום",
        "roman" : "רומן",
        "romema" : "רוממה",
        "romi" : "רומי",
        "romina" : "רומינה",
        "romit" : "רומית",
        "romy" : "רומי",
        "ron li" : "רון לי",
        "ron" : "רון",
        "ron-el" : "רון-אל",
        "rona" : "רונה",
        "ronald" : "רונלד",
        "ronat" : "רונת",
        "ronel" : "רונאל",
        "ronen" : "רונן",
        "roni li" : "רוני לי",
        "roni" : "רוני",
        "roniel" : "רוניאל",
        "ronit" : "רונית",
        "ronli" : "רונלי",
        "ronya" : "רוניה",
        "rosalia" : "רוזליה",
        "rosalie" : "רוזלי",
        "rosalina" : "רוזלינה",
        "rosalind" : "רוזלינד",
        "rosaline" : "רוזלין",
        "rose" : "רוז",
        "roseanne" : "רוזאן",
        "rosemarie" : "רוזמרי",
        "rosemary" : "רוזמרי",
        "rosetta" : "רוזטה",
        "ross" : "רוס",
        "rotem" : "רתם",
        "roxanne" : "רוקסן",
        "roy" : "רוי",
        "roya" : "רויה",
        "royal" : "רויאל",
        "roza" : "רוזה",
        "rozi" : "רוזי",
        "rubi" : "רובי",
        "rubin" : "רובין",
        "ruby" : "רובי",
        "ruchama" : "רוחמה",
        "rudolph" : "רודולף",
        "rumya" : "רומיה",
        "rumyo" : "רומיו",
        "rut" : "רות",
        "ruta" : "רותה",
        "ruth" : "רות",
        "rutha" : "רותה",
        "rutti" : "רותי",
        "ryan" : "רייאן",
        "sa-el" : "שא-אל",
        "saar" : "סער",
        "sabina" : "סבינה",
        "sabrina" : "סברינה",
        "sachaf" : "סחף",
        "sachlav" : "סחלב",
        "sadot" : "שדות",
        "sagie" : "שגיא",
        "sagit" : "שגית",
        "sagiv" : "שגיב",
        "sahar" : "סהר",
        "salit" : "סלעית",
        "sally" : "סלי",
        "salomon" : "סלומון",
        "sam" : "סם",
        "samantha" : "סמנטה",
        "sami" : "סמי",
        "samuel" : "שמואל",
        "san" : "סאן",
        "sandra" : "סנדרה",
        "sandrine" : "סנדרין",
        "sandy" : "סנדי",
        "sapir" : "ספיר",
        "sapirit" : "ספירית",
        "sar shalom" : "שר שלום",
        "sar" : "שר",
        "sar-el" : "שר-אל",
        "sarach" : "שרח",
        "saraf" : "שרף",
        "sarah" : "שרה",
        "sarai" : "שרי",
        "sarel" : "שראל",
        "sari" : "שרי",
        "sariel" : "שריאל",
        "sarig" : "שריג",
        "sarit" : "שרית",
        "sarita" : "שריתה",
        "sasha" : "סשה",
        "sassi" : "ששי",
        "sasson" : "ששון",
        "savyon" : "סביון",
        "sayar" : "סייר",
        "sayfan" : "סייפן",
        "seadia" : "סעדיה",
        "seffi" : "ספי",
        "segal" : "סגל",
        "segev" : "שגב",
        "sela" : "סלע",
        "semyon" : "סמיון",
        "sergei" : "סרגיי",
        "sergio" : "סרג'יו",
        "serjio" : "סרחיו",
        "serya" : "שריה",
        "sgula" : "סגולה",
        "shaanan" : "שאנן",
        "shaanana" : "שאננה",
        "shaaya" : "שעיה",
        "shabchiya" : "שבחיה",
        "shabi" : "שבי",
        "shabtai" : "שבתאי",
        "shachaf" : "שחף",
        "shachak" : "שחק",
        "shachal" : "שחל",
        "shacham" : "שחם",
        "shachar" : "שחר",
        "shachari" : "שחרי",
        "shacharit" : "שחרית",
        "shadmit" : "שדמית",
        "shafir" : "שפיר",
        "shafrir" : "שפריר",
        "shahaf" : "שחף",
        "shahak" : "שחק",
        "shaham" : "שחם",
        "shahar" : "שחר",
        "shahari" : "שחרי",
        "shaharit" : "שחרית",
        "shai" : "שי",
        "shaike" : "שייקה",
        "shaked" : "שקד",
        "shalechet" : "שלכת",
        "shalev" : "שלו",
        "shalhev" : "שלהב",
        "shalhevet" : "שלהבת",
        "shalhevetya" : "שלהבתיה",
        "shalom" : "שלום",
        "shalva" : "שלווה",
        "shamai" : "שמי",
        "shamaim" : "שמים",
        "shamir" : "שמיר",
        "shana" : "שנה",
        "shandi" : "שיינדי",
        "shane" : "שיין",
        "shanel" : "שנאל",
        "shanelle" : "שאנל",
        "shani" : "שני",
        "shanit" : "שנית",
        "shannon" : "שאנון",
        "shanon" : "שאנון",
        "shantelle" : "שונטל",
        "shapir" : "שפיר",
        "sharin" : "שרין",
        "sharon li" : "שרון לי",
        "sharon" : "שרון",
        "sharona" : "שרונה",
        "sharoni" : "שרוני",
        "sharonit" : "שרונית",
        "shaul" : "שאול",
        "shaula" : "שאולה",
        "shauli" : "שאולי",
        "shavit" : "שביט",
        "shaviv" : "שביב",
        "shawn" : "שון",
        "shay el" : "שי אל",
        "shay li" : "שי לי",
        "shay" : "שי",
        "shay-el" : "שי-אל",
        "shay-li" : "שי-לי",
        "shaya" : "שיה",
        "shayla" : "שיילה",
        "shdema" : "שדמה",
        "shealtiel" : "שאלתיאל",
        "sheela" : "שילה",
        "sheena" : "שיינא",
        "shefa" : "שפע",
        "shefer" : "שפר",
        "shefi" : "שפי",
        "sheila" : "שילה",
        "sheina" : "שיינא",
        "sheizaf" : "שיזף",
        "sheldon" : "שלדון",
        "shelef" : "שלף",
        "sheleg" : "שלג",
        "shell" : "של",
        "shellie" : "שלי",
        "shelly" : "שלי",
        "shelya" : "שליה",
        "shem tov" : "שם טוב",
        "shem" : "שם",
        "shem-tov" : "שם-טוב",
        "shemer" : "שמר",
        "shenhav" : "שנהב",
        "sher" : "שר",
        "sherry" : "שרי",
        "sheva" : "שבע",
        "shevach" : "שבח",
        "shevi" : "שבי",
        "shiba" : "שיבא",
        "shibolet" : "שיבולת",
        "shifra" : "שפרה",
        "shikma" : "שקמה",
        "shila" : "שילה",
        "shilat" : "שילת",
        "shilav" : "שילב",
        "shilhav" : "שלהב",
        "shili" : "שילי",
        "shilo" : "שילה",
        "shilon" : "שילון",
        "shimi" : "שימי",
        "shimit" : "שמעית",
        "shimon" : "שמעון",
        "shimona" : "שמעונה",
        "shimri" : "שמרי",
        "shimrit" : "שמרית",
        "shimron" : "שימ‏רון",
        "shimshon" : "שמשון",
        "shir el" : "שיר אל",
        "shir halel" : "שיר הלל",
        "shir li" : "שיר לי",
        "shir" : "שיר",
        "shir-el" : "שיר-אל",
        "shir-li" : "שיר-לי",
        "shira" : "שירה",
        "shiran" : "שירן",
        "shirat chana" : "שירת חנה",
        "shirat emuna" : "שירת אמונה",
        "shirat yam" : "שירת ים",
        "shirat" : "שירת",
        "shiratya" : "שירתיה",
        "shiray" : "שיריי",
        "shiraz" : "שירז",
        "shirel" : "שיראל",
        "shiri" : "שירי",
        "shiriel" : "שיריאל",
        "shirili" : "שירילי",
        "shirin" : "שירין",
        "shirit" : "שירית",
        "shirley" : "שירלי",
        "shiron" : "שירון",
        "shirtal" : "שירטל",
        "shiva" : "שיבה",
        "shivi" : "שבי",
        "shkediya" : "שקדיה",
        "shlomi" : "שלומי",
        "shlomit" : "שלומית",
        "shlomo" : "שלמה",
        "shlomtziyon" : "שלומציון",
        "shmaaya" : "שמעיה",
        "shmaayahu" : "שמעיהו",
        "shmaria" : "שמריה",
        "shmariahu" : "שמריהו",
        "shmil" : "שמיל",
        "shmira" : "שמירה",
        "shmuel" : "שמואל",
        "shmuela" : "שמואלה",
        "shmulik" : "שמוליק",
        "shneour" : "שנאור",
        "shoham" : "שהם",
        "shomrat" : "שמרת",
        "shomron" : "שומרון",
        "shoni" : "שוני",
        "shonn" : "שון",
        "shontal" : "שונטל",
        "shosh" : "שוש",
        "shoshan" : "שוֹשן",
        "shoshana" : "שושנה",
        "shoshanit" : "שושנית",
        "shoshi" : "שושי",
        "shoval" : "ש‏ו‏ב‏ל",
        "shovi" : "שבי",
        "shraga" : "שרגא",
        "shuki" : "שוקי",
        "shula" : "שולה",
        "shulamit" : "שולמית",
        "shuli" : "שולי",
        "shunamit" : "שונמית",
        "shuni" : "שוני",
        "shunit" : "שונית",
        "shuv" : "שוב",
        "shuvael" : "שובאל",
        "shuvi" : "שובי",
        "shuvya" : "שוביה",
        "shvut" : "שבות",
        "shvutya" : "שבותיה",
        "shyla" : "שילה",
        "si" : "סי",
        "si-har" : "שיא-הר",
        "siegmund" : "זיגמונד",
        "siel" : "סיאל",
        "sigal" : "סיגל",
        "sigalit" : "סגלית",
        "sigi" : "סיגי",
        "sigmond" : "זיגמונד",
        "silva" : "סילבה",
        "silvan" : "סילבן",
        "silvana" : "סילבנה",
        "silvio" : "סילביו",
        "sima" : "סימה",
        "siman tov" : "סימן טוב",
        "siman-tov" : "סימן-טוב",
        "simcha" : "שמחה",
        "simi" : "סימי",
        "simon" : "שמעון",
        "simona" : "סימונה",
        "sinai" : "סיני",
        "sinaya" : "סיניה",
        "sindy" : "סינדי",
        "sinthia" : "סינטיה",
        "sion" : "שיאון",
        "siona" : "שיאונה",
        "sis" : "סיס",
        "sisi" : "סיסי",
        "sitar" : "סיטאר",
        "sitvanit" : "סיתונית",
        "sivan" : "סיון",
        "sky" : "סקאי",
        "slava" : "סלבה",
        "slavik" : "סלביק",
        "smadar" : "סמדר",
        "snaait" : "סנאית",
        "snir" : "שניר",
        "snira" : "שנירה",
        "snunit" : "סנונית",
        "sofia" : "סופיה",
        "sofie" : "סופי",
        "sofy" : "סופי",
        "sol" : "סול",
        "solomon" : "סולומון",
        "soly" : "סולי",
        "sonia" : "סוניה",
        "sonya" : "סוניה",
        "sophia" : "סופיה",
        "sorek" : "שורק",
        "stanley" : "סטנלי",
        "star" : "סטאר",
        "stav" : "סתו",
        "stavit" : "סתוית",
        "steeve" : "סטיב",
        "stella" : "סטלה",
        "stephanie" : "סטפני",
        "steven" : "סטיבן",
        "sue" : "סו",
        "suf" : "סוף",
        "sufa" : "סופה",
        "sufit" : "סופית",
        "sultana" : "סולטאנה",
        "sun" : "סן",
        "sunny" : "סאני",
        "suri" : "סורי",
        "susane" : "סוזן",
        "susanna" : "סוזנה",
        "susanne" : "סוזאן",
        "suzie" : "סוזי",
        "suzy" : "סוזי",
        "svetlana" : "סבטלנה",
        "sydney" : "סידני",
        "sylvia" : "סילביה",
        "sylvie" : "סילבי",
        "tadmor" : "תדמור",
        "tael" : "תאל",
        "tafat" : "טפת",
        "tagel" : "תגל",
        "tagil" : "תגיל",
        "tahara" : "טהרה",
        "tahel" : "תהל",
        "tai" : "תאי",
        "tair" : "תאיר",
        "tal chen" : "טל חן",
        "tal el" : "טל אל",
        "tal" : "טל",
        "tal-chen" : "טל-חן",
        "tal-el" : "טל-אל",
        "tal-or" : "טל-אור",
        "tal-shahar" : "טל-שחר",
        "tal-ya" : "טל-יה",
        "talel" : "טלאל",
        "tali" : "טלי",
        "talma" : "תלמה",
        "talmai" : "תלמי",
        "talmor" : "טלמור",
        "talor" : "טלאור",
        "talya" : "טליה",
        "tam" : "תם",
        "tama" : "תמה",
        "tamar" : "תמר",
        "tamara" : "תמרה",
        "tamari" : "תמרי",
        "tami" : "תמי",
        "tamir" : "תמיר",
        "tammy" : "תמי",
        "tamuz" : "תמוז",
        "tanchum" : "תנחום",
        "tania" : "טניה",
        "tanir" : "תניר",
        "taniv" : "תניב",
        "tanya" : "טניה",
        "tara" : "טארה",
        "tarin" : "תרין",
        "taron" : "תרון",
        "tatiana" : "טטיאנה",
        "tatina" : "טאטינה",
        "tav" : "תו",
        "tavor" : "תבור",
        "taya" : "תאיה",
        "tchelet" : "תכלת",
        "tchiya" : "תחיה",
        "ted" : "טד",
        "teddy" : "טדי",
        "teena" : "טינה",
        "tehila" : "תהילה",
        "tehora" : "טהורה",
        "tel aviv" : "תל אביב",
        "telem" : "תלם",
        "tenne" : "טנא",
        "teodor" : "טאודור",
        "teresa" : "טרזה",
        "terese" : "טרז",
        "terez" : "טרז",
        "tereza" : "טרזה",
        "terra" : "טרה",
        "tess" : "טס",
        "teva" : "טבע",
        "tevel" : "תבל",
        "tevet" : "טבת",
        "tfila" : "תפלה",
        "thea" : "תיאה",
        "theresa" : "טרזה",
        "thomas" : "תומס",
        "tia" : "טיה",
        "tidhar" : "תדהר",
        "tifara" : "תפארה",
        "tiferet" : "תפארת",
        "tifrach" : "תפרח",
        "tiki" : "תיקי",
        "tikva" : "תקוה",
        "tilly" : "טילי",
        "tiltan" : "תלתן",
        "tim" : "טים",
        "timnna" : "תמנע",
        "timor" : "טימור",
        "timora" : "תימורה",
        "tina" : "טינה",
        "tiran" : "טירן",
        "tiranit" : "טירנית",
        "tirosh" : "תירוש",
        "tirtsa" : "תרצה",
        "tirza" : "תרצה",
        "tiya" : "תיאה",
        "tkuma" : "תקומה",
        "tlalit" : "טללית",
        "tlila" : "טלילה",
        "tmira" : "תמירה",
        "toam" : "תואם",
        "tobias" : "טוביאס",
        "toby" : "טובי",
        "tohar" : "טהר",
        "tom" : "תום",
        "tom-li" : "תום-לי",
        "tomer" : "תומר",
        "tommy" : "טומי",
        "tony" : "טוני",
        "topaz" : "טופז",
        "tor" : "תור",
        "tora" : "תוֹרה",
        "toren" : "תורן",
        "tov roi" : "טוב רואי",
        "tov" : "טוב",
        "tova" : "טובה",
        "tsabar" : "צבר",
        "tsabarit" : "צברית",
        "tsadika" : "צדיקה",
        "tsafrir" : "צפריר",
        "tsafrira" : "צפרירה",
        "tsahala" : "צהלה",
        "tsdafit" : "צדפית",
        "tsedef" : "צדף",
        "tsfira" : "צפירה",
        "tsfiya" : "צפיה",
        "tshura" : "תשורה",
        "tshuva" : "תשובה",
        "tsila" : "צילה",
        "tsili" : "צילי",
        "tsipiya" : "צפיה",
        "tslil" : "צליל",
        "tslila" : "צלילה",
        "tsofi" : "צופי",
        "tsofit" : "צופית",
        "tsofnat" : "צופנת",
        "tsruya" : "צרויה",
        "tsuf" : "צוף",
        "tsufi" : "צופי",
        "tsufit" : "צופית",
        "tully" : "טולי",
        "tushiya" : "תושיה",
        "tut" : "תות",
        "tuv" : "טוב",
        "tuval" : "תובל",
        "tuvel" : "טובאל",
        "tuvia" : "טוביה",
        "tuvit" : "טובית",
        "tzach" : "צח",
        "tzachar" : "צחר",
        "tzachi" : "צחי",
        "tzachit" : "צחית",
        "tzadik" : "צדיק",
        "tzadok" : "צדוק",
        "tzafi" : "צפי",
        "tzafir" : "צפיר",
        "tzafit" : "צפית",
        "tzafrit" : "צפרית",
        "tzahali" : "צהלי",
        "tzameret" : "צמרת",
        "tzdaka" : "צדקה",
        "tzeel" : "צאל",
        "tzeela" : "צאלה",
        "tzemach" : "צמח",
        "tzion" : "ציון",
        "tziona" : "ציונה",
        "tzioni" : "ציוני",
        "tzionit" : "ציונית",
        "tzipa" : "ציפה",
        "tzipiya" : "ציפיה",
        "tzippi" : "ציפי",
        "tzippora" : "צפורה",
        "tzira" : "צירה",
        "tzivya" : "צביה",
        "tzochar" : "צחר",
        "tzofar" : "צופר",
        "tzofia" : "צופיה",
        "tzofnat" : "צפנת",
        "tzuk" : "צוק",
        "tzukit" : "צוקית",
        "tzur" : "צור",
        "tzurel" : "צוראל",
        "tzuri" : "צורי",
        "tzuria" : "צוריה",
        "tzuriel" : "צוריאל",
        "tzurit" : "צורית",
        "tzvi" : "צבי",
        "tzvia" : "צביה",
        "tzviel" : "צביאל",
        "tzvika" : "צביקה",
        "udi" : "אודי",
        "uma" : "אומה",
        "uri" : "אורי",
        "uria" : "אוריה",
        "uriel" : "אוריאל",
        "uriela" : "אוּריאלה",
        "urit" : "אורית",
        "ursula" : "אורסולה",
        "uzit" : "עוזית",
        "uzzi" : "עוזי",
        "uzziel" : "עוזיאל",
        "uzziya" : "עוזיה",
        "vadim" : "ודים",
        "valda" : "ולדה",
        "valentina" : "ולנטינה",
        "valentine" : "ולנטין",
        "valeria" : "ואלריה",
        "valerian" : "ולריאן",
        "valerie" : "ואלרי",
        "valerio" : "ולריו",
        "vali" : "ולי",
        "vanda" : "ונדה",
        "vanessa" : "ונסה",
        "varda" : "ורדה",
        "vardina" : "ורדינה",
        "vardit" : "ורדית",
        "vasiliy" : "וסילי",
        "venesia" : "ונציה",
        "venezia" : "ונציה",
        "vera" : "ורה",
        "vered" : "ורד",
        "veronic" : "ורוניק",
        "veronica" : "ורוניקה",
        "vic" : "ויק",
        "vickie" : "ויקי",
        "vicky" : "ויקי",
        "victor" : "ויקטור",
        "victoria" : "ויקטוריה",
        "vida" : "וידה",
        "vika" : "ויקה",
        "vil" : "ויל",
        "viola" : "ויולה",
        "violet" : "ויולט",
        "violeta" : "ויולטה",
        "vita" : "ויטה",
        "vitaliy" : "ויטלי",
        "vitzman" : "ויצמן",
        "viva" : "ויוה",
        "vivi" : "ויוי",
        "vivian" : "ויויאן",
        "viviana" : "ויויאנה",
        "vladi" : "ולדי",
        "vladimir" : "ולדימיר",
        "vladislav" : "ולדיסלב",
        "vyacheslav" : "ויאצ'סלב",
        "walter" : "וולטר",
        "weizmann" : "ויצמן",
        "will" : "ויל",
        "william" : "וויליאם",
        "willie" : "וילי",
        "willy" : "וילי",
        "wolf" : "וולף",
        "xenia" : "קסניה",
        "yaacova" : "יעקובה",
        "yaad" : "יעד",
        "yaakov" : "יעקב",
        "yaar" : "יער",
        "yaara" : "יערה",
        "yaari" : "יערי",
        "yaarit" : "יערית",
        "yachad" : "יחד",
        "yachin" : "יכין",
        "yadid" : "ידיד",
        "yadin" : "ידין",
        "yadir" : "ידיר",
        "yael chen" : "יעל חן",
        "yael" : "יעל",
        "yaelat chen" : "יעלת-חן",
        "yaeli" : "יעלי",
        "yafa" : "יפה",
        "yafit" : "יפית",
        "yagel" : "י‏גל",
        "yagil" : "יגיל",
        "yagur" : "יגור",
        "yah-li" : "יה-לי",
        "yahalom" : "יהלום",
        "yahaloma" : "יהלומה",
        "yahalomit" : "יהלומית",
        "yahav" : "יהב",
        "yahava" : "יהבה",
        "yahel" : "יהל",
        "yahela" : "יהלה",
        "yaheli" : "יהלי",
        "yahelor" : "יהלאור",
        "yair" : "יאיר",
        "yaira" : "יאירה",
        "yaki" : "יקי",
        "yakim" : "יקים",
        "yakir" : "יקיר",
        "yakira" : "יקירה",
        "yal" : "יאל",
        "yali" : "יהלי",
        "yalin" : "ילין",
        "yalon" : "ילון",
        "yam" : "ים",
        "yamin" : "ימין",
        "yamit" : "ימית",
        "yan" : "יאן",
        "yana" : "יאנה",
        "yanaait" : "ינאית",
        "yanina" : "ינינה",
        "yanir" : "יניר",
        "yanit" : "ינית",
        "yaniv" : "יניב",
        "yanna" : "ינה",
        "yannai" : "ינאי",
        "yanuv" : "ינוב",
        "yarach" : "ירח",
        "yarden" : "ירדן",
        "yardena" : "ירדנה",
        "yarel" : "יראל",
        "yarin" : "ירין",
        "yarina" : "ירינה",
        "yariv" : "יריב",
        "yarkon" : "ירקון",
        "yarkona" : "ירקונה",
        "yarnin" : "ירנין",
        "yarom" : "ירום",
        "yaron" : "ירון",
        "yarona" : "ירונה",
        "yaroni" : "ירוני",
        "yaroslav" : "ירוסלב",
        "yashiv" : "ישיב",
        "yashphe" : "ישפה",
        "yasmine" : "יסמין",
        "yassaf" : "יסף",
        "yasur" : "יסעור",
        "yated" : "יתד",
        "yatir" : "יתיר",
        "yatsir" : "יציר",
        "yavin" : "יבין",
        "yavne'el" : "יבניאל",
        "yavniela" : "יבניאלה",
        "yechezkel" : "יחזקאל",
        "yechi" : "יחי",
        "yechiaad" : "יחיעד",
        "yechiav" : "יחיאב",
        "yechiel" : "יחיאל",
        "yechiela" : "יחיאלה",
        "yedaaya" : "ידעיה",
        "yedida" : "ידידה",
        "yedidya" : "ידידיה",
        "yeela" : "יעלה",
        "yefet" : "יפת",
        "yefim" : "יפים",
        "yehiam" : "יחיעם",
        "yehoash" : "יהואש",
        "yehonadav" : "יהונדב",
        "yehonatan" : "יהונתן",
        "yehoram" : "יהורם",
        "yehoshua" : "יהושוע",
        "yehoyada" : "יהוידע",
        "yehoyakim" : "יהויקים",
        "yehu" : "יהוא",
        "yehuda" : "יהודה",
        "yehudi" : "יהודי",
        "yehudit" : "יהודית",
        "yekara" : "יקרה",
        "yekaterina" : "יקטרינה",
        "yekutiel" : "יקותיאל",
        "yelena" : "ילנה",
        "yemima" : "ימימה",
        "yerachemel" : "ירחמאל",
        "yerachmiel" : "ירחמיאל",
        "yermiyahu" : "ירמיהו",
        "yerucham" : "ירוחם",
        "yerushalaim" : "ירושלים",
        "yerushalem" : "ירושלם",
        "yerushalmit" : "ירושלמית",
        "yeshaya" : "ישעיה",
        "yeshayahu" : "ישעיהו",
        "yeshuaa" : "ישועה",
        "yeshurun" : "ישורון",
        "yeter" : "יתר",
        "yevgeni" : "יבגני",
        "yevgeniya" : "יבגניה",
        "yidhar" : "ידהר",
        "yifaati" : "יפעתי",
        "yifat" : "יפעת",
        "yifrach" : "יפרח",
        "yiftach" : "יפתח",
        "yigaela" : "יגאלה",
        "yigal" : "יגאל",
        "yikrat" : "יקרת",
        "yinon" : "ינון",
        "yiraat" : "יראת",
        "yiram" : "ירעם",
        "yirmi" : "ירמי",
        "yirmiya" : "ירמיה",
        "yiron" : "יראון",
        "yisge" : "ישגה",
        "yishai" : "ישי",
        "yiska" : "יסכה",
        "yitav" : "ייטב",
        "yitshal" : "יצהל",
        "yitzhak" : "יצחק",
        "yitzhar" : "יצהר",
        "yivsam" : "יבשם",
        "yizhar" : "יזהר",
        "yoad" : "יועד",
        "yoan" : "יואן",
        "yoana" : "יואנה",
        "yoash" : "יואש",
        "yoav" : "יואב",
        "yochai" : "יוחאי",
        "yocheved" : "יוכבד",
        "yochi" : "יוכי",
        "yodfath" : "יודפת",
        "yoel" : "יואל",
        "yoela" : "יואלה",
        "yoeli" : "יואלי",
        "yoelit" : "יואלית",
        "yofiel" : "יופיאל",
        "yofit" : "יופית",
        "yogev" : "יוגב",
        "yohad" : "יוהד",
        "yohanan" : "יוחנן",
        "yoked" : "יוקד",
        "yolanda" : "יולנדה",
        "yom tov" : "יום טוב",
        "yom-tov" : "יום-טוב",
        "yomi" : "יומי",
        "yon" : "יון",
        "yona" : "יונה",
        "yonadav" : "יונדב",
        "yonat" : "יונת",
        "yonatan" : "יונתן",
        "yoni" : "יוני",
        "yonina" : "יונינה",
        "yonit" : "יוֹנית",
        "yoram" : "יהורם",
        "yoray" : "יוראי",
        "yorit" : "יורית",
        "yortal" : "יורטל",
        "yoseph" : "יוסף",
        "yosepha" : "יוספה",
        "yoshiyahu" : "יאשיהו",
        "yossi" : "יוסי",
        "yotam" : "יותם",
        "yotvat" : "יטבת",
        "yovav" : "יובב",
        "yovel" : "יובל",
        "yuliya" : "יוליה",
        "yuly" : "יולי",
        "yuri" : "יורי",
        "yuval" : "יובל",
        "zahara" : "זהרה",
        "zaharira" : "זהרירה",
        "zaharit" : "זהרית",
        "zak" : "זק",
        "zaka" : "זכה",
        "zakai" : "זכאי",
        "zaki" : "זכי",
        "zakut" : "זכות",
        "zalman" : "זלמן",
        "zamir" : "זמיר",
        "zarach" : "זרח",
        "zauri" : "זאורי",
        "zchut" : "זכות",
        "ze'ev" : "זאב",
        "ze'eva" : "זאבה",
        "zecharia" : "זכריה",
        "zehava" : "זהבה",
        "zehavi" : "זהבי",
        "zehavit" : "זהבית",
        "zehorit" : "זהורית",
        "zelda" : "זלדה",
        "zemer" : "זמר",
        "zephaniah" : "צפניה",
        "zer" : "זר",
        "zeri" : "זרי",
        "zerit" : "זרית",
        "zika" : "זיקה",
        "zilpa" : "זלפה",
        "zimra" : "זמרה",
        "zimrat" : "זימרת",
        "zimratya" : "זימרתיה",
        "zina" : "זינה",
        "zinet" : "זינט",
        "zisi" : "זיסי",
        "ziv" : "זיו",
        "ziva" : "זיוה",
        "zivan" : "זיוון",
        "zivanit" : "זיונית",
        "zivit" : "זיוית",
        "zmira" : "זמירה",
        "zoey" : "זואי",
        "zohar" : "זוהר",
        "zohara" : "זהרה",
        "zoharit" : "זוהרית",
        "zoheret" : "זוהרת",
        "zohi" : "זוהי",
        "zoya" : "זויה",
        "zrubavel" : "זרובבל",
        "zu-li" : "זו-לי",
        "zuel" : "זואל",
        "zur" : "צור",
        "zuri" : "צורי",
        "zvi" : "צבי",
        "zvika" : "צביקה",
        "zvulun" : "זבולון",
        "jay" : "ג'יי",
        "vitale" : "ויטל",    
};

if (localStorage.er_lang_translte_to == 'hebrew') {
    er_map_names = er_map_names_hebrew
}
/**
 * Created by erinsasha on 10/01/17.
 */
er_sale_control = window.er_sale_control || {
        CONST_DEFAULT_SALES_MODE : 'DEFAULT',
        sales_modes : {
            /*'CH' : 'bsale',
            'BE' : 'bsale',
            'DE' : 'bsale',
            'AT' : 'bsale',
            'SE' : 'bsale',*/
        },

        init : function() {
            if(localStorage.er_country_code && localStorage.er_country_code != '' && localStorage.er_country_code != 'undefined') {
                this.setup_country_code_and_sale(localStorage.er_country_code);
            } else {
                this.request_position();
            }
        },
        request_position : function() {
            $.getJSON('https://freegeoip.net/json/?callback=?', this.on_request_position.bind(this));
        },
        setup_country_code_and_sale : function(country_code) {
            var jq_body = $('body');
            jq_body.attr('data-er-country_code', country_code);
            jq_body.attr('data-er-sale-mode', this.get_sale_by_country_code(country_code));
        },
        get_sale_by_country_code : function(country_code) {
            var sales_mode = this.sales_modes[country_code];
            if (sales_mode)
                return sales_mode;
            else
                return this.CONST_DEFAULT_SALES_MODE;
        },
        get_current_sale_mode : function() {
            if(localStorage.er_country_code && localStorage.er_country_code != '' && localStorage.er_country_code != 'undefined') {
                return this.CONST_DEFAULT_SALES_MODE;
            } else {
                return this.get_sale_by_country_code(localStorage.er_country_code);
            }
        }
        ,
        on_request_position : function(data) {
            console.log(data);
            this.on_country_code_defined(data.country_code);
        },
        on_country_code_defined : function(country_code) {
            localStorage.er_country_code = country_code;
            this.setup_country_code_and_sale(country_code);
        },
    };
/**
 * Created by erinsasha on 20/12/16.
 */
var er_search_page_helper = window.er_search_page_helper || {
        is_search_page : function() {
            var href = window.location.href;
            return href.indexOf('linkedin.com/vsearch') >= 0
                || href.indexOf('linkedin.com/search/') >= 0
                || er_utils.is_sales_navigator_search_page();
        },

        _ns_sn_get_current_page_number : function() {
            er_logger.log('START er_search_page_helper._ns_sn_get_current_page_number');

            var result;
            if(er_utils.is_new_style_page())
                result = this._ns_get_current_page_number();
            else
            // Sales Navigator
                result = this._sales_navigator_get_current_page_number();

            er_logger.log('END er_search_page_helper._ns_sn_get_current_page_number : '+result);

            return result;
        },

        /**
         * Возвращает текущий номер страницы
         * @returns {*}
         * @private
         */
        _ns_get_current_page_number : function() {
            er_logger.log('START er_search_page_helper._ns_get_current_page_number');

            var jq_page_num = $('.search-results-container').find('.page-list').find('li.active');

            var result;
            if(jq_page_num.length == 0)
                result = null;
            else
                result = Number(jq_page_num.text());

            er_logger.log('END er_search_page_helper._ns_get_current_page_number : '+result);
            return result;
        },
        /**
         * Возвращает текущий номер страницы
         * @returns {*}
         * @private
         */
        _sales_navigator_get_current_page_number : function() {
            er_logger.log('START er_search_page_helper._sales_navigator_get_current_page_number');

            var jq_page_num = $('#pagination').find('.pagination-links').find('li.active');

            var result;
            if(jq_page_num.length == 0)
                result = null;
            else
                result = Number(jq_page_num.text());

            er_logger.log('END er_search_page_helper._sales_navigator_get_current_page_number : '+result);
            return result;
        },

        _ns_sn_new_page_load_waiter : function(old_num, deferred) {
            er_logger.log('START er_search_page_helper._ns_sn_new_page_load_waiter old_num = '+old_num);

            var result;
            if(er_utils.is_new_style_page())
                result = this._ns_new_page_load_waiter(old_num, deferred);
            else
            // Sales Navigator
                result = this._sales_navigator_new_page_load_waiter(old_num, deferred);

            er_logger.log('END er_search_page_helper._ns_sn_new_page_load_waiter : '+result);
            return result;
        },

        /**
         * ожидает изменения номера страницы
          * @param old_num
         * @param deferred
         * @returns {*} - промис
         * @private
         */
        _ns_new_page_load_waiter : function(old_num, deferred) {
            er_logger.log('START er_search_page_helper._ns_new_page_load_waiter old_num = '+old_num);

            if(!deferred)
                deferred = $.Deferred();

            var new_num = this._ns_get_current_page_number();

            if(old_num == new_num) {
                var that = this;
                setTimeout(function(){
                    that._ns_new_page_load_waiter(old_num, deferred);
                },100);
            } else {
                deferred.resolve();
                er_logger.log('END er_search_page_helper._ns_sn_new_page_load_waiter : deferred.resolve()');
            }

            return deferred.promise();
        },
        /**
         * ожидает изменения номера страницы
         * @param old_num
         * @param deferred
         * @returns {*} - промис
         * @private
         */
        _sales_navigator_new_page_load_waiter : function(old_num, deferred) {
            er_logger.log('START er_search_page_helper._sales_navigator_new_page_load_waiter old_num = '+old_num);

            if(!deferred)
                deferred = $.Deferred();

            var new_num = this._sales_navigator_get_current_page_number();

            if(old_num == new_num) {
                var that = this;
                setTimeout(function(){
                    that._sales_navigator_new_page_load_waiter(old_num, deferred);
                },100);
            } else {
                deferred.resolve();
                er_logger.log('END er_search_page_helper._sales_navigator_new_page_load_waiter : deferred.resolve()');
            }

            return deferred.promise();
        },

        ns_sn_old_load_next_page_deferred : function() {
            er_logger.log('START er_search_page_helper.ns_sn_old_load_next_page_deferred');

            if (er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page())
                return this._ns_sn_load_next_page();

            var deferred = $.Deferred();

            deferred.resolve(this._old_load_next_page());

            return deferred.promise();
        },
        /**
         * Загружает следующую страницу результатов поиска
         * если она есть, то вернет true
         * @returns - промис
         * @private
         */
        _ns_sn_load_next_page : function() {
            er_logger.log('START er_search_page_helper._ns_sn_load_next_page');

            var deferred = $.Deferred();

            var jq_btn_next;

            if(er_utils.is_new_style_page())
                jq_btn_next = $('.results-paginator button.next');
            else
                // Sales Navigator
                jq_btn_next = $('#pagination').find('.next-pagination');
            if (jq_btn_next.length > 0 && !jq_btn_next.is(":disabled") && !jq_btn_next.hasClass("disabled")) {
                var old_num = this._ns_sn_get_current_page_number();
                er_logger.log('er_search_page_helper._ns_sn_load_next_page old_num='+old_num);
                jq_btn_next.click();

                this._ns_sn_new_page_load_waiter(old_num)
                    .then(function() {
                       deferred.resolve(true);
                        er_logger.log('END er_search_page_helper._ns_sn_load_next_page deferred.resolve(true)');
                    });
            } else {
                er_logger.log('er_search_page_helper._ns_sn_load_next_page : (jq_btn_next.length > 0 && !jq_btn_next.is(":disabled") && !jq_btn_next.hasClass("disabled")) == FALSE');
                er_logger.log('END er_search_page_helper._ns_sn_load_next_page deferred.resolve(false)');
                deferred.resolve(false);
            }

            return deferred.promise();
        },
        _old_load_next_page : function() {
            var jq_btn_next = $('.next .page-link');
            if (jq_btn_next.length > 0) {
                //window.localStorage.er_search_next = 'true';

                var href = jq_btn_next.attr('href');
                window.location.assign(href);
                return true;
            } else {
                return false;
            }
        },
        /**
         * Извлекает информацию о мини-профиле
         * @param jq_profile
         * @returns {{id: *, fullname: (XMLList|*), avatar: *, description: (XMLList|*), location: (XMLList|*)}}
         * @private
         */
        _extract_mini_profile : function(jq_profile) {
            er_logger.log('START er_search_page_helper._extract_mini_profile jq_profile = ');
            er_logger.log(jq_profile);

            var result;
            if (er_utils.is_new_style_page()) {
                result = er_utils.get_profile_card_as_object(jq_profile);
            } else if (er_utils.is_sales_navigator_search_page()) {
                result = this._extract_mini_profile_sale_navigator(jq_profile);
            } else {
                var id = jq_profile.attr('data-li-entity-id');
                /*if (id)
                 id = Number(id);*/
                var jq_title = jq_profile.find('.title.main-headline');
                result = {
                    id : id,
                    fullname : jq_title.text(),
                    url : jq_title.attr('href'),
                    avatar : jq_profile.find('.entity-img').attr('src'),
                    description : jq_profile.find('.description').text(),
                    location : jq_profile.find('.demographic [dir=ltr]').text(),
                };
            }

            er_logger.log('RESULT er_search_page_helper._extract_mini_profile');
            er_logger.log(result);
            er_logger.log('END er_search_page_helper._extract_mini_profile');
            return result;
        },

        _extract_mini_profile_sale_navigator : function(jq_profile) {
            er_logger.log('START er_search_page_helper._extract_mini_profile_sale_navigator jq_profile = ');
            er_logger.log(jq_profile);

            var jq_profile_link = jq_profile.find('.profile-link').first();
            var url = jq_profile_link.attr('href');
            if(!url || url == '') {
                er_logger.log('ERROR : empty profile URL');
                return null;
            }

            var id = er_utils.get_profile_id_from_sale_navigator_profile_url(url);
            url = er_utils.get_profile_url_from_sale_navigator_profile_id(id);

            var avatar = jq_profile_link.find('img.entity-image').attr('src');

            var jq_info_container = jq_profile.find('.info-container').first();
            var fullname = jq_info_container.find('.name .profile-link').attr('title');
            if(!fullname || fullname == '') {
                er_logger.log('ERROR : empty profile fullname');
                return null;
            } else if (fullname.toLowerCase() == 'linkedin member') {
                return null;
            }

            var obj_first_last_name = er_utils.get_firstname_lastname_from_fullname(fullname);

            var jq_details_container = jq_info_container.find('.details-container').first();
            var dist = er_utils.get_distance_from_text(jq_details_container.find('.degree-icon').text());

            var jq_company_link = jq_details_container.find('a.company-link');
            var company_url, company;
            if (jq_company_link.length > 0) {
                company_url = jq_company_link.attr('href');
                company = jq_company_link.text().trim();
            } else {
                var jq_company_name = jq_details_container.find('.company-name').first();
                if(jq_company_name.length > 0) {
                    company = jq_company_name.text().trim();
                } else {
                    company = '';
                }
            }

            var jq_div_info = jq_info_container.find('div.info').first();
            var jq_info_value = jq_div_info.find('.info-value');
            var position, location, city, area;
            if (jq_info_value.length > 0) {
                position = jq_info_value.first().text().trim();

                if(jq_info_value.length >= 3) {
                    location = $(jq_info_value[2]).text().trim();
                    var first_comma_after_city = location.indexOf(',');
                    if (first_comma_after_city >= 0) {
                        city = location.substring(0, first_comma_after_city);
                        area = location.substring(first_comma_after_city+2);
                    }
                }
            } else {
                position = '';
            }

            var description = position + ' at ' + company;

            var profile = {
                id : id,
                is : 'sn',
                url : url,
                avatar : avatar,
                fullname : fullname,
                firstname : obj_first_last_name.firstname,
                lastname : obj_first_last_name.lastname,
                company : company,
                company_url : company_url,
                position : position,
                description : description,
                location : location,
                city : city,
                area : area,
                dist : dist,
            };

            er_logger.log('END er_search_page_helper._extract_mini_profile_sale_navigator profile = ');
            er_logger.log(profile);

            return profile;
        },

        extract_mini_profiles : function(jq_profiles) {
            er_logger.log('START er_search_page_helper.extract_mini_profiles jq_profiles.length = ' + jq_profiles.length);
            var result = [];

            for(var i=0, profile; i<jq_profiles.length; i++) {
                profile = this._extract_mini_profile($(jq_profiles[i]));
                if (profile != null && profile.id != null && profile.id != '')
                    result.push(profile);
            }

            er_logger.log('END er_search_page_helper.extract_mini_profiles result.length = ' + result.length);

            return result;
        },


        get_jq_mini_profiles : function() {
            er_logger.log('START er_search_page_helper.get_jq_mini_profiles');

            var result;

            if (er_utils.is_new_style_page()) {
                result = $('.search-result--person');
            } else if (er_utils.is_sales_navigator_search_page()) {
                result = $('#results-list').find('li.result');
            } else {
                result = $('.people');
            }

            er_logger.log('END er_search_page_helper.get_jq_mini_profiles result.length = ' + result.length);

            return result;
        },
        get_jq_mini_profiles_from_inside : function(jq_child) {
            if (er_utils.is_new_style_page()) {
                return jq_child.closest('.search-result--person');
            } else if (er_utils.is_sales_navigator_search_page()) {
                return jq_child.closest('li.result');
            } else {
                return jq_child.closest('.people');
            }
        },

        get_profile_id : function(jq_people_card) {
            if (er_utils.is_new_style_page() || er_utils.is_sales_navigator_search_page())
                return er_utils.get_profile_id_from_search_card(jq_people_card);
            else
                return er_utils.get_string_id_from_old_style_profile_mini_card(jq_people_card);
        },

        get_peoples_ids_from_single_page : function() {
            er_logger.log('START er_search_page_helper.get_peoples_ids_from_single_page');
            var jq_peoples = this.get_jq_mini_profiles();
            var ids = [];
            for(var i= 0, id; i<jq_peoples.length; i++) {
                id = this.get_profile_id($(jq_peoples[i]));
                if(id && id != '')
                    ids.push(id);
            }

            er_logger.log('END er_search_page_helper.get_peoples_ids_from_single_page ids.length = ' + ids.length);

            return ids;
        },

        waiter_jq_people_cards_load : function(deferred) {
            er_logger.log('START er_search_page_helper.waiter_jq_people_cards_load');
            if(!deferred)
                deferred = new $.Deferred();
            var that = this;

            var jq_people = this.get_jq_mini_profiles();
            if (jq_people.length == 0)
                setTimeout(function(){
                    that.waiter_jq_people_cards_load(deferred);
                }, 100);
            else {
                deferred.resolve();
                er_logger.log('END er_search_page_helper.waiter_jq_people_cards_load');
            }

            return deferred.promise();
        },

        wait_people_card_load_and_extract_single_page : function() {
            er_logger.log('START er_search_page_helper.wait_people_card_load_and_extract_single_page');
            var deferred = $.Deferred();

            var that = this;

            this.waiter_jq_people_cards_load()
                .then(er_utils.scroll_page_down_by_screens.bind(er_utils))
                .then(function() {
                    er_logger.log('START er_search_page_helper.wait_people_card_load_and_extract_single_page scroll_page_down_by_screens : FINISHED');
                    that.extract_single_page()
                        .then(function(profiles_arr) {
                            deferred.resolve(profiles_arr);
                            er_logger.log('END er_search_page_helper.wait_people_card_load_and_extract_single_page');
                        })
                });


            return deferred.promise();
        },
        extract_single_page : function() {
            er_logger.log('START er_search_page_helper.extract_single_page');
            var deferred = $.Deferred();

            var that = this;

            var jq_peoples = this.get_jq_mini_profiles();
            er_logger.log('er_search_page_helper.extract_single_page jq_peoples.length='+jq_peoples.length);
            this.scroll_through_profiles(jq_peoples)
                .then(function(){
                    er_logger.log('er_search_page_helper.extract_single_page scroll_through_profiles : FINISHED');

                    var profiles_arr = that.extract_mini_profiles(jq_peoples);
                    er_mini_profiles_db.push_profiles(profiles_arr)
                        .then(function() {
                            deferred.resolve(profiles_arr);
                            er_logger.log('END er_search_page_helper.extract_single_page');
                        });
                });


            return deferred.promise();
        },
        scroll_through_profiles : function(jq_peoples) {
            er_logger.log('START er_search_page_helper.scroll_through_profiles');
            var deferred = $.Deferred();

            if(jq_peoples == null || jq_peoples.length == 0 ||
                !er_utils.is_new_style_page() && !er_utils.is_sales_navigator_search_page()
            ) {
                deferred.resolve();
                er_logger.log('START er_search_page_helper.scroll_through_profiles (jq_peoples == null || jq_peoples.length == 0 ||!er_utils.is_new_style_page() && !er_utils.is_sales_navigator_search_page()) ');
                return deferred.promise();
            }

            var promise = $.when();

            jq_peoples.each(function(index) {
                var jq_people = $(this);
                promise = promise.then(function() {
                    return er_utils.scroll_to_element_promise(jq_people, 200);
                });
            });
            promise.then(function() {
                    setTimeout(function() {
                        deferred.resolve();
                        er_logger.log('END er_search_page_helper.scroll_through_profiles');
                    }, 300)
                });

            return deferred.promise();
        },
};
/**
 * Created by erinsasha on 17/02/17.
 */
var er_search_preview_buttons_ctrl = window.er_search_preview_buttons_ctrl || {
        CONST_WATCH_TIMEOUT : 5000,
        CONST_BUTTON_HTML_CLASS : 'er_message_preview_btn',

        init : function() {
            this.closure_looped_watcher = this._looped_watcher.bind(this);
            this.closure_on_btn_preview_click = this._on_btn_preview_click.bind(this);

            this._looped_watcher();
        },
        _looped_watcher : function() {
            if(this._is_new_search_page_or_sale_nav_page()) {
                this._add_buttons();
            }
            setTimeout(this.closure_looped_watcher, this.CONST_WATCH_TIMEOUT);
        },
        _is_new_search_page_or_sale_nav_page : function() {
            return er_utils.is_new_search_page() || er_utils.is_sales_navigator_search_page();
        },
        _add_buttons : function() {
            var jq_profiles = er_search_page_helper.get_jq_mini_profiles();
            for(var i=0; i<jq_profiles.length; i++) {
                this._add_button($(jq_profiles[i]));
            }
        },
        _add_button : function(jq_profile) {
            if(this._is_button_added(jq_profile))
                return;

            var jq_parent = this._get_parent_element_to_insert_button(jq_profile);

            var dist = er_utils.get_distance_from_mini_profile(jq_profile);

            var jq_btn = $(this._build_html_button(dist));
            if (er_utils.is_sales_navigator_search_page())
                jq_btn.appendTo(jq_parent);
            else
                jq_btn.prependTo(jq_parent);

            jq_btn.click(this.closure_on_btn_preview_click);
        },
        _is_button_added : function(jq_profile) {
            return jq_profile.find('.'+this.CONST_BUTTON_HTML_CLASS).length > 0;
        },
        _get_parent_element_to_insert_button : function(jq_profile) {
            if(er_utils.is_new_search_page())
                return jq_profile.find('.search-result__actions .ember-view').first();
            else if(er_utils.is_sales_navigator_search_page()) {
                return jq_profile.find('.info-container').first();
            }
        },
        _build_html_button : function(dist) {
            //button-secondary-medium
            var html_dist = 'er_dist_'+dist;
            return '<button class=" '+this.CONST_BUTTON_HTML_CLASS+' '+html_dist+'"></button>';
        },
        _on_btn_preview_click : function(event) {
            var jq_profile = er_search_page_helper.get_jq_mini_profiles_from_inside($(event.currentTarget));
            var profile_object = er_search_page_helper._extract_mini_profile(jq_profile);
            if (profile_object.dist == 1) {
                this._show_1st_connection_message(profile_object);
            } else {
                this._show_invitation_message(profile_object);
            }
        },
        _show_1st_connection_message : function(profile_object) {
            var message = er_message_broadcast._generate_message_text_from_mini_profile_object(profile_object);
            var er_Textbox_Preview = new ER_Textbox_Preview({
                jq_parent : $('body'),
                mini : true
            });
            er_Textbox_Preview.show('Preview Broadcast Message', message);
        },
        _show_invitation_message : function(profile_object) {
            var message = er_connect_in_search._generate_message_text_from_mini_profile_object(profile_object);
            var er_Textbox_Preview = new ER_Textbox_Preview({
                jq_parent : $('body'),
                mini : true
            });
            er_Textbox_Preview.show('Invitation Message Preview', message);
        },
    };
/**
 * Created by erinsasha on 13/08/17.
 */
var er_storage = window.er_storage || {
        init : function() {
            if(this.started)
                return;
            this.started = true;

            var storage = localStorage.er_storage;
            if(storage != 'true') {
                if (navigator.storage && navigator.storage.persist)
                    navigator.storage.persist().then(function(granted) {
                        if (granted) {
                            localStorage.er_storage = 'true';
                            console.log("Storage will not be cleared except by explicit user action");
                        } else
                            console.log("Storage may be cleared by the UA under storage pressure.");
                    });
            }

            this.check_free_space();
        },
        check_free_space : function() {
            navigator.webkitTemporaryStorage.queryUsageAndQuota (
                function(usedBytes, grantedBytes) {
                    console.log('we are using ', usedBytes, ' of ', grantedBytes, 'bytes');
                    if(grantedBytes - usedBytes < 10485760) { // 10mb
                        new ERLH_W_Message({ message : 'Not enough free space on your computer. Please, free additional space' });
                    }
                },
                function(e) { console.log('Error', e);  }
            );
        },
    };
/**
 * Created by erinsasha on 01/02/17.
 */
var er_tabs_control = window.er_tabs_control || {
        EVENT_TAB_COMMON_STATE_CHANGED : 'ER_EVENT_TAB_COMMON_STATE_CHANGED',

        _save_state_to_session_storage : function() {
            sessionStorage.er_tabs_state = JSON.stringify(this._get_state());
        },
        _get_state : function() {
            if(this.state)
                return this.state;

            var state = sessionStorage.er_tabs_state;
            if (state)
                this.state = JSON.parse(state);
            else
                this.state = {};

            return this.state;
        },
        _trigger_tab_common_sate_changed : function(new_state) {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(this.EVENT_TAB_COMMON_STATE_CHANGED, true, true, new_state);
            window.dispatchEvent(evt);
        },
        add_active_mode : function(mode) {
            var old_state = this.is_any_mode_active();

            this._get_state()[mode] = true;
            this._save_state_to_session_storage();

            var new_state = this.is_any_mode_active();
            if (old_state != new_state)
                this._trigger_tab_common_sate_changed(new_state);
        },
        delete_active_mode : function(mode) {
            var old_state = this.is_any_mode_active();

            delete this._get_state()[mode];
            this._save_state_to_session_storage();

            var new_state = this.is_any_mode_active();
            if (old_state != new_state)
                this._trigger_tab_common_sate_changed(new_state);
        },
        is_mode_active : function(mode) {
            return this._get_state()[mode];
        },
        is_any_mode_active : function() {
            var states = this._get_state();
            for(var mode in states) {
                if(states[mode])
                    return true;
            }
            return false;
        },
    };
/**
 * Created by Alex on 21.10.2016.
 */
var er_translator = window.er_translator || {
    lib : {
        common : {

        },
        main_view : {
            er_settings_selector : {
                none : { en : 'none', 'ru' : 'не выбраны', de : 'keine' },
                er_connect_in_search : { en : 'Connect 2nd contacts in search', 'ru' : 'Добавление новых контактов из поиска', de : 'Unter suchen neue Kontakte hinzufügen' },
                er_connect_selected_view : { en : 'Collect, Select & Invite 2nd & 3rd contacts', 'ru' : 'Собрать, Выбрать и Пришласить 2nd контакты', de : 'Unter suchen neue Kontakte hinzufügen' },
                er_endorse : { en : 'Endorse my contacts', 'ru' : 'Подтверждение навыков своих контактов', de : 'Kenntnisse meiner Kontakte bestätigen' },
                er_gen_settings : { en : 'General settings', 'ru' : 'Общие настройки', de : 'Einstellungen' },
                er_message_broadcast : { en : 'Message broadcast to 1st connections', 'ru' : 'Рассылка персональных сообщений', de : 'Nachricht senden' },
                er_license_view : { en : 'License', 'ru' : 'Лицензия', de : 'Lizenz' },
                er_user_signature : { en : 'My Signature', 'ru' : 'Моя подпись', de : 'Meine Signatur' },
                er_my_invites_canceler_view : { en : 'My invites canceller', 'ru' : 'Отменяльщик отправленных приглашений', de : 'Meine Einladungen stornieren' },
                er_video_help_view : { en : 'Video-tutorial & User Manual', 'ru' : 'Видео-инструкция', de : 'Video-Tutorial & Benutzerhandbuch' },
                er_debug_view : { en : 'Debug', 'ru' : 'Отлдака', de : 'Debug' },
                er_profiles_extractor_view : { en : 'Profiles extractor', 'ru' : 'Экстрактор профилей', de : 'Profilauszieher' },
                er_autovisitor_view : { en : 'Profiles Auto-Visitor', 'ru' : 'Авто-посещение профилей' },
                er_backup_view : { en : 'Backup Linked Helper Data', 'ru' : 'Backup Linked Helper Data' },
                er_my_account : { en : 'My Account (Linked Helper)', 'ru' : 'My Account (Linked Helper)' },
                er_install_lh_connector_view : { en : 'Install LH Connector add-on', 'ru' : 'Install LH Connector add-on' },
            }
        },
        er_connect_in_search : {
            messages : {
                go_to_search_page : {
                    en : 'Go to search page, choose \'people\' and Relationship = \'2nd connection\' and/or 3rd+. Setup other search filters and press \'Connect all in search\' button',
                    ru : 'Перейдите на страницу поиска, выберите people/люди и Relationship/Отношение = \'2nd connection\'. Укажите прочие критерии поиска и нажмите кнопку \'Запуск добавления контактов из поиска\'',
                    de : 'Auf Suche gehen und wählen \'Personen\' und Beziehungen = \'Kontakte 2. Grades\'. Auswahl Kriterien eingeben \'Verbinden Sie alle in der Suche\' Knopf'
                },
                no_last_search_page : {
                    en : 'There is no last search page. Please, click \'Connect all in search\' button',
                    ru : 'Отсутствует страница поиска. Пожалуйста, нажмите кнопку \'Запуск добавления контактов из поиска\'',
                    de : 'Keine Suchkriterien seite gefunden. Bitte dücken,\'Verbinden Sie alle in der Suche\' Knopf'
                },
                need_start_connect_all_on_this_page : {
                    en : 'Start connecting all people on this page?',
                    ru : 'Начать добалвение в контакты всех людей на данной странице?',
                    de : 'Möchten Sie sich mit allen Personen auf dieser Seite Verbinden?'
                },
                invitation_template_too_long : {
                    en : 'Your invitation template is too long! Max length is 300 characters.',
                    ru : 'Ваш шаблон сообщения приглашения слишком длинный! Максимальная длина 300 символов',
                    de : 'Ihre Einladungsvorlage ist zu lang! Die maximale Länge beträgt 300 Zeichen.'
                },
                reached_today_limit : {
                    en : 'You have reached day limit for connecting new contacts according your license plan. Please, write your request for unlimited license to info@linkedhelper.com',
                    ru : 'Вы уже достигли дневного лимита по рассылкам приглашений согласно Вашему лицензионному плану',
                    de : 'Sie haben das Tageslimit an Anfragen bereits aufgebraucht, möchten Sie zum Enterprise Abo wechseln?'
                },
                clear_all_sent_invites_list : {
                    en : 'Do you want to clear sent invitations\' list to invite the same people again?',
                    ru : 'Вы хотитте очистить список отправленных инвайтов, чтобы иметь возможность пригласить их еще раз?',
                    de : 'Vor u Jungs laden die CLEAR September Einladungen Blatt dann werden die Menschen wieder Sama?'
                },
                clear_all_excluded_contacts_list : {
                    en : 'Linked Helper excludes those contacts, which cannot be invited without providing their emails. If you want to be able invite them again, please, click "yes".',
                    ru : 'Linked Helper исключает те контакты, которые не могут быть приглашены без предоставления их электронной почты. Если вы хотитеиметь возможность приглашать их снова, пожалуйста, нажмите кнопку "да".',
                    de : 'Linked Helper schließt diese Kontakte aus, die nicht ohne Angabe ihrer E-Mails eingeladen werden können. Wenn Sie diese wieder einladen möchten, klicken Sie bitte auf "Yes".'
                },
                done : {
                    en : 'Done',
                    ru : 'Готово',
                    de : 'Erledigt'
                },
                limits_warning : {
                    en : 'Warning! High number of invites per day may cause profile restrictions',
                    ru : 'Внимание! Большое количество запросов на добавление за одинь день может привести к блокировке вашего аккаунта',
                    de : 'Warnung! Eine hohe Anzahl von Einladungen pro Tag kann zu Profilbeschränkungen führen'
                },
            }
        },
        message_broadcast_view : {
            messages : {
                delete_all : {
                    en : 'Do you really want to delete all collected & processed recipients to prepare for new broadcast?',
                    ru : 'Вы действительно хотите удалить всех собранных и обработанных получателей рассылки?',
                    de : 'Möchten Sie wirklich alle gesammelten und gesendeten Empfänger löschen, um sich auf neue vorzubereiten?'
                },
                delete_all_broadcated : {
                    en : 'Do you really want to delete all broadcated recipients (that already received your message)?',
                    ru : 'Вы действительно хотите удалить всех обработанных получателей рассылки?',
                    de : 'Möchten Sie wirklich alle Empfänger löschen (die Ihre Nachricht bereits erhalten haben?)'
                },
                delete_all_collected : {
                    en : 'Do you really want to delete all collected recipients?',
                    ru : 'Вы действительно хотите удалить всех собранных получателей рассылки?',
                    de : 'Möchten Sie wirklich alle gesammelten Empfänger löschen?'
                },
                go_to_search_page : {
                    en : 'Go to search page, choose \'people\' and Relationship = \'1nd connection\'. Setup other search filters and press \'Collect message recipients\' button',
                    ru : 'Перейдите на страницу поиска, выберите people/люди и Relationship/Отношение = \'1nd connection\'. Укажите прочие критерии поиска и нажмите кнопку \'Собрать получателей рассылки\'',
                    de : 'Gehen Sie zur Seite Suchen, wählen Sie\'Personen\' und Beziehungen = \'Direkte Kontakte\'. Richten Sie andere Suchtriterien ein und drücken Sie auf die Schaltfläche \'Sammeln von Nachrichtenempfänger\' Knopf'
                },
                need_begin_collect_recipients : {
                    en : 'Start collecting recipients for message broadcast?',
                    ru : 'Начать сбор получателей рассылки?',
                    de : 'Sammeln Sie Empfänger um Nachrichten zu versenden'
                },
                need_begin_broadcast : {
                    en : 'Start message broadcast?',
                    ru : 'Начать рассылку?',
                    de : 'Nachrichten versenden starten?'
                },
                reached_today_limit : {
                    en : 'You have reached day limit for message broadcast according your license plan. Please, write your request for unlimited license to info@linkedhelper.com',
                    ru : 'Вы уже достигли дневного лимита по рассылкам сообщение согласно Вашему лицензионному плану',
                    de : 'Sie haben das Tageslimit an Anfragen bereits aufgebraucht, möchten Sie zum Enterprise Abo wechseln?'
                },
                limits_warning : {
                    en : 'Warning! High number of messages to different contacts per day may cause profile restrictions',
                    ru : 'Внимание! Большое количество сообщений разным контактам за одинь день может привести к блокировке вашего аккаунта',
                    de : 'Warnung! Eine hohe Anzahl von Nachrichten an verschiedene Kontakte pro Tag kann zu Profilbeschränkungen führen'
                },
            },
        },
        message_broadcast_select_view : {
            messages : {
                close : {
                    en : 'Do you want to close and discard all changes?',
                    ru : 'Закрыть и отменить все изменения?',
                    de : 'Alle Änderungen verwerfen?'
                },
                save : {
                    en : 'Do you want to save all changes? Deselected contacts will be deleted from broadcast list.',
                    ru : 'Сохранить все измения? Не отмечанные контакты будут удалены из списка рассылки.',
                    de : 'Möchten Sie alle Änderugnen speichern? Ausgewählte Kontakte werden aus der sende Liste gelöscht.'
                },
                move_to_queue : {
                    en : 'Move selected contacts to Recipients Queue?',
                    ru : 'Переместить выбранные контакты в Очередь на рассылку?',
                    de : 'Verschieben Sie ausgewählte Kontakte zu Recipients Queue?'
                },
                move_to_processed : {
                    en : 'Move selected contacts to Processed Recipients List?',
                    ru : 'Переместить выбранные контакты в Список Обработанных Контактов?',
                    de : 'Versch. Ausgewählte Kontakte in die Verarbeitete Empfängerliste verschieben?'
                },
                move_to_excluded : {
                    en : 'Move selected contacts to Excluded Contacts List?',
                    ru : 'Переместить выбранные контакты в Список исключений?',
                    de : 'Ausgewählte Kontakte in die Liste Ausgeschlossene Kontakte verschieben?'
                },
            },
        },
        er_endorse_view : {
            messages : {
                need_begin_endorse : {
                    en : 'Begin endorsement of your contacts\' skills from current page?',
                    ru : 'Начать подтверждение навыков Ваших контактов начиная с текущей старницы?',
                    de : 'Starten Sie die Kenntnisbestätigung Ihrer Kontakte\' von der aktuellen Seite?'
                },
                need_begin_collect_for_endorse : {
                    en : 'Start collecting your contacts for endorsement?',
                    ru : 'Начать сбор Ваших контактов для дальнейшего подтверждения их навыков?',
                    de : 'Start der Kenntnisbestätigung Ihrer Kontakte?'
                },
                limits_warning : {
                    en : 'Warning! High number of page views per day may cause profile restrictions',
                    ru : 'Внимание! Большое количество просмотров профилей за одинь день может привести к блокировке вашего аккаунта',
                    de : 'Warnung! Eine hohe Anzahl an Seitenzugriffen pro Tag kann zu Profilbeschränkungen führen'
                },
            }
        },
        er_license_view : {
            messages : {
                license_key_incorrect : {
                    en : 'Inserted license key is incorrect',
                    ru : 'Введен некорретный лицензионный ключ',
                    de : 'Lizenz ist abgelaufen oder ungültig'
                },
                need_license : {
                    en : 'Please, insert your new license key. To request new license send your Secret Key to info@linkedhelper.com',
                    ru : 'Пожалуйста, укажите лицензионный ключ',
                    de : 'Bitte, Neue Lizenz einfügen'
                },
            }
        },
        er_profiles_extractor_view : {
            select_list : {
                create_new : { en : '...CREATE NEW', ru : '...Создать новый', de : '...Erstelle neu' }
            },
            messages : {
                list_already_exists : {
                    en : 'List already exists',
                    ru : 'Список уже существует',
                    de : 'Liste existiert bereits'
                },
                go_to_search_page : {
                    en : 'Go to search page, choose \'people\' and Relationship = \'1nd connection\'. Setup other search filters (or go to my connections page) and press \'Collect contacts for export\' button',
                    ru : 'Перейдите на страницу поиска, выберите people/люди и Relationship/Отношение = \'1nd connection\'. Укажите прочие критерии поиска и нажмите кнопку \'Собрать получателей для экспорта\'',
                    de : 'Gehen Sie zur Seite Suchen, wählen Sie\'Personen\' und Beziehungen = \'Direkte Kontakte\'. Richten Sie andere Suchtriterien ein und drücken Sie auf die Schaltfläche \'Sammeln Sie Kontakte für den Export\' Knopf'
                },
                limits_warning : {
                    en : 'Warning! High number of page views per day may cause profile restrictions',
                    ru : 'Внимание! Большое количество просмотров профилей за одинь день может привести к блокировке вашего аккаунта',
                    de : 'Warnung! Eine hohe Anzahl an Seitenzugriffen pro Tag kann zu Profilbeschränkungen führen'
                },
            }
        },
        ER_Widget_Delete_Active_Profiles_List : {
            messages : {
                need_delete_list : { en : 'Do you want to delete profiles list "{PROFILES_LIST}"?'}
            },
        },

        ER_Widget_Broadcasts_Selector : {
            select_broadcast : {
                create_new : { en : '...CREATE NEW', ru : '...Создать новую', de : '...Erstelle neu' }
            },
        },
        ER_Broadcast_Control_View : {
            array_name : {
                recipients : { en : 'Recipients Queue', ru : 'Очередь получателей', de : 'Empfänger-Warteschlange' },
                processed : { en : 'Processed Recipients', ru : 'Обработанные получатели', de : 'Verarbeitete Empfänger' },
                excluded : { en : 'Excluded Recipients', ru : 'Исключенные контакты', de : 'Ausgeschlossene Empfänger' },
            },
            messages : {
                add_to : {
                    en : 'Add contacts from [{source_broadcast_id}].[{source_array_name}] to [{target_broadcast_id}].[{target_array_name}]?',
                    ru : 'Добавить контакты из списка {source_array_name} рассылки {source_broadcast_id} в список {target_array_name} рассылки {target_broadcast_id}?',
                    de : 'Fügen Sie Kontakte aus [{source_broadcast_id}][{source_array_name}] zu [{target_broadcast_id}].[{target_array_name}]?'
                },
                replace_to : {
                    en : 'Replace contacts list [{target_broadcast_id}].[{target_array_name}] by contacts from [{source_broadcast_id}].[{source_array_name}]?',
                    ru : 'Заменить контакты в списке {target_array_name} рассылки {target_broadcast_id} контактами из списка {source_array_name} рассылки {source_broadcast_id}',
                    de : '[{target_broadcast_id}].[{target_array_name}] durch Kontakte aus [{source_broadcast_id}].[{source_array_name}]?'
                },
                remove_the_same : {
                    en : 'Delete contacts from list [{target_broadcast_id}].[{target_array_name}], which already exists in [{source_broadcast_id}].[{source_array_name}]?',
                    ru : 'Удалить контакты из списка {target_array_name} рассылки {target_broadcast_id}, которые уже присутствуют в списке {source_array_name} рассылки {source_broadcast_id}',
                    de : 'Löschen von Kontakten aus der Liste [{target_broadcast_id}]. [{target_array_name}], die bereits in [{source_broadcast_id}] vorhanden ist. [{source_array_name}]?'
                },
            }
        },
        ER_Widget_Delete_Active_Broadcast : {
            messages : {
                need_delete_broadcast : { en : 'Do you want to delete broadcast "{BROADCAST_NAME}"? All collected, processed & excluded recipients, message template will be deleted!'}
            },
        },
        ER_Widget_New_Autovisit_List : {
            messages : {
                list_exists : {
                    en : 'List with such name already exists',
                    ru : 'Список с таким именем уже существует'
                }
            }
        },
        ER_Widget_Autovisit_Selector : {
            select_autovisit_list : {
                create_new : { en : '...CREATE NEW', ru : '...Создать новую', de : '...Erstelle neu' }
            },
        },
        ER_Widget_Autovisit_Collect : {
            messages : {
                go_to_search_page : {
                    en : 'Go to search page, choose \'people\' and setup other search filters and press \'Collect contacts for auto-visiting\' button',
                    ru : 'Перейдите на страницу поиска, выберите people/люди. Укажите прочие критерии поиска и нажмите кнопку \'Собрать контакты для авто-посещения\'',
                },
            }
        },
        ER_Widget_Autovisit_Visit : {
            messages : {
                limits_warning : {
                    en : 'Warning! High number of page views per day may cause profile restrictions',
                    ru : 'Внимание! Большое количество просмотров профилей за одинь день может привести к блокировке вашего аккаунта',
                    de : 'Warnung! Eine hohe Anzahl an Seitenzugriffen pro Tag kann zu Profilbeschränkungen führen'
                },
            }
        },
        ER_Widget_Autovisit_Queue_Proc_Excl : {
            messages : {
                move_from_queue_to_excluded_dialog : {
                    en : 'Move selected contacts to Excluded list?',
                    ru : 'Переместить выбранные контакты в список Исключений',
                },
                move_from_excluded_to_queue_dialog : {
                    en : 'Move selected contacts to Auto-visiting list?',
                    ru : 'Переместить выбранные контакты в список Авто-посещений',
                },
            }
        },
        ER_Widget_Delete_Auto_Visit : {
            messages : {
                need_delete_list : { en : 'Do you want to delete auto-visiting list "{LIST_NAME}"?'}
            },
        },
        ER_Widget_Connect_Selector : {
            select_connect_list : {
                create_new : { en : '...CREATE NEW', ru : '...Создать новую', de : '...Erstelle neu' }
            },
        },
        ER_Widget_Connect_Collect : {
            messages : {
                go_to_search_page : {
                    en : 'Go to search page, choose \'people\' and Relationship = 2nd and 3rd connections. Setup other search filters and press \'Collect for inviting\' button',
                    ru : 'Перейдите на страницу поиска, выберите people/люди и Relationship/Отношение = \'2nd connection\'. Укажите прочие критерии поиска и нажмите кнопку \'Собрать для приглашения\'',
                },
            }
        },
        ER_Widget_Connect_Queue_Proc_Excl : {
            messages : {
                move_from_queue_to_excluded_dialog : {
                    en : 'Move selected contacts to Excluded list?',
                    ru : 'Переместить выбранные контакты в список Исключений',
                },
                move_from_excluded_to_queue_dialog : {
                    en : 'Move selected contacts to Inviting Queue?',
                    ru : 'Переместить выбранные контакты в очередь на приглашение',
                },
                move_from_queue_to_processed_dialog : {
                    en : 'Move selected contacts to Invited list? Please, note that these contacts will not be invited by Linked Helper',
                    ru : 'Переместить выбранные контакты в список Приглашенных',
                },
                move_from_processed_to_queue_dialog : {
                    en : 'Move selected contacts to Queue?',
                    ru : 'Переместить выбранные контакты в очередь на приглашение',
                },
                move_from_processed_to_excluded_dialog : {
                    en : 'Move selected contacts to Excluded list?',
                    ru : 'Переместить выбранные контакты в список Исключений',
                },
                move_from_excluded_to_processed_dialog : {
                    en : 'Move selected contacts to Invited list?',
                    ru : 'Переместить выбранные контакты в список Приглашенных',
                },
            }
        },
        ER_Widget_Connect_Invite : {
            messages : {
                limits_warning : {
                    en : 'Warning! High number of sent invites per day may cause profile restrictions',
                    ru : 'Внимание! Большое количество отправленных приглашений за одинь день может привести к блокировке вашего аккаунта',
                },
            }
        },
        ER_Widget_Delete_Connect_List : {
            messages : {
                need_delete_list : { en : 'Do you want to delete auto_inviting list "{LIST_NAME}"?'}
            },
        },
        ER_Widget_Message_Template : {
            messages : {
                template_too_long : {
                    en : 'The message is too long!',
                    ru : 'Сообщение слишком длинное',
                },
            }
        },
        ER_Widget_Backup_Download : {
            messages : {
                not_for_this_license : {
                    en : 'Your license type doesn\'t allows you to export Linked Helper data!',
                },
            }
        },
        ER_Widget_Restore_from_Backup : {
            messages : {
                not_for_this_license : {
                    en : 'Your license type doesn\'t allows you to restore Linked Helper data!',
                },
            }
        },
    },

    get_text : function(group, subgroup, label, lang_id) {
        if(!lang_id)
            lang_id = er_gen_settings.get_current_language_id();

        var group_obj = this.lib[group];
        if(subgroup) {
            group_obj = group_obj[subgroup];
        }
        group_obj = group_obj[label];

        var text = group_obj[lang_id];
        if (!text)
            text = group_obj['en'];

        if(text != null && er_sale_control.get_current_sale_mode() == 'bsale') {
            //text = text.replace(/info@linkedhelper.com/g, 'info@linkedhelper.ch');
        }

        return text;
    }
};
/* #!/usr/bin/env node; */
/* jshint -W100 */
/**
 * @name      translit.js
 * @author    XGuest <xguest@list.ru>
 * @link      https://github.com/xguest/iso_9_js
 * @version   1.0.4
 * @copyright GPL applies.
 *            No warranties XGuest[28.03.2016/07:59:18] translit [ver.1.0.4]
 * #guid      {E7088033-479F-47EF-A573-BBF3520F493C}
 *
 * @description Прямая и обратная транслитерация
 *              Соответствует ISO 9:1995 и ГОСТ 7.79-2000 системы А и Б
 *
 * @param {String}  str транслитерируемая строка
 * @param {Number}  typ ± направление (тип) транслитерации
 *                      + прямая с латиницы в кирилицу
 *                      - обратная
 *                      system A = 1-диакритика;
 *                      system B = 2-Беларусь;3-Болгария;4-Македония;5-Россия;6-Украина;
 * @example
 * function example() {
*  var a, b = [
*     [],
*     ["Диакритика", "Съешь ещё этих мягких французских булок, да выпей же чаю!"],
*     ["Беларускую", "З'ясі яшчэ гэтых мяккіх французскіх булак, ды выпі ж чаю!"],
*     ["Български",  "Яжте повече от тези меки кифлички, но също така се пие чай!"],
*     ["Македонски", "Јадат повеќе од овие меки францускиот ролни, па пијат чај!"],
*     ["Русский",    "Съешь ещё этих мягких французских булок, да выпей же чаю!"],
*     ["Українська", "З'їж ще цих м'яких французьких булок, та випий же чаю!"]
*  ], c, d;
*  for(a = 1; a < b.length - 1; a++) {
*   c = b[a][0];                                       // Language
*   d = b[a][1];                                       // Source
*   e = translit(d, a);                                // Forward
*   console.log(
*    "%s - %s\nSource  : %s\nTranslit: %s\nReverse : %s\n",
*    c,                                                // Language
*    translit(c, a),                                   // Transliterated language
*    d,                                                // Source
*    e,                                                // Forward
*    translit(e, -1 * a)                               // Reverse
*   );
*  }
* };
 **/
function er_translit(str, typ) {
    var func = (function(typ) {
        /** Function Expression
         * Вспомогательная функция.
         *
         * FINISHED TESTED!
         * В ней и хотелось навести порядок.
         *
         * Проверяет направление транслитерации.
         * Возвращает массив из 2 функций:
         *  построения таблиц транслитерации.
         *  и пост-обработки строки (правила из ГОСТ).
         *
         * @param  {Number} typ
         * @return {Array}  Массив функций пред и пост обработки.
         **/
        function prep (a) {
            var write = [
                function(chr, row) {trantab[row] = chr;regarr.push(row);},
                function(row, chr) {trantab[row] = chr;regarr.push(row);}
            ][a];
            return function(col, row) {       // создаем таблицу и RegExp
                var chr = col[abs] || col[0];   // Символ
                if (chr) write(chr, row);       // Если символ есть
            }
        }
        var abs = Math.abs(typ);             // Абсолютное значение транслитерации
        if (typ === abs) {                   // Прямая транслитерация в латиницу
            str = str.replace(/(i(?=.[^аеиоуъ\s]+))/ig, '$1`'); // "i`" ГОСТ ст. рус. и болг.
            return [prep(0),                   // Возвращаем массив функций
                function(str) {                  // str - транслируемая строка.
                    return str.replace(/i``/ig, 'i`').    // "i`" в ГОСТ ст. рус. и болг.
                        replace(/((c)z)(?=[ieyj])/ig, '$1'); // "cz" в символ "c"
                }];
        } else {                             // Обратная транслитерация в кириллицу
            str = str.replace(/(c)(?=[ieyj])/ig, '$1z'); // Правило сочетания "cz"
            return [prep(1),function(str) {return str;}];// nop - пустая функция.
        }
    }(typ));
    var iso9 = {                           // Объект описания стандарта
        // Имя - кириллица
        //   0 - общие для всех
        //   1 - диакритика         4 - MK|MKD - Македония
        //   2 - BY|BLR - Беларусь  5 - RU|RUS - Россия
        //   3 - BG|BGR - Болгария  6 - UA|UKR - Украина
        /*-Имя---------0-,-------1-,---2-,---3-,---4-,----5-,---6-*/
        '\u0449': [   '', '\u015D',   '','sth',   '', 'shh','shh'], // 'щ'
        '\u044F': [   '', '\u00E2', 'ya', 'ya',   '',  'ya', 'ya'], // 'я'
        '\u0454': [   '', '\u00EA',   '',   '',   '',    '', 'ye'], // 'є'
        '\u0463': [   '', '\u011B',   '', 'ye',   '',  'ye',   ''], //  ять
        '\u0456': [   '', '\u00EC',  'i', 'i`',   '',  'i`',  'i'], // 'і' йота
        '\u0457': [   '', '\u00EF',   '',   '',   '',    '', 'yi'], // 'ї'
        '\u0451': [   '', '\u00EB', 'yo',   '',   '',  'yo',   ''], // 'ё'
        '\u044E': [   '', '\u00FB', 'yu', 'yu',   '',  'yu', 'yu'], // 'ю'
        '\u0436': [ 'zh','\u017E'],                                 // 'ж'
        '\u0447': [ 'ch','\u010D'],                                 // 'ч'
        '\u0448': [ 'sh', '\u0161',   '',   '',   '',    '',   ''], // 'ш'
        '\u0473': [   '','f\u0300',   '', 'fh',   '',  'fh',   ''], //  фита
        '\u045F': [   '','d\u0302',   '',   '', 'dh',    '',   ''], // 'џ'
        '\u0491': [   '','g\u0300',   '',   '',   '',    '', 'g`'], // 'ґ'
        '\u0453': [   '', '\u01F5',   '',   '', 'g`',    '',   ''], // 'ѓ'
        '\u0455': [   '', '\u1E91',   '',   '', 'z`',    '',   ''], // 'ѕ'
        '\u045C': [   '', '\u1E31',   '',   '', 'k`',    '',   ''], // 'ќ'
        '\u0459': [   '','l\u0302',   '',   '', 'l`',    '',   ''], // 'љ'
        '\u045A': [   '','n\u0302',   '',   '', 'n`',    '',   ''], // 'њ'
        '\u044D': [   '', '\u00E8', 'e`',   '',   '',  'e`',   ''], // 'э'
        '\u044A': [   '', '\u02BA',   '', 'a`',   '',  '``',   ''], // 'ъ'
        '\u044B': [   '',      'y', 'y`',   '',   '',  'y`',   ''], // 'ы'
        '\u045E': [   '', '\u01D4', 'u`',   '',   '',    '',   ''], // 'ў'
        '\u046B': [   '', '\u01CE',   '', 'o`',   '',    '',   ''], //  юс
        '\u0475': [   '', '\u1EF3',   '', 'yh',   '',  'yh',   ''], //  ижица
        '\u0446': [ 'cz',     'c'],                                 // 'ц'
        '\u0430': [ 'a'],                                           // 'а'
        '\u0431': [ 'b'],                                           // 'б'
        '\u0432': [ 'v'],                                           // 'в'
        '\u0433': [ 'g'],                                           // 'г'
        '\u0434': [ 'd'],                                           // 'д'
        '\u0435': [ 'e'],                                           // 'е'
        '\u0437': [ 'z'],                                           // 'з'
        '\u0438': [   '',      'i',   '',  'i',  'i',   'i', 'y`'], // 'и'
        '\u0439': [   '',      'j',  'j',  'j',   '',   'j',  'j'], // 'й'
        '\u043A': [ 'k'],                                           // 'к'
        '\u043B': [ 'l'],                                           // 'л'
        '\u043C': [ 'm'],                                           // 'м'
        '\u043D': [ 'n'],                                           // 'н'
        '\u043E': [ 'o'],                                           // 'о'
        '\u043F': [ 'p'],                                           // 'п'
        '\u0440': [ 'r'],                                           // 'р'
        '\u0441': [ 's'],                                           // 'с'
        '\u0442': [ 't'],                                           // 'т'
        '\u0443': [ 'u'],                                           // 'у'
        '\u0444': [ 'f'],                                           // 'ф'
        '\u0445': [  'x',     'h'],                                 // 'х'
        '\u044C': [   '', '\u02B9',  '`',  '`',   '',   '`',  '`'], // 'ь'
        '\u0458': [   '','j\u030C',   '',   '',  'j',    '',   ''], // 'ј'
        '\u2019': [ '\'','\u02BC'],                                 // '’'
        '\u2116': [  '#']                                           // '№'
        /*-Имя---------0-,-------1-,---2-,---3-,---4-,----5-,---6-*/
    }, regarr = [], trantab = {};
    /* jshint -W030 */                     // Создание таблицы и массива RegExp
    for (var row in iso9) {if (Object.hasOwnProperty.call(iso9, row)) {func[0](iso9[row], row);}}
    /* jshint +W030 */
    return func[1](                        // функция пост-обработки строки (правила и т.д.)
        str.replace(                       // Транслитерация
            new RegExp(regarr.join('|'), 'gi'),// Создаем RegExp из массива
            function(R) {                      // CallBack Функция RegExp
                if (R.toLowerCase() === R) {     // Обработка строки с учетом регистра
                    return trantab[R];
                } else {
                    return trantab[R.toLowerCase()].toUpperCase();
                }
            })).replace('`', '');
}

/**
 * Created by Alex on 30.08.2016.
 */
var er_utils = window.er_utils || {
    months_short_names : ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"],
    get_month_short_name : function(month) {
        return this.months_short_names[month];
    },

    get_object_copy : function(obj) {
        var copy = {}, key;
        var keys = Object.keys(obj);

        for(var i=0; i<keys.length; i++) {
            key = keys[i];
            copy[key] = obj[key];
        }
        return copy;
    },

    escape_url : function(url) {
        //url = encodeURI(url);
        //url = url.replace(new RegExp('~', 'g'), '%7E');
        return url;
    },

    /**
     * Возвращает рандномный Int
     * @param min
     * @param max
     * @returns {*}
     */
    getRandomInt : function(min, max) {
        return Math.floor(Math.random() * (max - min)) + min;
    },

    string_replace_all : function(str, searchString, replacementString) {
        //return str.replace(new RegExp(searchString, 'g'), replacementString);
        return str.split(searchString).join(replacementString);
    },
    string_replace_all_arr : function(str, searchStrings, replacementString) {
        var result = str;
        for(var i=0; i<searchStrings.length; i++) {
            result = this.string_replace_all(result, searchStrings[i], replacementString);
        }
        return result;
    },

    imitate_writing : function (string,jq, callback){
        (function writer(i){
            if(string.length <= i++){
                jq.val(string);
                jq.keyup();
                if(callback)
                    callback();
                return;
            }
            jq.val(string.substring(0,i));
            jq.focusout().keyup().change().focus().keyup();
            jq.scrollTop(jq[0].scrollHeight);
            if( jq.val()[jq.val().length-1] != " " ) jq.focus();
            var rand = Math.floor(Math.random() * (50)) + 90;
            setTimeout(function(){writer(i);},rand);
        })(0)
    },
    imitate_writing_deferred : function(string,jq)     {
        var deferred = $.Deferred();

        this.imitate_writing(string, jq, deferred.resolve.bind(deferred));

        return deferred.promise();
    },
    insert_message : function (string,jq, callback) {
        jq.focusout().keyup().change().focus().keyup();
        jq.val(string);
        jq.focusout().keyup().change().focus().keyup();
        callback();
    },
    insert_message_deferred : function (string,jq) {
        var deferred = $.Deferred();

        this.insert_message(string, jq, deferred.resolve.bind(deferred));

        return deferred.promise();
    },
    CONST_MODE_IMITATE_WRITING : 1,
    CONST_MODE_INSERT_MESSAGE : 2,
    insert_or_imitate_writing : function(string,jq, mode, callback) {
        if(mode == this.CONST_MODE_INSERT_MESSAGE)
            this.insert_message(string,jq, callback);
        else
            this.imitate_writing(string,jq, callback);
    },
    insert_or_imitate_writing_deferred : function(string,jq, mode) {
        var deferred = $.Deferred();

        this.insert_or_imitate_writing(string, jq, mode, deferred.resolve.bind(deferred));

        return deferred.promise();
    },

    getLongestWord : function(str) {
        str = str.replace(new RegExp('\n|\t', 'g'), ' ');
        var arr = str.split(' ');
        var result, length = 0;

        if(arr.length > 0) {
            result = arr[0];
            length = result.length;
        }

        for(var i= 1, curr, curr_length; i<arr.length; i++) {
            curr = arr[i];
            curr_length = curr.length;
            if(curr_length > length) {
                length = curr_length;
                result = curr;
            }
        }

        return result;
    },
    wait_promise : function(timeout) {
        var deferred = $.Deferred();
        setTimeout(function() { deferred.resolve() }, timeout);
        return deferred.promise();
    },
    scroll_to_element_promise : function(jq_element, timeout) {
        console.log('START scroll_to_element_promise jq_element.length='+jq_element.length+'; timeout='+timeout);
        if(!timeout)
            timeout = 0;

        var deferred = $.Deferred();
        if(jq_element == null || jq_element.length == 0) {
            deferred.resolve();
            return deferred.promise();
        }

        var scrollTop = jq_element.offset().top - $('#extended-nav').height();
        $("html, body").animate({ scrollTop: scrollTop }, "fast");

        setTimeout(function() {
                deferred.resolve();
                console.log('RESOLVE scroll_to_element_promise');
            },
            timeout);

        return deferred.promise();
    },

    scroll_to_top : function() {
        var deferred = $.Deferred();

        $("html, body").animate({ scrollTop: 0}, "fast");
        setTimeout(function(){
            deferred.resolve();
        }, 300);

        return deferred.promise();
    },

    scroll_to_top_and_then_to_bottom_by_screens : function() {
        var deferred = $.Deferred();

        this.scroll_to_top().
            then(this.scroll_page_down_by_screens.bind(this))
            .then(deferred.resolve.bind(this));

        return deferred.promise();
    },

    scroll_page_down_by_screens : function(deferred, attempts) {
        var that = this;

        if(typeof attempts == 'undefined')
            attempts = 3;

        if(!deferred) {
            deferred = $.Deferred();
            console.log('START scroll_page_down_by_screens');
        } else {
            console.log('CONTINUE scroll_page_down_by_screens');
        }

        var jq_window = $(window);
        console.log('jq_window.scrollTop() : ' + jq_window.scrollTop());
        console.log('jq_window.height() : ' + jq_window.height());
        var jq_document = $(document);
        console.log('jq_document.height() : ' + jq_document.height());
        if(jq_window.scrollTop() + $(window).height() + 10 >= jq_document.height()) {
            if(attempts > 1) {
                var new_attempts;
                if (document.webkitHidden || document.hidden) {
                    new_attempts = attempts;
                } else {
                    new_attempts = attempts - 1;
                }

                setTimeout(function(){ that.scroll_page_down_by_screens(deferred, new_attempts) }, 500);
            } else {
                deferred.resolve();
                console.log('END scroll_page_down_by_screens');
            }
        } else {
            $("html, body").animate({ scrollTop: jq_window.scrollTop() + jq_window.height() }, "fast");
            setTimeout(function(){ that.scroll_page_down_by_screens(deferred, attempts) }, 500);
        }

        return deferred.promise();
    },
    /**
     * Скролит страницу в вниз указанное число раз
     * с таймаутом и рандомит время между скролом.
     * @param count
     */
    scroll_down : function(count) {
        if (count < 0)
            return;
        var scrollTop = $(document).height();
        $("html, body").animate({ scrollTop: scrollTop }, "fast");
        console.log('scrollTop '+scrollTop);
        var that = this;
        setTimeout(function() {that.scroll_down(--count) }, that.getRandomInt(300, 1000) );
    },
    scroll_down_promise : function(timeout) {
        var deferred = $.Deferred();

        var scrollTop = $(document).height();
        $("html, body").animate({ scrollTop: scrollTop }, "fast");
        console.log('scrollTop '+scrollTop);
        setTimeout(function(){ deferred.resolve() }, timeout);

        return deferred.promise();
    },

    get_profile_url_from_pub_url_promise : function(pub_url) {
        er_logger.log('START get_profile_url_from_pub_url_promise pub_url='+pub_url);
        /*pub_url = this.add_www_if_need(pub_url);
        er_logger.log('add_www_if_need pub_url='+pub_url);*/

        pub_url = this.adjust_subdomain(pub_url);
        er_logger.log('adjust_subdomain pub_url='+pub_url);

        that = this;

        var deferred = $.Deferred();

        var req = new XMLHttpRequest();
        req.open('GET', pub_url);

        req.onreadystatechange = function() {//Call a function when the state changes.
            if(req.readyState == XMLHttpRequest.DONE) {
                if(req.status == 200) {
                    er_logger.log('RESOLVE SUCCESS get_profile_url_from_pub_url_promise URL='+req.responseURL);
                    deferred.resolve(req.responseURL);
                } else {
                    er_logger.log('ERROR get_profile_url_from_pub_url_promise');
                    var subdomain = that.get_url_subdomain(pub_url);
                    if(subdomain == 'www') {
                        pub_url = that.get_url_without_subdomain(pub_url);
                        subdomain = that.get_url_subdomain(pub_url);
                    }

                    er_logger.log('get_profile_url_from_pub_url_promise subdomain = '+subdomain);

                    if(!subdomain) {
                        er_logger.log('RESOLVE ERROR get_profile_url_from_pub_url_promise');
                        deferred.resolve();
                    } else {
                        var pub_url_without_subdomain = that.get_url_without_subdomain(pub_url);
                        that.get_profile_url_from_pub_url_promise(pub_url_without_subdomain)
                            .then(deferred.resolve.bind(deferred));
                    }
                }
            }
        };
        req.send();

        return deferred.promise();
    },

    get_url_subdomain : function(url) {
        var pref = '://';
        var sufix = 'linkedin.com';

        var prefix_start = url.indexOf(pref);
        if(prefix_start < 0)
            return null;
        var sufix_start = url.indexOf(sufix);
        if(sufix_start < 0)
            return null;

        var subdomain = url.substring(prefix_start+pref.length, sufix_start);
        if(subdomain.length == 0)
            return null;

        return subdomain.substring(0, subdomain.length-1);
    },
    get_url_without_subdomain : function(url) {
        var pref = '://';
        var sufix = 'linkedin.com';

        var prefix_start = url.indexOf(pref);
        if(prefix_start < 0)
            return url;
        var sufix_start = url.indexOf(sufix);
        if(sufix_start < 0)
            return url;

        var subdomain = url.substring(prefix_start+pref.length, sufix_start);
        if(subdomain.length == 0)
            return url;

        return url.substring(0, prefix_start+pref.length) + url.substring(sufix_start);
    },
    is_url_under_www : function(url) {
        var subdomain = this.get_url_subdomain(url);
        return subdomain == 'www';
    },
    is_current_page_under_www : function() {
        return this.is_url_under_www(window.location.href);
    },
    add_www_to_url : function(url) {
        if(this.is_url_under_www(url))
            return url;
        var pref = '://';
        var prefix_start = url.indexOf(pref);
        var split_pos = prefix_start+pref.length;
        return url.substring(0, split_pos) + 'www.' + url.substring(split_pos);
    },
    add_www_if_need : function(url) {
        var is_page_under_www = this.is_current_page_under_www();
        var is_url_under_www = this.is_url_under_www(url);

        if( (is_page_under_www && is_url_under_www) || (!is_page_under_www && !is_url_under_www))
            return url;

        if(is_page_under_www) {
            return this.add_www_to_url(url);
        } else {
            return this.get_url_without_subdomain(url);
        }
    },
    adjust_subdomain : function(url) {
        var curr_subdomain = this.get_url_subdomain(window.location.href);
        var url_subdomain = this.get_url_subdomain(url);
        if(curr_subdomain == url_subdomain)
            return url;
        if(curr_subdomain) {
            var pref = '://';
            var sufix = 'linkedin.com';

            var prefix_start = url.indexOf(pref);
            if(prefix_start < 0)
                return url;
            var sufix_start = url.indexOf(sufix);
            if(sufix_start < 0)
                return url;

            return url.substring(0, prefix_start+pref.length) + curr_subdomain + '.' + url.substring(sufix_start);
        } else {
            return this.get_url_without_subdomain(url);
        }
    },

    /**
     * Возвращает URL профиля контакта на странице списка контактов
     * @param jq_contact_item_view (карточка контакта)
     * @returns {*}
     */
    get_profile_url_from : function(jq_contact_item_view) {
        return jq_contact_item_view.find('a.image').attr('href');
    },
    /**
     * Возвращает ID профиля контакта на странице списка контактов
     * @param jq_contact_item_view (карточка контакта)
     * @returns {*}
     */
    get_profile_id_from : function(jq_contact_item_view) {
        return this.get_profile_id_from_url(this.get_profile_url_from(jq_contact_item_view));
    },
    /**
     * Возвращает ID профиля контакта на странице списка контактов
     * @param url (профиля контакта)
     * @returns {*}
     */
    get_profile_id_from_url : function(url) {
        var search_str = "id=";
        var search_str_length = search_str.length;
        var start = url.indexOf(search_str);
        var end = url.indexOf('&', start+search_str_length);
        return url.substring(start+search_str_length, end);
    },
    /**
     * /sales/profile/290094067,-L50,NAME_SEARCH?moduleKey=peopleSearchResults&pageKey=sales-search3-people-refinement&contextId=982A3E256B43A31480E62C54822B0000&requestId=9d5f1a8f-f307-4d2a-a18d-b908a1b643df&action=CLICK&target=urn%3Ali%3AsalesLead%3A(-1%2C290094067)&pageNumber=0&targetEl=profilelink&position=0&trk=lss-serp-result-lead_photo
     * @param url
     * @private
     */
    get_profile_id_from_sale_navigator_profile_url : function(url) {
        if (!url)
            return null;
        var prefix = '/sales/profile/';
        var prefix_pos = url.indexOf(prefix);
        var id_start = prefix_pos + prefix.length;
        var first_comma = url.indexOf(',', id_start);
        var second_comma = url.indexOf(',', first_comma+1);
        return url.substring(id_start, second_comma+1);
    },
    get_profile_url_from_sale_navigator_profile_id : function(id) {
        return 'https://www.linkedin.com/sales/profile/'+id;
    },

    _ns_get_profile_url_by_id : function(id) {
        return 'https://www.linkedin.com/in/'+id + '/';
    },
    _sn_get_profile_url_by_id : function(id) {
        return 'https://www.linkedin.com/sales/profile/'+id;
    },
    _old_get_profile_url_by_id : function(id) {
        return 'https://www.linkedin.com/profile/view?id='+id;
    },

    /**
     * Возвращает русское написание для английского написания имени.
     * Если промепить не смогло, то вернет оригинал
     *
     * @param eng_name
     * @returns {*}
     */
    convert_name_eng_to_rus : function(eng_name) {
        var name = eng_name.toLocaleLowerCase();
        name = er_map_names[name];
        if (name)
            return name;
        else
            return eng_name;
    },

    convert_name_eng_to_rus_with_null : function(eng_name) {
        var name = eng_name.toLocaleLowerCase();
        name = er_map_names[name];
        if (name)
            return name;
        else
            return null;
    },

    my_index_of : function(arr, el) {
        var indexOf = arr.indexOf(el);
        if (indexOf >= 0)
            return indexOf;
        eln = Number(el);
        if (isNaN(eln))
            return -1;
        else
            return arr.indexOf(eln);
    },
    /**
     * Возвращает уникальные элементы массива arr1
     *
     * @param arr1
     * @param arr2
     * @returns {Array}
     */
    get_array_uniq : function(arr1, arr2) {
        var result = [];

        for(var i= 0, el, eln; i<arr1.length; i++) {
            el = arr1[i];
            eln = Number(el);
            if(arr2.indexOf(el) < 0
                && (isNaN(eln) || arr2.indexOf(eln) < 0)
            )
                result.push(el);
        }

        return result;
    },
    get_array_intersection : function(arr1, arr2) {
        var result = [];

        for(var i= 0, el; i<arr1.length; i++) {
            el = arr1[i];
            if(arr2.indexOf(el) >= 0)
                result.push(el)
        }

        return result;
    },
    get_array_reverted : function(arr) {
        var result = [];

        for(var i=arr.length-1; i >=0; i--) {
            result.push(arr[i]);
        }

        return result;
    },

    shuffle_array : function (array) {
        var currentIndex = array.length, temporaryValue, randomIndex;

        // While there remain elements to shuffle...
        while (0 !== currentIndex) {

            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;

            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }

        return array;
    },

    get_array_merge : function(arr1, arr2) {
        var result = [];
        for(var i=0; i<arr1.length; i++) {
            result.push(arr1[i]);
        }

        for(var i= 0, el; i<arr2.length; i++) {
            el = arr2[i];
            if(er_utils.my_index_of(result, el) < 0)
                result.push(el);
        }

        return result;
    },

    is_tab_hidden : function() {
        return document.webkitHidden || document.hidden;
    },

    /**
     * Delete null attributes from object
     *
     * @param obj {Object}
     */
    clear_nulls_attrs_from_object : function(obj) {
        for(var key in obj) {
            if(obj[key] === null)
                delete obj[key];
        }
    },

    checkMail : function(mail) {
        var emailCheck=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;
        return emailCheck.test(mail);
    },
    /* Добавляет к числу @num нули слева, чтобы длина строки стала @size */
    addLeftZeros : function pad(num, size) {
        var s = num+"";
        while (s.length < size) s = "0" + s;
        return s;
    },
    datetimeServerToJSDate : function(datetimeFrom) {
        return new Date(datetimeFrom.replace(/ /g, 'T'));
    },
    datetimeServerToUser : function(datetimeFrom, options) {
        if (options == null)
            options = {};
        if (options.timeFirst == null)
            options.timeFirst = false;
        if (options.needSeconds == null)
            options.needSeconds = true;

        //var date = new Date(datetimeFrom.replace(/ /g, 'T'));
        var date = this.datetimeServerToJSDate(datetimeFrom);
        /*var strTime = this.addLeftZeros(date.getHours(), 2) + ":" + this.addLeftZeros(date.getMinutes(),2);
         if (options.needSeconds)
         strTime += ":" + this.addLeftZeros(date.getSeconds(),2);
         var strDate = date.getFullYear() + '-'+ this.addLeftZeros(date.getDate(), 2) + '-'+ this.addLeftZeros((date.getMonth()+1), 2);

         if (options.timeFirst)
         return strTime + ' ' + strDate;
         else
         return strDate + ' ' + strTime;*/

        return this.datetimeJSToUser(date, options);
    },
    datetimeJSToUser : function(datetimeFrom, options) {
        options = options ? options : {};
        var strTime = this.addLeftZeros(datetimeFrom.getHours(), 2) + ":" + this.addLeftZeros(datetimeFrom.getMinutes(),2);
        if (options.needSeconds)
            strTime += ":" + this.addLeftZeros(datetimeFrom.getSeconds(),2);
        //var strDate = datetimeFrom.getFullYear() + '-'+ this.addLeftZeros((datetimeFrom.getMonth()+1), 2) + '-'+ this.addLeftZeros(datetimeFrom.getDate(), 2);
        var strDate = this.addLeftZeros(datetimeFrom.getDate(), 2) + ' '+ this.get_month_short_name(datetimeFrom.getMonth()) + ' '+ datetimeFrom.getFullYear();

        if (options.timeFirst)
            return strTime + ' ' + strDate;
        else
            return strDate + ' ' + strTime;
    },
    datetimeUserToServer : function(dateTime) {
        dateTime = dateTime.replace(/T/g, ' ');
        var colon_count = (dateTime.match(/:/g) || []).length;
        if(colon_count == 1)
            dateTime += ':00';
        return dateTime;
    },
    datetimeJSToServer : function(date) {
        var strDate = date.getFullYear() + '-'+ this.addLeftZeros((date.getMonth()+1), 2)  + '-'+ this.addLeftZeros(date.getDate(), 2);
        var strTime = this.addLeftZeros(date.getHours(), 2) + ":" + this.addLeftZeros(date.getMinutes(),2) + ":" + this.addLeftZeros(date.getSeconds(),2);
        return strDate + ' ' + strTime;
    },
    datetime_input_to_js : function(date) {
        return new Date(date);
    },
    datetime_js_to_input : function(datetimeFrom) {
        var strTime = this.addLeftZeros(datetimeFrom.getHours(), 2) + ":" + this.addLeftZeros(datetimeFrom.getMinutes(),2)+":" + this.addLeftZeros(datetimeFrom.getSeconds(),2);
        var strDate = datetimeFrom.getFullYear() + '-'+ this.addLeftZeros((datetimeFrom.getMonth()+1), 2) + '-'+ this.addLeftZeros(datetimeFrom.getDate(), 2);

        return strDate+'T'+strTime;
    },
    /**
     * Разница в минутах между date1 и date2
     *
     * @param date1 {Date}
     * @param date2 {Date}
     * @returns {*|number}
     */
    date_diff_in_minutes : function(date1, date2) {
        return Math.round((((date2-date1) % 86400000) % 3600000) / 60000);
    },

    phone_getInternalFormat : function(phone_in_external_format) {
        return phone_in_external_format.replace(/[^0-9+]/g,'').replace(/\++/, '+');
    },
    phone_getExternalFormat : function(phone_in_internal_format) {
        if (this.phone_getInternalFormat(phone_in_internal_format))
            return '+' + this.phone_getInternalFormat(phone_in_internal_format)
                    .replace(/\+*(\d{1})(\d{3})(\d{3})(\d{2})(\d{2})/, "$1 $2 $3-$4-$5");
        else
            return "";
    },

    getParameterByName : function(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    },

    getArrayOfStringsInLowerCase : function(source_arr) {
        var arr = [];
        for(var i=0; i<source_arr.length; i++) {
            arr.push(source_arr[i].toLowerCase())
        }

        return arr;
    },

    is_my_connections_page : function() {
        return window.location.href.indexOf('linkedin.com/mynetwork/invite-connect/connections') >= 0;
    },
    is_profile_page : function() {
        var href = window.location.href;
        return this.is_linkedin_profile_url(href);
    },
    is_linkedin_profile_url : function(url) {
        return url.indexOf('linkedin.com/in/') >= 0
            || url.indexOf('linkedin.com/profile/') >= 0
            || url.indexOf('linkedin.com/pub/') >= 0
            || url.indexOf('linkedin.com/sales/profile/') >= 0;
    },
    is_linkedin_profile_pub_url : function(url) {
        return url.indexOf('linkedin.com/pub/') >= 0;
    },

    is_new_search_page : function() {
        var href = window.location.href;
        return this.is_new_style_page() && href.indexOf('linkedin.com/search/') >= 0;
    },
    is_sales_navigator_page : function() {
        var href = window.location.href;
        return href.indexOf('linkedin.com/sales/') >= 0 || href.indexOf('linkedin.com/sales?') >= 0;
    },
    is_sales_navigator_search_page : function() {
        var href = window.location.href;
        return href.indexOf('linkedin.com/sales/search') >= 0;
    },
    is_sales_navigator_profile_page : function() {
        var href = window.location.href;
        return href.indexOf('linkedin.com/sales/profile/') >= 0;
    },
    is_sales_navigator_profile_id : function(id) {
        var first_comma_pos = id.indexOf(',');
        if (first_comma_pos <= 0)
            return false;
        var second_comma_pos = id.indexOf(',', first_comma_pos+1);
        return second_comma_pos > 0;
    },
    is_sales_navigator_error_page : function() {
        if(this.is_sales_navigator_page()) {
            var class_html = $('#main').attr('class');
            if (class_html)
                return class_html.indexOf('error') >=0
        }
        return false;
    },

    /**
     * Возвращает true, если текущая страница нового стиля
     * */
    is_new_style_page : function() {
        if (typeof window.er_is_new_style_page !== 'undefined') {
            //console.log('is_new_style_page : ' + window.er_is_new_style_page);
            return window.er_is_new_style_page;
        } else {
            window.er_is_new_style_page = $('#extended-nav').length == 1;
            if(window.ga) {
                ga('set', 'dimension5', window.er_is_new_style_page ? 'new' : 'old');
            }
            var href = window.location.href;
            if (href.indexOf('linkedin.com/sales') < 0)
                localStorage.er_is_new_style_page = window.er_is_new_style_page;
            //console.log('is_new_style_page : ' + window.er_is_new_style_page);
            return window.er_is_new_style_page;
        }
    },
    is_cached_as_new_style_page : function() {
        return localStorage.er_is_new_style_page == 'true';
    },

    get_profile_id_from_url_profile_page : function(url) {
        if (!url)
            return null;
        var full_pref = 'linkedin.com/in/';
        var index_of_full_pref = url.indexOf(full_pref);
        if (index_of_full_pref < 0) {
            full_pref = 'linkedin.com/profile/';
            index_of_full_pref = url.indexOf(full_pref);
            if (index_of_full_pref < 0) {
                full_pref = '/in/';
                index_of_full_pref = url.indexOf(full_pref);
                if (index_of_full_pref < 0) {
                    full_pref = '/profile/';
                    index_of_full_pref = url.indexOf(full_pref);
                    if (index_of_full_pref < 0) {
                        full_pref = '/pub/';
                        index_of_full_pref = url.indexOf(full_pref);
                    }
                }
            }
        }
        url = url.substring(index_of_full_pref + full_pref.length);
        var slash_pos = url.indexOf('/');
        if (slash_pos > 0)
            url = url.substring(0, slash_pos);

        var question_pos = url.indexOf('?');
        if (question_pos > 0)
            url = url.substring(0, question_pos);

        var name_search_pos = url.indexOf(',NAME_SEARCH');
        if (name_search_pos > 0)
            url = url.substring(0, name_search_pos+1);

        return url;
    },

        /**
         * Выаскивает из url полное имя юезера
         * /in/bernie-rudnick-5334a815/ -> bernie-rudnick-5334a815
          * @param url
         */
    get_profile_fullname_from_url : function(url) {
        return this.get_profile_id_from_url_profile_page(url);
        /*var full_pref = 'https://www.linkedin.com/in/';
        if(url.startsWith(full_pref))
            url = url.substring(full_pref.length);
        else if(url.startsWith('/in/'))
            url = url.substring(4);
        var slash_pos = url.indexOf('/');
        if (slash_pos > 0)
            url = url.substring(0, slash_pos);
        return url;*/
    },
    /**
     * Вытаскивает id юзера из карточки юзера в результате поиска
     * @param jq_people
     * @returns {*}
     * @private
     */
    get_profile_id_from_search_card : function(jq_people) {
        var id;
        if(this.is_new_style_page())
            id = this.get_profile_fullname_from_url(jq_people.find('a.search-result__result-link').first().attr('href'));
        else if(this.is_sales_navigator_search_page()) {
            var jq_profile_link = jq_people.find('.profile-link').first();
            var url = jq_profile_link.attr('href');
            //id = er_utils.get_profile_id_from_sale_navigator_profile_url(url);
            id = er_utils.get_profile_id_from_url_profile_page(url);
        } else
            id = jq_people.attr('data-li-entity-id');
        return id;
    },
    /**
     * https://www.linkedin.com/profile/view?id=ADEAAANtwrABp7qMRezZfxw7Io60ZJYw74kh4R0&authType=NAME_SEARCH&authToken=2FeM&locale=en_US&srchid=3712343161484690793776&srchindex=1&srchtotal=2&trk=vsrp_people_res_photo&trkInfo=VSRPsearchId%3A3712343161484690793776%2CVSRPtargetId%3A57524912%2CVSRPcmpt%3Aprimary%2CVSRPnm%3Atrue%2CauthType%3ANAME_SEARCH
     * ->
     * ADEAAANtwrABp7qMRezZfxw7Io60ZJYw74kh4R0
     *
     * @param jq_people
     *
     */
    get_string_id_from_old_style_profile_mini_card : function(jq_people) {
        var href = jq_people.find('a.title.main-headline').attr('href');
        var id_name = '?id=';
        var id_start = href.indexOf(id_name);
        href = href.substring(id_start+id_name.length);
        id_end = href.indexOf('&');
        if(id_end < 0)
            return href;
        else
            return href.substring(0, id_end);
    },
    /**
     * Парсит карточку пользователя из результатов поиска и возвращает в виде объекта
     * @param jq_people
     */
    get_profile_card_as_object : function(jq_people){
        var id = this.get_profile_id_from_search_card(jq_people);

        var dist = this.get_distance_from_new_mini_profile(jq_people);

        var fullname = jq_people.find('.actor-name-with-distance .name').text();
        if(!fullname || fullname.toLowerCase() == 'linkedin member') {
            return null;
        }

        var obj_first_last_name = this.get_firstname_lastname_from_fullname(fullname);


        var description = jq_people.find('.subline-level-1').text();
        var obj_position_company = this.get_position_company_from_description(description);

        var invite_sent = 1;
        if ('invite sent' == jq_people.find('.search-result__actions--primary').text().trim().toLowerCase())
            invite_sent = 1;
        else
            invite_sent = 0;

        return {
            id : id,
            fullname : fullname,
            firstname : obj_first_last_name.firstname,
            lastname : obj_first_last_name.lastname,
            url : jq_people.find('a.search-result__result-link').first().attr('href'),
            avatar : jq_people.find('.search-result__image').find('img').attr('src'),
            description : description,
            position : obj_position_company.position,
            company : obj_position_company.company,
            location : jq_people.find('.subline-level-2').text(),
            dist : dist,
            invite_sent : invite_sent
        };
    },

    get_distance_from_mini_profile : function(jq_people) {
        if(er_utils.is_new_search_page())
            return this.get_distance_from_new_mini_profile(jq_people);
        else if (er_utils.is_sales_navigator_search_page())
            return this.get_distance_from_sales_navigator_mini_profile(jq_people);
    },

    get_distance_from_new_mini_profile : function(jq_people) {
        var dist = jq_people.find('.dist-value');
        var dist_fch;
        if (dist != null && dist.length > 0) {
            //dist_fch = dist.first().text().trim()[0];
            dist = this.get_distance_from_text(dist.first().text());
        } else {
            dist = 10;
        }

        return dist;
    },
    get_distance_from_sales_navigator_mini_profile : function(jq_people) {
        var dist = jq_people.find('.degree-icon');
        var dist_fch;
        if (dist != null && dist.length > 0) {
            //dist_fch = dist.first().text().trim()[0];
            dist = this.get_distance_from_text(dist.first().text());
        } else {
            dist = 10;
        }

        return dist;
    },
    get_distance_from_text : function(dist_text) {
        var dist;
        if (dist_text != null && dist_text.length > 0) {
            dist_fch = dist_text.trim()[0];
            switch (dist_fch) {
                case '1' : dist = 1; break;
                case '2' : dist = 2; break;
                case '3' : dist = 3; break;
            }

        } else {
            dist = 10;
        }

        return dist;
    },

    get_firstname_lastname_from_fullname : function(fullname) {
        fullname = fullname.trim();

        var comma_pos = fullname.indexOf(',');
        if(comma_pos > 4) {
            fullname = fullname.substring(0, comma_pos);
        }

        var space_index = fullname.indexOf(' ');
        if(space_index < 0)
            return {firstname : fullname};
        var firstname = fullname.substring(0, space_index);
        var second_space_index = fullname.indexOf(' ', space_index+1);
        if(second_space_index < 0)
            return {firstname : firstname, lastname : fullname.substring(space_index+1)};
        var suffix = ['dr', 'dr.', 'phd', 'phd.', 'mr', 'mr.', 'doctor', 'miss', 'sir', 'lady', 'lord', 'master', 'mister', 'mrs', 'ms', 'mx', 'sire', 'madam', 'prof', 'professor', 'sr'];

        if(suffix.indexOf(firstname.toLocaleLowerCase()) < 0)
            return {firstname : firstname, lastname : fullname.substring(space_index+1)};
        else
            return {
                firstname : fullname.substring(space_index+1, second_space_index),
                lastname : fullname.substring(second_space_index+1)
            };
    },
    get_position_company_from_description : function(description) {
        var obj = {};
        if (description == null)
            return obj;

        var at = ' at ';

        var pos_first_at = description.indexOf(at);
        if (pos_first_at < 0)
            return obj;
        var pos_second_at = description.indexOf(at, pos_first_at+1);
        if (pos_second_at >= 0)
            return obj;

        obj.position = description.substring(0, pos_first_at);
        obj.company = description.substring(pos_first_at + at.length);

        return obj;
    },
    get_translated_firstname_from_people_mini_card : function(jq_people) {
        var fullname = jq_people.find('.actor-name-with-distance .name').text();
        return this.get_translated_firstname_from_fullname(fullname);
    },
    get_translated_firstname_lastname_from_people_mini_card : function(jq_people) {
        var fullname = jq_people.find('.actor-name-with-distance .name').text();
        return this.get_translated_firstname_lastname_from_fullname(fullname);
    },
    get_translated_firstname_from_fullname : function(fullname) {
        var obj = this.get_firstname_lastname_from_fullname(fullname);
        return this.guess_firstname(obj.firstname, obj.lastname);
    },
    guess_firstname : function(posible_firstname, posible_lastname) {
        var r_firstname, r_lastname;
        if (localStorage.er_names_eng_to_rus == 'true') {
            r_firstname = er_utils.convert_name_eng_to_rus(posible_firstname);
            r_lastname = posible_lastname ? er_utils.convert_name_eng_to_rus_with_null(posible_lastname) : null;
            if (r_lastname) {
                r_firstname = r_lastname;
            }
        } else if (localStorage.er_names_rus_to_eng == 'true')
            r_firstname = er_translit(posible_firstname, 5);
        else
            r_firstname = posible_firstname;
        //if(r_firstname.toLowerCase() )

        return r_firstname;
    },
    get_translated_firstname_lastname_from_fullname : function(fullname) {
        var obj = this.get_firstname_lastname_from_fullname(fullname);
        return this.guess_firstname_lastname(obj.firstname, obj.lastname);
    },
    guess_firstname_lastname : function(posible_firstname, posible_lastname) {
        var r_firstname, r_lastname, rez = {};
        if (localStorage.er_names_eng_to_rus == 'true') {
            r_firstname = er_utils.convert_name_eng_to_rus(posible_firstname);
            r_lastname = posible_lastname ? er_utils.convert_name_eng_to_rus_with_null(posible_lastname) : null;
            if (r_lastname) {
                rez.firstname = r_lastname;
                rez.lastname = r_firstname;
            } else {
                rez.firstname = r_firstname;
                rez.lastname = r_lastname;
            }
        } else if (localStorage.er_names_rus_to_eng == 'true') {
            rez.firstname = er_translit(posible_firstname, 5);
            rez.lastname = er_translit(posible_lastname, 5);
        } else {
            rez.firstname = posible_firstname;
            rez.lastname = posible_lastname;
        }

        return rez;
    },

    is_current_page_deleted_profile : function() {
        return 'unavailable' == er_utils.get_profile_fullname_from_url(window.location.href)
            || this.is_error_oops_its_not_you_its_we()
            || (this.is_sales_navigator_page() && er_sn_profile_helper.is_profile_page_error());
    },
    is_error_oops_its_not_you_its_we : function() {
        if(er_utils.is_new_style_page()) {
            var jq_btn_try_again = $('button.error-action');
            return jq_btn_try_again.length > 0;
        }
    },

    is_my_contacts_page : function() {
        var href = window.location.href;

        return href.indexOf('linkedin.com/connected/') >= 0
            || href.indexOf('linkedin.com/mynetwork/invite-connect/connections/') >= 0;
    },

    message_generator : function(message_template, variables, defaults) {
        defaults = defaults || {};

        var firstlastname = this.guess_firstname_lastname(variables.firstname, variables.lastname);

        var message = this.string_replace_all_arr(
            message_template,
            [
                '{firstname}', '{ firstname}', '{firstname }', '{first name}', '{ first name}', '{first name }',
                '{Firstname}', '{ Firstname}', '{Firstname }', '{First name}', '{ First name}', '{First name }',
                '[firstname]', '[ firstname]', '[firstname ]', '[first name]', '[ first name]', '[first name ]',
                '[Firstname]', '[ Firstname]', '[Firstname ]', '[First name]', '[ First name]', '[First name ]',
                '(firstname)', '( firstname)', '(firstname )', '(first name)', '( first name)', '(first name )',
                '(Firstname)', '( Firstname)', '(Firstname )', '(First name)', '( First name)', '(First name )'
            ],
            firstlastname.firstname);

        message = this.string_replace_all_arr(
            message,
            [
                '{lastname}', '{ lastname}', '{lastname }', '{last name}', '{ last name}', '{last name }',
                '{Lastname}', '{ Lastname}', '{Lastname }', '{Last name}', '{ Last name}', '{Last name }',
                '[lastname]', '[ lastname]', '[lastname ]', '[last name]', '[ last name]', '[last name ]',
                '[Lastname]', '[ Lastname]', '[Lastname ]', '[Last name]', '[ Last name]', '[Last name ]',
                '(lastname)', '( lastname)', '(lastname )', '(last name)', '( last name)', '(last name )',
                '(Lastname)', '( Lastname)', '(Lastname )', '(Last name)', '( Last name)', '(Last name )'
            ],
            firstlastname.lastname);

        /*var message = message_template
            .replace(/{firstname}/g,firstlastname.firstname)
            .replace(/{ firstname}/g,firstlastname.firstname)
            .replace(/{ firstname }/g,firstlastname.firstname)
            .replace(/{firstname }/g,firstlastname.firstname)
            .replace(/{first name}/g,firstlastname.firstname)
            .replace(/{ first name}/g,firstlastname.firstname)
            .replace(/{ first name }/g,firstlastname.firstname)
            .replace(/{first name }/g,firstlastname.firstname)
            .replace(/{lastname}/g,firstlastname.lastname)
            .replace(/{ lastname}/g,firstlastname.lastname)
            .replace(/{ lastname }/g,firstlastname.lastname)
            .replace(/{lastname }/g,firstlastname.lastname)
            .replace(/{last name}/g,firstlastname.lastname)
            .replace(/{ last name}/g,firstlastname.lastname)
            .replace(/{ last name }/g,firstlastname.lastname)
            .replace(/{last name }/g,firstlastname.lastname);*/

        var company = variables.company || defaults.company;
        company = company == null ? '' : company;

        /*message = message
            .replace(/{company}/g,company)
            .replace(/{ company}/g,company)
            .replace(/{ company }/g,company);*/

        message = this.string_replace_all_arr(
            message,
            [
                '{company}', '{ company}', '{company }',
                '[company]', '[ company]', '[company ]',
                '(company)', '( company)', '(company )'
            ],
            company);

        var position = variables.position || defaults.position;
        position = position == null ? '' : position;

        /*message = message
            .replace(/{position}/g,position)
            .replace(/{ position}/g,position)
            .replace(/{ position }/g,position);*/

        message = this.string_replace_all_arr(
            message,
            [
                '{position}', '{ position}', '{position }',
                '[position]', '[ position]', '[position ]',
                '(position)', '( position)', '(position )'
            ],
            position);

        return message;
    },

    generate_fake_email : function(firstname, lastname) {
        if(!firstname)
            firstname = '';
        if(!lastname)
            lastname = '';
        firstname = firstname.replace(new RegExp(' ', 'g'), '');
        lastname = lastname.replace(new RegExp(' ', 'g'), '');

        var email;
        email = firstname;
        if(email == '') {
            if(lastname == '') {
                email = 'br'+this.getRandomInt(100, 100000);
            } else {
                email = lastname;
            }
        } else {
            if(lastname != '')
                email = email +'.'+ lastname;

            email = email + '198' + this.getRandomInt(1, 9);
        }
        email += '@';
        switch (this.getRandomInt(1, 3)) {
            case 1 : email += 'yahoo.com'; break;
            case 2 : email += 'gmail.com'; break;
            case 3 : email += 'hotmail.com'; break;
        }

        return email;
    },
};
/**
 * Created by Alex on 16.03.2017.
 */
var er_utils_file = window.er_utils_file || {
        export_file : function(filename, text, file_type) {
            var pom = document.createElement('a');

            csvData = new Blob([text], { type: file_type });
            var csvUrl = URL.createObjectURL(csvData);

            //pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            pom.setAttribute('href', csvUrl);
            pom.setAttribute('download', filename);

            if (document.createEvent) {
                var event = document.createEvent('MouseEvents');
                event.initEvent('click', true, true);
                pom.dispatchEvent(event);
            }
            else {
                pom.click();
            }
        },
    };
/**
 * Created by Alex on 30.08.2016.
 */
er_main_view = window.er_main_view || {
    EVENT_MAIN_VIEW_SETTINGS_SHOW : 'ER_EVENT_MAIN_VIEW_SETTINGS_SHOW',
    jq_main : null,
    jq_er_body : null,
    jq_er_modes_cont : null,
    jq_er_sub_cont : null,
    jq_er_settings_selector : null,

    recheck_timeout : 1000,

    callbacks_on_click_mode_after_turn_on : {},

    modes : [
        /*{variable : 'er_search_next', title : 'Connect All in Search'},
        {variable : 'er_new_endorse_mode', title : 'Endorse contacts'},
        {variable : 'er_message_broadcast', title : 'Message broadcast'},
        {variable : 'er_message_job_search_next', title : 'Search contacts for message broadcast'},
        {variable : 'er_search_next', pos : 0, title : ''},
        {variable : 'er_new_endorse_mode', pos : 0, title : ''},*/
        {variable : 'er_message_job_search_next', pos : 0, title : ''},
        {variable : 'er_message_broadcast', pos : 0, title : ''},
    ],
    sub_settings_types : {},

    init_main : function() {
        if (this.inited || window.location.href.indexOf('https://www.linkedin.com/shareArticle') >= 0)
            return;

        if ($('#er_main').length > 0)
            return;

        this.modes.push({variable : 'er_connector_mode_collect', pos : 0, title : ''});
        this.modes.push({variable : 'er_connect_inviter_mode', pos : 0, title : ''});

        this.modes.push({variable : 'er_autovisitor_mode_collect', pos : 1, title : ''});
        this.modes.push({variable : 'er_autovisitor_mode_visit', pos : 1, title : ''});
        this.modes.push({variable : 'er_profiles_mode_collect_from_search', pos : 1, title : ''});
        this.modes.push({variable : 'er_profile_extract_mode', pos : 1, title : ''});

        this.modes.push({variable : 'er_search_next', pos : 2, title : ''});
        this.modes.push({variable : 'er_endorse_mode_collect', pos : 2, title : ''});
        this.modes.push({variable : 'er_new_endorse_mode', pos : 2, title : ''});
        this.modes.push({variable : 'er_user_signature_mode', pos : 2, title : ''});

        /*if (er_utils.is_new_style_page()
            || er_utils.is_sales_navigator_page() && er_utils.is_cached_as_new_style_page()) {
            this.modes.push({variable : 'er_connector_mode_collect', pos : 0, title : ''});
            this.modes.push({variable : 'er_connect_inviter_mode', pos : 0, title : ''});

            this.modes.push({variable : 'er_autovisitor_mode_collect', pos : 1, title : ''});
            this.modes.push({variable : 'er_autovisitor_mode_visit', pos : 1, title : ''});
            this.modes.push({variable : 'er_profiles_mode_collect_from_search', pos : 1, title : ''});
            this.modes.push({variable : 'er_profile_extract_mode', pos : 1, title : ''});

            this.modes.push({variable : 'er_search_next', pos : 2, title : ''});
            this.modes.push({variable : 'er_endorse_mode_collect', pos : 2, title : ''});
            this.modes.push({variable : 'er_new_endorse_mode', pos : 2, title : ''});
            this.modes.push({variable : 'er_user_signature_mode', pos : 2, title : ''});
        } else {
            this.modes.push({variable : 'er_search_next', pos : 0, title : ''});
            this.modes.push({variable : 'er_new_endorse_mode', pos : 0, title : ''});
            this.modes.push({variable : 'er_user_signature_mode', pos : 1, title : ''});
        }*/

        this.jq_main = $(this._HTML_build_main());
        this.jq_main.appendTo($('body').first());

        this.jq_er_tab_status = this.jq_main.children('.er_header').find('.er_tab_status');

        this.jq_er_body = this.jq_main.find('.er_body');
        this.jq_er_modes_cont = this.jq_er_body.find('.er_modes_cont');
        this.jq_list_switchers_cont = this.jq_er_modes_cont.find('.list_switchers_cont');
        this.jq_er_sub_cont = this.jq_er_body.find('.er_sub_cont');
        this.jq_er_settings_selector = this.jq_er_body.find('.er_settings_selector');

        this.jq_license_info = this.jq_main.find('.license_info');

        this._set_collapsed(this._is_collapsed());

        this._add_handlers();

        this.closure_recheck_modes_state = this._recheck_modes_state.bind(this);
        setTimeout(this.closure_recheck_modes_state, this.recheck_timeout);

        document.addEventListener(er_gen_settings.EVENT_LANGUAGE_CHANGED, this._on_EVENT_LANGUAGE_CHANGED.bind(this));
        window.addEventListener(er_tabs_control.EVENT_TAB_COMMON_STATE_CHANGED, this._on_EVENT_TAB_COMMON_STATE_CHANGED.bind(this));
        document.dispatchEvent(new Event('er_main_view_ready_for_sub_view'));

        window.addEventListener(
            'EVENT_LK_INSERTED',
            this._on_EVENT_LK_INSERTED.bind(this),
            false);

        window.addEventListener(
            'EVENT_LK_INVALID',
            this._on_EVENT_LK_INVALID.bind(this),
            false);

        this.inited = true;
    },
    _HTML_build_main : function() {
        var tab_status = er_tabs_control.is_any_mode_active() ? 'tab_active' : '';
        var html_class_new_interface = er_utils.is_new_style_page() ? ' new-interface' : '';
        var html = '<div id="er_main" class="er_main'+html_class_new_interface+' '+tab_status+'" data-lang="'+er_gen_settings.get_current_language_id()+'">';

        html += this._HTML_build_header();
        html += this._HTML_build_body();
        /*html += '<a class="user_manual" target="_blank" href="https://drive.google.com/open?id=0BwIBOuOHC0GuZjhLd2xxNEJNekU">User manual</a>';*/

        html += '</div>';
        return html;
    },
    _HTML_build_header : function() {
        var tab_status = er_tabs_control.is_any_mode_active() ? 'active' : '';
        var html = '<div class="er_header">';

        html += '<span class="er_tab_status '+tab_status+'"></span>';
        html += '<span class="er_app_name">Linked Helper</span>';
        html += this._HTML_license_info();
        html += '<span class="click_to_hide"></span>';
        html += '<div class="er_login_status_cont"></div>';
        html += '<div class="er_drag_me">drag me</div>';

        html += '</div>';

        return html;
    },
    _HTML_build_body : function() {
        var html = '<div class="er_body">';

        html += this._HTML_build_modes_cont();
        html += this._HTML_settings_selector();
        html += '<div class="er_sub_cont"></div>';

        html += this._HTML_build_body_subbotom();

        /*html += '<a class="user_manual" target="_blank" href="https://drive.google.com/open?id=0BwIBOuOHC0GuZjhLd2xxNEJNekU">User manual</a>';*/

        html += '</div>';
        return html;
    },
    _HTML_build_body_subbotom : function() {
        var html = '<div class="er_subbotom">';

        html += '<span class="er_cell left">';
        html += '<a class="help jim-sm-bsale" target="_blank" href="mailto:info@linkedhelper.ch"></a>';
        html += '<a class="help jim-sm-default" target="_blank" href="mailto:info@linkedhelper.com"></a>';
        html += '</span>';

        html += '<span class="er_cell center">';
        html += '<span class="collapse"></span>';
        html += '</span>';

        html += '<span class="er_cell right">';
        html += '<a class="user_manual jim-sm-bsale" target="_blank" href="https://drive.google.com/open?id=0BwIBOuOHC0Gucmg2OHEwdF9CZzg">User manual</a>';
        html += '<a class="user_manual jim-sm-default" target="_blank" href="https://medium.com/linked-helper">User manual</a>';
        html += '</span>';

        html += '</div>';

        return html;
    },
    _HTML_build_modes_cont : function() {
        var html = '<div class="er_modes_cont">';
        html += this._HTML_build_modes_list_switchers_cont();

        for(var i=0; i<this.modes.length; i++) {
            html += this._HTML_build_mode_cont(this.modes[i]);
        }

        html += '</div>';
        return html;
    },
    _HTML_build_modes_list_switchers_cont : function() {
        var html = '<span class="list_switchers_cont">';

        var ids = [];
        for (var i= 0, pos; i<this.modes.length; i++) {
            pos = this.modes[i].pos;
            if (ids.indexOf(pos) < 0) {
                ids.push(pos);
                html += this._HTML_build_modes_list_switcher_btn(pos);
            }
        }

        html += '</span>';
        return html;
    },
    _HTML_build_modes_list_switcher_btn : function(pos) {
        //var name = String.fromCharCode(65 + pos);
        var sub_name;
        switch (pos + 1) {
            case 1 : sub_name = '1st'; break;
            case 2 : sub_name = '2nd'; break;
            case 3 : sub_name = '3rd'; break;
        }
        var name = sub_name + ' Tab : ';
        var enabledCounter = 0;
        for (var i= 0, mode; i<this.modes.length; i++) {
            mode = this.modes[i];
            if(mode.pos == pos && localStorage[mode.variable] == 'true') {
                ++enabledCounter;
            }
        }
        var hasActive = enabledCounter > 0 ? 'hasActive' : '';
        var selected = pos == 0 ? 'selected' : '';

        return '<span class="list_switcher_btn '+selected+' '+hasActive+'" data-pos="'+pos+'">'+name+'<span class="counter">'+enabledCounter+'</span></span>';
    },
    _HTML_build_mode_cont : function(mode) {
        var er_off = localStorage[mode.variable] == 'true' ? '' : 'er_off';
        var hidden = mode.pos == 0 ? '' : 'hidden';
        return '<div class="er_mode_cont er_state_toggle '+er_off+' '+hidden+'" data-variable="'+mode.variable+'" data-pos="'+mode.pos+'"><span class="title">'+mode.title+'</span></div>';
    },
    _HTML_settings_selector : function() {
        var lang_id = er_gen_settings.get_current_language_id();
        var title = er_translator.get_text('main_view', 'er_settings_selector', 'none', lang_id);
        return '<p class="label choose_settings"></p><select class="er_settings_selector"><option value="none">'+title+'</option></select>';
    },
    _HTML_settings_selector_option : function(value, tittle) {
        var lang_id = er_gen_settings.get_current_language_id();
        var new_tittle = er_translator.get_text('main_view', 'er_settings_selector', value, lang_id);
        if (!new_tittle)
            new_tittle = tittle;

        return '<option value="'+value+'">'+new_tittle+'</option>';
    },
    _HTML_license_info : function() {
        return '<span class="license_info"><span class="license_type"></span><span class="days"></span></span>';
    },
    _add_handlers : function() {
        var jq_header = this.jq_main.children('.er_header');

        this.er_main_ui_draggable = new ER_UI_Draggable({
            jq_draggable : this.jq_main,
            jq_event_provider : jq_header,
        });
        jq_header.click(this._on_click_er_header.bind(this));

        this.jq_main.children('.er_body').children('.er_subbotom').find('.collapse').click(this._on_click_er_header.bind(this));

        this._add_handlers_modes_cont(this.jq_main.find('.er_modes_cont'));
        this._add_handlers_er_settings_selector();

        new ER_W_Login_Status({jq_parent : jq_header.children('.er_login_status_cont')});

        var evtL = document.createEvent("CustomEvent");
        evtL.initCustomEvent('EVENT_GET_LK_INFO', true, true,
            this._update_license_info_widget.bind(this));
        window.dispatchEvent(evtL);
    },
    _add_handlers_modes_cont : function(jq_modes_cont) {
        var that = this;
        this.jq_list_switchers_cont.find('.list_switcher_btn').click(function(){ that._on_list_switcher_btn_click($(this)) });
        jq_modes_cont.find('.er_mode_cont').click(function() { that._on_click_mode_cont($(this)) });
    },
    _add_handlers_er_settings_selector : function() {
        this.jq_er_settings_selector.change(this._on_change_er_settings_selector.bind(this));
    },
    add_sub_setting : function(type, tittle, jq_container) {
        if (this.sub_settings_types[type])
            return;
        this._add_settings_selector_option(type, tittle);
        jq_container.addClass(type);
        jq_container.addClass('er_hidden');
        jq_container.appendTo(this.jq_er_sub_cont);
        this.sub_settings_types[type] = {type : type, tittle : tittle, jq_container : jq_container};
    },
    _add_settings_selector_option : function(type, tittle) {
        $(this._HTML_settings_selector_option(type, tittle)).appendTo(this.jq_er_settings_selector);
    },

    _add_callback_on_click_mode_after_turn_on : function(type, callback) {
        this.callbacks_on_click_mode_after_turn_on[type] = callback;
    },

    _recheck_modes_state : function () {
        var pos_to_count = {};

        for (var i= 0, jq_mode_state, mode; i<this.modes.length; i++) {
            mode = this.modes[i];

            if (pos_to_count[mode.pos] == null)
                pos_to_count[mode.pos] = 0;

            jq_mode_state = this.jq_er_modes_cont.children('.er_mode_cont[data-variable='+mode.variable+']');
            if (localStorage[mode.variable] == 'true') {
                if (jq_mode_state.hasClass('er_off')) {
                    jq_mode_state.removeClass('er_off')
                }
                pos_to_count[mode.pos] += 1;
            } else {
                if (!jq_mode_state.hasClass('er_off')) {
                    jq_mode_state.addClass('er_off')
                }
            }
        }

        var jq_list_switcher;
        for (pos in pos_to_count) {
            jq_list_switcher = this.jq_list_switchers_cont.find('.list_switcher_btn[data-pos='+pos+']');
            jq_list_switcher.find('.counter').text(pos_to_count[pos]);
            if (pos_to_count[pos] > 0)
                jq_list_switcher.addClass('hasActive');
            else
                jq_list_switcher.removeClass('hasActive');
        }

        setTimeout(this.closure_recheck_modes_state, this.recheck_timeout);
    },

    get_er_sub_cont : function() {
        return this.jq_er_sub_cont;
    },

    _translate_settings_selector : function() {
        var lang_id = er_gen_settings.get_current_language_id();
        var jq_options = this.jq_er_settings_selector.find('option');

        var jq_option;
        for(var i= 0; i<jq_options.length; i++) {
            jq_option = $(jq_options[i]);
            jq_option.text(er_translator.get_text('main_view', 'er_settings_selector', jq_option.attr('value'), lang_id));
        }
    },

    show_settings : function(type) {
        this.jq_er_settings_selector.val(type);
        this._show_settings_cont(type);
    },

    _show_settings_cont : function(type) {
        this.jq_er_sub_cont.children().addClass('er_hidden');
        var obj = this.sub_settings_types[type];
        if (obj != null) {
            obj.jq_container.removeClass('er_hidden');
        }
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(this.EVENT_MAIN_VIEW_SETTINGS_SHOW, true, true, type);
        window.dispatchEvent(evt);
    },

    /**
     * Показывает всплывающее окно с указанным сообщением
     *
     * @param message {string}
     * @private
     */
    _info_popup_show : function(message, options) {
        options = options ? options : {};

        var that = this;
        if (this.jqInfoPopup == null) {
            this.jqInfoPopup = $('<div class="b2c_info_popup"></div>').appendTo(this.jq_main).b2cpopup({
                html_content : '<p class="message"></p>',
                lightMode : true
            });
            this.jqInfoPopup.b2cpopup('getUserCont').click(function(event) { that.jqInfoPopup.b2cpopup('close'); });
        }
        this.jqInfoPopup.b2cpopup('getUserCont').text(message);
        this.jqInfoPopup.b2cpopup('show');

        if(options.close_timeout && options.close_timeout > 0) {
            setTimeout(function() {
                that.jqInfoPopup.b2cpopup('close');
            }, options.close_timeout);
        }
    },

    /**
     * Показать диалог 
     * @private
     */
    show_yes_no_dialog : function(message, onYes, onNo) {
        var jqDialog = $('<div class="delete_dialog"></div>').appendTo(this.jq_main);
        jqDialog.b2cpopupyesnodialog({
            message : message,
            onYes : onYes,
            onNo : onNo,
            onClose : function() { jqDialog.remove() }
        });
        jqDialog.b2cpopupyesnodialog('show');
    },

    _is_collapsed : function() {
        if(localStorage.er_main_view_is_collapsed == 'true')
            return true;
        else
            return false;
    },
    _set_collapsed : function(is_collapsed) {
        if (is_collapsed) {
            localStorage.er_main_view_is_collapsed = 'true';
            this.jq_er_body.addClass('er_hidden');
            this.jq_main.addClass('er_body_hidden');
            if (er_gen_settings.is_collapse_mode_minified()) {
                this.jq_main.addClass('minified_mode');
            } else {
                this.jq_main.removeClass('minified_mode');
            }
        } else {
            localStorage.er_main_view_is_collapsed = 'false';
            this.jq_er_body.removeClass('er_hidden');
            this.jq_main.removeClass('er_body_hidden');
        }
    },

    _change_counter_mode_switch_btn : function(pos, delta) {
        var jq_btn = this.jq_list_switchers_cont.find('.list_switcher_btn[data-pos='+pos+']');
        var jq_counter = jq_btn.find('.counter');
        var counter = Number(jq_counter.text());
        counter += delta;
        jq_counter.text(counter);
        if (counter > 0)
            jq_btn.addClass('hasActive');
        else
            jq_btn.removeClass('hasActive');
    },

    _update_license_info_widget : function(license_info) {
        if(license_info == null
            || license_info.valid_until == null
            || license_info.valid_until < (new Date).getTime()) {
            this.jq_license_info.addClass('er_lk_expired');
        } else {
            this.jq_license_info.removeClass('er_lk_expired');
            if(license_info.type) {
                this.jq_license_info.removeClass('hidden');
                this.jq_license_info.attr('data-license-type', license_info.type);
            } else {
                this.jq_license_info.addClass('hidden');
                this.jq_license_info.attr('data-license-type', '');
            }
            var days = Math.round((license_info.valid_until - (new Date()).getTime()) / 86400000);
            this.jq_license_info.find('.days').text(days);
        }
    },

    _on_click_er_header : function() {
        if(!this.er_main_ui_draggable.is_just_dragged())
            this._set_collapsed(!this._is_collapsed());
    },

    _on_click_mode_cont : function(jq_mode_cont) {
        var that = this;

        var variable = jq_mode_cont.attr('data-variable');
        var newValue = jq_mode_cont.hasClass('er_off');

        if (newValue) {
            if ('er_user_signature_mode' == variable) {
                localStorage[variable] = newValue;
                jq_mode_cont.removeClass('er_off');
                that._change_counter_mode_switch_btn(jq_mode_cont.attr('data-pos'),1);
                if (that.callbacks_on_click_mode_after_turn_on[variable])
                    that.callbacks_on_click_mode_after_turn_on[variable]()
            } else {
                var evtPK = document.createEvent("CustomEvent");
                evtPK.initCustomEvent('EVENT_IS_LK_VALID', true, true,
                    function(result) {
                        if (result) {
                            localStorage[variable] = newValue;
                            jq_mode_cont.removeClass('er_off');
                            that._change_counter_mode_switch_btn(jq_mode_cont.attr('data-pos'),1);
                            if (that.callbacks_on_click_mode_after_turn_on[variable])
                                that.callbacks_on_click_mode_after_turn_on[variable]()
                        }
                    }
                );
                window.dispatchEvent(evtPK);
            }
        } else {
            localStorage[variable] = newValue;
            er_tabs_control.delete_active_mode(variable);
            jq_mode_cont.addClass('er_off');
            this._change_counter_mode_switch_btn(jq_mode_cont.attr('data-pos'),-1);
        }
    },
    _on_list_switcher_btn_click : function(jq_btn) {
        if(jq_btn.hasClass('selected'))
            return;
        var jq_old_btn = this.jq_list_switchers_cont.find('.list_switcher_btn.selected').removeClass('selected');
        var old_pos = jq_old_btn.attr('data-pos');
        this.jq_er_modes_cont.find('.er_mode_cont[data-pos='+old_pos+']').addClass('hidden');

        jq_btn.addClass('selected');
        var new_pos = jq_btn.attr('data-pos');
        this.jq_er_modes_cont.find('.er_mode_cont[data-pos='+new_pos+']').removeClass('hidden');
    },
    _on_change_er_settings_selector : function() {
        var jq_option = this.jq_er_settings_selector.find('option:selected');
        var type = jq_option.attr('value');
        this._show_settings_cont(type);
    },
    _on_EVENT_LANGUAGE_CHANGED : function(event) {
        this.jq_main.attr('data-lang', er_gen_settings.get_current_language_id());

        this._translate_settings_selector();
    },
    _on_EVENT_TAB_COMMON_STATE_CHANGED : function(event) {
        var is_active = event.detail;
        if(is_active) {
            this.jq_er_tab_status.addClass('active');
            this.jq_main.addClass('tab_active');
        } else {
            this.jq_er_tab_status.removeClass('active');
            this.jq_main.removeClass('tab_active');
        }
    },
    _on_EVENT_LK_INSERTED : function(event) {
        this._update_license_info_widget(event.detail);
    },
    _on_EVENT_LK_INVALID : function() {
        this._update_license_info_widget(null);
    },
};
/**
 * Created by erinsasha on 31/07/16.
 */
var er = window.er || {
    init_from_local_storage : function() {

    },

    on_start : function() {
        if (this.started)
            return;

        if (!window.er_indexeddb
            || !window.er_logger
            || !window.er_storage
            || !window.er_tabs_control
            || !window.er_autovisitor_db
            || !window.er_inviteddb
            || !window.er_broadcast_db
            || !window.er_profilesdb
            || !window.er_mini_profiles_db
            || !window.er_profiles_list_db
            || !window.er_profiles_list_of_list_db
            || !window.er_sn_ids_map_db
            || !window.er_connect_list_db
            || !window.ER_Profile
            || !window.ER_Profile_Mini
            || !window.ER_Profiles_List
            || !window.ER_Profiles_Mini_List
            || !window.er_universal_profile_helper
            || !window.er_profile_extractor
            || !window.er_profiles_list_control
            || !window.er_profiles_list_extract_from_search
            || !window.er_profile_extractor_my_connections_collector
            || !window.er_profiles_extractor_view
            || !window.ER_Widget_Delete_Active_Profiles_List
            || !window.er_profiles_common_csv
            || !window.er_sn_profile_helper
            || !window.er_sale_control
            || !window.er_debug
            || !window.er_debug_view
            || !$.fn.b2ctags
            || !$.fn.b2cpopup
            || !$.fn.b2cpopupyesnodialog
            || !$.fn.b2ctoggle
            || !ER_UI_Draggable
            || !window.ER_Widget_How_To
            || !window.ER_Textbox_Preview
            || !window.ER_Message_Defaults_Editor
            || !window.ER_Widget_New_Something
            || !window.ER_Widget_Queue_Proc_Excl
            || !window.ER_Widget_Message_Template
            || !window.er_search_page_helper
            || !window.er_license_limit
            || !window.er_my_invites_canceler
            || !window.er_my_invites_canceler_view
            || !window.er_connect_in_search
            || !window.er_main_view
            || !window.er_map_names
            || !window.er_message_broadcast
            || !window.er_broadcast_excluded
            || !window.er_broadcast_error
            || !window.er_broadcasted_recipients
            || !window.er_message_recipients
            || !window.er_broadcast_control
            || !window.ER_Broadcast
            || !window.ER_Broadcast_Control_View
            || !window.ER_Widget_New_Broadcast
            || !window.ER_Widget_Broadcasts_Selector
            || !window.ER_Widget_Broadcast_Array_Selector
            || !window.ER_Widget_Delete_Active_Broadcast
            || !window.er_message_broadcast_view
            || !window.er_translator
            || !window.er_translit
            || !window.er_people_you_may_know
            || !window.er_utils
            || !window.er_utils_file
            || !window.er_mars
            || !window.er_license_view
            || !window.er_user_signature
            || !window.er_user_signature_view
            || !window.er_autovisitor
            || !window.er_autovisitor_collector
            || !window.er_autovisitor_view
            || !window.ER_Widget_Autovisit_Collect
            || !window.ER_Widget_Autovisit_Visit
            || !window.ER_Widget_Autovisit_Export
            || !window.ER_Widget_New_Autovisit_List
            || !window.ER_Widget_Autovisit_Queue_Proc_Excl
            || !window.ER_Widget_Autovisit_Selector
            || !window.ER_Widget_Delete_Auto_Visit
            || !window.ER_AutoVisit_List
            || !window.er_autovisitor_lists_control
            || !window.er_connect_selected_collector
            || !window.er_connect_selected_inviter
            || !window.er_connect_selected_lists_control
            || !window.er_connect_selected_view
            || !window.er_connect_selected_timeouts
            || !window.ER_Connect_List
            || !window.ER_Widget_Connect_Collect
            || !window.ER_Widget_Connect_Invite
            || !window.ER_Widget_Inv_Message_Template
            || !window.ER_Widget_Connect_Queue_Proc_Excl
            || !window.ER_Widget_Connect_Selector
            || !window.ER_Widget_New_Connect_List
            || !window.ER_Widget_Connect_Export
            || !window.ER_Widget_Delete_Connect_List
            || !window.er_backup_exporter
            || !window.er_backup_importer
            || !window.er_backup_view
            || !window.er_backup_common_exporter
            || !window.er_backup_common_importer
            || !window.ER_Widget_Backup_Download
            || !window.ER_Widget_Restore_from_Backup
            || !window.er_broadcast_backup_export
            || !window.er_broadcast_backup_import
            || !window.er_autovisitor_backup_export
            || !window.er_autovisitor_backup_import
            || !window.er_connect_in_search_backup_export
            || !window.er_connect_in_search_backup_import
            || !window.er_connect_selected_backup_export
            || !window.er_connect_selected_backup_import
            || !window.er_endorse_backup_export
            || !window.er_endorse_backup_import
            || !window.er_profiles_extractor_backup_export
            || !window.er_profiles_extractor_backup_import
            || !window.er_user_signature_backup_export
            || !window.er_endorse_backup_import
            || !window.erlh_main
            || !window.erlh_curr_user
            || !window.ERLH_W_Main
            || !window.erlhclient
            || !window.er_install_lh_connector
            || !window.er_install_lh_connector_view
            || !window.ER_W_Timeout_Clock
            || !window.ER_W_Timeout_One_Setting
            || !window.ER_W_Timeout_Settings
            || !window.ERLH_W_Message
            || !this.is_endorse_object_loaded()
        ) {
            setTimeout(this.on_start.bind(this), 100);
            return;
        }

        this.started = true;

        er_storage.init();
        er_debug.init();

        //this.init_ga();

        erlhclient.init();
        er_sale_control.init();
        er_mars.init();

        this.init_from_local_storage();

        var that = this;

        er_autovisitor_lists_control.init();
        er_connect_selected_lists_control.init();

        er_license_limit.init()
            .then(er_broadcast_control.init.bind(er_broadcast_control))
            .then(er_endorse_control.init.bind(er_endorse_control))
            .then(function() {
                window.er_main_view.init_main();
                that.process_page();
                window.erlh_main.init({
                    linkedin_mode : true
                });
            });

    },

    process_page : function() {
        er_user_signature.process_page();

        this.add_lang_mark_to_body();
        er_search_preview_buttons_ctrl.init();

        var href = window.location.href;
        if (href.indexOf('contacts-search-invite-submit-reconnect') >= 0) {
            er_connect_in_search.on_linkedin_requare_contact_email();
        } else if (href.indexOf('linkedin.com/vsearch') >= 0
            || er_utils.is_new_search_page()
            || er_utils.is_sales_navigator_search_page()
        ){
            this.process_search_page();
        //} else if (href.indexOf('linkedin.com/in/') >= 0 || href.indexOf('linkedin.com/profile/') >= 0){
        } else if (er_utils.is_profile_page()
            && !(
                    er_utils.is_sales_navigator_profile_page()
                    && er_message_broadcast.is_message_broadcast_mode_on()
                    && er_message_broadcast.tab_is_active_in_broadcast()
                )
        ){
            this.process_profile_page();
        } else if (er_utils.is_my_contacts_page()){
            this.process_my_contacts_page();
        } else if (href.indexOf('linkedin.com/people/pymk') >= 0){
            er_people_you_may_know.kill_all_hr();
        } else if (href.indexOf('linkedin.com/messaging/compose?connId=') >= 0
            || href.indexOf('linkedin.com/messaging/compose/') >= 0
            || er_utils.is_sales_navigator_profile_page())
        {
            if (er_message_broadcast.is_message_broadcast_mode_on() && er_message_broadcast.tab_is_active_in_broadcast()) {
                er_message_broadcast.write_message_and_send();
            }
        }
    },

        process_search_page : function() {
            if (er_connect_in_search.is_connect_in_search_mode_on() && er_connect_in_search.tab_is_active_in()) {
                er_connect_in_search.connect_all_in_search();
            } else if(er_connect_selected_collector.is_mode_on_and_tab_active()) {
                er_connect_selected_collector.process();
            } else if (er_message_broadcast.is_search_for_message_broadcast_mode_on()
                && er_message_broadcast.tab_is_active_in_collect()) {
                er_message_broadcast.collect_user_ids();
            } else if (er_profiles_list_extract_from_search.get_mode_collect_profiles_from_search()
                && er_profiles_list_extract_from_search.tab_is_active_in()
            ) {
                er_profiles_list_extract_from_search.process();
            } else if (er_autovisitor_collector.is_mode_on_and_tab_active()) {
                er_autovisitor_collector.process();
            }  else if (er_endorse_collector.is_mode_on_and_tab_active()) {
                er_endorse_collector.process();
            }
        },
        process_profile_page : function() {
            if (er_endorse_endorser.is_mode_on_and_tab_active()) {
                er_endorse_endorser.endorse_profile_new();
            } else if(er_connect_selected_inviter.is_mode_on_and_tab_active()) {
                er_connect_selected_inviter.process();
            } else if (er_autovisitor.is_mode_on_and_tab_active()) {
                er_autovisitor.process();
            } else if (er_profile_extractor.get_mode_profile_extract() && er_profile_extractor.tab_is_active_in()) {
                er_profile_extractor.process();
            }
        },
        process_my_contacts_page : function() {
            if (er_message_broadcast.is_search_for_message_broadcast_mode_on()
                && er_message_broadcast.tab_is_active_in_collect()) {
                er_message_broadcast.collect_user_ids();
            } else if (er_endorse_collector.is_mode_on_and_tab_active()) {
                er_endorse_collector.process();
            } else if (er_profiles_list_extract_from_search.get_mode_collect_profiles_from_search()
                && er_profiles_list_extract_from_search.tab_is_active_in()
            ) {
                er_profiles_list_extract_from_search.process();
            }
        },

    add_lang_mark_to_body : function() {
        $('body').attr('data-er-lang', er_gen_settings.get_current_language_id());
    },

    init_ga : function() {
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-90349468-1', 'auto');
        ga('send', 'pageview');
    },

    check_jquery : function() {
        if(window.$ == null) {
            script=document.createElement('script');
            script.type='text/javascript';
            script.src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js';
            document.head.appendChild(script);

            this.wait_jquery_load();
        } else {
            this.on_jquery_ready();
        }
    },
    wait_jquery_load : function() {
        if(window.$ == null) {
            setTimeout(this.wait_jquery_load.bind(this), 300);
        } else {
            this.on_jquery_ready();
        }
    },
    on_jquery_ready : function() {
        $( document ).ready(function() {
            er.on_start();
        });
    },

    is_endorse_object_loaded : function() {
        return window.er_endorse_backup_export
        && window.er_endorse_backup_import
        && window.er_endorse_collector
        && window.er_endorse_control
        && window.er_endorse_endorser
        && window.er_endorse_error
        && window.er_endorse_excluded
        && window.er_endorse_my_connections_collector
        && window.er_endorse_queue
        && window.er_endorse_timeouts
        && window.er_endorse_view
        && window.er_endorsed_control
        && window.er_endorse_mover
        && window.ER_Endorse
        && window.ER_W_Endorse_Clear
        && window.ER_W_Endorse_Timeout_Settings
    },
};

er.check_jquery();

/*

$( document ).ready(function() {
    er.on_start();
});
*/

